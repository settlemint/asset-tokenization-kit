name: Main

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: namespace-profile-atk
    environment: staging
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      - name: Configure 1Password
        uses: 1password/load-secrets-action/configure@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        env:
          HARBOR_USER: op://platform/harbor/username
          HARBOR_PASS: op://platform/harbor/password

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Harbor
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: harbor.settlemint.com
          username: ${{ env.HARBOR_USER }}
          password: ${{ env.HARBOR_PASS }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            .turbo
            ~/.bun/install/cache

      - name: Start Docker Compose
        run: docker compose up -d

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: .bun-version

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4

      - name: Install YQ
        uses: alexellis/arkade-get@master
        with:
          print-summary: false
          yq: latest

      - name: Install Bun dependencies
        run: bun install

      - name: Generate text-based lockfile
        run: bun install --lockfile

      - name: Languine Action
        uses: languine-ai/languine@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          api-key: ${{ secrets.LANGUINE_API_KEY }}
          project-id: ${{ secrets.LANGUINE_PROJECT_ID }}
          create-pull-request: true
          working-directory: kit/dapp

      - name: Connect to SettleMint
        uses: settlemint/settlemint-action@main
        with:
          instance: ${{ secrets.SETTLEMINT_INSTANCE }}
          access-token: ${{ secrets.SETTLEMINT_PERSONAL_ACCESS_TOKEN }}
          dotEnvFile: ${{ secrets.ENV_FILE }}
          dotEnvLocalFile: ${{ secrets.ENV_FILE_LOCAL }}

      - name: Version
        id: version
        shell: bash
        run: |
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            VERSION=$GITHUB_REF_SLUG
            SECONDARY_TAG="latest"
          else
            VERSION="1.0.0-${{ github.run_id }}"
            SECONDARY_TAG="latest"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SECONDARY_TAG=$SECONDARY_TAG" >> $GITHUB_ENV

      - name: Set the versions
        if: github.ref_name == 'main'
        run: |
          yq eval ".version = strenv(VERSION)" -i kit/charts/atk/Chart.yaml
          yq eval ".appVersion = strenv(VERSION)" -i kit/charts/atk/Chart.yaml

      - name: Turbo!
        run: bunx turbo dependencies lint build test genesis abi-output helm:push

      - name: Store predeployed output
        uses: actions/upload-artifact@v4
        with:
          name: predeployed-output
          path: |
            kit/contracts/genesis-output.json
            kit/subgraph/subgraph-output.txt
            kit/contracts/portal/*.json

      - name: Turbo!
        run: bunx turbo deploy:local

      - name: Update package versions
        id: package-version
        run: bash .github/scripts/update-version.sh

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/settlemint/asset-tokenization-kit
          tags: |
            type=raw,value=${{ env.VERSION }}

      - name: Extract SHA tag
        id: sha-tag
        run: |
          echo "sha_tag=$(echo "${{ steps.meta.outputs.tags }}" | grep "sha-" | head -n1)" >> $GITHUB_OUTPUT

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: kit/dapp
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          provenance: mode=max
          sbom: true

      - name: Run Drizzle migrations
        run: bunx drizzle-kit push --force
        working-directory: kit/dapp

      - name: Update Hasura
        uses: settlemint/settlemint-action@main
        with:
          auto-connect: false
          access-token: ${{ secrets.SETTLEMINT_ACCESS_TOKEN }}
          dotEnvFile: ${{ secrets.ENV_FILE }}
          dotEnvLocalFile: ${{ secrets.ENV_FILE_LOCAL }}
          command: hasura track -a

      - name: Update Custom Deployment
        uses: settlemint/settlemint-action@main
        with:
          auto-connect: false
          access-token: ${{ secrets.SETTLEMINT_ACCESS_TOKEN }}
          dotEnvFile: ${{ secrets.ENV_FILE }}
          dotEnvLocalFile: ${{ secrets.ENV_FILE_LOCAL }}
          command: platform update custom-deployment ${{ env.VERSION }} --wait

  security:
    name: Security
    runs-on: namespace-profile-atk-trivy
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Secret Scanning (Trivy)
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          scan-ref: "."
          trivy-config: trivy-secret.yaml
          severity: "HIGH,CRITICAL"
          format: "table"
          exit-code: "1"
          scanners: "secret"
