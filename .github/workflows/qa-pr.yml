name: QA - Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted, dismissed]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Run QA checks
  qa:
    name: QA
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.draft == false &&
       !endsWith(github.event.pull_request.user.login, '[bot]'))
    uses: ./.github/workflows/reusable-qa.yml
    with:
      runs-on: namespace-profile-atk
      fetch-depth: 0
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  # Label QA build status
  label-qa-build:
    name: Label QA Build Status
    needs: [qa]
    if: |
      always() &&
      github.event_name == 'pull_request' &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-build-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      workflow_status: ${{ needs.qa.result == 'success' && 'success' || (needs.qa.result == 'skipped' && 'running' || 'failure') }}
      runs-on: namespace-profile-atk-services

  # Send Slack notification for QA status
  slack-notify-qa:
    name: Slack Notify - QA Status
    needs: [qa, label-qa-build]
    if: |
      always() &&
      needs.label-qa-build.result == 'success' &&
      github.event_name == 'pull_request' &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-slack-pr-notifier.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_url: ${{ github.event.pull_request.html_url }}
      pr_author: ${{ github.event.pull_request.user.login }}
      pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
      runs-on: namespace-profile-atk-services
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  # Label PR based on title/branch
  label-pr:
    name: Label PR
    if: |
      github.event_name == 'pull_request' &&
      (github.event.action == 'opened' || github.event.action == 'synchronize') &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-pr-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_body: ${{ github.event.pull_request.body }}
      runs-on: namespace-profile-atk-services

  # Send Slack notification for PR labels
  slack-notify-labels:
    name: Slack Notify - PR Labels
    needs: [label-pr]
    if: |
      always() &&
      needs.label-pr.result == 'success' &&
      github.event_name == 'pull_request' &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-slack-pr-notifier.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_url: ${{ github.event.pull_request.html_url }}
      pr_author: ${{ github.event.pull_request.user.login }}
      pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
      runs-on: namespace-profile-atk-services
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  # Run secret scanning
  secret-scanning:
    name: Secret Scanning
    if: |
      github.event_name == 'pull_request' &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-secret-scanning.yml
    with:
      runs-on: namespace-profile-atk-services

  # Label secret scanning build status
  label-secret-scanning-build:
    name: Label Secret Scanning Build Status
    needs: [secret-scanning]
    if: |
      always() &&
      github.event_name == 'pull_request' &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-build-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      workflow_status: ${{ needs.secret-scanning.result == 'success' && 'success' || (needs.secret-scanning.result == 'skipped' && 'running' || 'failure') }}
      runs-on: namespace-profile-atk-services

  # Send Slack notification for secret scanning status
  slack-notify-secret-scanning:
    name: Slack Notify - Secret Scanning Status
    needs: [secret-scanning, label-secret-scanning-build]
    if: |
      always() &&
      needs.label-secret-scanning-build.result == 'success' &&
      github.event_name == 'pull_request' &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-slack-pr-notifier.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_url: ${{ github.event.pull_request.html_url }}
      pr_author: ${{ github.event.pull_request.user.login }}
      pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
      runs-on: namespace-profile-atk-services
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  # Check PR review status
  update-pr-status:
    name: Update PR Status
    needs: [qa, secret-scanning]
    if: |
      always() &&
      ((github.event_name == 'pull_request' && 
        needs.qa.result != 'cancelled' && 
        needs.secret-scanning.result != 'cancelled') ||
       github.event.action == 'submitted' || github.event.action == 'dismissed')
    uses: ./.github/workflows/reusable-pr-review-check.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_author: ${{ github.event.pull_request.user.login }}
      event_name: ${{ github.event_name }}
      qa_result: ${{ needs.qa.result }}
      secret_scanning_result: ${{ needs.secret-scanning.result }}
      runs-on: namespace-profile-atk-services

  # Apply final PR status label
  label-pr-final-status:
    name: Label PR Final Status
    needs: [update-pr-status]
    if: |
      always() &&
      (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-pr-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      is_draft: ${{ github.event.pull_request.draft }}
      has_approval: ${{ needs.update-pr-status.outputs.has_approval == 'true' }}
      qa_status: ${{ needs.update-pr-status.outputs.qa_status }}
      runs-on: namespace-profile-atk-services

  # Send Slack notification for final PR status
  slack-notify-final-status:
    name: Slack Notify - Final Status
    needs: [label-pr-final-status, update-pr-status]
    if: |
      always() &&
      needs.label-pr-final-status.result == 'success' &&
      (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-slack-pr-notifier.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_url: ${{ github.event.pull_request.html_url }}
      pr_author: ${{ github.event.pull_request.user.login }}
      pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
      runs-on: namespace-profile-atk-services
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  # Manage auto-merge
  manage-auto-merge:
    name: Manage Auto-Merge
    needs: [update-pr-status, label-pr-final-status, slack-notify-final-status]
    if: |
      always() &&
      (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') &&
      !endsWith(github.event.pull_request.user.login, '[bot]')
    uses: ./.github/workflows/reusable-auto-merge.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      has_approval: ${{ needs.update-pr-status.outputs.has_approval == 'true' }}
      qa_status: ${{ needs.update-pr-status.outputs.qa_status }}
      is_draft: ${{ github.event.pull_request.draft }}
      merge_method: 'squash'
      runs-on: namespace-profile-atk-services