name: QA - Pull Request

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        converted_to_draft,
        closed,
        review_requested,
        edited,
      ]
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Label PR based on draft/ready status
  label-pr-status:
    name: Label PR Status
    if: |
      github.event.action == 'opened' ||
      github.event.action == 'ready_for_review' ||
      github.event.action == 'converted_to_draft' ||
      github.event.action == 'synchronize'
    uses: ./.github/workflows/reusable-pr-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      is_draft: ${{ github.event.pull_request.draft }}
      runs-on: namespace-profile-atk-services

  # Label PR as QA pending when code is pushed
  label-qa-pending:
    name: Label QA Pending
    if: github.event.action == 'synchronize'
    uses: ./.github/workflows/reusable-build-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      workflow_status: 'pending'
      runs-on: namespace-profile-atk-services

  # Label PR as QA running when workflow starts
  label-qa-start:
    name: Label QA Start
    if: |
      github.event.action == 'synchronize' || github.event.action == 'opened'
    uses: ./.github/workflows/reusable-build-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      workflow_status: 'running'
      runs-on: namespace-profile-atk-services
  qa:
    name: QA
    needs: label-qa-start
    if: |
      github.event.action == 'synchronize' || github.event.action == 'opened'
    uses: ./.github/workflows/reusable-qa.yml
    with:
      runs-on: namespace-profile-atk
      fetch-depth: 2
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  pr-labels:
    name: PR Labels
    if: |
      github.event.action == 'opened' || 
      github.event.action == 'synchronize' ||
      github.event.action == 'edited'
    uses: ./.github/workflows/reusable-pr-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_body: ${{ github.event.pull_request.body }}
      runs-on: namespace-profile-atk-services

  secret-scanning:
    name: Secret Scanning
    if: |
      github.event.action == 'synchronize' || github.event.action == 'opened'
    uses: ./.github/workflows/reusable-secret-scanning.yml
    with:
      runs-on: namespace-profile-atk-services
      trivy-config: trivy-secret.yaml
      severity: "HIGH,CRITICAL"

  codeql:
    name: CodeQL Analysis
    if: |
      github.event.action == 'synchronize' || github.event.action == 'opened'
    uses: ./.github/workflows/reusable-codeql.yml
    with:
      language: 'javascript-typescript'
      build-mode: 'none'
      runs-on: 'namespace-profile-atk-services'

  # Label PR with final QA status
  label-qa-end:
    name: Label QA End
    needs: [qa, secret-scanning]
    if: |
      always() &&
      (github.event.action == 'synchronize' || github.event.action == 'opened')
    uses: ./.github/workflows/reusable-build-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      workflow_status: ${{ (needs.qa.result == 'success' && needs.secret-scanning.result != 'failure') && 'success' || 'failure' }}
      runs-on: namespace-profile-atk-services

  # Update PR status with review and QA information
  update-pr-status:
    name: Update PR Status
    needs: [label-qa-end, qa, secret-scanning]
    if: |
      always() &&
      (github.event.action == 'synchronize' || github.event.action == 'opened' || 
       github.event.action == 'ready_for_review' || github.event.action == 'converted_to_draft')
    runs-on: namespace-profile-atk-services
    steps:
      - name: Get PR reviews
        id: check_approval
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ github.event.pull_request.number }};
            
            // Get reviews
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Check if PR has approval (excluding the PR author)
            const pr_author = `${{ github.event.pull_request.user.login }}`;
            const has_approval = reviews.data.some(review => 
              review.state === 'APPROVED' && 
              review.user.login !== pr_author
            );
            
            // Determine QA status based on previous job results
            const qa_success = '${{ needs.qa.result }}' === 'success' && 
                              '${{ needs.secret-scanning.result }}' !== 'failure';
            
            core.setOutput('has_approval', has_approval);
            core.setOutput('qa_status', qa_success ? 'success' : 'failed');
    outputs:
      has_approval: ${{ steps.check_approval.outputs.has_approval }}
      qa_status: ${{ steps.check_approval.outputs.qa_status }}

  # Apply final PR status label
  label-pr-final-status:
    name: Label PR Final Status
    needs: [update-pr-status]
    if: always()
    uses: ./.github/workflows/reusable-pr-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      is_draft: ${{ github.event.pull_request.draft }}
      has_approval: ${{ fromJson(needs.update-pr-status.outputs.has_approval) }}
      qa_status: ${{ needs.update-pr-status.outputs.qa_status }}
      runs-on: namespace-profile-atk-services
