name: Playwright Tests
on:
  schedule:
    - cron: "0 0 * * 1-5" # runs every night Sun-Fri at 2AM (time difference with GHA! + 1hr)
  pull_request:
    types: [labeled]
  workflow_dispatch:

env:
  PORT: 3000
  HOST: 0.0.0.0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Playwright Tests
    runs-on: namespace-profile-atk
    environment: staging
    timeout-minutes: 60 # 1 hour maximum runtime
    if:
      ${{ github.ref == 'refs/heads/main' ||
      contains(github.event.pull_request.labels.*.name, 'run-playwright-tests')
      }}
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load all secrets
        uses: 1password/load-secrets-action@v2
        env:
          SLACK_WEBHOOK_URL: op://platform/slack-webhooks/e2e-report
          PAT_TOKEN: op://platform/github-commit-pat/credential
          HARBOR_USER: op://platform/harbor/username
          HARBOR_PASS: op://platform/harbor/password
          NPM_TOKEN: op://platform/npmjs/credential

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          npm_token: ${{ env.NPM_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.settlemint.com
          username: ${{ env.HARBOR_USER }}
          password: ${{ env.HARBOR_PASS }}

      - name: Connect to SettleMint
        uses: settlemint/settlemint-action@main
        with:
          instance: local

      - name: Generate all artifacts
        run: bunx turbo run artifacts --concurrency=100%

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium
        working-directory: kit/e2e

      - name: Verify subgraph SystemFactory address
        run: |
            echo "Checking SystemFactory address in subgraph.yaml..."
            EXPECTED_ADDRESS="0x5e771e1417100000000000000000000000020088"
            ACTUAL_ADDRESS=$(yq '.dataSources[] | select(.name == "SystemFactory") | .source.address' kit/subgraph/subgraph.yaml)
            if [ "$ACTUAL_ADDRESS" != "$EXPECTED_ADDRESS" ]; then
              echo "❌ ERROR: SystemFactory address mismatch!"
              echo "Expected: $EXPECTED_ADDRESS"
              echo "Actual:   $ACTUAL_ADDRESS"
              echo ""
              echo "The subgraph.yaml file has an incorrect SystemFactory address."
              echo "This needs to be fixed before running tests."
              exit 1
            else
              echo "✅ SystemFactory address is correct: $ACTUAL_ADDRESS"
            fi

      - name: Run UI Playwright tests with retries
        id: playwright-ui
        run: ./run-tests-with-retries.sh
        working-directory: kit/e2e
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            kit/e2e/playwright-report/
            kit/e2e/test-results/
            kit/dapp/server.log
          retention-days: 1

      - name: Results download URL
        run: |
          echo "Results for this run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          echo "Results for this run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_STEP_SUMMARY

      - name: Docker compose logs on failure
        if: failure()
        run: |
          echo "CI tests failed - collecting docker compose logs for debugging"
          echo "============================================"
          echo "Docker compose service status:"
          echo "============================================"
          docker compose -p atk ps
          echo ""
          echo "============================================"
          echo "Docker compose logs:"
          echo "============================================"
          for service in $(docker compose -p atk ps --services); do
            echo ""
            echo "--- Logs for service: $service ---"
            docker compose -p atk logs "$service" || true
          done

