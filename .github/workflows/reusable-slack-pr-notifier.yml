name: Slack PR Notifier (Reusable)

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull request number'
        required: true
        type: number
      pr_title:
        description: 'Pull request title'
        required: true
        type: string
      pr_url:
        description: 'Pull request URL'
        required: true
        type: string
      pr_labels:
        description: 'Pull request labels (JSON array)'
        required: true
        type: string
      action:
        description: 'The action that triggered this (labeled, unlabeled, etc)'
        required: true
        type: string
      runs-on:
        description: 'Runner to use'
        required: true
        type: string
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN:
        required: true

permissions:
  pull-requests: write
  issues: read

jobs:
  slack-notify:
    name: Slack Notification
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@v2
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID

      - name: Process PR and send/update Slack message
        uses: actions/github-script@v7
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ env.SLACK_CHANNEL_ID }}
        with:
          script: |
            const pr_number = ${{ inputs.pr_number }};
            const pr_title = ${{ toJSON(inputs.pr_title) }};
            const pr_url = ${{ toJSON(inputs.pr_url) }};
            const labels = JSON.parse(${{ toJSON(inputs.pr_labels) }});
            const action = ${{ toJSON(inputs.action) }};

            // Extract repo name without org
            const repoName = context.repo.repo;

            // Check if PR is draft
            const isDraft = labels.some(label => label.name === 'status:draft');
            if (isDraft) {
              console.log('Skipping notification for draft PR');
              return;
            }

            // Define status reactions mapping
            const statusReactions = {
              'qa:pending': 'hourglass_flowing_sand',
              'qa:running': 'runner',
              'qa:success': 'white_check_mark',
              'qa:failed': 'x',
              'status:ready-for-review': 'eyes',
              'status:approved': 'thumbsup',
              'status:mergeable': 'rocket',
              'status:merged': 'tada'
            };

            // Get current status labels
            const currentStatuses = labels
              .filter(label => Object.keys(statusReactions).includes(label.name))
              .map(label => statusReactions[label.name]);

            // Check if there's an existing Slack message
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });

            const slackComment = comments.find(c => c.body && c.body.includes('<!-- slack-ts:'));
            let slackTs = null;

            if (slackComment) {
              const match = slackComment.body.match(/<!-- slack-ts:([0-9.]+) -->/);
              if (match) {
                slackTs = match[1];
              }
            }

            // Helper function to make Slack API calls
            async function slackAPI(method, body = {}) {
              const response = await fetch(`https://slack.com/api/${method}`, {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
              });

              const data = await response.json();
              if (!data.ok) {
                throw new Error(`Slack API error: ${data.error}`);
              }
              return data;
            }

            try {
              if (!slackTs) {
                // Send new message
                const result = await slackAPI('chat.postMessage', {
                  channel: process.env.SLACK_CHANNEL_ID,
                  text: `[${repoName}][#${pr_number}] ${pr_title}`,
                  blocks: [
                    {
                      type: 'section',
                      text: {
                        type: 'mrkdwn',
                        text: `*[${repoName}][#${pr_number}]* ${pr_title}`
                      },
                      accessory: {
                        type: 'button',
                        text: {
                          type: 'plain_text',
                          text: 'View PR'
                        },
                        url: pr_url,
                        action_id: 'view_pr'
                      }
                    }
                  ]
                });

                // Store timestamp
                if (result.ts) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr_number,
                    body: `<!-- slack-ts:${result.ts} -->`
                  });
                  slackTs = result.ts;
                }
              }

              if (slackTs) {
                // Get existing reactions
                try {
                  const reactions = await slackAPI('reactions.get', {
                    channel: process.env.SLACK_CHANNEL_ID,
                    timestamp: slackTs
                  });

                  // Remove old status reactions
                  if (reactions.message && reactions.message.reactions) {
                    for (const reaction of reactions.message.reactions) {
                      if (Object.values(statusReactions).includes(reaction.name)) {
                        try {
                          await slackAPI('reactions.remove', {
                            channel: process.env.SLACK_CHANNEL_ID,
                            timestamp: slackTs,
                            name: reaction.name
                          });
                        } catch (e) {
                          console.log(`Could not remove reaction ${reaction.name}: ${e.message}`);
                        }
                      }
                    }
                  }
                } catch (e) {
                  console.log('No existing reactions found');
                }

                // Add new status reactions
                for (const reaction of currentStatuses) {
                  try {
                    await slackAPI('reactions.add', {
                      channel: process.env.SLACK_CHANNEL_ID,
                      timestamp: slackTs,
                      name: reaction
                    });
                  } catch (e) {
                    console.log(`Could not add reaction ${reaction}: ${e.message}`);
                  }
                }
              }
            } catch (error) {
              console.error('Slack notification error:', error);
              // Don't fail the workflow for Slack errors
            }