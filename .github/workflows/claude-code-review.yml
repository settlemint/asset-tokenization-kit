name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Only run on code changes, skip docs-only PRs
    paths:
      - "kit/**/*.ts"
      - "kit/**/*.tsx"
      - "kit/**/*.js"
      - "kit/**/*.jsx"
      - "kit/**/*.sol"
      - "kit/**/*.json"
      - "package.json"
      - "turbo.json"
      - "CLAUDE.md"

jobs:
  claude-review:
    # Skip draft PRs, WIP, and bot users
    if: |
      !github.event.pull_request.draft &&
      !contains(github.event.pull_request.title, '[WIP]') &&
      !contains(github.event.pull_request.title, '[skip-review]') &&
      github.event.pull_request.user.type != 'Bot'

    runs-on: namespace-profile-atk
    permissions:
      contents: write
      discussions: write
      issues: write
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          fetch-depth: 0  # Full history for better context

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load all secrets
        id: secrets
        uses: 1password/load-secrets-action@v2
        env:
          HARBOR_USER: op://platform/harbor/username
          HARBOR_PASS: op://platform/harbor/password
          NPM_TOKEN: op://platform/npmjs/credential

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          npm_token: ${{ env.NPM_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.settlemint.com
          username: ${{ env.HARBOR_USER }}
          password: ${{ env.HARBOR_PASS }}

      - name: Connect to SettleMint
        uses: settlemint/settlemint-action@main
        with:
          instance: local

      - name: Setup Git Config
        run: |
          git config --global user.name "Claude Code Review"
          git config --global user.email "claude@anthropic.com"
          git config --global safe.directory "${{ github.workspace }}"

      - name: Claude Code Review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Add this to fix the permissions issue
          allowed_tools: >-
            Bash(bun:*)
            Bash(git:*)
            Bash(docker:*)
            Bash(docker-compose:*)
            Bash(helm:*)
            Bash(kubectl:*)
          custom_instructions: |
            # Environment Setup
            You have access to a full Linux environment with:
            - Git (use 'git' commands freely)
            - Bash shell (use any bash commands)
            - Bun runtime and package manager
            - All standard Unix tools

            # Git Access
            - The repository is already cloned and checked out at: ${{ github.workspace }}
            - You can run any git commands: git diff, git log, git show, git status, etc.
            - To see PR changes: git diff origin/${{ github.base_ref }}...HEAD
            - Current branch: ${{ github.head_ref }}
            - Base branch: ${{ github.base_ref }}

            # Bash Usage
            - Use Bash tool for any command execution
            - Commands like: ls, find, grep, awk, sed, etc. are all available
            - Can navigate directories with cd
            - Can set environment variables
            - Can pipe commands and use shell features

            # File System
            - Working directory: ${{ github.workspace }}
            - You have full read access to all files
            - Use Read/Write/Edit tools for file operations
            - Use Bash for complex file operations

            # Project Context
            This is the SettleMint Asset Tokenization Kit - a full-stack solution for tokenized assets.

            # Key Rules (from CLAUDE.md):
            - Always use Bun instead of npm/yarn/pnpm
            - Use bun run <script> for all scripts
            - Use bun:test for testing, not vitest
            - Never create barrel files (index.ts exports)
            - Always run 'bun run ci' before approving
            - Token factory requires system bootstrapping first
            - Asset types are in zod validator (no cryptocurrency)
            - For Solidity: follow kit/contracts guidelines
            - Prefer ?? over || operator
            - Completely ignore dapp-v1 folder

            # Bun-specific APIs to encourage:
            - Bun.serve() instead of express
            - bun:sqlite instead of better-sqlite3
            - Bun.$ instead of execa
            - Built-in WebSocket support
            - Bun.File() for file operations
          direct_prompt: |
            Please review this pull request following the project's CLAUDE.md guidelines.

            First, use git commands to understand what changed:
            - Run: git diff origin/${{ github.base_ref }}...HEAD --stat
            - Run: git log origin/${{ github.base_ref }}..HEAD --oneline

            Then review the changes focusing on:
            1. **Code Quality**: TypeScript best practices, proper types, no any types
            2. **Security**: No exposed secrets, secure coding practices
            3. **Performance**: Efficient algorithms, no unnecessary re-renders
            4. **Testing**: Adequate test coverage using bun:test
            5. **Documentation**: Clear code comments where needed
            6. **Solidity** (if applicable): Follow kit/contracts guidelines
            7. **Dependencies**: Check for security vulnerabilities

            Use bash and git commands freely to explore the codebase and understand context.

            For first-time contributors, be encouraging and educational.
            Be constructive and suggest specific improvements.
            If the PR looks good, say so!
