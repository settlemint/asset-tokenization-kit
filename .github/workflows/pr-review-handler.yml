name: PR Review Handler

on:
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  # Get current QA status from labels
  get-qa-status:
    name: Get QA Status
    if: ${{ !endsWith(github.event.pull_request.user.login, '[bot]') }}
    runs-on: namespace-profile-atk-services
    outputs:
      qa_status: ${{ steps.check_labels.outputs.qa_status }}
      has_approval: ${{ steps.check_approval.outputs.has_approval }}
    steps:
      - name: Check current labels
        id: check_labels
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ github.event.pull_request.number }};
            
            // Get current labels
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            const labels = pr.labels.map(l => l.name);
            let qa_status = '';
            
            if (labels.includes('qa:success')) {
              qa_status = 'success';
            } else if (labels.includes('qa:failed')) {
              qa_status = 'failed';
            } else if (labels.includes('qa:running')) {
              qa_status = 'running';
            } else if (labels.includes('qa:pending')) {
              qa_status = 'pending';
            }
            
            core.setOutput('qa_status', qa_status);
            
      - name: Check approval status
        id: check_approval
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ github.event.pull_request.number }};
            
            // Get all reviews
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Check if PR has approval (excluding the PR author)
            const pr_author = `${{ github.event.pull_request.user.login }}`;
            const has_approval = reviews.data.some(review => 
              review.state === 'APPROVED' && 
              review.user.login !== pr_author
            );
            
            core.setOutput('has_approval', has_approval);

  # Update PR status label
  update-pr-status:
    name: Update PR Status
    needs: [get-qa-status]
    if: ${{ !endsWith(github.event.pull_request.user.login, '[bot]') }}
    uses: ./.github/workflows/reusable-pr-status-labeler.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
      is_draft: ${{ github.event.pull_request.draft }}
      has_approval: ${{ fromJson(needs.get-qa-status.outputs.has_approval) }}
      qa_status: ${{ needs.get-qa-status.outputs.qa_status }}
      runs-on: namespace-profile-atk-services

  # Enable/disable auto-merge based on new status
  manage-auto-merge:
    name: Manage Auto-Merge
    needs: [get-qa-status, update-pr-status]
    if: ${{ !endsWith(github.event.pull_request.user.login, '[bot]') }}
    runs-on: namespace-profile-atk-services
    steps:
      - name: Manage auto-merge for PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ github.event.pull_request.number }};
            const has_approval = ${{ needs.get-qa-status.outputs.has_approval }};
            const qa_status = '${{ needs.get-qa-status.outputs.qa_status }}';
            const is_draft = ${{ github.event.pull_request.draft }};
            
            // Check if PR is mergeable
            const is_mergeable = has_approval && qa_status === 'success' && !is_draft;
            
            try {
              if (is_mergeable) {
                // Enable auto-merge
                await github.rest.pulls.enableAutoMerge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr_number,
                  merge_method: 'squash'
                });
                console.log(`Auto-merge enabled for PR #${pr_number}`);
              } else {
                // Disable auto-merge if it was enabled
                await github.rest.pulls.disableAutoMerge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr_number
                });
                console.log(`Auto-merge disabled for PR #${pr_number} - no longer mergeable`);
              }
            } catch (error) {
              if (error.message.includes('Auto-merge is not enabled')) {
                console.log('Auto-merge is already disabled');
              } else if (error.message.includes('already enabled')) {
                console.log('Auto-merge is already enabled');
              } else {
                console.log(`Error managing auto-merge: ${error.message}`);
              }
            }