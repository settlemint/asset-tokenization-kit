name: qa

on:
  push:
    branches:
      - main
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        closed,
        review_requested,
      ]
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  qa:
    name: QA
    runs-on: namespace-profile-atk
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' &&
       (github.event.action == 'synchronize' || github.event.action == 'opened'))
    steps:
      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@v2
        env:
          HARBOR_USER: op://platform/harbor/username
          HARBOR_PASS: op://platform/harbor/password
          PAT_TOKEN: op://platform/github-commit-pat/credential

      - name: Checkout repository (with PAT)
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          fetch-depth: 2

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      - name: Set up turbo caching
        uses: namespace-actions/setup-turbocache@v0

      - name: Setup bun caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./node_modules
            ./.turbo
            ./**/.turbo
            ~/.bun/install/cache

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Harbor
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: harbor.settlemint.com
          username: ${{ env.HARBOR_USER }}
          password: ${{ env.HARBOR_PASS }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: .bun-version

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Helm Docs
        run: |
          brew install norwoodj/tap/helm-docs

      - name: Install Bun dependencies
        run: bun install

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4

      - name: Connect to SettleMint
        uses: settlemint/settlemint-action@main
        with:
          instance: local

      - name: Generate artifacts
        run: |
          bunx turbo run artifacts --concurrency=100%

      - name: Run the backend services
        run: |
          bun dev:up

      - name: CI tests
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Running Turbo with for PR"
            bunx turbo run ci:gha --concurrency=100% --continue=dependencies-successful --affected
          else
            echo "Running full Turbo for main branch"
            bun run ci:gha:main --concurrency=100% --continue=dependencies-successful
          fi
        env:
          THE_GRAPH_PORT_LOCAL_DEPLOY: 8120 # For subgraph tests
          THE_GRAPH_PORT_LOCAL_QUERY: 8100 # For subgraph tests

      - name: Store predeployed output
        if: github.event_name == 'pull_request' && always()
        uses: actions/upload-artifact@v4
        with:
          name: predeployed-output
          path: |
            kit/contracts/.generated/portal/*.json
            kit/contracts/.generated/genesis.json
            kit/contracts/.generated/genesis-allocations.json
            kit/subgraph/subgraph-output.txt
            kit/subgraph/.generated/subgraph-env
            kit/dapp/.generated/database-export.sql

  pr-labels:
    name: PR Labels
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-pr-labels.yml

  secret-scanning:
    name: Secret Scanning
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' &&
       (github.event.action == 'synchronize' || github.event.action == 'opened'))
    uses: ./.github/workflows/reusable-secret-scanning.yml
    with:
      trivy-config: trivy-secret.yaml
      severity: "HIGH,CRITICAL"

  slack-notification-start:
    name: Slack Notification (Start)
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-slack-notification.yml
    with:
      workflow_conclusion: "running"
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  slack-notification-end:
    name: Slack Notification (End)
    needs: [qa, secret-scanning, pr-labels]
    if: always() && github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-slack-notification.yml
    with:
      workflow_conclusion:
        ${{ needs.qa.result == 'success' && needs.secret-scanning.result !=
        'failure' && needs.pr-labels.result != 'failure' && 'success' ||
        'failure' }}
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
