name: QA

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft, closed]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event_name }}-${{ github.event.action || 'default' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  qa:
    name: QA
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      github.event_name == 'pull_request_review'
    runs-on: namespace-profile-atk
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      issues: write
      security-events: write
      actions: read
      packages: write
    env:
      SLACK_BOT_TOKEN: ""
      SLACK_CHANNEL_ID: ""
      HARBOR_USER: ""
      HARBOR_PASS: ""
      PAT_TOKEN: ""
      NPM_TOKEN: ""
      RUNS_ON_PUSH_OR_ACTIVE_PR: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false) }}
      RUNS_ON_PUSH_PR_OR_REVIEW: ${{ github.event_name == 'push' || github.event_name == 'pull_request_review' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false) }}
      IS_ACTIVE_PR: ${{ github.event_name == 'pull_request' && github.event.pull_request.draft == false }}
      IS_PR_OR_REVIEW: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_review' }}
      IS_ACTIVE_PR_EVENT: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_review') && github.event.pull_request.draft == false }}
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v3
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load all secrets
        id: secrets
        uses: 1password/load-secrets-action@v3
        with:
          export-env: true
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID
          HARBOR_USER: op://platform/harbor/username
          HARBOR_PASS: op://platform/harbor/password
          PAT_TOKEN: op://platform/github-commit-pat/credential
          NPM_TOKEN: op://platform/npmjs/credential

      # Label QA as running and notify Slack (only for non-draft PRs)
      - name: Label QA as running
        if: ${{ fromJSON(env.IS_ACTIVE_PR) }}
        uses: ./.github/actions/build-status-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          workflow_status: 'running'

      # Initial Slack notification - creates or updates message
      - name: Send Slack notification for QA starting
        if: ${{ fromJSON(env.IS_ACTIVE_PR) }}
        uses: ./.github/actions/slack-pr-notifier
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_title: ${{ github.event.pull_request.title }}
          pr_url: ${{ github.event.pull_request.html_url }}
          pr_author: ${{ github.event.pull_request.user.login }}
          pr_author_type: ${{ github.event.pull_request.user.type }}
          pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          slack_channel_id: ${{ env.SLACK_CHANNEL_ID }}

      # Setup dependencies for QA (skip for draft PRs)
      - name: Setup dependencies
        if: ${{ fromJSON(env.RUNS_ON_PUSH_PR_OR_REVIEW) }}
        uses: ./.github/actions/setup-dependencies
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          npm_token: ${{ env.NPM_TOKEN }}

      # Login to Docker registries (only when running QA)
      - name: Login to GitHub Container Registry
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Harbor
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        uses: docker/login-action@v3
        with:
          registry: harbor.settlemint.com
          username: ${{ env.HARBOR_USER }}
          password: ${{ env.HARBOR_PASS }}

      - name: Connect to SettleMint
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        uses: settlemint/settlemint-action@main
        with:
          instance: local

      - name: Generate artifacts
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        run: |
          bunx turbo run artifacts --concurrency=100%
        env:
          BUILD_ID: ${{ github.run_number }}${{ github.run_attempt }}

      - name: Run the backend services
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        run: |
          bun dev:up

      - name: Verify subgraph SystemFactory address
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        run: |
          echo "Checking SystemFactory address in subgraph.yaml..."
          EXPECTED_ADDRESS="0x5e771e1417100000000000000000000000020088"
          ACTUAL_ADDRESS=$(yq '.dataSources[] | select(.name == "SystemFactory") | .source.address' kit/subgraph/subgraph.yaml)
          if [ "$ACTUAL_ADDRESS" != "$EXPECTED_ADDRESS" ]; then
            echo "❌ ERROR: SystemFactory address mismatch!"
            echo "Expected: $EXPECTED_ADDRESS"
            echo "Actual:   $ACTUAL_ADDRESS"
            echo ""
            echo "The subgraph.yaml file has an incorrect SystemFactory address."
            echo "This needs to be fixed before running tests."
            exit 1
          else
            echo "✅ SystemFactory address is correct: $ACTUAL_ADDRESS"
          fi

      - name: CI tests
        id: qa-tests
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Running Turbo for PR"
            bunx turbo run ci:gha --concurrency=100% --affected
          else
            echo "Running full Turbo for main branch"
            bun run ci:gha:main --concurrency=100%
          fi
        env:
          BUILD_ID: ${{ github.run_number }}.${{ github.run_attempt }}

      - name: Determine chart changes
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        id: ct-changed
        env:
          CT_CONFIG: .github/ct.yaml
        run: |
          changed=$(ct list-changed --config "$CT_CONFIG")
          if [[ -n "$changed" ]]; then
            printf "changed=true\n" >> "$GITHUB_OUTPUT"
            echo "$changed"
          else
            printf "changed=false\n" >> "$GITHUB_OUTPUT"
            echo "No chart changes detected"
          fi

      - name: Run chart-testing (lint)
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) && steps.ct-changed.outputs.changed == 'true' }}
        env:
          CT_CONFIG: .github/ct.yaml
        run: ct lint --config "$CT_CONFIG" --validate-yaml=false

      - name: Configure Namespace access
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) && steps.ct-changed.outputs.changed == 'true' }}
        id: nscloud
        uses: namespacelabs/nscloud-setup@v0

      - name: Provision Namespace Kubernetes cluster
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) && steps.ct-changed.outputs.changed == 'true' }}
        uses: namespacelabs/nscloud-cluster-action@v0
        with:
          wait-kube-system: "true"
          machine-shape: "8x32"
          duration: "20m"

      - name: Run chart-testing (install)
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) && steps.ct-changed.outputs.changed == 'true' }}
        env:
          CT_CONFIG: .github/ct.yaml
        run: ct install --config "$CT_CONFIG" --skip-clean-up

      - name: Store predeployed output
        if: ${{ fromJSON(env.RUNS_ON_PUSH_OR_ACTIVE_PR) }}
        uses: namespace-actions/upload-artifact@v1
        with:
          name: predeployed-output
          path: |
            kit/contracts/.generated/portal/*.json
            kit/contracts/.generated/genesis.json
            kit/contracts/.generated/genesis-allocations.json
            kit/subgraph/subgraph-output.txt
            kit/subgraph/.generated/subgraph-env

      - name: Create release assets pull request
        if: |
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags/')
        id: release_pr
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7
        with:
          branch: chore/release-assets/${{ github.ref_name }}
          base: main
          commit-message: "chore(release): sync generated assets [skip ci]"
          committer: "SettleMint Release Bot <support@settlemint.com>"
          add-paths: |
            package.json
            kit/**/Chart.yaml
            kit/**/README.md
            README.md
          title: "chore(release): sync generated assets for ${{ github.ref_name }}"
          body: |-
            Automated release asset synchronization for `${{ github.ref_name }}`.
            Generated by the QA workflow.


      # Label QA results (PR only)
      - name: Label QA build status
        if: |
          always() &&
          github.event_name == 'pull_request' &&
          steps.qa-tests.conclusion != 'skipped'
        uses: ./.github/actions/build-status-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          workflow_status: ${{ steps.qa-tests.outcome == 'success' && 'success' || 'failure' }}

      # Skip redundant notification - handled by consolidated step at the end

      # Label PR based on title/branch (PR only)
      - name: Label PR based on convention
        id: label-pr
        if: |
          github.event_name == 'pull_request' &&
          (github.event.action == 'opened' || github.event.action == 'synchronize')
        uses: ./.github/actions/pr-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_title: ${{ github.event.pull_request.title }}
          pr_body: ${{ github.event.pull_request.body || '' }}

      # Run secret scanning (PR only)
      - name: Run secret scanning
        id: secret-scan
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/secret-scanner
        continue-on-error: true

      # Label secret scanning results (PR only)
      - name: Label secret scanning status
        if: |
          always() &&
          github.event_name == 'pull_request' &&
          steps.secret-scan.conclusion != 'skipped'
        uses: ./.github/actions/build-status-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          workflow_status: ${{ steps.secret-scan.outcome == 'success' && 'success' || 'failure' }}

      # Check PR review status (PR and PR review events only)
      - name: Check PR review status
        id: pr-review-check
        if: ${{ always() && fromJSON(env.IS_PR_OR_REVIEW) }}
        uses: ./.github/actions/pr-review-check
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_author: ${{ github.event.pull_request.user.login }}
          event_name: ${{ github.event_name }}
          qa_result: ${{ steps.qa-tests.outcome }}
          secret_scanning_result: ${{ steps.secret-scan.outcome }}

      # Apply final PR status label (PR and PR review events only)
      - name: Label PR final status
        id: label-final-status
        if: ${{ always() && fromJSON(env.IS_PR_OR_REVIEW) }}
        uses: ./.github/actions/pr-status-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          is_draft: ${{ github.event.pull_request.draft }}
          has_approval: ${{ steps.pr-review-check.outputs.has_approval == 'true' }}
          qa_status: ${{ steps.pr-review-check.outputs.qa_status }}

      # Consolidated Slack notification - updates existing message or creates one if needed
      - name: Update Slack notification with final status
        if: ${{ always() && steps.label-final-status.conclusion == 'success' && fromJSON(env.IS_PR_OR_REVIEW) && fromJSON(env.IS_ACTIVE_PR_EVENT) }}
        uses: ./.github/actions/slack-pr-notifier
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_title: ${{ github.event.pull_request.title }}
          pr_url: ${{ github.event.pull_request.html_url }}
          pr_author: ${{ github.event.pull_request.user.login }}
          pr_author_type: ${{ github.event.pull_request.user.type }}
          pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          slack_channel_id: ${{ env.SLACK_CHANNEL_ID }}

      # Manage auto-merge (PR and PR review events only)
      - name: Manage auto-merge
        if: ${{ always() && fromJSON(env.IS_PR_OR_REVIEW) }}
        uses: ./.github/actions/auto-merge
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_author: ${{ github.event.pull_request.user.login }}
          pr_author_type: ${{ github.event.pull_request.user.type }}
          has_approval: ${{ steps.pr-review-check.outputs.has_approval == 'true' }}
          qa_status: ${{ steps.pr-review-check.outputs.qa_status }}
          is_draft: ${{ github.event.pull_request.draft }}
          merge_method: 'squash'

      - name: Build and Push Codestudio
        if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
        run: |
          bun run docker:codestudio

  # Handle merged PR notifications
  merged:
    name: Handle Merged PR
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true
    runs-on: namespace-profile-atk
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      SLACK_BOT_TOKEN: ""
      SLACK_CHANNEL_ID: ""
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v3
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load Slack secrets
        uses: 1password/load-secrets-action@v3
        with:
          export-env: true
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID

      - name: Label PR as merged
        uses: ./.github/actions/pr-status-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          is_draft: false
          is_merged: true

      - name: Update Slack notification for merged PR
        uses: ./.github/actions/slack-pr-notifier
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_title: ${{ github.event.pull_request.title }}
          pr_url: ${{ github.event.pull_request.html_url }}
          pr_author: ${{ github.event.pull_request.user.login }}
          pr_author_type: ${{ github.event.pull_request.user.type }}
          pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          slack_channel_id: ${{ env.SLACK_CHANNEL_ID }}
          wait_time: "500"
          reaction_delay_ms: "50"
          verification_delay_ms: "300"

  # Handle abandoned (closed but not merged) PR notifications
  abandoned:
    name: Handle Abandoned PR
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == false
    runs-on: namespace-profile-atk
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      SLACK_BOT_TOKEN: ""
      SLACK_CHANNEL_ID: ""
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v3
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load Slack secrets
        uses: 1password/load-secrets-action@v3
        with:
          export-env: true
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID

      - name: Label PR as abandoned
        uses: ./.github/actions/pr-status-labeler
        with:
          pr_number: ${{ github.event.pull_request.number }}
          is_draft: false
          is_abandoned: true

      - name: Update Slack notification for abandoned PR
        uses: ./.github/actions/slack-pr-notifier
        with:
          pr_number: ${{ github.event.pull_request.number }}
          pr_title: ${{ github.event.pull_request.title }}
          pr_url: ${{ github.event.pull_request.html_url }}
          pr_author: ${{ github.event.pull_request.user.login }}
          pr_author_type: ${{ github.event.pull_request.user.type }}
          pr_author_avatar: ${{ github.event.pull_request.user.avatar_url }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          slack_channel_id: ${{ env.SLACK_CHANNEL_ID }}
          is_abandoned: true
          wait_time: "500"
          reaction_delay_ms: "50"
          verification_delay_ms: "300"
