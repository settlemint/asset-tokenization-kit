name: qa

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  qa:
    name: QA
    runs-on: namespace-profile-atk
    permissions:
      contents: read
      issues: write
      pull-requests: write
      statuses: write
      checks: write
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          fetch-depth: 2

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      - name: Set up turbo caching
        uses: namespace-actions/setup-turbocache@v0

      - name: Setup bun caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./node_modules
            ./.turbo
            ./**/.turbo
            ~/.bun/install/cache

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@v2
        env:
          HARBOR_USER: op://platform/harbor/username
          HARBOR_PASS: op://platform/harbor/password

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Harbor
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: harbor.settlemint.com
          username: ${{ env.HARBOR_USER }}
          password: ${{ env.HARBOR_PASS }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: .bun-version

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Helm Docs
        run: |
          brew install norwoodj/tap/helm-docs

      - name: Install Bun dependencies
        run: bun install

      - name: Launch docker compose
        run: |
          bun run dev:up

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4

      - name: Connect to SettleMint
        uses: settlemint/settlemint-action@main
        with:
          instance: local

      - name: Turbo
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Running Turbo with --affected flag for PR"
            bunx turbo run ci:gha --affected --concurrency=100%
          else
            echo "Running full Turbo for main branch"
            bun run ci:gha --concurrency=100%
          fi
        env:
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: settlemintcom
          SENTRY_PROJECT: atk
          THE_GRAPH_PORT_LOCAL_DEPLOY: 8120 # For subgraph tests
          THE_GRAPH_PORT_LOCAL_QUERY: 8100 # For subgraph tests

      - name: Store predeployed output
        uses: actions/upload-artifact@v4
        with:
          name: predeployed-output
          path: |
            kit/contracts/tools/genesis-output.json
            kit/contracts/portal/*.json
            kit/subgraph/subgraph-output.txt

  pr-labels:
    name: PR Labels
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-pr-labels.yml

  secret-scanning:
    name: Secret Scanning
    uses: ./.github/workflows/reusable-secret-scanning.yml
    with:
      trivy-config: trivy-secret.yaml
      severity: "HIGH,CRITICAL"

  codeql:
    name: CodeQL
    uses: ./.github/workflows/reusable-codeql.yml
    with:
      language: "javascript-typescript"
      build-mode: "none"

  slack-notification-start:
    name: Slack Notification (Start)
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-slack-notification.yml
    with:
      workflow_conclusion: "running"
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

  slack-notification-end:
    name: Slack Notification (End)
    needs: [qa, secret-scanning, codeql, pr-labels]
    if: always() && github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-slack-notification.yml
    with:
      workflow_conclusion:
        ${{ needs.qa.result == 'success' && needs.secret-scanning.result !=
        'failure' && needs.codeql.result != 'failure' && needs.pr-labels.result
        != 'failure' && 'success' || 'failure' }}
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
