name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  test:
    name: Test and Build
    runs-on: namespace-profile-starterkit
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ~/.bun/install/cache
            node_modules

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Bun dependencies
        run: bun install

      - name: Setup 1Password
        uses: settlemint/setup-op@main
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          version: 2.29.0

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Update package versions
        id: package-version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$(echo $GITHUB_REF_SLUG | sed 's/^v//')
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == "main" ]]; then
            VERSION="${OLD_VERSION}-main$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=main" >> $GITHUB_ENV
          else
            VERSION="${OLD_VERSION}-pr$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=pr" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Updating version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json

          echo "Updated version to $VERSION"

      - name: Run translate
        run: bun run translate

      - name: Connect
        run: bun connect -a
        env:
          SETTLEMINT_APPLICATION: ${{ secrets.SETTLEMINT_APPLICATION }}
          SETTLEMINT_HASURA: ${{ secrets.SETTLEMINT_HASURA }}
          SETTLEMINT_HASURA_ENDPOINT: ${{ secrets.SETTLEMINT_HASURA_ENDPOINT }}
          SETTLEMINT_HD_PRIVATE_KEY: ${{ secrets.SETTLEMINT_HD_PRIVATE_KEY }}
          SETTLEMINT_INSTANCE: ${{ secrets.SETTLEMINT_INSTANCE }}
          SETTLEMINT_PORTAL: ${{ secrets.SETTLEMINT_PORTAL }}
          SETTLEMINT_PORTAL_GRAPHQL_ENDPOINT: ${{ secrets.SETTLEMINT_PORTAL_GRAPHQL_ENDPOINT }}
          SETTLEMINT_PORTAL_REST_ENDPOINT: ${{ secrets.SETTLEMINT_PORTAL_REST_ENDPOINT }}
          SETTLEMINT_THEGRAPH: ${{ secrets.SETTLEMINT_THEGRAPH }}
          SETTLEMINT_THEGRAPH_SUBGRAPH_ENDPOINT: ${{ secrets.SETTLEMINT_THEGRAPH_SUBGRAPH_ENDPOINT }}
          SETTLEMINT_THEGRAPH_SUBGRAPH_ENDPOINT_FALLBACK: ${{ secrets.SETTLEMINT_THEGRAPH_SUBGRAPH_ENDPOINT_FALLBACK }}
          SETTLEMINT_WORKSPACE: ${{ secrets.SETTLEMINT_WORKSPACE }}
          SETTLEMINT_ACCESS_TOKEN: ${{ secrets.SETTLEMINT_ACCESS_TOKEN }}
          SETTLEMINT_HASURA_ADMIN_SECRET: ${{ secrets.SETTLEMINT_HASURA_ADMIN_SECRET }}

      - name: Codegen
        run: bun codegen

      - name: Format
        run: bun run format

      - name: Lint
        run: bun run lint

      - run: |
          cat tsconfig.json
          ls -alh

      - name: Build
        run: bun run build

      - if: ${{ always() }}
        run: |
          cat tsconfig.json
          ls -alh

      - name: Publish Asset Tokenization package
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./package.json
          access: public
          provenance: false
          strategy: all
          tag: ${{ env.TAG }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/settlemint/starterkit-asset-tokenization
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true

      - name: Create or update PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: taoliujun/action-unique-comment@v1
        with:
          uniqueIdentifier: ${{ github.workflow }}
          body: |
            # ðŸš€ Starterkit
            | Use Case | NPM | Docker |
            | ------- | -------------------- | --- |
            | Asset tokenization | `@settlemint/starterkit-asset-tokenization@${{ env.VERSION }}` | `ghcr.io/settlemint/starterkit-asset-tokenization:${{ env.VERSION }}` |

      - name: Auto-commit updated package versions
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ env.TAG == 'latest' }}
        with:
          commit_message: "chore: update package versions [skip ci]"
          branch: main
          file_pattern: 'package.json'
