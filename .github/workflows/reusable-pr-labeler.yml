name: PR Labeler (Reusable)

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull request number'
        required: true
        type: number
      pr_title:
        description: 'Pull request title'
        required: true
        type: string
      pr_body:
        description: 'Pull request body'
        required: false
        type: string
        default: ''
      runs-on:
        description: 'Runner to use'
        required: true
        type: string

permissions:
  pull-requests: write
  issues: write

jobs:
  label-pr:
    name: Label PR
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Define all labels
        id: define_labels
        uses: actions/github-script@v7
        with:
          script: |
            // Define all labels with colors and descriptions
            const labelDefinitions = {
              // Conventional commit types
              'feat': { color: '0E8A16', description: 'New feature' },
              'fix': { color: 'D93F0B', description: 'Bug fix' },
              'docs': { color: '0052CC', description: 'Documentation changes' },
              'style': { color: 'C5DEF5', description: 'Code style changes (formatting, etc)' },
              'refactor': { color: 'FEF2C0', description: 'Code refactoring' },
              'perf': { color: 'FBCA04', description: 'Performance improvements' },
              'test': { color: '1D76DB', description: 'Test additions or modifications' },
              'build': { color: 'BFD4F2', description: 'Build system changes' },
              'ci': { color: '000000', description: 'CI/CD configuration changes' },
              'revert': { color: 'B60205', description: 'Revert previous commits' },
              'chore': { color: 'F9D0C4', description: 'Maintenance tasks' },
              
              // Special labels
              'dependencies': { color: 'FBCA04', description: 'Dependency updates' },
              'breaking': { color: 'D93F0B', description: 'Breaking changes' },
              
              // Status labels (managed by other workflows)
              'status:draft': { color: '6F7379', description: 'Pull request is in draft status' },
              'status:ready-for-review': { color: 'FBCA04', description: 'Pull request is ready for review' },
              'status:approved': { color: '0E8A16', description: 'Pull request has been approved' },
              'status:mergeable': { color: '2EA44F', description: 'Pull request is approved, tests pass, and ready to merge' },
              
              // QA labels (managed by other workflows)
              'qa:pending': { color: 'D4C5F9', description: 'QA workflow needs to run' },
              'qa:running': { color: 'FBCA04', description: 'QA workflow is currently running' },
              'qa:success': { color: '0E8A16', description: 'QA workflow passed successfully' },
              'qa:failed': { color: 'D93F0B', description: 'QA workflow failed' }
            };
            
            core.setOutput('label_definitions', JSON.stringify(labelDefinitions));

      - name: Ensure all labels exist
        uses: actions/github-script@v7
        with:
          script: |
            const labelDefinitions = JSON.parse('${{ steps.define_labels.outputs.label_definitions }}');
            
            // Get existing labels
            const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const existingLabelNames = new Set(existingLabels.map(l => l.name));
            
            // Create or update labels
            for (const [name, config] of Object.entries(labelDefinitions)) {
              const existingLabel = existingLabels.find(l => l.name === name);
              
              if (!existingLabel) {
                // Create new label
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: name,
                    color: config.color,
                    description: config.description
                  });
                  console.log(`Created label: ${name}`);
                } catch (error) {
                  console.log(`Failed to create label ${name}: ${error.message}`);
                }
              } else if (existingLabel.color !== config.color || existingLabel.description !== config.description) {
                // Update existing label if color or description changed
                try {
                  await github.rest.issues.updateLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: name,
                    color: config.color,
                    description: config.description
                  });
                  console.log(`Updated label: ${name} (color: ${existingLabel.color} -> ${config.color}, desc: "${existingLabel.description}" -> "${config.description}")`);
                } catch (error) {
                  console.log(`Failed to update label ${name}: ${error.message}`);
                }
              }
            }

      - name: Analyze PR and apply labels
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ inputs.pr_number }};
            const pr_title = ${{ toJSON(inputs.pr_title) }};
            const pr_body = ${{ toJSON(inputs.pr_body) }};
            
            const labelsToAdd = [];
            
            // Check conventional commit type from title
            const typeMatch = pr_title.match(/^(feat|fix|docs|style|refactor|perf|test|build|ci|revert)(\(.+\))?:/);
            if (typeMatch) {
              labelsToAdd.push(typeMatch[1]);
            } else {
              // If no conventional commit format, add chore
              labelsToAdd.push('chore');
            }
            
            // Check for dependencies
            if (pr_title.match(/^(chore|fix|build)\(deps\):/)) {
              labelsToAdd.push('dependencies');
            }
            
            // Check for breaking changes
            if (pr_title.match(/^(feat|fix|docs|style|refactor|perf|test|build|ci|revert)(\(.+\))?!:/) || 
                pr_body.includes('BREAKING CHANGE:')) {
              labelsToAdd.push('breaking');
            }
            
            // Check for revert format
            if (pr_title.match(/^Revert ".*"/)) {
              labelsToAdd.push('revert');
            }
            
            // Get current labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            
            const currentLabelNames = new Set(currentLabels.map(l => l.name));
            
            // Remove old conventional commit labels that shouldn't be there
            const conventionalTypes = ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'build', 'ci', 'revert', 'chore'];
            for (const label of currentLabelNames) {
              if (conventionalTypes.includes(label) && !labelsToAdd.includes(label)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  name: label
                });
              }
            }
            
            // Add new labels
            const newLabels = labelsToAdd.filter(l => !currentLabelNames.has(l));
            if (newLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                labels: newLabels
              });
            }
            
            console.log(`Applied labels: ${labelsToAdd.join(', ')}`);