name: 'PR Status Labeler'
description: 'Update PR status labels based on approval and QA status'
inputs:
  pr_number:
    description: 'Pull request number'
    required: true
  is_draft:
    description: 'Whether the PR is a draft'
    required: true
  has_approval:
    description: 'Whether the PR has been approved'
    required: false
    default: 'false'
  qa_status:
    description: 'The QA status (pending, running, success, failed)'
    required: false
    default: ''
  is_merged:
    description: 'Whether the PR has been merged'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Check and create labels if needed
      uses: actions/github-script@v7
      with:
        script: |
          const labels = [
            { name: 'status:draft', color: '848484', description: 'Pull request is in draft status' },  // Medium gray
            { name: 'status:ready-for-review', color: 'FBCA04', description: 'Pull request is ready for review' },  // Yellow
            { name: 'status:approved', color: '28A745', description: 'Pull request has been approved' },  // Bright green
            { name: 'status:mergeable', color: '0E8A16', description: 'Pull request is approved, tests pass, and ready to merge' },  // Dark green
            { name: 'status:merged', color: '6F42C1', description: 'Pull request has been merged' }  // Purple
          ];

          // Get all existing labels
          const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, {
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const existingLabelNames = new Set(existingLabels.map(l => l.name));

          // Create or update labels
          for (const label of labels) {
            const existingLabel = existingLabels.find(l => l.name === label.name);
            
            if (!existingLabel) {
              // Create new label
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`Created label: ${label.name}`);
              } catch (error) {
                console.log(`Failed to create label ${label.name}: ${error.message}`);
              }
            } else if (existingLabel.color !== label.color || existingLabel.description !== label.description) {
              // Update existing label if color or description changed
              try {
                await github.rest.issues.updateLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`Updated label: ${label.name} (color: ${existingLabel.color} -> ${label.color}, desc: "${existingLabel.description}" -> "${label.description}")`);
              } catch (error) {
                console.log(`Failed to update label ${label.name}: ${error.message}`);
              }
            }
          }

    - name: Remove all PR status labels
      uses: actions/github-script@v7
      with:
        script: |
          const labels = ['status:draft', 'status:ready-for-review', 'status:approved', 'status:mergeable', 'status:merged'];
          const pr_number = ${{ inputs.pr_number }};

          for (const label of labels) {
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                name: label
              });
            } catch (error) {
              // Label might not exist on the PR, which is fine
              console.log(`Label ${label} not found on PR, skipping removal`);
            }
          }

    - name: Add appropriate PR status label
      uses: actions/github-script@v7
      with:
        script: |
          const pr_number = ${{ inputs.pr_number }};
          const is_draft = ${{ inputs.is_draft }};
          const has_approval = ${{ inputs.has_approval }};
          const qa_status = '${{ inputs.qa_status }}';
          const is_merged = ${{ inputs.is_merged }};
          
          let label = '';

          // Determine the appropriate label based on PR state
          if (is_merged) {
            label = 'status:merged';
          } else if (is_draft) {
            label = 'status:draft';
          } else if (has_approval && qa_status === 'success') {
            label = 'status:mergeable';
          } else if (has_approval) {
            label = 'status:approved';
          } else {
            label = 'status:ready-for-review';
          }

          if (label) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              labels: [label]
            });
            console.log(`Added status label: ${label}`);
          }