version: "3"
services:
  anvil:
    platform: linux/amd64
    image: ghcr.io/foundry-rs/foundry
    restart: always
    ports:
      - "8545:8545"
    entrypoint: ["anvil", "--host", "0.0.0.0", "--chain-id", "31337"]


  graph-node:
    platform: linux/amd64
    image: graphprotocol/graph-node:v0.35.1
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8020:8020"
      - "8030:8030"
      - "8040:8040"
    depends_on:
      ipfs:
        condition: service_healthy
      hasura-postgres:
        condition: service_healthy
    environment:
      postgres_host: thegraph-postgres
      postgres_user: postgres
      postgres_pass: postgrespassword
      postgres_db: postgres
      ipfs: "ipfs:5001"
      ethereum: "mainnet:http://anvil:8545"
      GRAPH_LOG: info
  ipfs:
    image: ipfs/kubo:v0.30.0
    ports:
      - "5001:5001"
    volumes:
      - ipfs_data:/data/ipfs
    healthcheck:
      test: ["CMD-SHELL", "ipfs dag stat /ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  thegraph-postgres:
    image: postgres:17
    command:
      [
        "postgres",
        "-cshared_preload_libraries=pg_stat_statements",
        "-cmax_connections=200",
      ]
    environment:
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - thegraph_db_data:/var/lib/postgresql/data




  hasura-postgres:
    image: postgres:17
    restart: always
    volumes:
      - hasura_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  graphql-engine:
    image: hasura/graphql-engine:v2.44.0
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@hasura-postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@hasura-postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s
    depends_on:
      hasura-postgres:
        condition: service_healthy

volumes:
  hasura_db_data:
  thegraph_db_data:
  ipfs_data:
