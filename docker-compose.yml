volumes:
  atk-besu:
    driver: local
  atk-minio:
    driver: local
  atk-postgres:
    driver: local
  atk-redis:
    driver: local
  atk-hasura:
    driver: local
services:
  anvil:
    image: ghcr.io/settlemint/btp-anvil-test-node:v7.7.5
    container_name: test-anvil
    restart: always
    # No Gas network
    entrypoint: ["anvil", "--host", "0.0.0.0", "--chain-id", "31337", "--gas-limit", "5000000000000", "--gas-price", "0", "--block-base-fee-per-gas", "0"]
    ports:
      - "8545:8545" # Ethereum JSON-RPC
  graph-node-anvil:
    image: graphprotocol/graph-node:v0.39.1
    container_name: test-graph-node-anvil
    platform: linux/amd64
    ports:
      - "8100:8000" # GraphQL HTTP
      - "8101:8001" # Admin
      - "8120:8020" # Index Node
      - "8130:8030" # Query Node
      - "8140:8040" # Subgraph
    depends_on:
      - anvil
      - postgres
    environment:
      postgres_host: postgres
      postgres_user: thegraph
      postgres_pass: thegraph
      postgres_db: graphanvil
      ipfs: "https://ipfs.console.settlemint.com"
      ethereum: "settlemint:http://anvil:8545"
      GRAPH_ETHEREUM_REQUEST_RETRIES: 10
      ETHEREUM_POLLING_INTERVAL: 1000
      GRAPH_IPFS_TIMEOUT: 60
      GRAPH_MAX_IPFS_FILE_BYTES: 52428800
      GRAPH_IPFS_REQUEST_RETRIES: 10
      CARGO_TERM_COLOR: always
  besu:
    image: hyperledger/besu:25.6.0
    container_name: atk-besu
    restart: unless-stopped
    command: ["--config-file=/opt/besu/config.toml", "--identity=atk"]
    volumes:
      - ./tools/docker/besu/config.toml:/opt/besu/config.toml:ro
      - ./tools/docker/besu/genesis.json:/opt/besu/genesis.json:ro
      - ./tools/docker/besu/anvil-test-key:/opt/besu/key:ro
      - atk-besu:/opt/besu/data
  txsigner:
    image: ghcr.io/settlemint/btp-signer:7.13.1
    container_name: atk-txsigner
    restart: unless-stopped
    depends_on:
      besu:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      MODE: "standalone"
      RPC_ENDPOINT: "http://besu:8545"
      DB_CONNECTION_STRING: "postgresql://${TXSIGNER_DB_USER:-txsigner}:${TXSIGNER_DB_PASSWORD:-txsigner}@postgres:5432/${TXSIGNER_DB_NAME:-txsigner}?sslmode=disable"
      PRIVATE_KEY_MNEMONIC: ${PRIVATE_KEY_MNEMONIC:-"gate yellow grunt wrestle disease obtain mixed nature mansion tape purchase awful"}
      PRIVATE_KEY_DERIVATION_PATH: "m/44'/60'/0'/0/0"
      TX_SIGNER_PORT: 3000
      TX_SIGNER_METRICS_PORT: 3001
      TX_SIGNER_RPC_URL: "http://besu:8545"
      TX_SIGNER_CHAIN_ID: ${CHAIN_ID:-1337}
      TX_SIGNER_LOG_LEVEL: ${LOG_LEVEL:-info}
      TX_SIGNER_DEBUG: ${DEBUG:-false}
      TX_SIGNER_SIGNING_STRATEGY: local
      DATABASE_URL: "postgresql://${TXSIGNER_DB_USER:-txsigner}:${TXSIGNER_DB_PASSWORD:-txsigner}@postgres:5432/${TXSIGNER_DB_NAME:-txsigner}?sslmode=disable"
      TX_SIGNER_RATE_LIMIT_ENABLED: true
      TX_SIGNER_RATE_LIMIT_MAX_REQUESTS_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}
      TX_SIGNER_RATE_LIMIT_MAX_REQUESTS_PER_HOUR: ${RATE_LIMIT_PER_HOUR:-1000}
      TX_SIGNER_QUEUE_MAX_SIZE: ${QUEUE_MAX_SIZE:-1000}
      TX_SIGNER_QUEUE_PROCESSING_INTERVAL: ${QUEUE_PROCESSING_INTERVAL:-1000}
      TX_SIGNER_GAS_PRICE_STRATEGY: ${GAS_PRICE_STRATEGY:-estimator}
      TX_SIGNER_GAS_FIXED_PRICE: ${GAS_FIXED_PRICE:-20}
      TX_SIGNER_GAS_LIMIT: ${GAS_LIMIT:-9007199254740991}
      TX_SIGNER_GAS_MULTIPLIER: ${GAS_MULTIPLIER:-1.1}
      TX_SIGNER_NONCE_STRATEGY: sequential
      TX_SIGNER_NONCE_MAX_PENDING: ${NONCE_MAX_PENDING:-10}
      TX_SIGNER_AUDIT_ENABLED: true
      TX_SIGNER_AUDIT_RETENTION_DAYS: ${AUDIT_RETENTION_DAYS:-30}
      TX_SIGNER_CORS_ENABLED: ${CORS_ENABLED:-false}
      TX_SIGNER_CORS_METHODS: ${CORS_METHODS:-GET,POST}
      TX_SIGNER_CORS_HEADERS: ${CORS_HEADERS:-Content-Type,Authorization}
    ports:
      - "8547:3000"
    healthcheck:
      test: ["CMD-SHELL", "if timeout 1 bash -c '</dev/tcp/localhost/8545'; then echo 'TxSigner health check: SUCCESS'; else echo 'TxSigner health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  postgres:
    image: postgres:17.5-alpine
    container_name: atk-postgres
    restart: unless-stopped
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements", "-cmax_connections=200", "-clog_statement=all", "-clog_duration=on", "-clog_min_duration_statement=100"]
    volumes:
      - ./tools/docker/postgres/init.sql:/docker-entrypoint-initdb.d/1_init.sql:ro
      - ./tools/docker/postgres/atk.sql:/docker-entrypoint-initdb.d/2_atk.sql:ro
      - atk-postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      PGDATA: "/var/lib/postgresql/data"
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "if pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}; then echo 'Postgres health check: SUCCESS'; else echo 'Postgres health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
  portal:
    image: ghcr.io/settlemint/btp-scs-portal:8.5.7
    container_name: atk-portal
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./tools/docker/portal:/abis:ro
    environment:
      BLOCKCHAIN_JSON_RPC_ENDPOINT: http://txsigner:3000
      BLOCKCHAIN_NETWORK_ID: "${CHAIN_ID:-1337}"
      BLOCKCHAIN_NETWORK_NAME: ${NETWORK_NAME:-ATK}
      CONTRACT_ABI_PATH: /abis
      GRAPHQL_PORT: "7701"
      PORT: "7700"
      POSTGRES_CONNECTION_STRING: postgresql://${PORTAL_DB_USER:-portal}:${PORTAL_DB_PASSWORD:-portal}@postgres:5432/${PORTAL_DB_NAME:-portal}?sslmode=disable
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-shared}
      REDIS_PORT: "6379"
      REDIS_USERNAME: ${REDIS_USERNAME:-default}
    ports:
      - "7700:7700"
      - "7701:7701"
    healthcheck:
      test: ["CMD-SHELL", "if curl -f http://localhost:7700/health; then echo 'Portal health check: SUCCESS'; else echo 'Portal health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  redis:
    image: redis:8.0-alpine
    container_name: atk-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-shared} --save 60 1 --loglevel warning --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD-SHELL", "if redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-shared} ping; then echo 'Redis health check: SUCCESS'; else echo 'Redis health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
    volumes:
      - atk-redis:/data
  hasura:
    image: hasura/graphql-engine:v2.48.1
    container_name: atk-hasura
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${HASURA_DB_USER:-hasura}:${HASURA_DB_PASSWORD:-hasura}@postgres:5432/hasura
      HASURA_GRAPHQL_DATABASE_URL: postgres://${HASURA_DB_USER:-hasura}:${HASURA_DB_PASSWORD:-hasura}@postgres:5432/hasura
      PG_DATABASE_URL: postgres://${HASURA_DB_USER:-hasura}:${HASURA_DB_PASSWORD:-hasura}@postgres:5432/hasura
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-hasura}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "if timeout 1 bash -c '</dev/tcp/localhost/8080'; then echo 'Hasura health check: SUCCESS'; else echo 'Hasura health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  graph-node:
    image: graphprotocol/graph-node:v0.39.1
    container_name: atk-graph-node
    restart: unless-stopped
    platform: linux/amd64
    depends_on:
      besu:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000" # GraphQL HTTP
      - "8001:8001" # Admin
      - "8020:8020" # Index Node
      - "8030:8030" # Query Node
      - "8040:8040" # Subgraph
    environment:
      postgres_host: postgres
      postgres_user: thegraph
      postgres_pass: thegraph
      postgres_db: thegraph
      ipfs: "https://ipfs.console.settlemint.com"
      ethereum: "settlemint:http://besu:8545"
      GRAPH_ETHEREUM_REQUEST_RETRIES: 10
      ETHEREUM_POLLING_INTERVAL: 1000
      GRAPH_IPFS_TIMEOUT: 60
      GRAPH_MAX_IPFS_FILE_BYTES: 52428800
      GRAPH_IPFS_REQUEST_RETRIES: 10
      SUBGRAPH: "kit:QmXRc8QwAnJzVRPxbL8rVBbRaDZkrfFoQm3MLWgFyn5LQU"
    healthcheck:
      test: ["CMD-SHELL", "if timeout 1 bash -c '</dev/tcp/localhost/8000'; then echo 'Graph Node health check: SUCCESS'; else echo 'Graph Node health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 30s
  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: atk-minio
    restart: unless-stopped
    volumes:
      - atk-minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominio}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "if mc ready local; then echo 'MinIO health check: SUCCESS'; else echo 'MinIO health check: FAILED'; exit 1; fi"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
  minio-setup:
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    container_name: atk-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominio}
      MINIO_SERVICE_ACCESS_KEY: ${MINIO_SERVICE_ACCESS_KEY:-atk-service}
      MINIO_SERVICE_SECRET: ${MINIO_SERVICE_SECRET:-atk-service-secret}
    entrypoint: ["/init.sh"]
    volumes:
      - ./tools/docker/minio/init.sh:/init.sh
    restart: "no"
  blockscout-backend:
    image: ghcr.io/blockscout/blockscout:8.1.1
    container_name: atk-blockscout-backend
    restart: unless-stopped
    command: |
      sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    environment:
      ETHEREUM_JSONRPC_VARIANT: besu
      ETHEREUM_JSONRPC_HTTP_URL: http://besu:8545/
      DATABASE_URL: postgresql://blockscout:blockscout@postgres:5432/blockscout
      ETHEREUM_JSONRPC_TRANSPORT: http
      ETHEREUM_JSONRPC_DISABLE_ARCHIVE_BALANCES: false
      ETHEREUM_JSONRPC_TRACE_URL: http://besu:8545/
      SECRET_KEY_BASE: 56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN
      PORT: 4000
      COIN_NAME: ATK
      COIN: ATK
      DISABLE_MARKET: true
      POOL_SIZE: 80
      POOL_SIZE_API: 10
      ECTO_USE_SSL: false
      HEART_BEAT_TIMEOUT: 30
      ADMIN_PANEL_ENABLED: false
      API_V1_READ_METHODS_DISABLED: false
      API_V1_WRITE_METHODS_DISABLED: false
      API_GRAPHQL_ENABLED: true
      TXS_STATS_DAYS_TO_COMPILE_AT_INIT: 10
      COIN_BALANCE_HISTORY_DAYS: 90
      RE_CAPTCHA_DISABLED: true
      DECODE_NOT_A_CONTRACT_CALLS: true
      ACCOUNT_ENABLED: false
      NFT_MEDIA_HANDLER_ENABLED: false
    ports:
      - "4000:4000"
  blockscout-frontend:
    image: ghcr.io/blockscout/frontend:v2.0.3
    platform: linux/amd64
    restart: unless-stopped
    container_name: atk-blockscout-frontend
    environment:
      NEXT_PUBLIC_API_HOST: localhost:4000
      NEXT_PUBLIC_API_PROTOCOL: http
      NEXT_PUBLIC_NETWORK_NAME: Asset Tokenization Kit
      NEXT_PUBLIC_NETWORK_SHORT_NAME: ATK
      NEXT_PUBLIC_NETWORK_ID: 1337
      NEXT_PUBLIC_NETWORK_CURRENCY_NAME: Asset Tokenization Kit
      NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL: ATK
      NEXT_PUBLIC_NETWORK_CURRENCY_DECIMALS: 18
      NEXT_PUBLIC_API_BASE_PATH: /
      NEXT_PUBLIC_APP_HOST: localhost:4000
      NEXT_PUBLIC_APP_PROTOCOL: http
      NEXT_PUBLIC_HOMEPAGE_CHARTS: "['daily_txs']"
      NEXT_PUBLIC_IS_TESTNET: false
      NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: ws
      NEXT_PUBLIC_API_SPEC_URL: https://raw.githubusercontent.com/blockscout/blockscout-api-v2-swagger/main/swagger.yaml
    ports:
      - "4001:3000"
