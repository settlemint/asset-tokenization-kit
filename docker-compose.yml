volumes:
  atk-anvil:
    driver: local
  atk-minio:
    driver: local
  atk-postgres:
    driver: local
  atk-redis:
    driver: local
  atk-hasura:
    driver: local
services:
  anvil:
    image: ghcr.io/settlemint/btp-anvil-test-node:v7.7.10
    container_name: ${CONTAINER_PREFIX:-atk}-anvil
    restart: unless-stopped
    environment:
      - TIMESTAMP=${TIMESTAMP:-0}
    # No Gas network
    entrypoint:
      [
        "anvil",
        "--host",
        "0.0.0.0",
        "--chain-id",
        "1337",
        "--gas-limit",
        "5000000000000",
        "--gas-price",
        "0",
        "--block-base-fee-per-gas",
        "0",
        "--init",
        "/opt/anvil/genesis.json",
        "--timestamp",
        "${TIMESTAMP}",
      ]
    ports:
      - "${ANVIL_PORT:-8545}:8545" # Ethereum JSON-RPC
    volumes:
      - ./kit/contracts/.generated/genesis.json:/opt/anvil/genesis.json:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if timeout 1 bash -c '</dev/tcp/localhost/8545'; then echo 'Anvil
          health check: SUCCESS'; else echo 'Anvil health check: FAILED'; exit
          1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  txsigner:
    image: ghcr.io/settlemint/btp-signer:7.15.13
    container_name: ${CONTAINER_PREFIX:-atk}-txsigner
    restart: unless-stopped
    depends_on:
      anvil:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      MODE: "standalone"
      RPC_ENDPOINT: "http://anvil:8545"
      DB_CONNECTION_STRING: "postgresql://txsigner:txsigner@postgres:5432/txsigner?sslmode=disable"
      PRIVATE_KEY_MNEMONIC:
        "test test test test test test test test test test test junk"
      PRIVATE_KEY_DERIVATION_PATH: "m/44'/60'/0'/0/0"
    ports:
      - "${TXSIGNER_PORT:-8547}:3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget -q -O-
          --post-data=''{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}''
          --header=''Content-Type: application/json'' http://localhost:3000 ||
          exit 1',
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  postgres:
    image: postgres:17.6-alpine
    container_name: ${CONTAINER_PREFIX:-atk}-postgres
    restart: unless-stopped
    command:
      [
        "postgres",
        "-cshared_preload_libraries=pg_stat_statements",
        "-cmax_connections=500",
        "-cshared_buffers=256MB",
        "-ceffective_cache_size=1GB",
        "-cmaintenance_work_mem=64MB",
        "-ccheckpoint_completion_target=0.9",
        "-cwal_buffers=16MB",
        "-cdefault_statistics_target=100",
        "-crandom_page_cost=1.1",
        "-ceffective_io_concurrency=200",
        "-cwork_mem=4MB",
        "-cmin_wal_size=1GB",
        "-cmax_wal_size=4GB",
        "-clog_statement=all",
        "-clog_duration=on",
        "-clog_min_duration_statement=100",
        "-cstatement_timeout=60000",
        "-cidle_in_transaction_session_timeout=60000",
      ]
    volumes:
      - ./tools/docker/postgres/init.sql:/docker-entrypoint-initdb.d/1_init.sql:ro
      - atk-postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      PGDATA: "/var/lib/postgresql/data"
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if pg_isready -U ${POSTGRES_USER:-postgres} -d
          ${POSTGRES_DB:-postgres}; then echo 'Postgres health check: SUCCESS';
          else echo 'Postgres health check: FAILED'; exit 1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
  portal:
    image: ghcr.io/settlemint/btp-scs-portal:8.6.7
    container_name: ${CONTAINER_PREFIX:-atk}-portal
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./kit/contracts/.generated/portal:/abis:ro
    environment:
      BLOCKCHAIN_JSON_RPC_ENDPOINT: http://txsigner:3000
      BLOCKCHAIN_NETWORK_ID: "${CHAIN_ID:-1337}"
      BLOCKCHAIN_NETWORK_NAME: ${NETWORK_NAME:-ATK}
      CONTRACT_ABI_PATH: /abis
      GRAPHQL_PORT: "7701"
      PORT: "7700"
      POSTGRES_CONNECTION_STRING: postgresql://${PORTAL_DB_USER:-portal}:${PORTAL_DB_PASSWORD:-portal}@postgres:5432/${PORTAL_DB_NAME:-portal}?sslmode=disable
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-shared}
      REDIS_PORT: "6379"
      REDIS_USERNAME: ${REDIS_USERNAME:-default}
    ports:
      - "${PORTAL_PORT:-7700}:7700"
      - "${PORTAL_GRAPHQL_PORT:-7701}:7701"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if curl -f http://localhost:7700/health; then echo 'Portal health
          check: SUCCESS'; else echo 'Portal health check: FAILED'; exit 1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  redis:
    image: redis:8.2-alpine
    container_name: ${CONTAINER_PREFIX:-atk}-redis
    restart: unless-stopped
    command:
      redis-server --requirepass ${REDIS_PASSWORD:-shared} --save 60 1
      --loglevel warning --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-shared} ping;
          then echo 'Redis health check: SUCCESS'; else echo 'Redis health
          check: FAILED'; exit 1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
    volumes:
      - atk-redis:/data
  hasura:
    image: hasura/graphql-engine:v2.48.5
    container_name: ${CONTAINER_PREFIX:-atk}-hasura
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${HASURA_DB_USER:-hasura}:${HASURA_DB_PASSWORD:-hasura}@postgres:5432/hasura
      HASURA_GRAPHQL_DATABASE_URL: postgres://${HASURA_DB_USER:-hasura}:${HASURA_DB_PASSWORD:-hasura}@postgres:5432/hasura
      PG_DATABASE_URL: postgres://${HASURA_DB_USER:-hasura}:${HASURA_DB_PASSWORD:-hasura}@postgres:5432/hasura
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES:
        startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-hasura}
    ports:
      - "${HASURA_PORT:-8080}:8080"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if timeout 1 bash -c '</dev/tcp/localhost/8080'; then echo 'Hasura
          health check: SUCCESS'; else echo 'Hasura health check: FAILED'; exit
          1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 1s
  graph-node:
    image: graphprotocol/graph-node:v0.40.1
    container_name: ${CONTAINER_PREFIX:-atk}-graph-node
    restart: unless-stopped
    platform: linux/amd64
    depends_on:
      anvil:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "${GRAPH_NODE_PORT:-8000}:8000" # GraphQL HTTP
      - "${GRAPH_NODE_ADMIN_PORT:-8001}:8001" # Admin
      - "${GRAPH_NODE_INDEX_PORT:-8020}:8020" # Index Node
      - "${GRAPH_NODE_QUERY_PORT:-8030}:8030" # Query Node
      - "${GRAPH_NODE_SUBGRAPH_PORT:-8040}:8040" # Subgraph
    env_file:
      - ./kit/subgraph/.generated/subgraph-env
    environment:
      postgres_host: postgres
      postgres_user: thegraph
      postgres_pass: thegraph
      postgres_db: thegraph
      ipfs: "https://ipfs.console.settlemint.com"
      ethereum: "settlemint:http://anvil:8545"
      GRAPH_ETHEREUM_REQUEST_RETRIES: 10
      ETHEREUM_POLLING_INTERVAL: 100
      GRAPH_IPFS_TIMEOUT: 60
      GRAPH_MAX_IPFS_FILE_BYTES: 52428800
      GRAPH_IPFS_REQUEST_RETRIES: 10
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if timeout 1 bash -c '</dev/tcp/localhost/8000'; then echo 'Graph
          Node health check: SUCCESS'; else echo 'Graph Node health check:
          FAILED'; exit 1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 30s
  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: ${CONTAINER_PREFIX:-atk}-minio
    restart: unless-stopped
    volumes:
      - atk-minio:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominio}
    command: server /data --console-address ":9001"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "if mc ready local; then echo 'MinIO health check: SUCCESS'; else echo
          'MinIO health check: FAILED'; exit 1; fi",
        ]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
  minio-setup:
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    container_name: ${CONTAINER_PREFIX:-atk}-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominio}
      MINIO_SERVICE_ACCESS_KEY: ${MINIO_SERVICE_ACCESS_KEY:-atk-service}
      MINIO_SERVICE_SECRET: ${MINIO_SERVICE_SECRET:-atk-service-secret}
    entrypoint: ["/init.sh"]
    volumes:
      - ./tools/docker/minio/init.sh:/init.sh
    restart: "no"
  blockscout-backend:
    image: ghcr.io/blockscout/blockscout:9.0.2
    container_name: ${CONTAINER_PREFIX:-atk}-blockscout-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    command: |
      sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    environment:
      ETHEREUM_JSONRPC_VARIANT: anvil
      ETHEREUM_JSONRPC_HTTP_URL: http://anvil:8545/
      DATABASE_URL: postgresql://blockscout:blockscout@postgres:5432/blockscout
      ETHEREUM_JSONRPC_TRANSPORT: http
      ETHEREUM_JSONRPC_DISABLE_ARCHIVE_BALANCES: false
      ETHEREUM_JSONRPC_TRACE_URL: http://anvil:8545/
      SECRET_KEY_BASE: 56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN
      PORT: 4000
      COIN_NAME: ATK
      COIN: ATK
      DISABLE_MARKET: true
      POOL_SIZE: 200
      POOL_SIZE_API: 50
      ECTO_USE_SSL: false
      HEART_BEAT_TIMEOUT: 30
      ADMIN_PANEL_ENABLED: false
      API_V1_READ_METHODS_DISABLED: false
      API_V1_WRITE_METHODS_DISABLED: false
      API_GRAPHQL_ENABLED: true
      TXS_STATS_DAYS_TO_COMPILE_AT_INIT: 10
      COIN_BALANCE_HISTORY_DAYS: 90
      RE_CAPTCHA_DISABLED: true
      DECODE_NOT_A_CONTRACT_CALLS: true
      ACCOUNT_ENABLED: false
      NFT_MEDIA_HANDLER_ENABLED: false
    ports:
      - "${BLOCKSCOUT_BACKEND_PORT:-4000}:4000"
  blockscout-frontend:
    image: ghcr.io/blockscout/frontend:v2.3.3
    platform: linux/amd64
    restart: unless-stopped
    container_name: ${CONTAINER_PREFIX:-atk}-blockscout-frontend
    environment:
      NEXT_PUBLIC_API_HOST: localhost:${BLOCKSCOUT_BACKEND_PORT:-4000}
      NEXT_PUBLIC_API_PROTOCOL: http
      NEXT_PUBLIC_NETWORK_NAME: Asset Tokenization Kit
      NEXT_PUBLIC_NETWORK_SHORT_NAME: ATK
      NEXT_PUBLIC_NETWORK_ID: ${CHAIN_ID:-1337}
      NEXT_PUBLIC_NETWORK_CURRENCY_NAME: Asset Tokenization Kit
      NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL: ATK
      NEXT_PUBLIC_NETWORK_CURRENCY_DECIMALS: 18
      NEXT_PUBLIC_API_BASE_PATH: /
      NEXT_PUBLIC_APP_HOST: localhost:${BLOCKSCOUT_BACKEND_PORT:-4000}
      NEXT_PUBLIC_APP_PROTOCOL: http
      NEXT_PUBLIC_HOMEPAGE_CHARTS: "['daily_txs']"
      NEXT_PUBLIC_IS_TESTNET: false
      NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: ws
      NEXT_PUBLIC_API_SPEC_URL: https://raw.githubusercontent.com/blockscout/blockscout-api-v2-swagger/main/swagger.yaml
    ports:
      - "${BLOCKSCOUT_FRONTEND_PORT:-4001}:3000"
