---
description:
globs:
alwaysApply: false
---
# Development Workflow

## Pre-commit Checklist

Before committing any changes, ensure code quality by running:

1. **Tests**: Verify all tests pass
   ```bash
   bun test
   ```

2. **Type Checking**: Ensure TypeScript types are correct
   ```bash
   bun run typecheck
   ```

3. **Linting**: Fix any style or code quality issues
   ```bash
   bun run lint
   bun run lint:fix  # Auto-fix when possible
   ```

4. **Formatting**: Ensure consistent code formatting
   ```bash
   bun run format
   bun run format:check  # Check without modifying
   ```

5. **Build**: Verify the project builds successfully
   ```bash
   bun run build
   ```

## Continuous Integration

If your project has a CI script, run it before committing:
```bash
bun run ci  # Runs all checks in sequence
```

This typically includes:
- Type checking
- Linting
- Tests with coverage
- Build verification
- Any project-specific validations

## Generated Code

Many projects have generated code (types, schemas, API clients, etc.). Before opening a PR:

1. **Generate artifacts**: Run generation scripts
   ```bash
   bun run generate     # Generate all artifacts
   bun run codegen      # Generate types/clients
   bun run build:types  # Build type definitions
   ```

2. **Commit generated files**: Always commit generated code if it's tracked in the repository

## Fresh Environment Setup

When cloning a repository or switching branches:

1. **Install dependencies**:
   ```bash
   bun install
   ```

2. **Environment setup**: Configure any required environment variables
   ```bash
   cp .env.example .env  # Copy example environment file
   # Edit .env with your values
   ```

3. **Database/Services**: Set up any required services
   ```bash
   bun run db:setup      # Database migrations/seeds
   bun run services:up   # Start Docker services
   ```

## Development Server

Start development servers with hot reload:
```bash
bun run dev           # Start dev server
bun run dev --port 3001  # Custom port if needed
```

## Testing Workflow

### Running Tests

```bash
bun test              # Run all tests
bun test auth         # Run tests matching 'auth'
bun test --watch      # Watch mode for TDD
bun test --coverage   # Generate coverage report
```

### Test Organization

- Place test files next to the code they test
- Use `.test.ts` or `.spec.ts` extensions
- Group related tests in describe blocks
- Follow AAA pattern: Arrange, Act, Assert

## Pull Request Workflow

When creating a pull request:

1. **Update from main**: Ensure your branch is up to date
   ```bash
   git fetch origin
   git rebase origin/main  # or merge if preferred
   ```

2. **Run all checks**: Execute the full CI suite locally
   ```bash
   bun run ci
   ```

3. **Update PR description**: 
   - Describe what changed and why
   - Link to any related issues
   - Include testing instructions
   - Note any breaking changes

4. **Keep PR focused**: One feature/fix per PR for easier review

## Code Review Practices

When reviewing code:
- Check for test coverage of new features
- Verify no commented-out code
- Ensure consistent naming conventions
- Look for potential performance issues
- Verify error handling is appropriate

## Deployment Preparation

Before deploying:

1. **Build production assets**:
   ```bash
   bun run build:prod
   ```

2. **Run production checks**:
   ```bash
   bun run test:prod     # Production test suite
   bun run lint:strict   # Strict linting rules
   ```

3. **Verify environment variables**: Ensure all required env vars are documented

## Troubleshooting

Common issues and solutions:

- **Type errors**: Run `bun run typecheck` to see detailed errors
- **Test failures**: Use `bun test --bail` to stop at first failure
- **Build issues**: Clear cache with `rm -rf .cache dist`
- **Dependency conflicts**: Delete `node_modules` and `bun.lockb`, then reinstall

## Performance Monitoring

During development:
- Use `bun run analyze` to check bundle sizes
- Profile with `bun run profile` for performance bottlenecks
- Monitor memory usage in long-running processes

## Documentation

Keep documentation current:
- Update README when adding new scripts
- Document environment variables
- Add JSDoc comments for public APIs
- Update changelog for user-facing changes
