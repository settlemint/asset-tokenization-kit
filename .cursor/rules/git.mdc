---
alwaysApply: true
---

# Git Commit & Branch Rules

## Commit Format

`type(scope): description` (scope optional, description lowercase)

**Types:** feat, fix, chore, docs, style, refactor, perf, test, build, ci,
revert

## Branch Rules (CRITICAL)

```bash
# Check current branch FIRST
current_branch=$(git branch --show-current)
[[ "$current_branch" == "main" || "$current_branch" == "master" ]] && git checkout -b feature/name || echo "Using: $current_branch"
```

✅ One feature = one branch = one PR ❌ NO nested branches or multiple PRs per
feature

## Special Patterns

- Dependencies: `chore(deps):`, `fix(deps):`, `build(deps):`
- Breaking changes: `BREAKING CHANGE:` in body
- PR title = first commit message

## Examples

✅ feat: add user authentication ✅ fix(api): resolve timeout issue ✅
chore(deps): update react to v18 ✅ feat: redesign API endpoints ❌ Feature: Add
user auth ❌ added new feature

# Git Commit & Branch Rules

## Commit Format

`type(scope): description` (scope optional, description lowercase)

**Types:** feat, fix, chore, docs, style, refactor, perf, test, build, ci,
revert

## Branch Rules (CRITICAL)

```bash
# Check current branch FIRST
current_branch=$(git branch --show-current)
[[ "$current_branch" == "main" || "$current_branch" == "master" ]] && git checkout -b feature/name || echo "Using: $current_branch"
```

✅ One feature = one branch = one PR ❌ NO nested branches or multiple PRs per
feature

## Special Patterns

- Dependencies: `chore(deps):`, `fix(deps):`, `build(deps):`
- Breaking changes: `BREAKING CHANGE:` in body
- PR title = first commit message

## Examples

✅ feat: add user authentication ✅ fix(api): resolve timeout issue ✅
chore(deps): update react to v18 ✅ feat: redesign API endpoints ❌ Feature: Add
user auth ❌ added new feature
