---
alwaysApply: false
---

# MCP Usage Patterns

Common patterns for using MCP (Model Context Protocol) tools effectively.

## CRITICAL: Gemini-CLI First

**ALL tasks MUST start with Gemini-CLI analysis**:

```javascript
// Always analyze before implementing
mcp__gemini -
  cli__ask -
  gemini({
    prompt: "@relevant-files analyze patterns and suggest approach for [task]",
    changeMode: false, // Use true only for structured edits
    model: "gemini-2.5-pro",
  });
```

## Research Workflow

1. **Gemini-CLI** → Initial analysis and pattern detection
2. **Context7** → Official library documentation
3. **DeepWiki** → Architecture and design patterns
4. **Grep** → Real-world implementation examples

## Tool-Specific Patterns

### Context7 - Library Documentation

```javascript
// First resolve library ID
mcp__context7__resolve -
  library -
  id({
    libraryName: "library-name",
  });
// Then fetch docs
mcp__context7__get -
  library -
  docs({
    context7CompatibleLibraryID: "/org/library",
    topic: "specific topic",
    tokens: 8000,
  });
```

### Grep - Code Examples

```javascript
// Search for literal code patterns
mcp__grep__searchGitHub({
  query: "useState(", // Literal code, not keywords
  language: ["TypeScript", "TSX"],
  useRegexp: true,
});
```

### Gemini Brainstorm - Idea Generation

```javascript
mcp__gemini -
  cli__brainstorm({
    prompt: "Generate solutions for [problem]",
    domain: "software",
    constraints: "Must be TypeScript compatible",
    ideaCount: 10,
    includeAnalysis: true,
  });
```

### Linear - Task Management

```javascript
// Track implementation progress
mcp__linear__update_issue({
  id: "ISSUE-123",
  status: "in_progress",
});
```

### Sentry - Error Analysis

```javascript
// Analyze production errors
mcp__sentry__analyze_issue_with_seer({
  issueId: "ERROR-456",
});
```

## Best Practices

1. **Batch Operations**: Use multiple tools in parallel when possible
2. **Cache Awareness**: Gemini responses are cached for 15 minutes
3. **Token Limits**: Context7 allows up to 10000 tokens per request
4. **Query Precision**: Grep searches literal code, not concepts
5. **Error Handling**: Always check tool responses for errors

## Workflow Integration

- **Before coding**: Gemini analysis → Context7 docs → Grep examples
- **During coding**: Linear updates → Sentry monitoring
- **After coding**: Gemini review → Test generation → Documentation

## Common Mistakes to Avoid

1. Skipping Gemini-CLI initial analysis
2. Using Grep for keyword searches (use literal code)
3. Not checking Context7 for latest API changes
4. Forgetting to update Linear tickets
5. Ignoring Sentry error patterns
