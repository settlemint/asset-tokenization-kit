---
description: CLI tooling, commands, and workflow automation for enhanced development efficiency
globs: 
alwaysApply: true
---
# Tooling & Commands

<!-- 
COMPREHENSIVE TOOLING AND AUTOMATION FRAMEWORK
==============================================
This file documents the complete tooling ecosystem that enhances
development efficiency and reduces common mistakes. It includes:

1. MONOREPO MANAGEMENT - Turborepo configuration and usage patterns
2. PACKAGE MANAGEMENT - Bun-specific workflows and optimizations  
3. CLI UTILITIES - Essential command-line tools for development
4. AUTOMATED WORKFLOWS - Claude commands for common development tasks
5. PARALLEL PROCESSING - Sub-agent coordination for complex operations

BENEFITS:
- CONSISTENCY: Standardized tooling across all developers
- EFFICIENCY: Automated workflows reduce repetitive tasks
- RELIABILITY: Proper dependency management and task coordination
- SCALABILITY: Sub-agent patterns for handling complex operations

RECENT IMPROVEMENTS:
- Enhanced command documentation with usage patterns
- Expanded sub-agent coordination guidelines
- Clarified automation triggers and best practices
-->

## Turborepo

- this is a tuborepo mono repo
- run all package.json scripts from the root so the correct pre/post and turbo dependencies run

## Package Manager: Bun (Default)
```bash
bun <file>            # instead of node/ts-node
bun install/run/test  # instead of npm/yarn/pnpm
# Auto-loads .env files (no dotenv needed)
```

## CLI Tools
- **jq**: JSON parsing (`brew install jq`)
- **yq**: YAML parsing (`brew install yq`)
- **ast-grep**: Syntax-aware search (`brew install ast-grep`)
  ```bash
  ast-grep --lang typescript -p 'function $NAME($_) { $$$ }'
  ```

## Automatic Command Usage

### Core Commands (@/.claude/commands/)
| Command      | When to Use                                    |
|-------------|------------------------------------------------|
| `/pr`       | Creating pull requests                         |
| `/qa`       | Before PR or after significant changes         |
| `/comments` | When code lacks documentation                  |
| `/setup`    | Configure MCP servers                          |
| `/stuck`    | After 5+ mins debugging same issue            |

### Proactive Usage
- Multiple code changes â†’ Run `/qa`
- New functions without docs â†’ Run `/comments`
- Complex debugging â†’ Run `/stuck`
- Major refactoring â†’ Run `/qa` before completion

**Note:** Commands are comprehensive workflows, not single actions. Read full command files for details.

## Sub Agents and parallel tasks (Use More!)

Ideal for:
- **Multi-file operations**: Pattern searches, relationship mapping
- **Refactoring**: Breaking down steps, impact analysis
- **Architecture**: Dependencies, data flows, API discovery
- **Debugging**: Error patterns, log analysis, execution tracing
- **Impact analysis**: Usage finding, test coverage gaps

ðŸ’¡ Sub agents work in parallel and handle open-ended searches better than sequential tools.