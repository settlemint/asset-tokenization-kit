{
  "name": "@settlemint/asset-tokenization-kit",
  "description": "SettleMint Kit - Asset Tokenization",
  "version": "2.0.0",
  "private": false,
  "license": "FSL-1.1-MIT",
  "author": {
    "name": "SettleMint",
    "email": "support@settlemint.com",
    "url": "https://settlemint.com"
  },
  "homepage": "https://github.com/settlemint/asset-tokenization-kit/blob/main/apps/dapp/README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/settlemint/asset-tokenization-kit.git"
  },
  "bugs": {
    "url": "https://github.com/settlemint/asset-tokenization-kit/issues",
    "email": "support@settlemint.com"
  },
  "files": [
    ".github",
    ".vscode",
    "kit",
    "src",
    ".gitignore",
    "biome.json",
    "bunfig.toml",
    "lefthook.yml",
    "LICENSE",
    "logo.svg",
    "package.json",
    "README.md",
    "turbo.json"
  ],
  "scripts": {
    "postinstall": "turbo run dependencies ${CLAUDECODE:+--output-logs=errors-only}",
    "compile": "turbo run compile ${CLAUDECODE:+--output-logs=errors-only}",
    "codegen": "turbo run codegen ${CLAUDECODE:+--output-logs=errors-only}",
    "build": "turbo build ${CLAUDECODE:+--output-logs=errors-only}",
    "docs": "turbo run docs ${CLAUDECODE:+--output-logs=errors-only}",
    "typecheck": "turbo run typecheck ${CLAUDECODE:+--output-logs=errors-only}",
    "ci:gha": "turbo run ci:gha ${CLAUDECODE:+--output-logs=errors-only}",
    "ci:gha:main": "turbo run ci:gha:main ${CLAUDECODE:+--output-logs=errors-only}",
    "ci": "turbo run ci ${CLAUDECODE:+--output-logs=errors-only}",
    "ci:publish": "turbo run ci:publish ${CLAUDECODE:+--output-logs=errors-only}",
    "version": "bun run tools/version.ts",
    "clean": "git clean -fdX -e '.env' -e '.env.*' -e '!.env' -e '!.env.*' -e '.turbo/config.json' && find . -type f \\( -name 'pnpm-lock.yaml' -o -name 'package-lock.json' -o -name 'yarn.lock' -o -name 'bun.lockb' -o -name 'bun.lock' \\) -exec rm -f {} + && bun install && bunx turbo link --yes",
    "predev": "bunx settlemint connect --instance local",
    "dev": "turbo dev watch db:studio ${CLAUDECODE:+--output-logs=errors-only}",
    "lint": "turbo lint ${CLAUDECODE:+--output-logs=errors-only}",
    "format": "turbo format ${CLAUDECODE:+--output-logs=errors-only}",
    "test": "turbo test ${CLAUDECODE:+--output-logs=errors-only}",
    "docker:codestudio": "DOCKER_BUILD_TAG=$(jq -r .version package.json); if [ -z \"$CI\" ]; then DOCKER_BUILD_TAG=\"$DOCKER_BUILD_TAG-dev.$(date +%s)\"; fi; docker buildx build . --platform=linux/amd64,linux/arm64 --provenance true --sbom true -t ghcr.io/settlemint/codestudio-asset-tokenization-kit:$DOCKER_BUILD_TAG --push",
    "test:integration": "turbo test:integration ${CLAUDECODE:+--output-logs=errors-only}",
    "publish": "turbo publish ${CLAUDECODE:+--output-logs=errors-only}",
    "test:e2e:ui": "bun run --cwd kit/e2e playwright test --config=playwright.ui.config.ts --project=ui-tests",
    "test:e2e:ui:debug": "bun run --cwd kit/e2e playwright test --config=playwright.ui.config.ts --project=ui-tests --ui",
    "test:e2e:api": "bun run --cwd kit/e2e playwright test --config=playwright.api.config.ts --project=api-tests",
    "test:e2e:api:debug": "bun run --cwd kit/e2e playwright test --config=playwright.api.config.ts --project=api-tests --ui",
    "helm": "turbo run helm ${CLAUDECODE:+--output-logs=errors-only}",
    "dev:up": "TIMESTAMP=$(date +'%s'); if [ -n \"$CLAUDECODE\" ]; then docker compose -p atk up -d 2>&1 | grep -E 'Error|Failed|Warning|Container' || true; else docker compose -p atk up -d; fi",
    "postdev:up": "${CLAUDECODE:+true ||} settlemint connect --instance local",
    "dev:reset": "(if [ -n \"$CLAUDECODE\" ]; then docker compose -p atk down 2>&1 | grep -E 'Error|Failed|Warning' || true; else docker compose -p atk down; fi || true) && (docker volume ls -q --filter name=^atk | xargs -r docker volume rm 2>/dev/null || true)",
    "postdev:reset": "bun run dev:up",
    "test:up": "TIMESTAMP=$(date +'%s'); if [ -n \"$CLAUDECODE\" ]; then TIMESTAMP=$TIMESTAMP docker compose --env-file .env.test -f docker-compose.yml -f docker-compose.test.yml -p atk-test up -d --build 2>&1 | grep -E 'Error|Failed|Warning|Container' || true; else TIMESTAMP=$TIMESTAMP docker compose --env-file .env.test -f docker-compose.yml -f docker-compose.test.yml -p atk-test up -d --build; fi",
    "test:reset": "(if [ -n \"$CLAUDECODE\" ]; then docker compose --env-file .env.test -f docker-compose.yml -f docker-compose.test.yml -p atk-test down -v --remove-orphans --rmi local 2>&1 | grep -E 'Error|Failed|Warning' || true; else docker compose --env-file .env.test -f docker-compose.yml -f docker-compose.test.yml -p atk-test down -v --remove-orphans --rmi local; fi || true) && (docker volume ls -q --filter name=^atk-test | xargs -r docker volume rm 2>/dev/null || true)",
    "posttest:reset": "bun run test:up",
    "artifacts": "turbo run artifacts ${CLAUDECODE:+--output-logs=errors-only}",
    "extract-env": "bun run tools/extract-env.ts",
    "db:studio": "turbo run db:studio ${CLAUDECODE:+--output-logs=errors-only}"
  },
  "dependencies": {
    "@types/js-yaml": "4.0.9",
    "js-yaml": "4.1.0"
  },
  "devDependencies": {
    "@prettier/plugin-oxc": "0.0.4",
    "@settlemint/sdk-cli": "2.5.5",
    "@settlemint/sdk-utils": "2.5.5",
    "prettier": "3.6.2",
    "turbo": "2.5.5",
    "typescript": "5.9.2",
    "yaml": "2.8.0"
  },
  "trustedDependencies": [
    "@sentry/cli",
    "@tailwindcss/oxide",
    "canvas",
    "core-js",
    "esbuild",
    "keccak",
    "lefthook",
    "protobufjs",
    "secp256k1",
    "unrs-resolver",
    "vue-demi"
  ],
  "workspaces": [
    "kit/*"
  ],
  "packageManager": "bun@1.2.19"
}
