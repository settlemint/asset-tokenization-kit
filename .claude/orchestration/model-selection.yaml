# Model Selection Strategy
# Intelligently choose between Opus and Sonnet based on task requirements

models:
  opus:
    name: "claude-opus-4-20250514"
    strengths:
      - "Complex reasoning and analysis"
      - "Architecture design and planning"
      - "Security analysis and vulnerability detection"
      - "Code generation with nuanced requirements"
      - "Multi-step problem solving"
      - "Cross-domain integration"
    token_cost: high
    speed: slower
    use_when:
      - task_complexity: high
      - requires_deep_analysis: true
      - security_critical: true
      - architectural_decisions: true
      - multi_agent_coordination: true

  sonnet:
    name: "claude-sonnet-4-20250514"
    strengths:
      - "Rapid code generation"
      - "Pattern matching and application"
      - "Documentation and comments"
      - "Straightforward implementations"
      - "Code formatting and refactoring"
      - "Test generation from examples"
    token_cost: medium
    speed: fast
    use_when:
      - task_complexity: medium
      - well_defined_patterns: true
      - time_sensitive: true
      - repetitive_tasks: true
      - documentation_focus: true

# Agent-specific model recommendations
agent_models:
  # Strategic/Complex Agents - Prefer Opus
  planner:
    default: opus
    reason: "Complex requirement analysis and multi-agent orchestration"
    exceptions:
      - condition: "simple_feature"
        use: sonnet

  security-auditor:
    default: opus
    reason: "Critical security analysis requires deep reasoning"
    exceptions: [] # Always use Opus for security

  code-archaeologist:
    default: opus
    reason: "Complex codebase analysis and pattern discovery"

  performance-optimizer:
    default: opus
    reason: "Deep analysis of performance bottlenecks"

  team-configurator:
    default: opus
    reason: "Complex multi-agent coordination strategies"

  # Implementation Agents - Mixed based on complexity
  solidity-expert:
    default: opus
    reason: "Smart contract security is critical"
    exceptions:
      - condition: "simple_getter_setter"
        use: sonnet

  react-dev:
    default: sonnet
    reason: "Well-established patterns, fast iteration needed"
    exceptions:
      - condition: "complex_state_management"
        use: opus
      - condition: "performance_critical_ui"
        use: opus

  orpc-expert:
    default: sonnet
    reason: "API patterns are well-defined"
    exceptions:
      - condition: "complex_middleware"
        use: opus
      - condition: "security_endpoints"
        use: opus

  subgraph-dev:
    default: sonnet
    reason: "Schema mapping follows clear patterns"
    exceptions:
      - condition: "complex_aggregations"
        use: opus

  database-expert:
    default: sonnet
    reason: "SQL patterns are well-established"
    exceptions:
      - condition: "complex_migrations"
        use: opus
      - condition: "performance_tuning"
        use: opus

  typescript-expert:
    default: sonnet
    reason: "Type definitions follow patterns"
    exceptions:
      - condition: "complex_generics"
        use: opus
      - condition: "type_system_design"
        use: opus

  # Testing/Quality Agents - Mostly Sonnet
  test-dev:
    default: sonnet
    reason: "Test patterns are repetitive and well-defined"

  integration-tester:
    default: sonnet
    reason: "E2E tests follow user journey patterns"

  code-reviewer:
    default: sonnet
    reason: "Pattern matching for common issues"
    exceptions:
      - condition: "architectural_review"
        use: opus

  # Infrastructure Agents - Sonnet for configs
  devops:
    default: sonnet
    reason: "Configuration follows templates"

  ci-cd-expert:
    default: sonnet
    reason: "Pipeline patterns are standardized"

  observability-expert:
    default: sonnet
    reason: "Monitoring setup follows patterns"

  config-expert:
    default: sonnet
    reason: "Configuration is template-based"

  # Support Agents - Mostly Sonnet
  documentation-expert:
    default: sonnet
    reason: "Documentation follows templates"

  tailwind-css-expert:
    default: sonnet
    reason: "Styling patterns are well-defined"

# Task complexity indicators
complexity_indicators:
  high:
    - "security"
    - "architecture"
    - "optimization"
    - "multi-system integration"
    - "novel algorithm"
    - "performance critical"
    - "financial calculations"

  medium:
    - "standard CRUD"
    - "form validation"
    - "API endpoint"
    - "component creation"
    - "test writing"

  low:
    - "formatting"
    - "documentation"
    - "simple refactor"
    - "add comments"
    - "update configs"

# Model selection rules
selection_rules:
  - rule: "Security First"
    condition: "task involves security, auth, or financial data"
    action: "always use opus"

  - rule: "Time Sensitive"
    condition: "user indicates urgency or simple task"
    action: "prefer sonnet unless security critical"

  - rule: "Learning/Analysis"
    condition: "task requires understanding existing code"
    action: "use opus for initial analysis, sonnet for implementation"

  - rule: "Parallel Execution"
    condition: "multiple agents running simultaneously"
    action: "use sonnet for parallel tasks to reduce latency"

  - rule: "Budget Conscious"
    condition: "many tokens needed (large files, multiple iterations)"
    action: "prefer sonnet unless complexity requires opus"

# Usage examples
examples:
  - task: "Implement secure token transfer"
    agents:
      - planner: opus # Architecture decisions
      - solidity-expert: opus # Security critical
      - react-dev: sonnet # Standard UI patterns
      - test-dev: sonnet # Test patterns

  - task: "Add form validation"
    agents:
      - react-dev: sonnet # Well-defined patterns
      - test-dev: sonnet # Standard tests

  - task: "Debug performance issue"
    agents:
      - performance-optimizer: opus # Deep analysis
      - code-archaeologist: opus # Understand code
      - react-dev: sonnet # Apply fixes
