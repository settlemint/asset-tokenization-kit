# Agent Dependency Matrix
# Defines dependencies, outputs, and parallelization opportunities

agents:
  planner:
    depends_on: []
    provides:
      - implementation_roadmap
      - agent_assignment_matrix
      - success_criteria
      - task_breakdown
    parallel_with: []
    required_for: [all_implementation_agents]
    model: opus # Complex analysis and orchestration
    model_override_conditions:
      - condition: "simple_crud_feature"
        model: sonnet

  solidity-expert:
    depends_on: []
    provides:
      - contract_addresses
      - abi_files
      - deployment_configs
      - contract_interfaces
    parallel_with:
      [tailwind-css-expert, documentation-expert, typescript-expert]
    required_for: [subgraph-dev, orpc-expert, test-dev]
    model: opus # Security-critical smart contracts
    model_override_conditions:
      - condition: "simple_view_functions"
        model: sonnet

  subgraph-dev:
    depends_on:
      - solidity-expert.contract_addresses
      - solidity-expert.abi_files
    provides:
      - graphql_schema
      - indexing_status
      - entity_models
      - query_fragments
    parallel_with: [test-dev, security-auditor]
    required_for: [orpc-expert, react-dev]

  orpc-expert:
    depends_on:
      - solidity-expert.abi_files
      - subgraph-dev.graphql_schema
    provides:
      - api_endpoints
      - openapi_spec
      - route_handlers
      - middleware_configs
    parallel_with: [react-dev, documentation-expert]
    required_for: [react-dev, integration-tester]

  react-dev:
    depends_on:
      - orpc-expert.api_endpoints
      - typescript-expert.type_definitions
    provides:
      - ui_components
      - page_routes
      - state_management
      - user_flows
    parallel_with: [test-dev, tailwind-css-expert]
    required_for: [integration-tester]
    model: sonnet # Well-established UI patterns
    model_override_conditions:
      - condition: "complex_state_management"
        model: opus
      - condition: "performance_critical_rendering"
        model: opus

  database-expert:
    depends_on: []
    provides:
      - schema_definitions
      - migration_files
      - query_optimizations
      - indexes
    parallel_with: [solidity-expert, typescript-expert]
    required_for: [orpc-expert]
    model: sonnet # SQL patterns are standard
    model_override_conditions:
      - condition: "complex_query_optimization"
        model: opus

  typescript-expert:
    depends_on: []
    provides:
      - type_definitions
      - generic_utilities
      - type_guards
      - interface_contracts
    parallel_with: [solidity-expert, database-expert]
    required_for: [orpc-expert, react-dev, test-dev]

  test-dev:
    depends_on:
      - implementation_complete
    provides:
      - unit_tests
      - test_coverage
      - test_utilities
    parallel_with: [documentation-expert]
    required_for: [code-reviewer]
    model: sonnet # Test patterns are repetitive

  integration-tester:
    depends_on:
      - react-dev.ui_components
      - orpc-expert.api_endpoints
    provides:
      - e2e_tests
      - user_journey_tests
      - cross_browser_results
    parallel_with: [performance-optimizer]
    required_for: [code-reviewer]

  security-auditor:
    depends_on:
      - implementation_complete
    provides:
      - vulnerability_report
      - security_recommendations
      - threat_analysis
    parallel_with: [performance-optimizer, test-dev]
    required_for: [production_deployment]
    model: opus # Always use Opus for security analysis

  performance-optimizer:
    depends_on:
      - implementation_complete
    provides:
      - performance_metrics
      - optimization_recommendations
      - bottleneck_analysis
    parallel_with: [security-auditor, integration-tester]
    required_for: [production_deployment]

  documentation-expert:
    depends_on: []
    provides:
      - readme_files
      - api_documentation
      - user_guides
      - inline_documentation
    parallel_with: [any_implementation_agent]
    required_for: [code-reviewer]

  code-reviewer:
    depends_on:
      - all_implementation_complete
      - test-dev.unit_tests
      - integration-tester.e2e_tests
    provides:
      - review_report
      - improvement_suggestions
      - approval_status
    parallel_with: []
    required_for: [task_completion]

  devops:
    depends_on:
      - solidity-expert.deployment_configs
    provides:
      - helm_charts
      - k8s_manifests
      - deployment_scripts
    parallel_with: [ci-cd-expert]
    required_for: [production_deployment]

  ci-cd-expert:
    depends_on:
      - test-dev.unit_tests
      - integration-tester.e2e_tests
    provides:
      - github_workflows
      - deployment_pipelines
      - release_automation
    parallel_with: [devops]
    required_for: [production_deployment]

  observability-expert:
    depends_on:
      - implementation_complete
    provides:
      - monitoring_setup
      - alert_rules
      - dashboard_configs
      - logging_strategy
    parallel_with: [devops, ci-cd-expert]
    required_for: [production_deployment]

  config-expert:
    depends_on: []
    provides:
      - environment_configs
      - secret_management
      - deployment_vars
      - feature_flags
    parallel_with: [devops, observability-expert]
    required_for: [production_deployment]

# Execution phases define optimal parallelization
execution_phases:
  analysis:
    parallel_agents:
      - planner
      - code-archaeologist
      - performance-optimizer
      - security-auditor

  foundation:
    parallel_agents:
      - solidity-expert
      - database-expert
      - typescript-expert
      - config-expert

  integration:
    sequential_groups:
      - group1: [subgraph-dev]
      - group2: [orpc-expert]
      - group3: [react-dev, test-dev]

  quality:
    parallel_agents:
      - integration-tester
      - performance-optimizer
      - security-auditor
      - documentation-expert

  deployment:
    parallel_agents:
      - devops
      - ci-cd-expert
      - observability-expert

  review:
    sequential_agents:
      - code-reviewer
