# Feature Development Workflow
# Optimized workflow for implementing new features

name: feature_development_workflow
description:
  Systematic approach to developing new features with parallel execution

phases:
  - name: analysis
    description: Analyze requirements and existing codebase
    parallel_agents:
      - agent: planner
        model: opus # Complex feature analysis and orchestration
        task: "Analyze feature requirements and create implementation roadmap"
        outputs: [implementation_plan, success_criteria, agent_assignments]

      - agent: code-archaeologist
        model: opus # Deep understanding of existing patterns needed
        task: "Study existing patterns and integration points"
        outputs: [existing_patterns, integration_points, potential_conflicts]

      - agent: performance-optimizer
        model: opus # Performance analysis requires deep understanding
        task: "Establish performance baseline and requirements"
        outputs: [performance_baseline, performance_targets]

      - agent: security-auditor
        model: opus # Security analysis always needs Opus
        task: "Define security requirements and threat model"
        outputs: [security_requirements, threat_model]

  - name: design
    description: Technical design and architecture
    depends_on: [analysis]
    parallel_agents:
      - agent: typescript-expert
        model: sonnet # Type design follows established patterns
        task: "Design type system and interfaces"
        outputs: [type_definitions, interface_contracts]

      - agent: database-expert
        model: sonnet # Schema design has clear patterns
        task: "Design data models and migrations"
        outputs: [schema_design, migration_plan]
        condition: "feature requires data persistence"

      - agent: config-expert
        model: sonnet # Configuration follows templates
        task: "Plan configuration and feature flags"
        outputs: [config_schema, feature_flags]

  - name: foundation
    description: Build foundational components
    depends_on: [design]
    parallel_agents:
      - agent: solidity-expert
        model: opus # Smart contracts always require maximum security
        task: "Implement smart contracts"
        outputs: [contract_addresses, abi_files]
        condition: "feature requires blockchain interaction"

      - agent: database-expert
        model: sonnet # Migration execution follows patterns
        task: "Execute database migrations"
        outputs: [migration_status, indexes_created]
        condition: "feature requires data persistence"

      - agent: typescript-expert
        model: sonnet # Utility implementation is pattern-based
        task: "Implement core type utilities"
        outputs: [type_utils, validators]

  - name: integration_layer
    description: Build integration components
    depends_on: [foundation]
    sequential_groups:
      - group: indexing
        condition: "contracts were deployed"
        agents:
          - agent: subgraph-dev
            model: sonnet # Event indexing follows clear patterns
            task: "Create event indexing for new contracts"
            outputs: [graphql_schema, entity_models]

      - group: api
        agents:
          - agent: orpc-expert
            model: sonnet # API implementation uses established patterns
            task: "Implement API endpoints"
            inputs: [contract_abis, graphql_schema]
            outputs: [api_endpoints, openapi_spec]

      - group: frontend_backend_parallel
        parallel_agents:
          - agent: react-dev
            model: sonnet # Component development follows patterns
            task: "Build UI components"
            inputs: [api_endpoints, type_definitions]
            outputs: [components, pages, hooks]

          - agent: test-dev
            model: sonnet # Test writing is pattern-based
            task: "Write unit tests for utilities"
            outputs: [unit_tests, test_helpers]

  - name: quality_assurance
    description: Comprehensive testing and optimization
    depends_on: [integration_layer]
    parallel_agents:
      - agent: integration-tester
        model: sonnet # E2E testing follows established patterns
        task: "Create E2E tests for user journeys"
        outputs: [e2e_tests, test_results]

      - agent: performance-optimizer
        model: opus # Performance optimization needs deep analysis
        task: "Optimize performance bottlenecks"
        outputs: [performance_report, optimizations]

      - agent: security-auditor
        model: opus # Security audits always require Opus
        task: "Perform security audit"
        outputs: [security_report, vulnerabilities]

      - agent: documentation-expert
        model: sonnet # Documentation follows templates
        task: "Create user and developer documentation"
        outputs: [user_guides, api_docs, inline_docs]

  - name: observability
    description: Add monitoring and observability
    depends_on: [integration_layer]
    parallel_agents:
      - agent: observability-expert
        model: sonnet # Monitoring setup follows patterns
        task: "Add logging, metrics, and error tracking"
        outputs: [monitoring_setup, dashboards]

      - agent: config-expert
        model: sonnet # Configuration is template-based
        task: "Finalize environment configurations"
        outputs: [env_configs, deployment_settings]

  - name: deployment_prep
    description: Prepare for deployment
    depends_on: [quality_assurance, observability]
    parallel_agents:
      - agent: devops
        model: sonnet # Helm/K8s updates follow patterns
        task: "Update Helm charts and K8s configs"
        outputs: [helm_charts, k8s_manifests]
        condition: "feature requires infrastructure changes"

      - agent: ci-cd-expert
        model: sonnet # Pipeline updates are pattern-based
        task: "Update CI/CD pipelines"
        outputs: [github_workflows, deployment_scripts]

  - name: final_review
    description: Final review before release
    depends_on: [deployment_prep]
    sequential_agents:
      - agent: code-reviewer
        model: sonnet # Code review follows established criteria
        task: "Comprehensive code review"
        inputs: [all_outputs]
        outputs: [approval_status, required_changes]

optimization_strategies:
  parallel_execution:
    - "Run independent agents concurrently"
    - "Batch file operations within agents"
    - "Use shared caches for common data"

  token_efficiency:
    - "Use compressed output format"
    - "Cache Context7 documentation"
    - "Reuse type definitions across agents"

  context_preservation:
    - "Pass minimal required context"
    - "Use artifact references instead of content"
    - "Maintain decision log for rationale"

success_metrics:
  - feature_completeness: "All acceptance criteria met"
  - test_coverage: "> 80% code coverage"
  - performance_impact: "< 5% degradation"
  - security_score: "No high/critical vulnerabilities"
  - documentation_coverage: "All public APIs documented"

model_selection_strategy:
  opus_for_analysis:
    - "Feature planning and orchestration (planner)"
    - "Pattern analysis (code-archaeologist)"
    - "Performance baseline (performance-optimizer)"
    - "Security requirements (security-auditor)"
    - "Smart contract implementation (solidity-expert)"
  sonnet_for_implementation:
    - "Type systems and interfaces (typescript-expert)"
    - "Database schemas (database-expert)"
    - "API endpoints (orpc-expert)"
    - "UI components (react-dev)"
    - "Test creation (test-dev)"
    - "Documentation (documentation-expert)"
  parallel_optimization:
    "Use Sonnet for most parallel tasks to reduce latency and cost"
  security_override:
    "Always use Opus for security-critical components regardless of
    parallelization"
