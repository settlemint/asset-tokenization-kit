{
  "abi": [],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The hooks are empty by default (`internal virtual { }`). This means that if an extension      doesn't need to react to a specific lifecycle event, it doesn't need to implement that hook.      The key design principle here is that when an extension *does* override a hook,      it should **always call `super.hookName()` first** within its implementation.      This ensures that if multiple extensions are used and they all override the same hook,      a chain of calls is maintained, allowing all extensions to execute their logic.      For example:      `function _beforeMint(address to, uint256 amount) internal virtual override {`      `    super._beforeMint(to, amount); // Call parent/previous hook first!`      `    // Custom logic for this extension...`      `}`      An 'abstract contract' provides a template or partial implementation, and cannot be deployed directly.      `internal virtual` functions are callable only from the contract itself or derived contracts,      and they are designed to be overridden.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Abstract Contract for SMART Token Operation Hooks\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This abstract contract defines a set of standardized `internal virtual` hook functions         that can be triggered at various points in a SMART token's lifecycle (e.g., before a mint,         after a transfer). Extensions can override these hooks to inject custom logic.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/common/SMARTHooks.sol\":\"SMARTHooks\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/\",\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/\",\":forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/common/SMARTHooks.sol\":{\"keccak256\":\"0x241082e06589edc00accef716c9c745fcc7caa87ad1e50f1edaccdd65d061880\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://6e2a1619cdec07a50661eb676a24a8688d5dc5dbe5b5c60ea5056cdf5b40ce5e\",\"dweb:/ipfs/QmYbJKQSPt7rk5UECsoQxtRSM4wk28kyCSrMBqfZFbFo4d\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/",
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/",
        "forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/",
        "openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/common/SMARTHooks.sol": "SMARTHooks"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/common/SMARTHooks.sol": {
        "keccak256": "0x241082e06589edc00accef716c9c745fcc7caa87ad1e50f1edaccdd65d061880",
        "urls": [
          "bzz-raw://6e2a1619cdec07a50661eb676a24a8688d5dc5dbe5b5c60ea5056cdf5b40ce5e",
          "dweb:/ipfs/QmYbJKQSPt7rk5UECsoQxtRSM4wk28kyCSrMBqfZFbFo4d"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "notice": "This abstract contract defines a set of standardized `internal virtual` hook functions         that can be triggered at various points in a SMART token's lifecycle (e.g., before a mint,         after a transfer). Extensions can override these hooks to inject custom logic."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "The hooks are empty by default (`internal virtual { }`). This means that if an extension      doesn't need to react to a specific lifecycle event, it doesn't need to implement that hook.      The key design principle here is that when an extension *does* override a hook,      it should **always call `super.hookName()` first** within its implementation.      This ensures that if multiple extensions are used and they all override the same hook,      a chain of calls is maintained, allowing all extensions to execute their logic.      For example:      `function _beforeMint(address to, uint256 amount) internal virtual override {`      `    super._beforeMint(to, amount); // Call parent/previous hook first!`      `    // Custom logic for this extension...`      `}`      An 'abstract contract' provides a template or partial implementation, and cannot be deployed directly.      `internal virtual` functions are callable only from the contract itself or derived contracts,      and they are designed to be overridden.",
    "title": "Abstract Contract for SMART Token Operation Hooks"
  },
  "id": 56
}