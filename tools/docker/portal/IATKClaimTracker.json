{
  "abi": [
    {
      "type": "function",
      "name": "getClaimedAmount",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "claimedAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isClaimAmountValid",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "claimedAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "isValid",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isClaimed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "claimed",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "recordClaim",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "claimedAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ClaimRecorded",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "claimedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getClaimedAmount(uint256)": "429c6e5b",
    "isClaimAmountValid(uint256,uint256,uint256)": "bd40bde6",
    "isClaimed(uint256,uint256)": "f364c90c",
    "recordClaim(uint256,uint256,uint256)": "ec5747fe"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimRecorded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"isClaimAmountValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"recordClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"This interface allows for different claim tracking implementations (e.g., bitmap, storage-based).      Implementations should handle partial and full claims efficiently.\",\"events\":{\"ClaimRecorded(uint256,uint256,uint256)\":{\"params\":{\"claimedAmount\":\"The amount claimed.\",\"index\":\"The index of the claim in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"}}},\"kind\":\"dev\",\"methods\":{\"getClaimedAmount(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"claimedAmount\":\"The amount already claimed for this index.\"}},\"isClaimAmountValid(uint256,uint256,uint256)\":{\"params\":{\"claimedAmount\":\"The amount being claimed.\",\"index\":\"The index to check.\",\"totalAmount\":\"The total amount allocated for this index.\"},\"returns\":{\"isValid\":\"True if the new claim amount is valid, false otherwise.\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"index\":\"The index to check in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"},\"returns\":{\"claimed\":\"True if the index has been fully claimed, false otherwise.\"}},\"recordClaim(uint256,uint256,uint256)\":{\"params\":{\"claimedAmount\":\"The amount being claimed.\",\"index\":\"The index of the claim in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"}}},\"title\":\"IATKClaimTracker\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimRecorded(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a claim is recorded for a specific index.\"}},\"kind\":\"user\",\"methods\":{\"getClaimedAmount(uint256)\":{\"notice\":\"Gets the amount already claimed for a specific index.\"},\"isClaimAmountValid(uint256,uint256,uint256)\":{\"notice\":\"Checks if a new claim amount is valid for a specific index.\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"Checks if a claim has been fully claimed for a specific index.\"},\"recordClaim(uint256,uint256,uint256)\":{\"notice\":\"Records a claim for a specific index.\"}},\"notice\":\"Interface for claim tracking strategies in ATK airdrop contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/airdrop/claim-tracker/IATKClaimTracker.sol\":\"IATKClaimTracker\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/system/airdrop/claim-tracker/IATKClaimTracker.sol\":{\"keccak256\":\"0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f\",\"dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimRecorded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getClaimedAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimAmountValid",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "recordClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getClaimedAmount(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "claimedAmount": "The amount already claimed for this index."
            }
          },
          "isClaimAmountValid(uint256,uint256,uint256)": {
            "params": {
              "claimedAmount": "The amount being claimed.",
              "index": "The index to check.",
              "totalAmount": "The total amount allocated for this index."
            },
            "returns": {
              "isValid": "True if the new claim amount is valid, false otherwise."
            }
          },
          "isClaimed(uint256,uint256)": {
            "params": {
              "index": "The index to check in the Merkle tree.",
              "totalAmount": "The total amount allocated for this index."
            },
            "returns": {
              "claimed": "True if the index has been fully claimed, false otherwise."
            }
          },
          "recordClaim(uint256,uint256,uint256)": {
            "params": {
              "claimedAmount": "The amount being claimed.",
              "index": "The index of the claim in the Merkle tree.",
              "totalAmount": "The total amount allocated for this index."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getClaimedAmount(uint256)": {
            "notice": "Gets the amount already claimed for a specific index."
          },
          "isClaimAmountValid(uint256,uint256,uint256)": {
            "notice": "Checks if a new claim amount is valid for a specific index."
          },
          "isClaimed(uint256,uint256)": {
            "notice": "Checks if a claim has been fully claimed for a specific index."
          },
          "recordClaim(uint256,uint256,uint256)": {
            "notice": "Records a claim for a specific index."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/airdrop/claim-tracker/IATKClaimTracker.sol": "IATKClaimTracker"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/system/airdrop/claim-tracker/IATKClaimTracker.sol": {
        "keccak256": "0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be",
        "urls": [
          "bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f",
          "dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "getClaimedAmount(uint256)": {
        "notice": "Gets the amount already claimed for a specific index."
      },
      "isClaimAmountValid(uint256,uint256,uint256)": {
        "notice": "Checks if a new claim amount is valid for a specific index."
      },
      "isClaimed(uint256,uint256)": {
        "notice": "Checks if a claim has been fully claimed for a specific index."
      },
      "recordClaim(uint256,uint256,uint256)": {
        "notice": "Records a claim for a specific index."
      }
    },
    "events": {
      "ClaimRecorded(uint256,uint256,uint256)": {
        "notice": "Emitted when a claim is recorded for a specific index."
      }
    },
    "notice": "Interface for claim tracking strategies in ATK airdrop contracts."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "This interface allows for different claim tracking implementations (e.g., bitmap, storage-based).      Implementations should handle partial and full claims efficiently.",
    "methods": {
      "getClaimedAmount(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "claimedAmount": "The amount already claimed for this index."
        }
      },
      "isClaimAmountValid(uint256,uint256,uint256)": {
        "params": {
          "claimedAmount": "The amount being claimed.",
          "index": "The index to check.",
          "totalAmount": "The total amount allocated for this index."
        },
        "returns": {
          "isValid": "True if the new claim amount is valid, false otherwise."
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "index": "The index to check in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        },
        "returns": {
          "claimed": "True if the index has been fully claimed, false otherwise."
        }
      },
      "recordClaim(uint256,uint256,uint256)": {
        "params": {
          "claimedAmount": "The amount being claimed.",
          "index": "The index of the claim in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        }
      }
    },
    "events": {
      "ClaimRecorded(uint256,uint256,uint256)": {
        "params": {
          "claimedAmount": "The amount claimed.",
          "index": "The index of the claim in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        }
      }
    },
    "title": "IATKClaimTracker"
  },
  "id": 122
}