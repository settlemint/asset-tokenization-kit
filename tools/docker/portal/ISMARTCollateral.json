{
  "abi": [
    {
      "type": "function",
      "name": "findValidCollateralClaim",
      "inputs": [],
      "outputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "issuer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "expiryTimestamp",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "error",
      "name": "InsufficientCollateral",
      "inputs": [
        {
          "name": "required",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "available",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidCollateralTopic",
      "inputs": [
        {
          "name": "topicId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "findValidCollateralClaim()": "b5cb9db3"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"}],\"name\":\"InvalidCollateralTopic\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"findValidCollateralClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InsufficientCollateral(uint256,uint256)\":[{\"details\":\"This error is thrown by the `__collateral_beforeMintLogic` function if a valid collateral claim      is found on the token contract's identity, but the `amount` specified in that claim is less than      what the token's total supply would become *after* the current mint operation.      For example, if the collateral claim specifies a collateral amount (effectively a supply cap) of 1,000,000 tokens,      the current total supply is 900,000, and an attempt is made to mint 200,000 more tokens,      the `required` total supply would be 1,100,000. Since 1,100,000 (required) > 1,000,000 (available), this error occurs.      It also occurs if no valid collateral claim is found (in which case `available` would be 0), unless the      `required` supply is also 0.\",\"params\":{\"available\":\"The collateral amount found in the valid, non-expired claim on the token's identity. This acts as the effective cap.\",\"required\":\"The total supply that would be reached if the mint operation were to proceed (current supply + mint amount).\"}}],\"InvalidCollateralTopic(uint256)\":[{\"details\":\"This error is thrown by the initializer or constructor of the collateral extension      if the provided `collateralProofTopic_` (the ERC-735 claim topic ID) is invalid.      Typically, an invalid topic ID would be `0`, as topic ID 0 is often reserved or considered null.      A valid topic ID is crucial for correctly identifying and verifying the specific collateral claims.\",\"params\":{\"topicId\":\"The invalid topic ID (e.g., 0) that was provided during the contract's initialization.\"}}]},\"kind\":\"dev\",\"methods\":{\"findValidCollateralClaim()\":{\"details\":\"This function is expected to perform several checks:      1. Retrieve claim IDs from the token's identity contract (`this.onchainID()`) for the configured `collateralProofTopic`.      2. For each claim, verify its issuer is trusted for that topic via the `identityRegistry`'s `issuersRegistry`.      3. Confirm the trusted issuer contract itself deems the claim valid (e.g., via `IClaimIssuer.isClaimValid`).      4. Decode the claim data, which is expected to contain a collateral `amount` and an `expiryTimestamp`.      5. Ensure the claim has not expired (i.e., `decodedExpiry > block.timestamp`).      The function should return the details of the *first* claim that successfully passes all these validations.      If no such claim is found, it should return zero values.      This is a `view` function, meaning it reads blockchain state but does not modify it, and thus      does not consume gas when called as a read-only operation from off-chain.\",\"returns\":{\"amount\":\"The collateral amount (e.g., maximum permissible total supply) decoded from the valid claim data.                Returns 0 if no valid collateral claim is found.\",\"expiryTimestamp\":\"The expiry timestamp (Unix time) decoded from the valid claim data.                         Returns 0 if no valid claim is found or if the found claim has already expired.\",\"issuer\":\"The address of the trusted `IClaimIssuer` contract that issued the valid collateral claim.                Returns `address(0)` if no valid claim is found.\"}}},\"title\":\"Interface for SMART Token Collateral Verification\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientCollateral(uint256,uint256)\":[{\"notice\":\"Error: Insufficient collateral to cover the proposed total supply after minting.\"}],\"InvalidCollateralTopic(uint256)\":[{\"notice\":\"Error: An invalid collateral proof topic ID was provided during initialization.\"}]},\"kind\":\"user\",\"methods\":{\"findValidCollateralClaim()\":{\"notice\":\"Attempts to find the first valid collateral claim associated with the token contract's         own OnchainID identity, based on a pre-configured claim topic.\"}},\"notice\":\"This interface defines the external functions for a SMART token extension that verifies         collateral claims before allowing certain operations (typically minting).         The collateral is represented by a specific ERC-735 claim on an OnchainID identity contract.         In Solidity, an interface outlines *what* functions a contract offers publicly but not *how* they work.         This allows for standardized interactions with any contract implementing this collateral logic.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/collateral/ISMARTCollateral.sol\":\"ISMARTCollateral\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/\",\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/\",\":forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/collateral/ISMARTCollateral.sol\":{\"keccak256\":\"0x822bf674043d5c717d66f1b9b21fdafd260db4ab9ec7fe3d59561d90ee72bcdb\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://3ca1244fdd5e5f9737c7d36ce509fa041c41bff32744bb4a46835e49d9d4f0c0\",\"dweb:/ipfs/QmYhtFGkBqL4ZVDErazggigrsd3dYX33D1utbVp3JHB2Ft\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "required",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "available",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InsufficientCollateral"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidCollateralTopic"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "findValidCollateralClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "findValidCollateralClaim()": {
            "details": "This function is expected to perform several checks:      1. Retrieve claim IDs from the token's identity contract (`this.onchainID()`) for the configured `collateralProofTopic`.      2. For each claim, verify its issuer is trusted for that topic via the `identityRegistry`'s `issuersRegistry`.      3. Confirm the trusted issuer contract itself deems the claim valid (e.g., via `IClaimIssuer.isClaimValid`).      4. Decode the claim data, which is expected to contain a collateral `amount` and an `expiryTimestamp`.      5. Ensure the claim has not expired (i.e., `decodedExpiry > block.timestamp`).      The function should return the details of the *first* claim that successfully passes all these validations.      If no such claim is found, it should return zero values.      This is a `view` function, meaning it reads blockchain state but does not modify it, and thus      does not consume gas when called as a read-only operation from off-chain.",
            "returns": {
              "amount": "The collateral amount (e.g., maximum permissible total supply) decoded from the valid claim data.                Returns 0 if no valid collateral claim is found.",
              "expiryTimestamp": "The expiry timestamp (Unix time) decoded from the valid claim data.                         Returns 0 if no valid claim is found or if the found claim has already expired.",
              "issuer": "The address of the trusted `IClaimIssuer` contract that issued the valid collateral claim.                Returns `address(0)` if no valid claim is found."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "findValidCollateralClaim()": {
            "notice": "Attempts to find the first valid collateral claim associated with the token contract's         own OnchainID identity, based on a pre-configured claim topic."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/",
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/",
        "forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/",
        "openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/collateral/ISMARTCollateral.sol": "ISMARTCollateral"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/collateral/ISMARTCollateral.sol": {
        "keccak256": "0x822bf674043d5c717d66f1b9b21fdafd260db4ab9ec7fe3d59561d90ee72bcdb",
        "urls": [
          "bzz-raw://3ca1244fdd5e5f9737c7d36ce509fa041c41bff32744bb4a46835e49d9d4f0c0",
          "dweb:/ipfs/QmYhtFGkBqL4ZVDErazggigrsd3dYX33D1utbVp3JHB2Ft"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "findValidCollateralClaim()": {
        "notice": "Attempts to find the first valid collateral claim associated with the token contract's         own OnchainID identity, based on a pre-configured claim topic."
      }
    },
    "errors": {
      "InsufficientCollateral(uint256,uint256)": [
        {
          "notice": "Error: Insufficient collateral to cover the proposed total supply after minting."
        }
      ],
      "InvalidCollateralTopic(uint256)": [
        {
          "notice": "Error: An invalid collateral proof topic ID was provided during initialization."
        }
      ]
    },
    "notice": "This interface defines the external functions for a SMART token extension that verifies         collateral claims before allowing certain operations (typically minting).         The collateral is represented by a specific ERC-735 claim on an OnchainID identity contract.         In Solidity, an interface outlines *what* functions a contract offers publicly but not *how* they work.         This allows for standardized interactions with any contract implementing this collateral logic."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "findValidCollateralClaim()": {
        "details": "This function is expected to perform several checks:      1. Retrieve claim IDs from the token's identity contract (`this.onchainID()`) for the configured `collateralProofTopic`.      2. For each claim, verify its issuer is trusted for that topic via the `identityRegistry`'s `issuersRegistry`.      3. Confirm the trusted issuer contract itself deems the claim valid (e.g., via `IClaimIssuer.isClaimValid`).      4. Decode the claim data, which is expected to contain a collateral `amount` and an `expiryTimestamp`.      5. Ensure the claim has not expired (i.e., `decodedExpiry > block.timestamp`).      The function should return the details of the *first* claim that successfully passes all these validations.      If no such claim is found, it should return zero values.      This is a `view` function, meaning it reads blockchain state but does not modify it, and thus      does not consume gas when called as a read-only operation from off-chain.",
        "returns": {
          "amount": "The collateral amount (e.g., maximum permissible total supply) decoded from the valid claim data.                Returns 0 if no valid collateral claim is found.",
          "expiryTimestamp": "The expiry timestamp (Unix time) decoded from the valid claim data.                         Returns 0 if no valid claim is found or if the found claim has already expired.",
          "issuer": "The address of the trusted `IClaimIssuer` contract that issued the valid collateral claim.                Returns `address(0)` if no valid claim is found."
        }
      }
    },
    "errors": {
      "InsufficientCollateral(uint256,uint256)": [
        {
          "details": "This error is thrown by the `__collateral_beforeMintLogic` function if a valid collateral claim      is found on the token contract's identity, but the `amount` specified in that claim is less than      what the token's total supply would become *after* the current mint operation.      For example, if the collateral claim specifies a collateral amount (effectively a supply cap) of 1,000,000 tokens,      the current total supply is 900,000, and an attempt is made to mint 200,000 more tokens,      the `required` total supply would be 1,100,000. Since 1,100,000 (required) > 1,000,000 (available), this error occurs.      It also occurs if no valid collateral claim is found (in which case `available` would be 0), unless the      `required` supply is also 0.",
          "params": {
            "available": "The collateral amount found in the valid, non-expired claim on the token's identity. This acts as the effective cap.",
            "required": "The total supply that would be reached if the mint operation were to proceed (current supply + mint amount)."
          }
        }
      ],
      "InvalidCollateralTopic(uint256)": [
        {
          "details": "This error is thrown by the initializer or constructor of the collateral extension      if the provided `collateralProofTopic_` (the ERC-735 claim topic ID) is invalid.      Typically, an invalid topic ID would be `0`, as topic ID 0 is often reserved or considered null.      A valid topic ID is crucial for correctly identifying and verifying the specific collateral claims.",
          "params": {
            "topicId": "The invalid topic ID (e.g., 0) that was provided during the contract's initialization."
          }
        }
      ]
    },
    "title": "Interface for SMART Token Collateral Verification"
  },
  "id": 44
}