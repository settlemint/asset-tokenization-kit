{
  "abi": [
    {
      "type": "function",
      "name": "addonImplementation",
      "inputs": [
        {
          "name": "addonTypeHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "addonProxy",
      "inputs": [
        {
          "name": "addonTypeHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "bootstrap",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "complianceImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "complianceImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "complianceProxy",
      "inputs": [],
      "outputs": [
        {
          "name": "complianceProxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "createSystemAddon",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "implementation",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "initializationData",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "proxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "createTokenFactory",
      "inputs": [
        {
          "name": "_name",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "_factoryImplementation",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_tokenImplementation",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "identityFactoryImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "identityFactoryImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityFactoryProxy",
      "inputs": [],
      "outputs": [
        {
          "name": "identityFactoryProxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "identityImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityRegistryImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "identityRegistryImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityRegistryProxy",
      "inputs": [],
      "outputs": [
        {
          "name": "identityRegistryProxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityRegistryStorageImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "identityRegistryStorageImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityRegistryStorageProxy",
      "inputs": [],
      "outputs": [
        {
          "name": "identityRegistryStorageProxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityVerificationModule",
      "inputs": [],
      "outputs": [
        {
          "name": "identityVerificationModuleAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tokenAccessManagerImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "tokenAccessManagerImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tokenFactoryImplementation",
      "inputs": [
        {
          "name": "factoryTypeHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tokenFactoryProxy",
      "inputs": [
        {
          "name": "factoryTypeHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tokenIdentityImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "tokenIdentityImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "topicSchemeRegistryImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "topicSchemeRegistryImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "topicSchemeRegistryProxy",
      "inputs": [],
      "outputs": [
        {
          "name": "topicSchemeRegistryProxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "trustedIssuersRegistryImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "trustedIssuersRegistryImplementationAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "trustedIssuersRegistryProxy",
      "inputs": [],
      "outputs": [
        {
          "name": "trustedIssuersRegistryProxyAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "Bootstrapped",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "complianceProxy",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "identityRegistryProxy",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "identityRegistryStorageProxy",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "trustedIssuersRegistryProxy",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "topicSchemeRegistryProxy",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "identityFactoryProxy",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "identityVerificationModule",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ComplianceImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityFactoryImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRegistryImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRegistryStorageImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SystemAddonCreated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "name",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "typeId",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "proxyAddress",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "implementation",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "initializationData",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        },
        {
          "name": "timestamp",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokenAccessManagerImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokenFactoryCreated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "name",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "typeId",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "proxyAddress",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "implementationAddress",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "timestamp",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokenIdentityImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TopicSchemeRegistryImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TrustedIssuersRegistryImplementationUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newImplementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addonImplementation(bytes32)": "e1554666",
    "addonProxy(bytes32)": "b00a0fdc",
    "bootstrap()": "fb969b0a",
    "complianceImplementation()": "917fc629",
    "complianceProxy()": "98468e51",
    "createSystemAddon(string,address,bytes)": "157f1181",
    "createTokenFactory(string,address,address)": "e277d07d",
    "identityFactoryImplementation()": "e32d4b67",
    "identityFactoryProxy()": "78e72222",
    "identityImplementation()": "6d7203cb",
    "identityRegistryImplementation()": "a18dd9ea",
    "identityRegistryProxy()": "d62def8f",
    "identityRegistryStorageImplementation()": "6dbe06f5",
    "identityRegistryStorageProxy()": "72b3f57e",
    "identityVerificationModule()": "c8b5d911",
    "supportsInterface(bytes4)": "01ffc9a7",
    "tokenAccessManagerImplementation()": "44eecc17",
    "tokenFactoryImplementation(bytes32)": "1cece55f",
    "tokenFactoryProxy(bytes32)": "139aca99",
    "tokenIdentityImplementation()": "3cdbceda",
    "topicSchemeRegistryImplementation()": "588aa306",
    "topicSchemeRegistryProxy()": "7d6b252e",
    "trustedIssuersRegistryImplementation()": "39b14cdf",
    "trustedIssuersRegistryProxy()": "d907c456"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"complianceProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityRegistryProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityRegistryStorageProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedIssuersRegistryProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"topicSchemeRegistryProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityFactoryProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityVerificationModule\",\"type\":\"address\"}],\"name\":\"Bootstrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ComplianceImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"IdentityFactoryImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"IdentityImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"IdentityRegistryImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"IdentityRegistryStorageImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"initializationData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SystemAddonCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"TokenAccessManagerImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenFactoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"TokenIdentityImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"TopicSchemeRegistryImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"TrustedIssuersRegistryImplementationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"addonTypeHash\",\"type\":\"bytes32\"}],\"name\":\"addonImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"addonTypeHash\",\"type\":\"bytes32\"}],\"name\":\"addonProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complianceImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"complianceImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complianceProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"complianceProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initializationData\",\"type\":\"bytes\"}],\"name\":\"createSystemAddon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factoryImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenImplementation\",\"type\":\"address\"}],\"name\":\"createTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityFactoryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityFactoryImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityFactoryProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityFactoryProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityRegistryImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistryProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityRegistryProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistryStorageImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityRegistryStorageImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistryStorageProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityRegistryStorageProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityVerificationModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityVerificationModuleAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAccessManagerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAccessManagerImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"factoryTypeHash\",\"type\":\"bytes32\"}],\"name\":\"tokenFactoryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"factoryTypeHash\",\"type\":\"bytes32\"}],\"name\":\"tokenFactoryProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdentityImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenIdentityImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicSchemeRegistryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"topicSchemeRegistryImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicSchemeRegistryProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"topicSchemeRegistryProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedIssuersRegistryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedIssuersRegistryImplementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedIssuersRegistryProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedIssuersRegistryProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"The ATK System contract serves as the main hub and discovery point for various modules and features within the ATK Protocol. It allows other contracts and external users to find the addresses of crucial components like compliance modules, identity registries, and their corresponding proxy contracts. These proxies are important because they enable these components to be upgraded in the future without altering the addresses that other parts of the system use to interact with them, ensuring stability and maintainability.\",\"events\":{\"Bootstrapped(address,address,address,address,address,address,address,address)\":{\"params\":{\"complianceProxy\":\"The address of the deployed ATKComplianceProxy contract.\",\"identityFactoryProxy\":\"The address of the deployed ATKIdentityFactoryProxy contract.\",\"identityRegistryProxy\":\"The address of the deployed ATKIdentityRegistryProxy contract.\",\"identityRegistryStorageProxy\":\"The address of the deployed ATKIdentityRegistryStorageProxy contract.\",\"identityVerificationModule\":\"The address of the deployed IdentityVerificationModule contract.\",\"sender\":\"The address that called the `bootstrap` function.\",\"topicSchemeRegistryProxy\":\"The address of the deployed ATKTopicSchemeRegistryProxy contract.\",\"trustedIssuersRegistryProxy\":\"The address of the deployed ATKTrustedIssuersRegistryProxy contract.\"}},\"ComplianceImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new compliance module implementation contract.\",\"sender\":\"The address that called the `updateComplianceImplementation` function.\"}},\"IdentityFactoryImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new identity factory module implementation contract.\",\"sender\":\"The address that called the `updateIdentityFactoryImplementation` function.\"}},\"IdentityImplementationUpdated(address,address)\":{\"details\":\"Standard identity contracts are typically used to represent users or general entities.\",\"params\":{\"newImplementation\":\"The address of the new standard identity module implementation contract.\",\"sender\":\"The address that called the `updateIdentityImplementation` function.\"}},\"IdentityRegistryImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new identity registry module implementation contract.\",\"sender\":\"The address that called the `updateIdentityRegistryImplementation` function.\"}},\"IdentityRegistryStorageImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new identity registry storage module implementation contract.\",\"sender\":\"The address that called the `updateIdentityRegistryStorageImplementation` function.\"}},\"SystemAddonCreated(address,string,bytes32,address,address,bytes,uint256)\":{\"params\":{\"implementation\":\"The address of the deployed system addon implementation.\",\"initializationData\":\"The encoded function call to initialize the system addon.\",\"name\":\"The human-readable name of the system addon.\",\"proxyAddress\":\"The address of the deployed system addon proxy.\",\"sender\":\"The address that created the system addon.\",\"timestamp\":\"The timestamp of the system addon creation.\",\"typeId\":\"The type identifier of the system addon.\"}},\"TokenAccessManagerImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new token access manager module implementation contract.\",\"sender\":\"The address that called the `updateTokenAccessManagerImplementation` function.\"}},\"TokenFactoryCreated(address,string,bytes32,address,address,uint256)\":{\"params\":{\"implementationAddress\":\"The address of the deployed token factory implementation.\",\"name\":\"The human-readable name of the token factory.\",\"proxyAddress\":\"The address of the deployed token factory proxy.\",\"sender\":\"The address that registered the token factory.\",\"timestamp\":\"The timestamp of the token factory creation.\",\"typeId\":\"The type identifier of the token factory.\"}},\"TokenIdentityImplementationUpdated(address,address)\":{\"details\":\"Token identity contracts might be specialized identities associated with specific tokens.\",\"params\":{\"newImplementation\":\"The address of the new token identity module implementation contract.\",\"sender\":\"The address that called the `updateTokenIdentityImplementation` function.\"}},\"TopicSchemeRegistryImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new topic scheme registry module implementation contract.\",\"sender\":\"The address that called the `updateTopicSchemeRegistryImplementation` function.\"}},\"TrustedIssuersRegistryImplementationUpdated(address,address)\":{\"params\":{\"newImplementation\":\"The address of the new trusted issuers registry module implementation contract.\",\"sender\":\"The address that called the `updateTrustedIssuersRegistryImplementation` function.\"}}},\"kind\":\"dev\",\"methods\":{\"addonImplementation(bytes32)\":{\"params\":{\"addonTypeHash\":\"The hash of the addon type.\"},\"returns\":{\"_0\":\"The address of the system addon implementation contract.\"}},\"addonProxy(bytes32)\":{\"params\":{\"addonTypeHash\":\"The hash of the addon type.\"},\"returns\":{\"_0\":\"The address of the system addon proxy contract.\"}},\"bootstrap()\":{\"details\":\"This function is responsible for the initial deployment and configuration of the ATK Protocol. This involves deploying necessary smart contracts, setting initial parameters, and defining the relationships and connections between different components of the system. It is critically important that this function is called only ONCE during the very first deployment of the protocol. Attempting to call it more than once could result in severe errors, misconfigurations, or unpredictable behavior in the protocol's operation.\"},\"complianceImplementation()\":{\"details\":\"Compliance modules are responsible for enforcing rules and restrictions on token transfers, account interactions, or other operations within the ATK Protocol. For example, they might check if a transfer is allowed based on regulatory requirements. This function returns the specific address of the contract that holds the actual programming code (the \\\"logic\\\") for these compliance checks. It's important to note that this address can change if the compliance logic is updated or upgraded to a new version.\",\"returns\":{\"complianceImplementationAddress\":\"The blockchain address of the smart contract containing the compliance logic.\"}},\"complianceProxy()\":{\"details\":\"A proxy contract is an intermediary contract that delegates all function calls it receives to another contract, known as the implementation contract (which contains the actual logic). The primary benefit of using a proxy is that the underlying logic (implementation) can be upgraded without changing the address that other contracts or users interact with. This provides flexibility and allows for bug fixes or feature additions without disrupting the ecosystem. This function returns the stable, unchanging address of the compliance module's proxy contract. All interactions with the compliance module should go through this proxy address.\",\"returns\":{\"complianceProxyAddress\":\"The blockchain address of the compliance module's proxy contract.\"}},\"createSystemAddon(string,address,bytes)\":{\"params\":{\"implementation\":\"The address of the logic contract to use for the proxy.\",\"initializationData\":\"Encoded function call to initialize the proxy (e.g., abi.encodeWithSelector(...)).\",\"name\":\"A human-readable identifier (e.g., \\\"Swap\\\", \\\"YieldContract\\\").\"},\"returns\":{\"proxyAddress\":\"The address of the newly deployed proxy.\"}},\"createTokenFactory(string,address,address)\":{\"params\":{\"_factoryImplementation\":\"The address of the token factory implementation contract.\",\"_name\":\"The human-readable name of the token factory.\",\"_tokenImplementation\":\"The address of the token implementation contract.\"}},\"identityFactoryImplementation()\":{\"details\":\"Identity factories are responsible for the creation of new identity contracts or records within the ATK Protocol. They provide a standardized way to onboard new users or entities and associate them with an on-chain identity. This function returns the specific address of the contract that holds the actual programming code (the \\\"logic\\\") for this identity creation process. This address can change if the identity factory's logic is upgraded.\",\"returns\":{\"identityFactoryImplementationAddress\":\"The blockchain address of the smart contract containing the identity factory logic.\"}},\"identityFactoryProxy()\":{\"details\":\"This function returns the stable, unchanging address of the identity factory's proxy contract. To create new identities within the ATK Protocol, you should interact with this proxy address. It will delegate the identity creation requests to the current active logic implementation of the identity factory.\",\"returns\":{\"identityFactoryProxyAddress\":\"The blockchain address of the identity factory module's proxy contract.\"}},\"identityImplementation()\":{\"details\":\"Standard identity contracts are the actual on-chain representations of individual users, organizations, or entities within the ATK Protocol. These contracts typically hold claims and attributes related to an identity. This function returns the address of the base implementation (template) contract that new standard identity contracts will be created from (often via a proxy pattern). This address can change if the underlying logic for standard identity contracts is upgraded.\",\"returns\":{\"identityImplementationAddress\":\"The blockchain address of the smart contract containing the standard identity logic.\"}},\"identityRegistryImplementation()\":{\"details\":\"Identity registries are a core component for managing information about users, organizations, or any entity interacting with ATK tokens. This can include details like Know Your Customer (KYC) / Anti-Money Laundering (AML) status, investor qualifications, country of residence, or other relevant identity attributes. This function returns the specific address of the contract that holds the actual programming code (the \\\"logic\\\") for the identity registry. Similar to other modules, this address can change if the identity registry's logic is upgraded.\",\"returns\":{\"identityRegistryImplementationAddress\":\"The blockchain address of the smart contract containing the identity registry logic.\"}},\"identityRegistryProxy()\":{\"details\":\"Similar to the compliance proxy, this function returns the stable, unchanging address of the identity registry's proxy contract. To interact with the identity registry (e.g., to query identity information or register a new identity, depending on its features), you should use this proxy address. It will automatically forward your requests to the current logic implementation contract.\",\"returns\":{\"identityRegistryProxyAddress\":\"The blockchain address of the identity registry module's proxy contract.\"}},\"identityRegistryStorageImplementation()\":{\"details\":\"Identity registry storage modules are dedicated to securely and efficiently storing the data associated with the identities managed by the identity registry. This separation of logic and storage can enhance security and upgradeability. This function returns the specific address of the contract that holds the actual programming code (the \\\"logic\\\") for managing this identity data storage. This address may change if the storage management logic is upgraded or if data is migrated to a new storage system.\",\"returns\":{\"identityRegistryStorageImplementationAddress\":\"The blockchain address of the smart contract containing the identity registry storage logic.\"}},\"identityRegistryStorageProxy()\":{\"details\":\"This function returns the stable, unchanging address of the identity registry storage's proxy contract. All interactions related to storing or retrieving identity data should go through this proxy address. It ensures that calls are directed to the current logic implementation for identity data management.\",\"returns\":{\"identityRegistryStorageProxyAddress\":\"The blockchain address of the identity registry storage module's proxy contract.\"}},\"identityVerificationModule()\":{\"details\":\"This function returns the stable, unchanging address of the identity verification module's proxy contract. To interact with the identity verification module (e.g., to verify an identity or check verification status), you should use this proxy address. It will forward calls to the current logic implementation.\",\"returns\":{\"identityVerificationModuleAddress\":\"The blockchain address of the identity verification module's proxy.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenAccessManagerImplementation()\":{\"details\":\"Token access managers are responsible for managing access control for tokens. This function returns the address of the base implementation (template) contract that new token access managers will be created from. This address can change if the underlying logic for token access managers is upgraded.\",\"returns\":{\"tokenAccessManagerImplementationAddress\":\"The blockchain address of the smart contract containing the\"}},\"tokenFactoryImplementation(bytes32)\":{\"params\":{\"factoryTypeHash\":\"The hash of the factory type.\"},\"returns\":{\"_0\":\"The address of the token factory implementation contract.\"}},\"tokenFactoryProxy(bytes32)\":{\"params\":{\"factoryTypeHash\":\"The hash of the factory type.\"},\"returns\":{\"_0\":\"The address of the token factory proxy contract.\"}},\"tokenIdentityImplementation()\":{\"details\":\"Token identity contracts are a specialized type of identity contract that might be specifically linked to certain tokens, tokenized assets, or have features tailored for token interactions. This function returns the address of the base implementation (template) contract that new token identity contracts will be created from. This address can change if the underlying logic for token identity contracts is upgraded.\",\"returns\":{\"tokenIdentityImplementationAddress\":\"The blockchain address of the smart contract containing the token identity logic.\"}},\"topicSchemeRegistryImplementation()\":{\"details\":\"Topic scheme registries manage the registration and lifecycle of topic schemes used for claim data structures. They store mapping between topic IDs and their corresponding signatures for encoding/decoding claim data. This function returns the specific address of the contract that holds the actual programming code (the \\\"logic\\\") for managing topic schemes. This address can change if the topic scheme registry's logic is upgraded.\",\"returns\":{\"topicSchemeRegistryImplementationAddress\":\"The blockchain address of the smart contract containing the topic scheme registry logic.\"}},\"topicSchemeRegistryProxy()\":{\"details\":\"This function returns the stable, unchanging address of the topic scheme registry's proxy contract. To interact with the topic scheme registry (e.g., to register topic schemes or retrieve topic signatures), you should use this proxy address. It will forward calls to the current logic implementation.\",\"returns\":{\"topicSchemeRegistryProxyAddress\":\"The blockchain address of the topic scheme registry module's proxy.\"}},\"trustedIssuersRegistryImplementation()\":{\"details\":\"Trusted issuers registries play a crucial role in decentralized identity systems. They maintain a list of entities (known as \\\"issuers,\\\" such as KYC providers, accreditation bodies, etc.) that are authorized and trusted to make verifiable claims or attestations about identities (e.g., \\\"User X is KYC verified,\\\" \\\"Entity Y is an accredited investor\\\"). This function returns the specific address of the contract that holds the actual programming code (the \\\"logic\\\") for managing this list of trusted issuers. This address can change if the trusted issuers registry's logic is upgraded.\",\"returns\":{\"trustedIssuersRegistryImplementationAddress\":\"The blockchain address of the smart contract containing the trusted issuers registry logic.\"}},\"trustedIssuersRegistryProxy()\":{\"details\":\"This function returns the stable, unchanging address of the trusted issuers registry's proxy contract. To interact with the trusted issuers registry (e.g., to check if an issuer is trusted or to add/remove issuers, depending on its features), you should use this proxy address. It will forward calls to the current logic implementation.\",\"returns\":{\"trustedIssuersRegistryProxyAddress\":\"The blockchain address of the trusted issuers registry module's proxy.\"}}},\"title\":\"IATKSystem Interface\",\"version\":1},\"userdoc\":{\"events\":{\"Bootstrapped(address,address,address,address,address,address,address,address)\":{\"notice\":\"Emitted when the `bootstrap` function has been successfully executed, creating and linking proxy contracts for all core modules of the ATKSystem.\"},\"ComplianceImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the compliance module is updated.\"},\"IdentityFactoryImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the identity factory module is updated.\"},\"IdentityImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the standard identity module is updated.\"},\"IdentityRegistryImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the identity registry module is updated.\"},\"IdentityRegistryStorageImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the identity registry storage module is updated.\"},\"SystemAddonCreated(address,string,bytes32,address,address,bytes,uint256)\":{\"notice\":\"Emitted when a system addon is created.\"},\"TokenAccessManagerImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the token access manager module is updated.\"},\"TokenFactoryCreated(address,string,bytes32,address,address,uint256)\":{\"notice\":\"Emitted when a ATKTokenFactory is registered.\"},\"TokenIdentityImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the token identity module is updated.\"},\"TopicSchemeRegistryImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the topic scheme registry module is updated.\"},\"TrustedIssuersRegistryImplementationUpdated(address,address)\":{\"notice\":\"Emitted when the implementation (logic contract) for the trusted issuers registry module is updated.\"}},\"kind\":\"user\",\"methods\":{\"addonImplementation(bytes32)\":{\"notice\":\"Returns the address of the current system addon implementation.\"},\"addonProxy(bytes32)\":{\"notice\":\"Returns the address of the system addon proxy.\"},\"bootstrap()\":{\"notice\":\"Initializes and sets up the entire ATK Protocol system.\"},\"complianceImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the compliance module's logic.\"},\"complianceProxy()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the compliance module.\"},\"createSystemAddon(string,address,bytes)\":{\"notice\":\"Deploys and registers a new system addon with a proxy and initializer.\"},\"createTokenFactory(string,address,address)\":{\"notice\":\"Creates a new token factory implementation and proxy.\"},\"identityFactoryImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the identity factory module's logic.\"},\"identityFactoryProxy()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the identity factory module.\"},\"identityImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the standard identity contract's logic.\"},\"identityRegistryImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the identity registry module's logic.\"},\"identityRegistryProxy()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the identity registry module.\"},\"identityRegistryStorageImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the identity registry storage module's logic.\"},\"identityRegistryStorageProxy()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the identity registry storage module.\"},\"identityVerificationModule()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the identity verification module.\"},\"tokenAccessManagerImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the token access manager contract's logic.\"},\"tokenFactoryImplementation(bytes32)\":{\"notice\":\"Returns the address of the current token registry implementation.\"},\"tokenFactoryProxy(bytes32)\":{\"notice\":\"Returns the address of the token factory proxy.\"},\"tokenIdentityImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the token identity contract's logic.\"},\"topicSchemeRegistryImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the topic scheme registry module's logic.\"},\"topicSchemeRegistryProxy()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the topic scheme registry module.\"},\"trustedIssuersRegistryImplementation()\":{\"notice\":\"Retrieves the current, active smart contract address of the trusted issuers registry module's logic.\"},\"trustedIssuersRegistryProxy()\":{\"notice\":\"Retrieves the smart contract address of the proxy for the trusted issuers registry module.\"}},\"notice\":\"This interface outlines the essential functions for interacting with the ATK Protocol's central system contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/IATKSystem.sol\":\"IATKSystem\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/system/IATKSystem.sol\":{\"keccak256\":\"0x7b73d0d749af9b20cd90386faeec76ba4c07caddad3156583aebedd4ac8607ca\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://134f12d8f281615b7997c659a77723e6d29312b01fe09dfa2e02b39b39ec3ad9\",\"dweb:/ipfs/QmSPTaTr2vQDZCjVaPBazLXbA3YsYb6bKn2c52RawZbo2g\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "complianceProxy",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "identityRegistryProxy",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "identityRegistryStorageProxy",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "trustedIssuersRegistryProxy",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "topicSchemeRegistryProxy",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "identityFactoryProxy",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "identityVerificationModule",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Bootstrapped",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ComplianceImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityFactoryImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityRegistryImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityRegistryStorageImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "typeId",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "proxyAddress",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "initializationData",
              "type": "bytes",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SystemAddonCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TokenAccessManagerImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "typeId",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "proxyAddress",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "implementationAddress",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenFactoryCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TokenIdentityImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TopicSchemeRegistryImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TrustedIssuersRegistryImplementationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "addonTypeHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "addonImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "addonTypeHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "addonProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "bootstrap"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "complianceImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "complianceImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "complianceProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "complianceProxyAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "initializationData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createSystemAddon",
          "outputs": [
            {
              "internalType": "address",
              "name": "proxyAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_factoryImplementation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenImplementation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createTokenFactory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityFactoryImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityFactoryImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityFactoryProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityFactoryProxyAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityRegistryImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityRegistryImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityRegistryProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityRegistryProxyAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityRegistryStorageImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityRegistryStorageImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityRegistryStorageProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityRegistryStorageProxyAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityVerificationModule",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityVerificationModuleAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenAccessManagerImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "tokenAccessManagerImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "factoryTypeHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenFactoryImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "factoryTypeHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenFactoryProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenIdentityImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "tokenIdentityImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "topicSchemeRegistryImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "topicSchemeRegistryImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "topicSchemeRegistryProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "topicSchemeRegistryProxyAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedIssuersRegistryImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "trustedIssuersRegistryImplementationAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedIssuersRegistryProxy",
          "outputs": [
            {
              "internalType": "address",
              "name": "trustedIssuersRegistryProxyAddress",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addonImplementation(bytes32)": {
            "params": {
              "addonTypeHash": "The hash of the addon type."
            },
            "returns": {
              "_0": "The address of the system addon implementation contract."
            }
          },
          "addonProxy(bytes32)": {
            "params": {
              "addonTypeHash": "The hash of the addon type."
            },
            "returns": {
              "_0": "The address of the system addon proxy contract."
            }
          },
          "bootstrap()": {
            "details": "This function is responsible for the initial deployment and configuration of the ATK Protocol. This involves deploying necessary smart contracts, setting initial parameters, and defining the relationships and connections between different components of the system. It is critically important that this function is called only ONCE during the very first deployment of the protocol. Attempting to call it more than once could result in severe errors, misconfigurations, or unpredictable behavior in the protocol's operation."
          },
          "complianceImplementation()": {
            "details": "Compliance modules are responsible for enforcing rules and restrictions on token transfers, account interactions, or other operations within the ATK Protocol. For example, they might check if a transfer is allowed based on regulatory requirements. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for these compliance checks. It's important to note that this address can change if the compliance logic is updated or upgraded to a new version.",
            "returns": {
              "complianceImplementationAddress": "The blockchain address of the smart contract containing the compliance logic."
            }
          },
          "complianceProxy()": {
            "details": "A proxy contract is an intermediary contract that delegates all function calls it receives to another contract, known as the implementation contract (which contains the actual logic). The primary benefit of using a proxy is that the underlying logic (implementation) can be upgraded without changing the address that other contracts or users interact with. This provides flexibility and allows for bug fixes or feature additions without disrupting the ecosystem. This function returns the stable, unchanging address of the compliance module's proxy contract. All interactions with the compliance module should go through this proxy address.",
            "returns": {
              "complianceProxyAddress": "The blockchain address of the compliance module's proxy contract."
            }
          },
          "createSystemAddon(string,address,bytes)": {
            "params": {
              "implementation": "The address of the logic contract to use for the proxy.",
              "initializationData": "Encoded function call to initialize the proxy (e.g., abi.encodeWithSelector(...)).",
              "name": "A human-readable identifier (e.g., \"Swap\", \"YieldContract\")."
            },
            "returns": {
              "proxyAddress": "The address of the newly deployed proxy."
            }
          },
          "createTokenFactory(string,address,address)": {
            "params": {
              "_factoryImplementation": "The address of the token factory implementation contract.",
              "_name": "The human-readable name of the token factory.",
              "_tokenImplementation": "The address of the token implementation contract."
            }
          },
          "identityFactoryImplementation()": {
            "details": "Identity factories are responsible for the creation of new identity contracts or records within the ATK Protocol. They provide a standardized way to onboard new users or entities and associate them with an on-chain identity. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for this identity creation process. This address can change if the identity factory's logic is upgraded.",
            "returns": {
              "identityFactoryImplementationAddress": "The blockchain address of the smart contract containing the identity factory logic."
            }
          },
          "identityFactoryProxy()": {
            "details": "This function returns the stable, unchanging address of the identity factory's proxy contract. To create new identities within the ATK Protocol, you should interact with this proxy address. It will delegate the identity creation requests to the current active logic implementation of the identity factory.",
            "returns": {
              "identityFactoryProxyAddress": "The blockchain address of the identity factory module's proxy contract."
            }
          },
          "identityImplementation()": {
            "details": "Standard identity contracts are the actual on-chain representations of individual users, organizations, or entities within the ATK Protocol. These contracts typically hold claims and attributes related to an identity. This function returns the address of the base implementation (template) contract that new standard identity contracts will be created from (often via a proxy pattern). This address can change if the underlying logic for standard identity contracts is upgraded.",
            "returns": {
              "identityImplementationAddress": "The blockchain address of the smart contract containing the standard identity logic."
            }
          },
          "identityRegistryImplementation()": {
            "details": "Identity registries are a core component for managing information about users, organizations, or any entity interacting with ATK tokens. This can include details like Know Your Customer (KYC) / Anti-Money Laundering (AML) status, investor qualifications, country of residence, or other relevant identity attributes. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for the identity registry. Similar to other modules, this address can change if the identity registry's logic is upgraded.",
            "returns": {
              "identityRegistryImplementationAddress": "The blockchain address of the smart contract containing the identity registry logic."
            }
          },
          "identityRegistryProxy()": {
            "details": "Similar to the compliance proxy, this function returns the stable, unchanging address of the identity registry's proxy contract. To interact with the identity registry (e.g., to query identity information or register a new identity, depending on its features), you should use this proxy address. It will automatically forward your requests to the current logic implementation contract.",
            "returns": {
              "identityRegistryProxyAddress": "The blockchain address of the identity registry module's proxy contract."
            }
          },
          "identityRegistryStorageImplementation()": {
            "details": "Identity registry storage modules are dedicated to securely and efficiently storing the data associated with the identities managed by the identity registry. This separation of logic and storage can enhance security and upgradeability. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for managing this identity data storage. This address may change if the storage management logic is upgraded or if data is migrated to a new storage system.",
            "returns": {
              "identityRegistryStorageImplementationAddress": "The blockchain address of the smart contract containing the identity registry storage logic."
            }
          },
          "identityRegistryStorageProxy()": {
            "details": "This function returns the stable, unchanging address of the identity registry storage's proxy contract. All interactions related to storing or retrieving identity data should go through this proxy address. It ensures that calls are directed to the current logic implementation for identity data management.",
            "returns": {
              "identityRegistryStorageProxyAddress": "The blockchain address of the identity registry storage module's proxy contract."
            }
          },
          "identityVerificationModule()": {
            "details": "This function returns the stable, unchanging address of the identity verification module's proxy contract. To interact with the identity verification module (e.g., to verify an identity or check verification status), you should use this proxy address. It will forward calls to the current logic implementation.",
            "returns": {
              "identityVerificationModuleAddress": "The blockchain address of the identity verification module's proxy."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "tokenAccessManagerImplementation()": {
            "details": "Token access managers are responsible for managing access control for tokens. This function returns the address of the base implementation (template) contract that new token access managers will be created from. This address can change if the underlying logic for token access managers is upgraded.",
            "returns": {
              "tokenAccessManagerImplementationAddress": "The blockchain address of the smart contract containing the"
            }
          },
          "tokenFactoryImplementation(bytes32)": {
            "params": {
              "factoryTypeHash": "The hash of the factory type."
            },
            "returns": {
              "_0": "The address of the token factory implementation contract."
            }
          },
          "tokenFactoryProxy(bytes32)": {
            "params": {
              "factoryTypeHash": "The hash of the factory type."
            },
            "returns": {
              "_0": "The address of the token factory proxy contract."
            }
          },
          "tokenIdentityImplementation()": {
            "details": "Token identity contracts are a specialized type of identity contract that might be specifically linked to certain tokens, tokenized assets, or have features tailored for token interactions. This function returns the address of the base implementation (template) contract that new token identity contracts will be created from. This address can change if the underlying logic for token identity contracts is upgraded.",
            "returns": {
              "tokenIdentityImplementationAddress": "The blockchain address of the smart contract containing the token identity logic."
            }
          },
          "topicSchemeRegistryImplementation()": {
            "details": "Topic scheme registries manage the registration and lifecycle of topic schemes used for claim data structures. They store mapping between topic IDs and their corresponding signatures for encoding/decoding claim data. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for managing topic schemes. This address can change if the topic scheme registry's logic is upgraded.",
            "returns": {
              "topicSchemeRegistryImplementationAddress": "The blockchain address of the smart contract containing the topic scheme registry logic."
            }
          },
          "topicSchemeRegistryProxy()": {
            "details": "This function returns the stable, unchanging address of the topic scheme registry's proxy contract. To interact with the topic scheme registry (e.g., to register topic schemes or retrieve topic signatures), you should use this proxy address. It will forward calls to the current logic implementation.",
            "returns": {
              "topicSchemeRegistryProxyAddress": "The blockchain address of the topic scheme registry module's proxy."
            }
          },
          "trustedIssuersRegistryImplementation()": {
            "details": "Trusted issuers registries play a crucial role in decentralized identity systems. They maintain a list of entities (known as \"issuers,\" such as KYC providers, accreditation bodies, etc.) that are authorized and trusted to make verifiable claims or attestations about identities (e.g., \"User X is KYC verified,\" \"Entity Y is an accredited investor\"). This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for managing this list of trusted issuers. This address can change if the trusted issuers registry's logic is upgraded.",
            "returns": {
              "trustedIssuersRegistryImplementationAddress": "The blockchain address of the smart contract containing the trusted issuers registry logic."
            }
          },
          "trustedIssuersRegistryProxy()": {
            "details": "This function returns the stable, unchanging address of the trusted issuers registry's proxy contract. To interact with the trusted issuers registry (e.g., to check if an issuer is trusted or to add/remove issuers, depending on its features), you should use this proxy address. It will forward calls to the current logic implementation.",
            "returns": {
              "trustedIssuersRegistryProxyAddress": "The blockchain address of the trusted issuers registry module's proxy."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addonImplementation(bytes32)": {
            "notice": "Returns the address of the current system addon implementation."
          },
          "addonProxy(bytes32)": {
            "notice": "Returns the address of the system addon proxy."
          },
          "bootstrap()": {
            "notice": "Initializes and sets up the entire ATK Protocol system."
          },
          "complianceImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the compliance module's logic."
          },
          "complianceProxy()": {
            "notice": "Retrieves the smart contract address of the proxy for the compliance module."
          },
          "createSystemAddon(string,address,bytes)": {
            "notice": "Deploys and registers a new system addon with a proxy and initializer."
          },
          "createTokenFactory(string,address,address)": {
            "notice": "Creates a new token factory implementation and proxy."
          },
          "identityFactoryImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the identity factory module's logic."
          },
          "identityFactoryProxy()": {
            "notice": "Retrieves the smart contract address of the proxy for the identity factory module."
          },
          "identityImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the standard identity contract's logic."
          },
          "identityRegistryImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the identity registry module's logic."
          },
          "identityRegistryProxy()": {
            "notice": "Retrieves the smart contract address of the proxy for the identity registry module."
          },
          "identityRegistryStorageImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the identity registry storage module's logic."
          },
          "identityRegistryStorageProxy()": {
            "notice": "Retrieves the smart contract address of the proxy for the identity registry storage module."
          },
          "identityVerificationModule()": {
            "notice": "Retrieves the smart contract address of the proxy for the identity verification module."
          },
          "tokenAccessManagerImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the token access manager contract's logic."
          },
          "tokenFactoryImplementation(bytes32)": {
            "notice": "Returns the address of the current token registry implementation."
          },
          "tokenFactoryProxy(bytes32)": {
            "notice": "Returns the address of the token factory proxy."
          },
          "tokenIdentityImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the token identity contract's logic."
          },
          "topicSchemeRegistryImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the topic scheme registry module's logic."
          },
          "topicSchemeRegistryProxy()": {
            "notice": "Retrieves the smart contract address of the proxy for the topic scheme registry module."
          },
          "trustedIssuersRegistryImplementation()": {
            "notice": "Retrieves the current, active smart contract address of the trusted issuers registry module's logic."
          },
          "trustedIssuersRegistryProxy()": {
            "notice": "Retrieves the smart contract address of the proxy for the trusted issuers registry module."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/IATKSystem.sol": "IATKSystem"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/system/IATKSystem.sol": {
        "keccak256": "0x7b73d0d749af9b20cd90386faeec76ba4c07caddad3156583aebedd4ac8607ca",
        "urls": [
          "bzz-raw://134f12d8f281615b7997c659a77723e6d29312b01fe09dfa2e02b39b39ec3ad9",
          "dweb:/ipfs/QmSPTaTr2vQDZCjVaPBazLXbA3YsYb6bKn2c52RawZbo2g"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "addonImplementation(bytes32)": {
        "notice": "Returns the address of the current system addon implementation."
      },
      "addonProxy(bytes32)": {
        "notice": "Returns the address of the system addon proxy."
      },
      "bootstrap()": {
        "notice": "Initializes and sets up the entire ATK Protocol system."
      },
      "complianceImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the compliance module's logic."
      },
      "complianceProxy()": {
        "notice": "Retrieves the smart contract address of the proxy for the compliance module."
      },
      "createSystemAddon(string,address,bytes)": {
        "notice": "Deploys and registers a new system addon with a proxy and initializer."
      },
      "createTokenFactory(string,address,address)": {
        "notice": "Creates a new token factory implementation and proxy."
      },
      "identityFactoryImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the identity factory module's logic."
      },
      "identityFactoryProxy()": {
        "notice": "Retrieves the smart contract address of the proxy for the identity factory module."
      },
      "identityImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the standard identity contract's logic."
      },
      "identityRegistryImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the identity registry module's logic."
      },
      "identityRegistryProxy()": {
        "notice": "Retrieves the smart contract address of the proxy for the identity registry module."
      },
      "identityRegistryStorageImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the identity registry storage module's logic."
      },
      "identityRegistryStorageProxy()": {
        "notice": "Retrieves the smart contract address of the proxy for the identity registry storage module."
      },
      "identityVerificationModule()": {
        "notice": "Retrieves the smart contract address of the proxy for the identity verification module."
      },
      "tokenAccessManagerImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the token access manager contract's logic."
      },
      "tokenFactoryImplementation(bytes32)": {
        "notice": "Returns the address of the current token registry implementation."
      },
      "tokenFactoryProxy(bytes32)": {
        "notice": "Returns the address of the token factory proxy."
      },
      "tokenIdentityImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the token identity contract's logic."
      },
      "topicSchemeRegistryImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the topic scheme registry module's logic."
      },
      "topicSchemeRegistryProxy()": {
        "notice": "Retrieves the smart contract address of the proxy for the topic scheme registry module."
      },
      "trustedIssuersRegistryImplementation()": {
        "notice": "Retrieves the current, active smart contract address of the trusted issuers registry module's logic."
      },
      "trustedIssuersRegistryProxy()": {
        "notice": "Retrieves the smart contract address of the proxy for the trusted issuers registry module."
      }
    },
    "events": {
      "Bootstrapped(address,address,address,address,address,address,address,address)": {
        "notice": "Emitted when the `bootstrap` function has been successfully executed, creating and linking proxy contracts for all core modules of the ATKSystem."
      },
      "ComplianceImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the compliance module is updated."
      },
      "IdentityFactoryImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the identity factory module is updated."
      },
      "IdentityImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the standard identity module is updated."
      },
      "IdentityRegistryImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the identity registry module is updated."
      },
      "IdentityRegistryStorageImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the identity registry storage module is updated."
      },
      "SystemAddonCreated(address,string,bytes32,address,address,bytes,uint256)": {
        "notice": "Emitted when a system addon is created."
      },
      "TokenAccessManagerImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the token access manager module is updated."
      },
      "TokenFactoryCreated(address,string,bytes32,address,address,uint256)": {
        "notice": "Emitted when a ATKTokenFactory is registered."
      },
      "TokenIdentityImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the token identity module is updated."
      },
      "TopicSchemeRegistryImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the topic scheme registry module is updated."
      },
      "TrustedIssuersRegistryImplementationUpdated(address,address)": {
        "notice": "Emitted when the implementation (logic contract) for the trusted issuers registry module is updated."
      }
    },
    "notice": "This interface outlines the essential functions for interacting with the ATK Protocol's central system contract."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "The ATK System contract serves as the main hub and discovery point for various modules and features within the ATK Protocol. It allows other contracts and external users to find the addresses of crucial components like compliance modules, identity registries, and their corresponding proxy contracts. These proxies are important because they enable these components to be upgraded in the future without altering the addresses that other parts of the system use to interact with them, ensuring stability and maintainability.",
    "methods": {
      "addonImplementation(bytes32)": {
        "params": {
          "addonTypeHash": "The hash of the addon type."
        },
        "returns": {
          "_0": "The address of the system addon implementation contract."
        }
      },
      "addonProxy(bytes32)": {
        "params": {
          "addonTypeHash": "The hash of the addon type."
        },
        "returns": {
          "_0": "The address of the system addon proxy contract."
        }
      },
      "bootstrap()": {
        "details": "This function is responsible for the initial deployment and configuration of the ATK Protocol. This involves deploying necessary smart contracts, setting initial parameters, and defining the relationships and connections between different components of the system. It is critically important that this function is called only ONCE during the very first deployment of the protocol. Attempting to call it more than once could result in severe errors, misconfigurations, or unpredictable behavior in the protocol's operation."
      },
      "complianceImplementation()": {
        "details": "Compliance modules are responsible for enforcing rules and restrictions on token transfers, account interactions, or other operations within the ATK Protocol. For example, they might check if a transfer is allowed based on regulatory requirements. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for these compliance checks. It's important to note that this address can change if the compliance logic is updated or upgraded to a new version.",
        "returns": {
          "complianceImplementationAddress": "The blockchain address of the smart contract containing the compliance logic."
        }
      },
      "complianceProxy()": {
        "details": "A proxy contract is an intermediary contract that delegates all function calls it receives to another contract, known as the implementation contract (which contains the actual logic). The primary benefit of using a proxy is that the underlying logic (implementation) can be upgraded without changing the address that other contracts or users interact with. This provides flexibility and allows for bug fixes or feature additions without disrupting the ecosystem. This function returns the stable, unchanging address of the compliance module's proxy contract. All interactions with the compliance module should go through this proxy address.",
        "returns": {
          "complianceProxyAddress": "The blockchain address of the compliance module's proxy contract."
        }
      },
      "createSystemAddon(string,address,bytes)": {
        "params": {
          "implementation": "The address of the logic contract to use for the proxy.",
          "initializationData": "Encoded function call to initialize the proxy (e.g., abi.encodeWithSelector(...)).",
          "name": "A human-readable identifier (e.g., \"Swap\", \"YieldContract\")."
        },
        "returns": {
          "proxyAddress": "The address of the newly deployed proxy."
        }
      },
      "createTokenFactory(string,address,address)": {
        "params": {
          "_factoryImplementation": "The address of the token factory implementation contract.",
          "_name": "The human-readable name of the token factory.",
          "_tokenImplementation": "The address of the token implementation contract."
        }
      },
      "identityFactoryImplementation()": {
        "details": "Identity factories are responsible for the creation of new identity contracts or records within the ATK Protocol. They provide a standardized way to onboard new users or entities and associate them with an on-chain identity. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for this identity creation process. This address can change if the identity factory's logic is upgraded.",
        "returns": {
          "identityFactoryImplementationAddress": "The blockchain address of the smart contract containing the identity factory logic."
        }
      },
      "identityFactoryProxy()": {
        "details": "This function returns the stable, unchanging address of the identity factory's proxy contract. To create new identities within the ATK Protocol, you should interact with this proxy address. It will delegate the identity creation requests to the current active logic implementation of the identity factory.",
        "returns": {
          "identityFactoryProxyAddress": "The blockchain address of the identity factory module's proxy contract."
        }
      },
      "identityImplementation()": {
        "details": "Standard identity contracts are the actual on-chain representations of individual users, organizations, or entities within the ATK Protocol. These contracts typically hold claims and attributes related to an identity. This function returns the address of the base implementation (template) contract that new standard identity contracts will be created from (often via a proxy pattern). This address can change if the underlying logic for standard identity contracts is upgraded.",
        "returns": {
          "identityImplementationAddress": "The blockchain address of the smart contract containing the standard identity logic."
        }
      },
      "identityRegistryImplementation()": {
        "details": "Identity registries are a core component for managing information about users, organizations, or any entity interacting with ATK tokens. This can include details like Know Your Customer (KYC) / Anti-Money Laundering (AML) status, investor qualifications, country of residence, or other relevant identity attributes. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for the identity registry. Similar to other modules, this address can change if the identity registry's logic is upgraded.",
        "returns": {
          "identityRegistryImplementationAddress": "The blockchain address of the smart contract containing the identity registry logic."
        }
      },
      "identityRegistryProxy()": {
        "details": "Similar to the compliance proxy, this function returns the stable, unchanging address of the identity registry's proxy contract. To interact with the identity registry (e.g., to query identity information or register a new identity, depending on its features), you should use this proxy address. It will automatically forward your requests to the current logic implementation contract.",
        "returns": {
          "identityRegistryProxyAddress": "The blockchain address of the identity registry module's proxy contract."
        }
      },
      "identityRegistryStorageImplementation()": {
        "details": "Identity registry storage modules are dedicated to securely and efficiently storing the data associated with the identities managed by the identity registry. This separation of logic and storage can enhance security and upgradeability. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for managing this identity data storage. This address may change if the storage management logic is upgraded or if data is migrated to a new storage system.",
        "returns": {
          "identityRegistryStorageImplementationAddress": "The blockchain address of the smart contract containing the identity registry storage logic."
        }
      },
      "identityRegistryStorageProxy()": {
        "details": "This function returns the stable, unchanging address of the identity registry storage's proxy contract. All interactions related to storing or retrieving identity data should go through this proxy address. It ensures that calls are directed to the current logic implementation for identity data management.",
        "returns": {
          "identityRegistryStorageProxyAddress": "The blockchain address of the identity registry storage module's proxy contract."
        }
      },
      "identityVerificationModule()": {
        "details": "This function returns the stable, unchanging address of the identity verification module's proxy contract. To interact with the identity verification module (e.g., to verify an identity or check verification status), you should use this proxy address. It will forward calls to the current logic implementation.",
        "returns": {
          "identityVerificationModuleAddress": "The blockchain address of the identity verification module's proxy."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "tokenAccessManagerImplementation()": {
        "details": "Token access managers are responsible for managing access control for tokens. This function returns the address of the base implementation (template) contract that new token access managers will be created from. This address can change if the underlying logic for token access managers is upgraded.",
        "returns": {
          "tokenAccessManagerImplementationAddress": "The blockchain address of the smart contract containing the"
        }
      },
      "tokenFactoryImplementation(bytes32)": {
        "params": {
          "factoryTypeHash": "The hash of the factory type."
        },
        "returns": {
          "_0": "The address of the token factory implementation contract."
        }
      },
      "tokenFactoryProxy(bytes32)": {
        "params": {
          "factoryTypeHash": "The hash of the factory type."
        },
        "returns": {
          "_0": "The address of the token factory proxy contract."
        }
      },
      "tokenIdentityImplementation()": {
        "details": "Token identity contracts are a specialized type of identity contract that might be specifically linked to certain tokens, tokenized assets, or have features tailored for token interactions. This function returns the address of the base implementation (template) contract that new token identity contracts will be created from. This address can change if the underlying logic for token identity contracts is upgraded.",
        "returns": {
          "tokenIdentityImplementationAddress": "The blockchain address of the smart contract containing the token identity logic."
        }
      },
      "topicSchemeRegistryImplementation()": {
        "details": "Topic scheme registries manage the registration and lifecycle of topic schemes used for claim data structures. They store mapping between topic IDs and their corresponding signatures for encoding/decoding claim data. This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for managing topic schemes. This address can change if the topic scheme registry's logic is upgraded.",
        "returns": {
          "topicSchemeRegistryImplementationAddress": "The blockchain address of the smart contract containing the topic scheme registry logic."
        }
      },
      "topicSchemeRegistryProxy()": {
        "details": "This function returns the stable, unchanging address of the topic scheme registry's proxy contract. To interact with the topic scheme registry (e.g., to register topic schemes or retrieve topic signatures), you should use this proxy address. It will forward calls to the current logic implementation.",
        "returns": {
          "topicSchemeRegistryProxyAddress": "The blockchain address of the topic scheme registry module's proxy."
        }
      },
      "trustedIssuersRegistryImplementation()": {
        "details": "Trusted issuers registries play a crucial role in decentralized identity systems. They maintain a list of entities (known as \"issuers,\" such as KYC providers, accreditation bodies, etc.) that are authorized and trusted to make verifiable claims or attestations about identities (e.g., \"User X is KYC verified,\" \"Entity Y is an accredited investor\"). This function returns the specific address of the contract that holds the actual programming code (the \"logic\") for managing this list of trusted issuers. This address can change if the trusted issuers registry's logic is upgraded.",
        "returns": {
          "trustedIssuersRegistryImplementationAddress": "The blockchain address of the smart contract containing the trusted issuers registry logic."
        }
      },
      "trustedIssuersRegistryProxy()": {
        "details": "This function returns the stable, unchanging address of the trusted issuers registry's proxy contract. To interact with the trusted issuers registry (e.g., to check if an issuer is trusted or to add/remove issuers, depending on its features), you should use this proxy address. It will forward calls to the current logic implementation.",
        "returns": {
          "trustedIssuersRegistryProxyAddress": "The blockchain address of the trusted issuers registry module's proxy."
        }
      }
    },
    "events": {
      "Bootstrapped(address,address,address,address,address,address,address,address)": {
        "params": {
          "complianceProxy": "The address of the deployed ATKComplianceProxy contract.",
          "identityFactoryProxy": "The address of the deployed ATKIdentityFactoryProxy contract.",
          "identityRegistryProxy": "The address of the deployed ATKIdentityRegistryProxy contract.",
          "identityRegistryStorageProxy": "The address of the deployed ATKIdentityRegistryStorageProxy contract.",
          "identityVerificationModule": "The address of the deployed IdentityVerificationModule contract.",
          "sender": "The address that called the `bootstrap` function.",
          "topicSchemeRegistryProxy": "The address of the deployed ATKTopicSchemeRegistryProxy contract.",
          "trustedIssuersRegistryProxy": "The address of the deployed ATKTrustedIssuersRegistryProxy contract."
        }
      },
      "ComplianceImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new compliance module implementation contract.",
          "sender": "The address that called the `updateComplianceImplementation` function."
        }
      },
      "IdentityFactoryImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new identity factory module implementation contract.",
          "sender": "The address that called the `updateIdentityFactoryImplementation` function."
        }
      },
      "IdentityImplementationUpdated(address,address)": {
        "details": "Standard identity contracts are typically used to represent users or general entities.",
        "params": {
          "newImplementation": "The address of the new standard identity module implementation contract.",
          "sender": "The address that called the `updateIdentityImplementation` function."
        }
      },
      "IdentityRegistryImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new identity registry module implementation contract.",
          "sender": "The address that called the `updateIdentityRegistryImplementation` function."
        }
      },
      "IdentityRegistryStorageImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new identity registry storage module implementation contract.",
          "sender": "The address that called the `updateIdentityRegistryStorageImplementation` function."
        }
      },
      "SystemAddonCreated(address,string,bytes32,address,address,bytes,uint256)": {
        "params": {
          "implementation": "The address of the deployed system addon implementation.",
          "initializationData": "The encoded function call to initialize the system addon.",
          "name": "The human-readable name of the system addon.",
          "proxyAddress": "The address of the deployed system addon proxy.",
          "sender": "The address that created the system addon.",
          "timestamp": "The timestamp of the system addon creation.",
          "typeId": "The type identifier of the system addon."
        }
      },
      "TokenAccessManagerImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new token access manager module implementation contract.",
          "sender": "The address that called the `updateTokenAccessManagerImplementation` function."
        }
      },
      "TokenFactoryCreated(address,string,bytes32,address,address,uint256)": {
        "params": {
          "implementationAddress": "The address of the deployed token factory implementation.",
          "name": "The human-readable name of the token factory.",
          "proxyAddress": "The address of the deployed token factory proxy.",
          "sender": "The address that registered the token factory.",
          "timestamp": "The timestamp of the token factory creation.",
          "typeId": "The type identifier of the token factory."
        }
      },
      "TokenIdentityImplementationUpdated(address,address)": {
        "details": "Token identity contracts might be specialized identities associated with specific tokens.",
        "params": {
          "newImplementation": "The address of the new token identity module implementation contract.",
          "sender": "The address that called the `updateTokenIdentityImplementation` function."
        }
      },
      "TopicSchemeRegistryImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new topic scheme registry module implementation contract.",
          "sender": "The address that called the `updateTopicSchemeRegistryImplementation` function."
        }
      },
      "TrustedIssuersRegistryImplementationUpdated(address,address)": {
        "params": {
          "newImplementation": "The address of the new trusted issuers registry module implementation contract.",
          "sender": "The address that called the `updateTrustedIssuersRegistryImplementation` function."
        }
      }
    },
    "title": "IATKSystem Interface"
  },
  "id": 112
}