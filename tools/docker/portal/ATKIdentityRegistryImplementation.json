{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "trustedForwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADMIN_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "batchRegisterIdentity",
      "inputs": [
        {
          "name": "_userAddresses",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_identities",
          "type": "address[]",
          "internalType": "contract IIdentity[]"
        },
        {
          "name": "_countries",
          "type": "uint16[]",
          "internalType": "uint16[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "contains",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "deleteIdentity",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getRecoveredWallet",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleAdmin",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "grantRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identity",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IIdentity"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityStorage",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ISMARTIdentityRegistryStorage"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "initialAdmin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "identityStorage_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "trustedIssuersRegistry_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "topicSchemeRegistry_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "investorCountry",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isTrustedForwarder",
      "inputs": [
        {
          "name": "forwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isVerified",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "requiredClaimTopics",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isWalletLost",
      "inputs": [
        {
          "name": "userWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "issuersRegistry",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC3643TrustedIssuersRegistry"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "recoverIdentity",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newOnchainId",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registerIdentity",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "internalType": "contract IIdentity"
        },
        {
          "name": "_country",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "callerConfirmation",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setIdentityRegistryStorage",
      "inputs": [
        {
          "name": "identityStorage_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setTopicSchemeRegistry",
      "inputs": [
        {
          "name": "topicSchemeRegistry_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setTrustedIssuersRegistry",
      "inputs": [
        {
          "name": "trustedIssuersRegistry_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "topicSchemeRegistry",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ISMARTTopicSchemeRegistry"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "trustedForwarder",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "updateCountry",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_country",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "updateIdentity",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "internalType": "contract IIdentity"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "CountryUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_investorAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_country",
          "type": "uint16",
          "indexed": true,
          "internalType": "uint16"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRecovered",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "lostWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newIdentityContract",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "oldIdentityContract",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRegistered",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_investorAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        },
        {
          "name": "_country",
          "type": "uint16",
          "indexed": false,
          "internalType": "uint16"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRemoved",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_investorAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityStorageSet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_identityStorage",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_oldIdentity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        },
        {
          "name": "_newIdentity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleAdminChanged",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "previousAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "newAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleGranted",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleRevoked",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TopicSchemeRegistrySet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_topicSchemeRegistry",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TrustedIssuersRegistrySet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_trustedIssuersRegistry",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WalletRecoveryLinked",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "lostWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessControlBadConfirmation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AccessControlUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "neededRole",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ArrayLengthMismatch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "IdentityAlreadyRegistered",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "IdentityNotRegistered",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidIdentityAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidInitialization",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidRegistryAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidStorageAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidTopicSchemeRegistryAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidUserAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotInitializing",
      "inputs": []
    },
    {
      "type": "error",
      "name": "WalletAlreadyMarkedAsLost",
      "inputs": [
        {
          "name": "wallet",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "WalletNotRegisteredToThisIdentity",
      "inputs": [
        {
          "name": "wallet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "identityContract",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x60a03461011057601f61256c38819003918201601f19168301916001600160401b038311848410176101145780849260209460405283398101031261011057516001600160a01b0381168103610110576080525f51602061254c5f395f51905f525460ff8160401c16610101576002600160401b03196001600160401b038216016100ab575b60405161242390816101298239608051818181610b6b01528181610d4a01526123410152f35b6001600160401b0319166001600160401b039081175f51602061254c5f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f610085565b63f92ee8a960e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a714611640575080630f8fccd7146115b85780632406dfc6146110dd578063248a9ca31461109d57806326d941ae146110155780632f2ff15d14610fca57806336568abe14610f755780633b239a7f14610e425780633f8ed17314610dc3578063454a03e014610d7e578063572b6c0514610d295780635dbe47e814610d05578063653dc9f114610bea5780637a76ac7814610b9a5780637da0a87714610b555780637e42683b14610a6957806384bb0330146109b657806384c9f8a11461098d5780638e098ca1146107da57806391d1485414610784578063a217fddf14610768578063a8d29d1d146105cd578063b4f3fcb7146105a4578063d547741f14610550578063e744d789146104c6578063f0eb5e5414610424578063f11abfd8146103fd5763f8c8765e14610152575f80fd5b346103fa5760803660031901126103fa5761016b6116ad565b6101736116c3565b9061017c6116d9565b6064356001600160a01b03811691908290036103f8575f5160206123f75f395f51905f52549360ff8560401c1615946001600160401b038116801590816103f0575b60011490816103e6575b1590816103dd575b506103ce5767ffffffffffffffff1981166001175f5160206123f75f395f51905f5255856103a2575b506102026123ab565b61020a6123ab565b61021384611ed6565b506001600160a01b031680156103935785546001600160a01b031916811786556001600160a01b0361024361233e565b167f06ac29c7967f16f84307d77e8e8961d6f064f072486dc83f5b7ebd0ba878485e8780a36001600160a01b0316801561038457600180546001600160a01b031916821790556001600160a01b0361029961233e565b167f7ec3793f0e267d1612c4a7fb68844d126c179c3a64da837c4e2952b27bcb9d308680a3801561037557600280546001600160a01b0319168217905561031591906001600160a01b036102eb61233e565b167f341d273ab1334b7e1c274b2c59b2d36e4e198fc8401650fc699e544b07377f418680a3611f98565b5061031d5780f35b68ff0000000000000000195f5160206123f75f395f51905f5254165f5160206123f75f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6319356df160e21b8452600484fd5b637bfd2e8360e01b8552600485fd5b63f359d7f760e01b8652600486fd5b68ffffffffffffffffff191668010000000000000001175f5160206123f75f395f51905f52555f6101f9565b63f92ee8a960e01b8752600487fd5b9050155f6101d0565b303b1591506101c8565b8791506101be565b845b80fd5b50346103fa57806003193601126103fa57546040516001600160a01b039091168152602090f35b50346103fa5760203660031901126103fa5761043e6116ad565b8154604051637988d3a560e01b81526001600160a01b0392831660048201529160209183916024918391165afa9081156104bb576020929161048e575b506040516001600160a01b039091168152f35b6104ae9150823d84116104b4575b6104a6818361171f565b810190611754565b5f61047b565b503d61049c565b6040513d84823e3d90fd5b50346103fa5760203660031901126103fa576104e06116ad565b6104e8611d84565b6001600160a01b0316801561054157600180546001600160a01b031916821790556001600160a01b0361051961233e565b167f7ec3793f0e267d1612c4a7fb68844d126c179c3a64da837c4e2952b27bcb9d308380a380f35b637bfd2e8360e01b8252600482fd5b50346103fa5760403660031901126103fa576105a06004356105706116c3565b9061059b610596825f525f5160206123d75f395f51905f52602052600160405f20015490565b611e7a565b612126565b5080f35b50346103fa57806003193601126103fa576001546040516001600160a01b039091168152602090f35b50346103fa5760203660031901126103fa576105e76116ad565b6105ef611dec565b604051630bb7c8fd60e31b81526001600160a01b039091166004820181905290602081602481305afa90811561075d57839161072e575b501561071c578154604051637988d3a560e01b815260048101839052919083906001600160a01b0316602084602481845afa9384156104bb5782946106fb575b50803b156106f75781809160246040518094819363cf191bcd60e01b83528860048401525af180156104bb576106de575b506001600160a01b0390506106aa61233e565b6001600160a01b0390931692167fe08c9a3c1d21f02066d00c9f7a9b2423a12b17569c3bc0cb4e84ca48d38e4a568480a480f35b816106e89161171f565b6106f357825f610697565b8280fd5b5080fd5b61071591945060203d6020116104b4576104a6818361171f565b925f610666565b63fa9b64eb60e01b8252600452602490fd5b610750915060203d602011610756575b610748818361171f565b81019061178d565b5f610626565b503d61073e565b6040513d85823e3d90fd5b50346103fa57806003193601126103fa57602090604051908152f35b50346103fa5760403660031901126103fa5760406107a06116c3565b9160043581525f5160206123d75f395f51905f52602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b50346103fa5760403660031901126103fa576107f46116ad565b6107fc6116c3565b610804611dec565b604051630bb7c8fd60e31b81526001600160a01b039092166004830181905291602081602481305afa908115610982578491610963575b501561094f576001600160a01b0316908115610940578254604051637988d3a560e01b8152600481018390529184916001600160a01b031690602084602481855afa93841561075d57839461091f575b50813b156106f3578291604483926040519485938492637402e7c360e11b845260048401528960248401525af180156104bb5761090a575b506001600160a01b0390506108d661233e565b6001600160a01b0390921691167f9e8fe855fb89edef1315cb1d05f3b5e083450023e05286452fe6bee9179aca8c8480a480f35b816109149161171f565b6106f357825f6108c3565b61093991945060203d6020116104b4576104a6818361171f565b925f61088b565b63a28c79a960e01b8352600483fd5b63fa9b64eb60e01b83526004829052602483fd5b61097c915060203d60201161075657610748818361171f565b5f61083b565b6040513d86823e3d90fd5b50346103fa57806003193601126103fa576002546040516001600160a01b039091168152602090f35b50346103fa5760203660031901126103fa576109d06116ad565b81546040516305510c8960e01b81526001600160a01b039283166004820152929160209184916024918391165afa908115610a5d578091610a20575b6040516001600160a01b0383168152602090f35b90506020823d602011610a55575b81610a3b6020938361171f565b810103126103fa5750610a4f602091611828565b5f610a0c565b3d9150610a2e565b604051903d90823e3d90fd5b50346103fa5760203660031901126103fa57610a836116ad565b604051630bb7c8fd60e31b81526001600160a01b039091166004820181905290602081602481305afa90811561075d578391610b36575b501561071c578154604051631c9f84ef60e21b81526004810192909252602090829060249082906001600160a01b03165afa9081156104bb5760209291610b09575b5061ffff60405191168152f35b610b299150823d8411610b2f575b610b21818361171f565b810190611773565b5f610afc565b503d610b17565b610b4f915060203d60201161075657610748818361171f565b5f610aba565b50346103fa57806003193601126103fa576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103fa5760403660031901126103fa57610bb46116ad565b90602435906001600160401b0382116103fa576020610be084610bda36600487016116ef565b916118c2565b6040519015158152f35b50346103fa5760603660031901126103fa576004356001600160401b0381116106f757610c1b9036906004016116ef565b6024356001600160401b038111610d0157610c3a9036906004016116ef565b6044356001600160401b038111610cfd57610c599036906004016116ef565b919093610c64611dec565b818103610cee57828203610cee57865b818110610c7f578780f35b610c8a818389611804565b35906001600160a01b0382168203610cea57610ca7818588611804565b35916001600160a01b0383168303610ce657610cc482878a611804565b3561ffff81168103610ce257600193610cdc926121cf565b01610c74565b8a80fd5b8980fd5b8880fd5b63512509d360e11b8752600487fd5b8580fd5b8380fd5b50346103fa5760203660031901126103fa576020610be0610d246116ad565b6117a5565b50346103fa5760203660031901126103fa576020610d456116ad565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b50346103fa5760603660031901126103fa57610d986116ad565b610da06116c3565b6044359061ffff82168203610d0157610dc092610dbb611dec565b6121cf565b80f35b50346103fa5760203660031901126103fa57610ddd6116ad565b8154604051636d3db3fb60e11b81526001600160a01b0392831660048201529160209183916024918391165afa9081156104bb5760209291610e25575b506040519015158152f35b610e3c9150823d841161075657610748818361171f565b5f610e1a565b50346103fa5760403660031901126103fa57610e5c6116ad565b6024359061ffff82168092036106f357610e74611dec565b604051630bb7c8fd60e31b81526001600160a01b039091166004820181905290602081602481305afa908115610982578491610f56575b5015610f4457825483906001600160a01b0316803b156106f757818091604460405180948193639f3418d560e01b83528860048401528960248401525af180156104bb57610f2f575b506001600160a01b039050610f0761233e565b167fcac7061b6cbeaa6b9ac84616fd7af5e7d0e57e1b4b028d18261698d29a5054ba8480a480f35b81610f399161171f565b6106f357825f610ef4565b63fa9b64eb60e01b8352600452602482fd5b610f6f915060203d60201161075657610748818361171f565b5f610eab565b50346103fa5760403660031901126103fa57610f8f6116c3565b6001600160a01b03610f9f61233e565b166001600160a01b03821603610fbb576105a090600435612126565b63334bd91960e11b8252600482fd5b50346103fa5760403660031901126103fa576105a0600435610fea6116c3565b90611010610596825f525f5160206123d75f395f51905f52602052600160405f20015490565b612075565b50346103fa5760203660031901126103fa5761102f6116ad565b611037611d84565b6001600160a01b0316801561108e5781546001600160a01b031916811782556001600160a01b0361106661233e565b167f06ac29c7967f16f84307d77e8e8961d6f064f072486dc83f5b7ebd0ba878485e8380a380f35b63f359d7f760e01b8252600482fd5b50346103fa5760203660031901126103fa5760206110d56004355f525f5160206123d75f395f51905f52602052600160405f20015490565b604051908152f35b50346114a75760603660031901126114a7576110f76116ad565b906111006116c3565b916111096116d9565b90611112611dec565b6001600160a01b0381169384156115a9576001600160a01b0381169283156115a9576001600160a01b03811691821561159a575f54604051637988d3a560e01b8152600481018990526001600160a01b039091169390602081602481885afa5f9181611579575b50611191578863fa9b64eb60e01b5f5260045260245ffd5b604051631c9f84ef60e21b8152600481018a9052979896979190602083602481895afa92831561149c575f93611558575b50604051636d3db3fb60e11b8152600481018990526020816024818a5afa90811561149c575f91611539575b506115265781604051637988d3a560e01b81528a60048201526020816024818b5afa5f9181611505575b506114dd5750506001905b604051636d3db3fb60e11b8152600481018b90526020816024818b5afa90811561149c575f916114be575b506114ab576001600160a01b031695803b156114a757604051637b19827b60e11b81526001600160a01b03888116600483015289166024820152905f908290604490829084905af1801561149c57611481575b5089548a94939291906001600160a01b0316803b15610cfd5785809160248c604051948593849263cf191bcd60e01b845260048401525af1908115611476578691611461575b50506113ee575b505081546001600160a01b0316803b156106f3576040516374ce7fa960e11b81526001600160a01b039687166004820152919095166024820152938490604490829084905af191868315610a5d57869486946113d0575b507f80c3a02ab31dee3509ac95285c0f66b614e1e41e310a04a517e09b3e96547c939190506001600160a01b0361137a61233e565b604080516001600160a01b039687168152939095166020840152169290a46001600160a01b036113a861233e565b167f14ed39b24d4f44fed45669db1b96eb0f9f67cbf22f1b2336684b94c5a405624e8480a480f35b819395506113df92945061171f565b6103f85783918391865f611345565b83546001600160a01b031691823b156103f85760405163a53410dd60e01b81526001600160a01b03858116600483015292909216602483015261ffff1660448201529083908290606490829084905af190811561075d578391156112ee57816114569161171f565b6106f757815f6112ee565b8161146b9161171f565b6103f857845f6112e7565b6040513d88823e3d90fd5b611491919493929a505f9061171f565b5f989091925f6112a1565b6040513d5f823e3d90fd5b5f80fd5b8963afcec19360e01b5f5260045260245ffd5b6114d7915060203d60201161075657610748818361171f565b5f61124e565b6001600160a01b0316036114f2575f90611223565b886345052f4560e01b5f5260045260245ffd5b61151f91925060203d6020116104b4576104a6818361171f565b905f611218565b8763afcec19360e01b5f5260045260245ffd5b611552915060203d60201161075657610748818361171f565b5f6111ee565b61157291935060203d602011610b2f57610b21818361171f565b915f6111c2565b61159391925060203d6020116104b4576104a6818361171f565b905f611179565b63a28c79a960e01b5f5260045ffd5b630702b3d960e41b5f5260045ffd5b346114a75760203660031901126114a7576115d16116ad565b6115d9611d84565b6001600160a01b0316801561163157600280546001600160a01b031916821790556001600160a01b0361160a61233e565b167f341d273ab1334b7e1c274b2c59b2d36e4e198fc8401650fc699e544b07377f415f80a3005b6319356df160e21b5f5260045ffd5b346114a75760203660031901126114a7576004359063ffffffff60e01b82168092036114a757602091630277b84b60e11b8114908115611682575b5015158152f35b637965db0b60e01b81149150811561169c575b508361167b565b6301ffc9a760e01b14905083611695565b600435906001600160a01b03821682036114a757565b602435906001600160a01b03821682036114a757565b604435906001600160a01b03821682036114a757565b9181601f840112156114a7578235916001600160401b0383116114a7576020808501948460051b0101116114a757565b90601f801991011681019081106001600160401b0382111761174057604052565b634e487b7160e01b5f52604160045260245ffd5b908160209103126114a757516001600160a01b03811681036114a75790565b908160209103126114a7575161ffff811681036114a75790565b908160209103126114a7575180151581036114a75790565b5f54604051637988d3a560e01b81526001600160a01b0392831660048201529160209183916024918391165afa90816117e7575b506117e2575f90565b600190565b6117ff9060203d6020116104b4576104a6818361171f565b6117d9565b91908110156118145760051b0190565b634e487b7160e01b5f52603260045260245ffd5b51906001600160a01b03821682036114a757565b9291926001600160401b0382116117405760405191611865601f8201601f19166020018461171f565b8294818452818301116114a7578281602093845f96015e010152565b9080601f830112156114a757815161189b9260200161183c565b90565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b5f54604051636d3db3fb60e11b81526001600160a01b03928316600482018190529290911690602081602481855afa90811561149c575f91611d65575b50611d3e57604051630bb7c8fd60e31b815260048101839052602081602481305afa90811561149c575f91611d46575b5015611d3e578315611d3557600254600154604051637988d3a560e01b815260048101949094526001600160a01b039182169591169291602090839060249082905afa91821561149c575f92611d14575b505f5b81811061199557505050505050600190565b6119a0818387611804565b358015611d0a576040516336622f6560e11b8152600481018290526020816024818b5afa90811561149c575f91611cec575b5015611ce1575f906040516352c111d160e01b81528160048201525f816024818a5afa90811561149c575f91611c38575b508051915f5b838110611a2f575b5050505015611a2557600101935b93611983565b5050505050505f90565b8251811015611814578460018060a01b0360208360051b8601015116604051602081019082825285604082015260408152611a6b60608261171f565b51902060405163c9100bcb60e01b815260048101919091526001600160a01b038b1691905f81602481865afa915f5f845f945f96611b89575b50611ac1575b505050505050611abc57600101611a09565b611a11565b6001600160a01b0316821480611b80575b611add575b80611aaa565b611b1694611b286020956040519788968795869563604b4d3760e11b87526004870152602486015260806044860152608485019061189e565b8381036003190160648501529061189e565b03915afa5f9181611b60575b50611b43575b80808080611ad7565b9050611b5057845f611b3a565b505050505060015f808080611a11565b611b7991925060203d811161075657610748818361171f565b905f611b34565b50878114611ad2565b94509450505093503d805f833e611ba0818361171f565b81019360c0828603126114a7578151611bbb60408401611828565b9060608401516001600160401b0381116114a75787611bdb918601611881565b9060808501516001600160401b0381116114a75788611bfb918701611881565b9460a0810151906001600160401b0382116114a7570188601f820112156114a7578d98816020611c2d9351910161183c565b50919093945f611aa4565b90503d805f833e611c49818361171f565b8101906020818303126114a7578051906001600160401b0382116114a7570181601f820112156114a7578051916001600160401b038311611740578260051b9160405193611c9a602085018661171f565b84526020808501938201019182116114a757602001915b818310611cc1575050505f611a03565b82516001600160a01b03811681036114a757815260209283019201611cb1565b505050505050505f90565b611d04915060203d811161075657610748818361171f565b5f6119d2565b5060010193611a1f565b611d2e91925060203d6020116104b4576104a6818361171f565b905f611980565b50505050600190565b505050505f90565b611d5f915060203d60201161075657610748818361171f565b5f61192f565b611d7e915060203d60201161075657610748818361171f565b5f6118ff565b611d8c61233e565b6001600160a01b0381165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1615611dce5750565b63e2517d3f60e01b5f5260018060a01b03166004525f60245260445ffd5b611df461233e565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff1615611e365750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c309238602452604490fd5b611e8261233e565b815f525f5160206123d75f395f51905f5260205260405f2060018060a01b0382165f5260205260ff60405f20541615611eb9575050565b63e2517d3f60e01b5f5260018060a01b031660045260245260445ffd5b6001600160a01b0381165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff16611f93576001600160a01b038181165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260409020805460ff19166001179055611f5e61233e565b16906001600160a01b03165f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff16611f93576001600160a01b038181165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb708660205260409020805460ff1916600117905561202061233e565b16906001600160a01b03167fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c3092387f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b5f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff16612120575f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff191660011790556120eb61233e565b16916001600160a01b0316907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b5f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff1615612120575f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff1916905561219a61233e565b16916001600160a01b0316907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b6001600160a01b038116915f9183156115a9576001600160a01b03821691821561159a57604051630bb7c8fd60e31b815260048101869052602081602481305afa90811561149c575f9161231f575b5061230c575f546001600160a01b031691823b156114a75760405163a53410dd60e01b81526001600160a01b0391821660048201529116602482015261ffff86166044820152905f908290606490829084905af1801561149c576122f7575b50826001600160a01b0361228f61233e565b167f6680dc6d23915f02197cb4ac29f4b00443a14ca1cbe22d6b93045c32b98a8237602061ffff604051981697888152a47fcac7061b6cbeaa6b9ac84616fd7af5e7d0e57e1b4b028d18261698d29a5054ba6001600160a01b036122f161233e565b169180a4565b6123049192505f9061171f565b5f905f61227d565b846345052f4560e01b5f5260045260245ffd5b612338915060203d60201161075657610748818361171f565b5f61221e565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806123a0575b1561239c576013193601368111612388573560601c90565b634e487b7160e01b5f52601160045260245ffd5b3390565b506014361015612370565b60ff5f5160206123f75f395f51905f525460401c16156123c757565b631afcd79f60e31b5f5260045ffdfe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000af0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00",
    "sourceMap": "2401:40441:151:-:0;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;1623:37:219;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;7894:76:220;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;7983:34:220;7979:146;;-1:-1:-1;2401:40441:151;;;;;;;;1623:37:219;2401:40441:151;;;;;;;;;;;;;;;;7979:146:220;-1:-1:-1;;;;;;2401:40441:151;-1:-1:-1;;;;;2401:40441:151;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;8085:29:220;;2401:40441:151;;8085:29:220;7979:146;;;7894:76;7936:23;;;-1:-1:-1;7936:23:220;;-1:-1:-1;7936:23:220;2401:40441:151;-1:-1:-1;2401:40441:151;;;;;;-1:-1:-1;2401:40441:151;;;;;-1:-1:-1;2401:40441:151",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a714611640575080630f8fccd7146115b85780632406dfc6146110dd578063248a9ca31461109d57806326d941ae146110155780632f2ff15d14610fca57806336568abe14610f755780633b239a7f14610e425780633f8ed17314610dc3578063454a03e014610d7e578063572b6c0514610d295780635dbe47e814610d05578063653dc9f114610bea5780637a76ac7814610b9a5780637da0a87714610b555780637e42683b14610a6957806384bb0330146109b657806384c9f8a11461098d5780638e098ca1146107da57806391d1485414610784578063a217fddf14610768578063a8d29d1d146105cd578063b4f3fcb7146105a4578063d547741f14610550578063e744d789146104c6578063f0eb5e5414610424578063f11abfd8146103fd5763f8c8765e14610152575f80fd5b346103fa5760803660031901126103fa5761016b6116ad565b6101736116c3565b9061017c6116d9565b6064356001600160a01b03811691908290036103f8575f5160206123f75f395f51905f52549360ff8560401c1615946001600160401b038116801590816103f0575b60011490816103e6575b1590816103dd575b506103ce5767ffffffffffffffff1981166001175f5160206123f75f395f51905f5255856103a2575b506102026123ab565b61020a6123ab565b61021384611ed6565b506001600160a01b031680156103935785546001600160a01b031916811786556001600160a01b0361024361233e565b167f06ac29c7967f16f84307d77e8e8961d6f064f072486dc83f5b7ebd0ba878485e8780a36001600160a01b0316801561038457600180546001600160a01b031916821790556001600160a01b0361029961233e565b167f7ec3793f0e267d1612c4a7fb68844d126c179c3a64da837c4e2952b27bcb9d308680a3801561037557600280546001600160a01b0319168217905561031591906001600160a01b036102eb61233e565b167f341d273ab1334b7e1c274b2c59b2d36e4e198fc8401650fc699e544b07377f418680a3611f98565b5061031d5780f35b68ff0000000000000000195f5160206123f75f395f51905f5254165f5160206123f75f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6319356df160e21b8452600484fd5b637bfd2e8360e01b8552600485fd5b63f359d7f760e01b8652600486fd5b68ffffffffffffffffff191668010000000000000001175f5160206123f75f395f51905f52555f6101f9565b63f92ee8a960e01b8752600487fd5b9050155f6101d0565b303b1591506101c8565b8791506101be565b845b80fd5b50346103fa57806003193601126103fa57546040516001600160a01b039091168152602090f35b50346103fa5760203660031901126103fa5761043e6116ad565b8154604051637988d3a560e01b81526001600160a01b0392831660048201529160209183916024918391165afa9081156104bb576020929161048e575b506040516001600160a01b039091168152f35b6104ae9150823d84116104b4575b6104a6818361171f565b810190611754565b5f61047b565b503d61049c565b6040513d84823e3d90fd5b50346103fa5760203660031901126103fa576104e06116ad565b6104e8611d84565b6001600160a01b0316801561054157600180546001600160a01b031916821790556001600160a01b0361051961233e565b167f7ec3793f0e267d1612c4a7fb68844d126c179c3a64da837c4e2952b27bcb9d308380a380f35b637bfd2e8360e01b8252600482fd5b50346103fa5760403660031901126103fa576105a06004356105706116c3565b9061059b610596825f525f5160206123d75f395f51905f52602052600160405f20015490565b611e7a565b612126565b5080f35b50346103fa57806003193601126103fa576001546040516001600160a01b039091168152602090f35b50346103fa5760203660031901126103fa576105e76116ad565b6105ef611dec565b604051630bb7c8fd60e31b81526001600160a01b039091166004820181905290602081602481305afa90811561075d57839161072e575b501561071c578154604051637988d3a560e01b815260048101839052919083906001600160a01b0316602084602481845afa9384156104bb5782946106fb575b50803b156106f75781809160246040518094819363cf191bcd60e01b83528860048401525af180156104bb576106de575b506001600160a01b0390506106aa61233e565b6001600160a01b0390931692167fe08c9a3c1d21f02066d00c9f7a9b2423a12b17569c3bc0cb4e84ca48d38e4a568480a480f35b816106e89161171f565b6106f357825f610697565b8280fd5b5080fd5b61071591945060203d6020116104b4576104a6818361171f565b925f610666565b63fa9b64eb60e01b8252600452602490fd5b610750915060203d602011610756575b610748818361171f565b81019061178d565b5f610626565b503d61073e565b6040513d85823e3d90fd5b50346103fa57806003193601126103fa57602090604051908152f35b50346103fa5760403660031901126103fa5760406107a06116c3565b9160043581525f5160206123d75f395f51905f52602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b50346103fa5760403660031901126103fa576107f46116ad565b6107fc6116c3565b610804611dec565b604051630bb7c8fd60e31b81526001600160a01b039092166004830181905291602081602481305afa908115610982578491610963575b501561094f576001600160a01b0316908115610940578254604051637988d3a560e01b8152600481018390529184916001600160a01b031690602084602481855afa93841561075d57839461091f575b50813b156106f3578291604483926040519485938492637402e7c360e11b845260048401528960248401525af180156104bb5761090a575b506001600160a01b0390506108d661233e565b6001600160a01b0390921691167f9e8fe855fb89edef1315cb1d05f3b5e083450023e05286452fe6bee9179aca8c8480a480f35b816109149161171f565b6106f357825f6108c3565b61093991945060203d6020116104b4576104a6818361171f565b925f61088b565b63a28c79a960e01b8352600483fd5b63fa9b64eb60e01b83526004829052602483fd5b61097c915060203d60201161075657610748818361171f565b5f61083b565b6040513d86823e3d90fd5b50346103fa57806003193601126103fa576002546040516001600160a01b039091168152602090f35b50346103fa5760203660031901126103fa576109d06116ad565b81546040516305510c8960e01b81526001600160a01b039283166004820152929160209184916024918391165afa908115610a5d578091610a20575b6040516001600160a01b0383168152602090f35b90506020823d602011610a55575b81610a3b6020938361171f565b810103126103fa5750610a4f602091611828565b5f610a0c565b3d9150610a2e565b604051903d90823e3d90fd5b50346103fa5760203660031901126103fa57610a836116ad565b604051630bb7c8fd60e31b81526001600160a01b039091166004820181905290602081602481305afa90811561075d578391610b36575b501561071c578154604051631c9f84ef60e21b81526004810192909252602090829060249082906001600160a01b03165afa9081156104bb5760209291610b09575b5061ffff60405191168152f35b610b299150823d8411610b2f575b610b21818361171f565b810190611773565b5f610afc565b503d610b17565b610b4f915060203d60201161075657610748818361171f565b5f610aba565b50346103fa57806003193601126103fa576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103fa5760403660031901126103fa57610bb46116ad565b90602435906001600160401b0382116103fa576020610be084610bda36600487016116ef565b916118c2565b6040519015158152f35b50346103fa5760603660031901126103fa576004356001600160401b0381116106f757610c1b9036906004016116ef565b6024356001600160401b038111610d0157610c3a9036906004016116ef565b6044356001600160401b038111610cfd57610c599036906004016116ef565b919093610c64611dec565b818103610cee57828203610cee57865b818110610c7f578780f35b610c8a818389611804565b35906001600160a01b0382168203610cea57610ca7818588611804565b35916001600160a01b0383168303610ce657610cc482878a611804565b3561ffff81168103610ce257600193610cdc926121cf565b01610c74565b8a80fd5b8980fd5b8880fd5b63512509d360e11b8752600487fd5b8580fd5b8380fd5b50346103fa5760203660031901126103fa576020610be0610d246116ad565b6117a5565b50346103fa5760203660031901126103fa576020610d456116ad565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b50346103fa5760603660031901126103fa57610d986116ad565b610da06116c3565b6044359061ffff82168203610d0157610dc092610dbb611dec565b6121cf565b80f35b50346103fa5760203660031901126103fa57610ddd6116ad565b8154604051636d3db3fb60e11b81526001600160a01b0392831660048201529160209183916024918391165afa9081156104bb5760209291610e25575b506040519015158152f35b610e3c9150823d841161075657610748818361171f565b5f610e1a565b50346103fa5760403660031901126103fa57610e5c6116ad565b6024359061ffff82168092036106f357610e74611dec565b604051630bb7c8fd60e31b81526001600160a01b039091166004820181905290602081602481305afa908115610982578491610f56575b5015610f4457825483906001600160a01b0316803b156106f757818091604460405180948193639f3418d560e01b83528860048401528960248401525af180156104bb57610f2f575b506001600160a01b039050610f0761233e565b167fcac7061b6cbeaa6b9ac84616fd7af5e7d0e57e1b4b028d18261698d29a5054ba8480a480f35b81610f399161171f565b6106f357825f610ef4565b63fa9b64eb60e01b8352600452602482fd5b610f6f915060203d60201161075657610748818361171f565b5f610eab565b50346103fa5760403660031901126103fa57610f8f6116c3565b6001600160a01b03610f9f61233e565b166001600160a01b03821603610fbb576105a090600435612126565b63334bd91960e11b8252600482fd5b50346103fa5760403660031901126103fa576105a0600435610fea6116c3565b90611010610596825f525f5160206123d75f395f51905f52602052600160405f20015490565b612075565b50346103fa5760203660031901126103fa5761102f6116ad565b611037611d84565b6001600160a01b0316801561108e5781546001600160a01b031916811782556001600160a01b0361106661233e565b167f06ac29c7967f16f84307d77e8e8961d6f064f072486dc83f5b7ebd0ba878485e8380a380f35b63f359d7f760e01b8252600482fd5b50346103fa5760203660031901126103fa5760206110d56004355f525f5160206123d75f395f51905f52602052600160405f20015490565b604051908152f35b50346114a75760603660031901126114a7576110f76116ad565b906111006116c3565b916111096116d9565b90611112611dec565b6001600160a01b0381169384156115a9576001600160a01b0381169283156115a9576001600160a01b03811691821561159a575f54604051637988d3a560e01b8152600481018990526001600160a01b039091169390602081602481885afa5f9181611579575b50611191578863fa9b64eb60e01b5f5260045260245ffd5b604051631c9f84ef60e21b8152600481018a9052979896979190602083602481895afa92831561149c575f93611558575b50604051636d3db3fb60e11b8152600481018990526020816024818a5afa90811561149c575f91611539575b506115265781604051637988d3a560e01b81528a60048201526020816024818b5afa5f9181611505575b506114dd5750506001905b604051636d3db3fb60e11b8152600481018b90526020816024818b5afa90811561149c575f916114be575b506114ab576001600160a01b031695803b156114a757604051637b19827b60e11b81526001600160a01b03888116600483015289166024820152905f908290604490829084905af1801561149c57611481575b5089548a94939291906001600160a01b0316803b15610cfd5785809160248c604051948593849263cf191bcd60e01b845260048401525af1908115611476578691611461575b50506113ee575b505081546001600160a01b0316803b156106f3576040516374ce7fa960e11b81526001600160a01b039687166004820152919095166024820152938490604490829084905af191868315610a5d57869486946113d0575b507f80c3a02ab31dee3509ac95285c0f66b614e1e41e310a04a517e09b3e96547c939190506001600160a01b0361137a61233e565b604080516001600160a01b039687168152939095166020840152169290a46001600160a01b036113a861233e565b167f14ed39b24d4f44fed45669db1b96eb0f9f67cbf22f1b2336684b94c5a405624e8480a480f35b819395506113df92945061171f565b6103f85783918391865f611345565b83546001600160a01b031691823b156103f85760405163a53410dd60e01b81526001600160a01b03858116600483015292909216602483015261ffff1660448201529083908290606490829084905af190811561075d578391156112ee57816114569161171f565b6106f757815f6112ee565b8161146b9161171f565b6103f857845f6112e7565b6040513d88823e3d90fd5b611491919493929a505f9061171f565b5f989091925f6112a1565b6040513d5f823e3d90fd5b5f80fd5b8963afcec19360e01b5f5260045260245ffd5b6114d7915060203d60201161075657610748818361171f565b5f61124e565b6001600160a01b0316036114f2575f90611223565b886345052f4560e01b5f5260045260245ffd5b61151f91925060203d6020116104b4576104a6818361171f565b905f611218565b8763afcec19360e01b5f5260045260245ffd5b611552915060203d60201161075657610748818361171f565b5f6111ee565b61157291935060203d602011610b2f57610b21818361171f565b915f6111c2565b61159391925060203d6020116104b4576104a6818361171f565b905f611179565b63a28c79a960e01b5f5260045ffd5b630702b3d960e41b5f5260045ffd5b346114a75760203660031901126114a7576115d16116ad565b6115d9611d84565b6001600160a01b0316801561163157600280546001600160a01b031916821790556001600160a01b0361160a61233e565b167f341d273ab1334b7e1c274b2c59b2d36e4e198fc8401650fc699e544b07377f415f80a3005b6319356df160e21b5f5260045ffd5b346114a75760203660031901126114a7576004359063ffffffff60e01b82168092036114a757602091630277b84b60e11b8114908115611682575b5015158152f35b637965db0b60e01b81149150811561169c575b508361167b565b6301ffc9a760e01b14905083611695565b600435906001600160a01b03821682036114a757565b602435906001600160a01b03821682036114a757565b604435906001600160a01b03821682036114a757565b9181601f840112156114a7578235916001600160401b0383116114a7576020808501948460051b0101116114a757565b90601f801991011681019081106001600160401b0382111761174057604052565b634e487b7160e01b5f52604160045260245ffd5b908160209103126114a757516001600160a01b03811681036114a75790565b908160209103126114a7575161ffff811681036114a75790565b908160209103126114a7575180151581036114a75790565b5f54604051637988d3a560e01b81526001600160a01b0392831660048201529160209183916024918391165afa90816117e7575b506117e2575f90565b600190565b6117ff9060203d6020116104b4576104a6818361171f565b6117d9565b91908110156118145760051b0190565b634e487b7160e01b5f52603260045260245ffd5b51906001600160a01b03821682036114a757565b9291926001600160401b0382116117405760405191611865601f8201601f19166020018461171f565b8294818452818301116114a7578281602093845f96015e010152565b9080601f830112156114a757815161189b9260200161183c565b90565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b5f54604051636d3db3fb60e11b81526001600160a01b03928316600482018190529290911690602081602481855afa90811561149c575f91611d65575b50611d3e57604051630bb7c8fd60e31b815260048101839052602081602481305afa90811561149c575f91611d46575b5015611d3e578315611d3557600254600154604051637988d3a560e01b815260048101949094526001600160a01b039182169591169291602090839060249082905afa91821561149c575f92611d14575b505f5b81811061199557505050505050600190565b6119a0818387611804565b358015611d0a576040516336622f6560e11b8152600481018290526020816024818b5afa90811561149c575f91611cec575b5015611ce1575f906040516352c111d160e01b81528160048201525f816024818a5afa90811561149c575f91611c38575b508051915f5b838110611a2f575b5050505015611a2557600101935b93611983565b5050505050505f90565b8251811015611814578460018060a01b0360208360051b8601015116604051602081019082825285604082015260408152611a6b60608261171f565b51902060405163c9100bcb60e01b815260048101919091526001600160a01b038b1691905f81602481865afa915f5f845f945f96611b89575b50611ac1575b505050505050611abc57600101611a09565b611a11565b6001600160a01b0316821480611b80575b611add575b80611aaa565b611b1694611b286020956040519788968795869563604b4d3760e11b87526004870152602486015260806044860152608485019061189e565b8381036003190160648501529061189e565b03915afa5f9181611b60575b50611b43575b80808080611ad7565b9050611b5057845f611b3a565b505050505060015f808080611a11565b611b7991925060203d811161075657610748818361171f565b905f611b34565b50878114611ad2565b94509450505093503d805f833e611ba0818361171f565b81019360c0828603126114a7578151611bbb60408401611828565b9060608401516001600160401b0381116114a75787611bdb918601611881565b9060808501516001600160401b0381116114a75788611bfb918701611881565b9460a0810151906001600160401b0382116114a7570188601f820112156114a7578d98816020611c2d9351910161183c565b50919093945f611aa4565b90503d805f833e611c49818361171f565b8101906020818303126114a7578051906001600160401b0382116114a7570181601f820112156114a7578051916001600160401b038311611740578260051b9160405193611c9a602085018661171f565b84526020808501938201019182116114a757602001915b818310611cc1575050505f611a03565b82516001600160a01b03811681036114a757815260209283019201611cb1565b505050505050505f90565b611d04915060203d811161075657610748818361171f565b5f6119d2565b5060010193611a1f565b611d2e91925060203d6020116104b4576104a6818361171f565b905f611980565b50505050600190565b505050505f90565b611d5f915060203d60201161075657610748818361171f565b5f61192f565b611d7e915060203d60201161075657610748818361171f565b5f6118ff565b611d8c61233e565b6001600160a01b0381165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1615611dce5750565b63e2517d3f60e01b5f5260018060a01b03166004525f60245260445ffd5b611df461233e565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff1615611e365750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c309238602452604490fd5b611e8261233e565b815f525f5160206123d75f395f51905f5260205260405f2060018060a01b0382165f5260205260ff60405f20541615611eb9575050565b63e2517d3f60e01b5f5260018060a01b031660045260245260445ffd5b6001600160a01b0381165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff16611f93576001600160a01b038181165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260409020805460ff19166001179055611f5e61233e565b16906001600160a01b03165f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff16611f93576001600160a01b038181165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb708660205260409020805460ff1916600117905561202061233e565b16906001600160a01b03167fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c3092387f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b5f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff16612120575f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff191660011790556120eb61233e565b16916001600160a01b0316907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b5f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff1615612120575f8181525f5160206123d75f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff1916905561219a61233e565b16916001600160a01b0316907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b6001600160a01b038116915f9183156115a9576001600160a01b03821691821561159a57604051630bb7c8fd60e31b815260048101869052602081602481305afa90811561149c575f9161231f575b5061230c575f546001600160a01b031691823b156114a75760405163a53410dd60e01b81526001600160a01b0391821660048201529116602482015261ffff86166044820152905f908290606490829084905af1801561149c576122f7575b50826001600160a01b0361228f61233e565b167f6680dc6d23915f02197cb4ac29f4b00443a14ca1cbe22d6b93045c32b98a8237602061ffff604051981697888152a47fcac7061b6cbeaa6b9ac84616fd7af5e7d0e57e1b4b028d18261698d29a5054ba6001600160a01b036122f161233e565b169180a4565b6123049192505f9061171f565b5f905f61227d565b846345052f4560e01b5f5260045260245ffd5b612338915060203d60201161075657610748818361171f565b5f61221e565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806123a0575b1561239c576013193601368111612388573560601c90565b634e487b7160e01b5f52601160045260245ffd5b3390565b506014361015612370565b60ff5f5160206123f75f395f51905f525460401c16156123c757565b631afcd79f60e31b5f5260045ffdfe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000a",
    "sourceMap": "2401:40441:151:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;;4301:16:220;2401:40441:151;-1:-1:-1;;;;;2401:40441:151;;4724:16:220;;:34;;;;2401:40441:151;4803:1:220;4788:16;:50;;;;2401:40441:151;4853:13:220;:30;;;;2401:40441:151;4849:91:220;;;-1:-1:-1;;2401:40441:151;;4803:1:220;2401:40441:151;-1:-1:-1;;;;;;;;;;;2401:40441:151;;4977:67:220;;2401:40441:151;6891:76:220;;;:::i;:::-;;;:::i;:::-;10916:44:151;;;:::i;:::-;-1:-1:-1;;;;;;2401:40441:151;11042:30;;11038:66;;2401:40441;;-1:-1:-1;;;;;;2401:40441:151;;;;;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;11195:59;;;;-1:-1:-1;;;;;2401:40441:151;11390:37;;11386:74;;4803:1:220;2401:40441:151;;-1:-1:-1;;;;;;2401:40441:151;;;;;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;11566:73;;;;11746:34;;11742:82;;11834:70;2401:40441;;-1:-1:-1;;;;;;2401:40441:151;;;;;12221:55;;2401:40441;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;11919:67;;;;12221:55;:::i;:::-;;5064:101:220;;2401:40441:151;;5064:101:220;2401:40441:151;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;-1:-1:-1;;;;;;;;;;;2401:40441:151;5140:14:220;2401:40441:151;;;4803:1:220;2401:40441:151;;5140:14:220;2401:40441:151;;11742:82;-1:-1:-1;;;11789:35:151;;2401:40441;14717:35;11789;11386:74;-1:-1:-1;;;11436:24:151;;2401:40441;13852:24;11436;11038:66;-1:-1:-1;;;11081:23:151;;2401:40441;12963:23;11081;4977:67:220;-1:-1:-1;;2401:40441:151;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;4977:67:220;;;4849:91;-1:-1:-1;;;4906:23:220;;2401:40441:151;4906:23:220;;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:220;;4724:34;;;-1:-1:-1;4724:34:220;;2401:40441:151;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;;;-1:-1:-1;;;34925:45:151;;-1:-1:-1;;;;;2401:40441:151;;;;34925:45;;2401:40441;;;;;;34925:45;;2401:40441;;;34925:45;;;;;;;2401:40441;34925:45;;;;2401:40441;-1:-1:-1;2401:40441:151;;-1:-1:-1;;;;;2401:40441:151;;;;;;34925:45;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;2401:40441;;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;3202:4:216;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;13806:37;;13802:74;;13886:81;2401:40441;;-1:-1:-1;;;;;;2401:40441:151;;;;;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;13982:73;;;;2401:40441;;13802:74;-1:-1:-1;;;13852:24:151;;2401:40441;13852:24;;2401:40441;;;;;;;-1:-1:-1;;2401:40441:151;;;;5767:26:216;2401:40441:151;;;;:::i;:::-;5737:18:216;3202:4;5737:18;;-1:-1:-1;2401:40441:151;-1:-1:-1;;;;;;;;;;;2401:40441:151;;4919:24:216;2401:40441:151;-1:-1:-1;2401:40441:151;4919:24:216;2401:40441:151;4759:191:216;;5737:18;3202:4;:::i;:::-;5767:26;:::i;:::-;;2401:40441:151;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;3202:4:216;;:::i;:::-;2401:40441:151;;-1:-1:-1;;;17112:27:151;;-1:-1:-1;;;;;2401:40441:151;;;;17112:27;;2401:40441;;;;;;17112:27;2401:40441;17112:4;:27;;;;;;;;;;;2401:40441;17111:28;;17107:76;;2401:40441;;;;-1:-1:-1;;;17304:45:151;;2401:40441;17304:45;;2401:40441;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;17112:27;2401:40441;;17304:45;;;;;;;;;;;2401:40441;17426:56;;;;;;2401:40441;;;17112:27;2401:40441;;;;;;;;;17426:56;;;2401:40441;17426:56;;2401:40441;17426:56;;;;;;;;2401:40441;-1:-1:-1;;;;;;2401:40441:151;-1:-1:-1;40418:38:151;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;;;;;17552:61;;;;2401:40441;;17426:56;;;;;:::i;:::-;2401:40441;;17426:56;;;;2401:40441;;;;17426:56;2401:40441;;;17304:45;;;;;2401:40441;17304:45;2401:40441;17304:45;;;;;;;:::i;:::-;;;;;17107:76;-1:-1:-1;;;17148:35:151;;2401:40441;;17112:27;;17148:35;17112:27;;;;2401:40441;17112:27;2401:40441;17112:27;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;2401:40441;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;3901:31:216;2401:40441:151;;;;;;-1:-1:-1;2401:40441:151;;;;;;-1:-1:-1;2401:40441:151;;;;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;:::i;:::-;3202:4:216;;:::i;:::-;2401:40441:151;;-1:-1:-1;;;19969:27:151;;-1:-1:-1;;;;;2401:40441:151;;;;19969:27;;2401:40441;;;;;;;;19969:4;:27;;;;;;;;;;;2401:40441;19968:28;;19964:76;;-1:-1:-1;;;;;2401:40441:151;;20054:32;;20050:69;;2401:40441;;;;-1:-1:-1;;;20162:45:151;;2401:40441;20162:45;;2401:40441;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;20162:45;;;;;;;;;;;2401:40441;20217:62;;;;;;2401:40441;;20217:62;2401:40441;;;;;;;;;;;;20217:62;;2401:40441;20217:62;;2401:40441;;;;;;20217:62;;;;;;;;2401:40441;-1:-1:-1;;;;;;2401:40441:151;-1:-1:-1;40418:38:151;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;;;;;20295:61;;;;2401:40441;;20217:62;;;;;:::i;:::-;2401:40441;;20217:62;;;;20162:45;;;;;2401:40441;20162:45;2401:40441;20162:45;;;;;;;:::i;:::-;;;;;20050:69;-1:-1:-1;;;20095:24:151;;2401:40441;22689:24;20095;19964:76;-1:-1:-1;;;20005:35:151;;2401:40441;;;;;23000:33;20005:35;19969:27;;;;2401:40441;19969:27;2401:40441;19969:27;;;;;;;:::i;:::-;;;;;2401:40441;;;;;;;;;;;;;;;;;;;;;;37205:20;2401:40441;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;;;-1:-1:-1;;;37632:58:151;;-1:-1:-1;;;;;2401:40441:151;;;;37632:58;;2401:40441;;;;;;;37632:58;;2401:40441;;;37632:58;;;;;;;;;;;2401:40441;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;37632:58;;;2401:40441;37632:58;;2401:40441;37632:58;;;;;;2401:40441;37632:58;;;:::i;:::-;;;2401:40441;;;;;;;;;:::i;:::-;37632:58;;;;;;-1:-1:-1;37632:58:151;;;2401:40441;;;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;-1:-1:-1;;;35713:27:151;;-1:-1:-1;;;;;2401:40441:151;;;;35713:27;;2401:40441;;;;;;35713:27;2401:40441;35713:4;:27;;;;;;;;;;;2401:40441;35712:28;;35708:76;;2401:40441;;;;-1:-1:-1;;;35801:52:151;;2401:40441;35801:52;;2401:40441;;;;;;;;35713:27;;2401:40441;;-1:-1:-1;;;;;2401:40441:151;35801:52;;;;;;;2401:40441;35801:52;;;;2401:40441;;;;;;;;;;35801:52;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;35713:27;;;;2401:40441;35713:27;2401:40441;35713:27;;;;;;;:::i;:::-;;;;2401:40441;;;;;;;;;;;;;;;1830:17:219;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;:::i;:::-;3202:4:216;;;;;:::i;:::-;21579:43:151;;;21575:102;;21690:39;;;21686:98;;21922:13;21937:23;;;;;;2401:40441;;;21922:13;21995:17;;;;;:::i;:::-;2401:40441;;-1:-1:-1;;;;;2401:40441:151;;;;;;22014:14;;;;;:::i;:::-;2401:40441;;-1:-1:-1;;;;;2401:40441:151;;;;;;22030:13;;;;;:::i;:::-;2401:40441;;;;;;;;;22030:13;;;;:::i;:::-;2401:40441;21922:13;;2401:40441;;;;;;;;;;;;21686:98;-1:-1:-1;;;21752:21:151;;2401:40441;21645:21;21752;2401:40441;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;;:::i;:::-;;;1830:17:219;-1:-1:-1;;;;;2401:40441:151;;;;;2054:31:219;;;;2401:40441:151;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;16065:8;3202:4:216;;;:::i;:::-;16065:8:151;:::i;:::-;2401:40441;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;;;-1:-1:-1;;;37421:49:151;;-1:-1:-1;;;;;2401:40441:151;;;;37421:49;;2401:40441;;;;;;37421:49;;2401:40441;;;37421:49;;;;;;;2401:40441;37421:49;;;;2401:40441;;;;;;;;;;37421:49;;;;;;;;;;;;;;:::i;:::-;;;;2401:40441;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;;;;;;;;;;3202:4:216;;:::i;:::-;2401:40441:151;;-1:-1:-1;;;18561:27:151;;-1:-1:-1;;;;;2401:40441:151;;;;18561:27;;2401:40441;;;;;;;;18561:4;:27;;;;;;;;;;;2401:40441;18560:28;;18556:76;;2401:40441;;;;-1:-1:-1;;;;;2401:40441:151;18643:68;;;;;2401:40441;;;18643:68;2401:40441;;;;;;;;;18643:68;;;2401:40441;18643:68;;2401:40441;;;;;;18643:68;;;;;;;;2401:40441;-1:-1:-1;;;;;;2401:40441:151;-1:-1:-1;40418:38:151;;:::i;:::-;2401:40441;18726:52;;;;2401:40441;;18643:68;;;;;:::i;:::-;2401:40441;;18643:68;;;;18556:76;-1:-1:-1;;;18597:35:151;;2401:40441;;;23000:33;18597:35;18561:27;;;;2401:40441;18561:27;2401:40441;18561:27;;;;;;;:::i;:::-;;;;2401:40441;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;-1:-1:-1;;;;;2401:40441:151;;6441:34:216;6437:102;;6549:37;2401:40441:151;;;6549:37:216;:::i;6437:102::-;-1:-1:-1;;;6498:30:216;;2401:40441:151;6498:30:216;;2401:40441:151;;;;;;;-1:-1:-1;;2401:40441:151;;;;5350:25:216;2401:40441:151;;;;:::i;:::-;5320:18:216;3202:4;5320:18;;-1:-1:-1;2401:40441:151;-1:-1:-1;;;;;;;;;;;2401:40441:151;;4919:24:216;2401:40441:151;-1:-1:-1;2401:40441:151;4919:24:216;2401:40441:151;4759:191:216;;3202:4;5350:25;:::i;2401:40441:151:-;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;3202:4:216;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;12924:30;;12920:66;;2401:40441;;-1:-1:-1;;;;;;2401:40441:151;;;;;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;13077:59;;;;2401:40441;;12920:66;-1:-1:-1;;;12963:23:151;;2401:40441;12963:23;;2401:40441;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;;;-1:-1:-1;2401:40441:151;-1:-1:-1;;;;;;;;;;;2401:40441:151;;4919:24:216;2401:40441:151;-1:-1:-1;2401:40441:151;4919:24:216;2401:40441:151;4759:191:216;;2401:40441:151;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;3202:4:216;;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;;;22521:24;;22517:57;;-1:-1:-1;;;;;2401:40441:151;;;22588:23;;22584:56;;-1:-1:-1;;;;;2401:40441:151;;;22654:26;;22650:63;;2401:40441;;;;-1:-1:-1;;;22856:43:151;;2401:40441;22856:43;;2401:40441;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;22856:43;;2401:40441;;22856:43;;;2401:40441;-1:-1:-1;22852:192:151;;23000:33;;;;2401:40441;23000:33;2401:40441;;;;23000:33;22852:192;2401:40441;;-1:-1:-1;;;23178:50:151;;2401:40441;23178:50;;2401:40441;;;22937:24;;;;2401:40441;22852:192;2401:40441;;;;23178:50;;;;;;;;2401:40441;23178:50;;;22852:192;-1:-1:-1;2401:40441:151;;-1:-1:-1;;;23303:49:151;;2401:40441;23303:49;;2401:40441;;;;;;;23303:49;;;;;;;;2401:40441;23303:49;;;22852:192;23299:124;;;2401:40441;;;;;;23651:42;;;2401:40441;23651:42;;2401:40441;;23651:42;2401:40441;23651:42;;;;2401:40441;;23651:42;;;22852:192;-1:-1:-1;23647:730:151;;24342:24;;23588:4;23647:730;;2401:40441;;-1:-1:-1;;;24439:48:151;;2401:40441;24439:48;;2401:40441;;;;;;;24439:48;;;;;;;;2401:40441;24439:48;;;23647:730;24435:122;;;-1:-1:-1;;;;;2401:40441:151;;24660:75;;;;;2401:40441;;-1:-1:-1;;;24660:75:151;;-1:-1:-1;;;;;2401:40441:151;;;;24660:75;;2401:40441;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;-1:-1:-1;;24660:75:151;;;;;;;;23647:730;-1:-1:-1;2401:40441:151;;;;;;;;-1:-1:-1;;;;;2401:40441:151;24813:54;;;;;2401:40441;;;;;;;;;;;;;;;24813:54;;2401:40441;24813:54;;2401:40441;24813:54;;;;;;;;;;;23647:730;24990:142;;;;23647:730;-1:-1:-1;;2401:40441:151;;-1:-1:-1;;;;;2401:40441:151;25230:58;;;;;2401:40441;;-1:-1:-1;;;25230:58:151;;-1:-1:-1;;;;;2401:40441:151;;;;25230:58;;2401:40441;;;;;;;;;;;;;;;;;;25230:58;;;;;;;;;;;;;;23647:730;-1:-1:-1;25304:98:151;;2401:40441;-1:-1:-1;;;;;;40418:38:151;;:::i;:::-;2401:40441;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;25304:98;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;25417:57;;;;2401:40441;;25230:58;;;;;;;;;;:::i;:::-;2401:40441;;25230:58;;;;;;;;24990:142;2401:40441;;-1:-1:-1;;;;;2401:40441:151;;25027:94;;;;;2401:40441;;-1:-1:-1;;;25027:94:151;;-1:-1:-1;;;;;2401:40441:151;;;;25027:94;;2401:40441;;;;;;;;;;;;;;;;;;;;;;;;;;25027:94;;;;;;;;;;24990:142;25027:94;;;;;:::i;:::-;2401:40441;;25027:94;;24990:142;;24813:54;;;;;:::i;:::-;2401:40441;;24813:54;;;;;2401:40441;;;;;;;;;24660:75;;;;;;;;2401:40441;24660:75;;:::i;:::-;2401:40441;24660:75;;;;;;;;2401:40441;;;;;;;;;24660:75;2401:40441;;;24435:122;23375:37;;;;2401:40441;24510:36;2401:40441;;;;24510:36;24439:48;;;;2401:40441;24439:48;2401:40441;24439:48;;;;;;;:::i;:::-;;;;23647:730;-1:-1:-1;;;;;2401:40441:151;23910:49;;;2401:40441;23906:328;23647:730;;23906:328;24183:36;;;;2401:40441;24183:36;2401:40441;;;;24183:36;23651:42;;;;;2401:40441;23651:42;2401:40441;23651:42;;;;;;;:::i;:::-;;;;;23299:124;23375:37;;;;2401:40441;23375:37;2401:40441;;;;23375:37;23303:49;;;;2401:40441;23303:49;2401:40441;23303:49;;;;;;;:::i;:::-;;;;23178:50;;;;;2401:40441;23178:50;2401:40441;23178:50;;;;;;;:::i;:::-;;;;;22856:43;;;;;2401:40441;22856:43;2401:40441;22856:43;;;;;;;:::i;:::-;;;;;22650:63;22689:24;;;2401:40441;22689:24;2401:40441;;22689:24;22584:56;22554:20;;;2401:40441;22620:20;2401:40441;;22620:20;2401:40441;;;;;;-1:-1:-1;;2401:40441:151;;;;;;:::i;:::-;3202:4:216;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;14674:34;;14670:82;;14762:70;2401:40441;;-1:-1:-1;;;;;;2401:40441:151;;;;;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;14847:67;2401:40441;14847:67;;2401:40441;14670:82;14717:35;;;2401:40441;14717:35;2401:40441;;14717:35;2401:40441;;;;;;-1:-1:-1;;2401:40441:151;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;42738:55:151;;;:95;;;;2401:40441;;;;;;;42738:95;-1:-1:-1;;;3551:47:216;;;-1:-1:-1;3551:87:216;;;;42738:95:151;;;;;3551:87:216;-1:-1:-1;;;1134:40:229;;-1:-1:-1;3551:87:216;;;2401:40441:151;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;:::o;:::-;;;;-1:-1:-1;2401:40441:151;;;;;-1:-1:-1;2401:40441:151;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;26276:402::-;2401:40441;;;;-1:-1:-1;;;26459:45:151;;-1:-1:-1;;;;;2401:40441:151;;;26459:45;;;2401:40441;;;;;;26459:45;;2401:40441;;;26459:45;;;;;;26276:402;-1:-1:-1;26455:217:151;;2401:40441;26600:12;:::o;26455:217::-;26546:4;26539:11;:::o;26459:45::-;;;2401:40441;26459:45;2401:40441;26459:45;;;;;;;:::i;:::-;;;2401:40441;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;13852:24;2401:40441;;-1:-1:-1;;2401:40441:151;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;2401:40441:151;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;2401:40441:151;;;;;;;;-1:-1:-1;;2401:40441:151;;;;:::o;28551:5385::-;2401:40441;;;;-1:-1:-1;;;28808:51:151;;-1:-1:-1;;;;;2401:40441:151;;;28808:51;;;2401:40441;;;;;;;;;;28808:51;2401:40441;;28808:51;;;;;;;2401:40441;28808:51;;;28551:5385;28804:94;;;2401:40441;;-1:-1:-1;;;29220:27:151;;28808:51;29220:27;;2401:40441;;;;;28808:51;2401:40441;29220:4;:27;;;;;;;2401:40441;29220:27;;;28551:5385;29219:28;;29215:46;;29441:31;;29437:48;;29630:20;2401:40441;;;;;-1:-1:-1;;;29842:45:151;;28808:51;29842:45;;2401:40441;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;28808:51;;2401:40441;;29842:45;;;;;;;2401:40441;29842:45;;;28551:5385;30026:13;2401:40441;30041:29;;;;;;33918:11;;;;;;29716:23;28551:5385;:::o;30026:13::-;30110:22;;;;;:::i;:::-;2401:40441;30236:17;;30232:135;;2401:40441;;-1:-1:-1;;;30463:49:151;;28808:51;30463:49;;2401:40441;;;;;28808:51;2401:40441;30463:49;;;;;;;;2401:40441;30463:49;;;30026:13;30462:50;;30458:148;;2401:40441;;;;;;;30829:67;;;28808:51;30829:67;;2401:40441;;30829:67;28808:51;30829:67;;;;;;;;;2401:40441;30829:67;;;30026:13;2401:40441;;;31048:13;2401:40441;31063:25;;;;;;31043:2465;33681:14;;;;;33677:65;;29716:23;2401:40441;30026:13;;;;;33677:65;33715:12;;;;;;2401:40441;33715:12;:::o;31048:13::-;2401:40441;;;;;;;;;;;;;;;;;;;;;;;;;31383:49;;2401:40441;;;;;;;;;;31383:49;;;;;;:::i;:::-;2401:40441;31373:60;;2401:40441;;-1:-1:-1;;;31531:34:151;;28808:51;31531:34;;2401:40441;;;;-1:-1:-1;;;;;2401:40441:151;;;;-1:-1:-1;2401:40441:151;28808:51;2401:40441;;31531:34;;;2401:40441;;;;;;31531:34;;;31048:13;31527:1722;;;31048:13;33362:24;;;;;;;;29716:23;2401:40441;31048:13;;33362:24;33381:5;;31527:1722;-1:-1:-1;;;;;2401:40441:151;32201:33;;;:58;;31527:1722;32197:834;;31527:1722;;;;32197:834;2401:40441;;;;;;;;;;;;;;;;;32381:69;;28808:51;32381:69;;2401:40441;28808:51;2401:40441;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2401:40441:151;;;;;;;:::i;:::-;32381:69;;;;2401:40441;;32381:69;;;32197:834;32377:632;;;32197:834;;;;;;;32377:632;32528:233;;;;32377:632;;;;32528:233;32575:20;;;;;29716:23;32655:5;;;;;;32381:69;;;;;2401:40441;32381:69;;;;;;;;;:::i;:::-;;;;;32201:58;32238:21;;;;32201:58;;31531:34;;;;;;;;;;;2401:40441;31531:34;;;;;;:::i;:::-;;;2401:40441;;;;;;;;;;;;;;;:::i;:::-;;31383:49;2401:40441;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;31531:34;;;;;;;30829:67;;;;;2401:40441;30829:67;;;;;;:::i;:::-;;;2401:40441;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;30829:67;;;;;;2401:40441;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;30458:148;30532:12;;;;;;;2401:40441;30532:12;:::o;30463:49::-;;;;2401:40441;30463:49;;;;;;;;;:::i;:::-;;;;30232:135;2401:40441;29716:23;2401:40441;30344:8;;;29842:45;;;;;2401:40441;29842:45;2401:40441;29842:45;;;;;;;:::i;:::-;;;;;29437:48;29474:11;;;;29481:4;29474:11;:::o;29215:46::-;29249:12;;;;2401:40441;29249:12;:::o;29220:27::-;;;;2401:40441;29220:27;2401:40441;29220:27;;;;;;;:::i;:::-;;;;28808:51;;;;2401:40441;28808:51;2401:40441;28808:51;;;;;;;:::i;:::-;;;;4148:103:216;40418:38:151;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;4468:23:216;4464:108;;4148:103;:::o;4464:108::-;4514:47;;;2401:40441:151;4514:47:216;2401:40441:151;;;;;;4514:47:216;2401:40441:151;;;;;;4514:47:216;4148:103;40418:38:151;;:::i;:::-;-1:-1:-1;;;;;2401:40441:151;;-1:-1:-1;2401:40441:151;;;;;;;;;;;;4468:23:216;4464:108;;4148:103;:::o;4464:108::-;-1:-1:-1;;;;4514:47:216;;;-1:-1:-1;;;;;2401:40441:151;;;;4514:47:216;2401:40441:151;658:27:115;2401:40441:151;;;;4514:47:216;4148:103;40418:38:151;;:::i;:::-;2401:40441;-1:-1:-1;2401:40441:151;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;-1:-1:-1;2401:40441:151;;;;;;;;-1:-1:-1;2401:40441:151;;;;;-1:-1:-1;2401:40441:151;;;4468:23:216;4464:108;;4148:103;;:::o;4464:108::-;4514:47;;;-1:-1:-1;4514:47:216;2401:40441:151;;;;;;4514:47:216;2401:40441:151;;;;-1:-1:-1;4514:47:216;7270:387;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;40418:38;;:::i;:::-;2401:40441;;-1:-1:-1;;;;;2401:40441:151;;7532:40:216;2401:40441:151;;7532:40:216;7509:4;7586:11;:::o;7432:219::-;7628:12;2401:40441:151;7628:12:216;:::o;7270:387::-;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;40418:38;;:::i;:::-;2401:40441;;-1:-1:-1;;;;;2401:40441:151;658:27:115;7532:40:216;2401:40441:151;;7532:40:216;7509:4;7586:11;:::o;7270:387::-;2401:40441:151;;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;40418:38;;:::i;:::-;2401:40441;;-1:-1:-1;;;;;2401:40441:151;;7532:40:216;2401:40441:151;;7532:40:216;7509:4;7586:11;:::o;7432:219::-;7628:12;;2401:40441:151;7628:12:216;:::o;7894:388::-;2401:40441:151;;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;;;;;-1:-1:-1;;;;;2401:40441:151;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;40418:38;;:::i;:::-;2401:40441;;-1:-1:-1;;;;;2401:40441:151;;8157:40:216;2401:40441:151;;8157:40:216;2401:40441:151;8211:11:216;:::o;38753:773:151:-;-1:-1:-1;;;;;2401:40441:151;;;38887:1;;38863:26;;38859:59;;-1:-1:-1;;;;;2401:40441:151;;;38932:32;;38928:69;;2401:40441;;-1:-1:-1;;;39089:27:151;;;;;2401:40441;;;;;39089:27;2401:40441;39089:4;:27;;;;;;;38887:1;39089:27;;;38753:773;39085:79;;;38887:1;2401:40441;-1:-1:-1;;;;;2401:40441:151;;39237:72;;;;;2401:40441;;-1:-1:-1;;;39237:72:151;;-1:-1:-1;;;;;2401:40441:151;;;39089:27;39237:72;;2401:40441;;;;;;;;;;;;;;;-1:-1:-1;;2401:40441:151;;;;;;-1:-1:-1;;39237:72:151;;;;;;;;38753:773;-1:-1:-1;2401:40441:151;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;39385:67;2401:40441;;;;;;;;;;39385:67;39467:52;-1:-1:-1;;;;;40418:38:151;;:::i;:::-;2401:40441;39467:52;;;38753:773::o;39237:72::-;;;;;38887:1;39237:72;;:::i;:::-;38887:1;39237:72;;;;39085:79;24183:36;;;;38887:1;39125:39;39089:27;2401:40441;39089:27;38887:1;39125:39;39089:27;;;;2401:40441;39089:27;2401:40441;39089:27;;;;;;;:::i;:::-;;;;2329:429:219;2545:10;1830:17;-1:-1:-1;;;;;2401:40441:151;2054:31:219;;2526:71;;2329:429;2522:230;;;2401:40441:151;;2435:8:219;2401:40441:151;2435:8:219;2401:40441:151;;;;;;;;2613:72:219:o;2401:40441:151:-;;;;;;;;;;;;2522:230:219;2545:10;2716:25;:::o;2526:71::-;2435:8;3606:2;2435:8;2560:37;;2526:71;;7082:141:220;2401:40441:151;-1:-1:-1;;;;;;;;;;;2401:40441:151;;;;7148:18:220;7144:73;;7082:141::o;7144:73::-;7189:17;;;-1:-1:-1;7189:17:220;;-1:-1:-1;7189:17:220",
    "linkReferences": {},
    "immutableReferences": {
      "52453": [
        {
          "start": 2923,
          "length": 32
        },
        {
          "start": 3402,
          "length": 32
        },
        {
          "start": 9025,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DEFAULT_ADMIN_ROLE()": "a217fddf",
    "batchRegisterIdentity(address[],address[],uint16[])": "653dc9f1",
    "contains(address)": "5dbe47e8",
    "deleteIdentity(address)": "a8d29d1d",
    "getRecoveredWallet(address)": "84bb0330",
    "getRoleAdmin(bytes32)": "248a9ca3",
    "grantRole(bytes32,address)": "2f2ff15d",
    "hasRole(bytes32,address)": "91d14854",
    "identity(address)": "f0eb5e54",
    "identityStorage()": "f11abfd8",
    "initialize(address,address,address,address)": "f8c8765e",
    "investorCountry(address)": "7e42683b",
    "isTrustedForwarder(address)": "572b6c05",
    "isVerified(address,uint256[])": "7a76ac78",
    "isWalletLost(address)": "3f8ed173",
    "issuersRegistry()": "b4f3fcb7",
    "recoverIdentity(address,address,address)": "2406dfc6",
    "registerIdentity(address,address,uint16)": "454a03e0",
    "renounceRole(bytes32,address)": "36568abe",
    "revokeRole(bytes32,address)": "d547741f",
    "setIdentityRegistryStorage(address)": "26d941ae",
    "setTopicSchemeRegistry(address)": "0f8fccd7",
    "setTrustedIssuersRegistry(address)": "e744d789",
    "supportsInterface(bytes4)": "01ffc9a7",
    "topicSchemeRegistry()": "84c9f8a1",
    "trustedForwarder()": "7da0a877",
    "updateCountry(address,uint16)": "3b239a7f",
    "updateIdentity(address,address)": "8e098ca1"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"IdentityAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"IdentityNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIdentityAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegistryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStorageAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTopicSchemeRegistryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUserAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletAlreadyMarkedAsLost\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identityContract\",\"type\":\"address\"}],\"name\":\"WalletNotRegisteredToThisIdentity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"CountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIdentityContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldIdentityContract\",\"type\":\"address\"}],\"name\":\"IdentityRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"IdentityRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityStorage\",\"type\":\"address\"}],\"name\":\"IdentityStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_topicSchemeRegistry\",\"type\":\"address\"}],\"name\":\"TopicSchemeRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trustedIssuersRegistry\",\"type\":\"address\"}],\"name\":\"TrustedIssuersRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletRecoveryLinked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRegisterIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"}],\"name\":\"getRecoveredWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract ISMARTIdentityRegistryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identityStorage_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedIssuersRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"topicSchemeRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"investorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"requiredClaimTopics\",\"type\":\"uint256[]\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"isWalletLost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuersRegistry\",\"outputs\":[{\"internalType\":\"contract IERC3643TrustedIssuersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOnchainId\",\"type\":\"address\"}],\"name\":\"recoverIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityStorage_\",\"type\":\"address\"}],\"name\":\"setIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"topicSchemeRegistry_\",\"type\":\"address\"}],\"name\":\"setTopicSchemeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedIssuersRegistry_\",\"type\":\"address\"}],\"name\":\"setTrustedIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicSchemeRegistry\",\"outputs\":[{\"internalType\":\"contract ISMARTTopicSchemeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"updateCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"This implementation relies on separate contracts for storing identity data (`ISMARTIdentityRegistryStorage`) and for managing trusted claim issuers (`IERC3643TrustedIssuersRegistry`). It uses OpenZeppelin's `AccessControlUpgradeable` for role-based access control, `ERC2771ContextUpgradeable` for meta-transaction support (allowing transactions to be relayed by a trusted forwarder), and is designed to be upgradeable using the UUPS (Universal Upgradeable Proxy Standard) pattern.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ArrayLengthMismatch()\":[{\"details\":\"For example, in `batchRegisterIdentity`, the `_userAddresses`, `_identities`, and `_countries` arrays must all have the same length.\"}],\"IdentityAlreadyRegistered(address)\":[{\"params\":{\"userAddress\":\"The address that is already registered.\"}}],\"IdentityNotRegistered(address)\":[{\"params\":{\"userAddress\":\"The address that was not found in the registry.\"}}],\"InvalidIdentityAddress()\":[{\"details\":\"This can occur during identity registration or updates if the identity contract address is null.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidRegistryAddress()\":[{\"details\":\"This usually happens when setting or updating the trusted issuers registry address.\"}],\"InvalidStorageAddress()\":[{\"details\":\"This typically occurs during initialization or when updating storage contract addresses.\"}],\"InvalidTopicSchemeRegistryAddress()\":[{\"details\":\"This usually happens when setting or updating the topic scheme registry address.\"}],\"InvalidUserAddress()\":[{\"details\":\"This check is often performed during identity registration to ensure a valid user address is being associated with an identity.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"WalletAlreadyMarkedAsLost(address)\":[{\"params\":{\"wallet\":\"The wallet address that is already marked as lost.\"}}],\"WalletNotRegisteredToThisIdentity(address,address)\":[{\"params\":{\"identityContract\":\"The IIdentity contract it was expected to be linked to.\",\"wallet\":\"The wallet address in question.\"}}]},\"events\":{\"CountryUpdated(address,address,uint16)\":{\"details\":\"This event is important for compliance processes that may depend on the investor's jurisdiction.\",\"params\":{\"_country\":\"The new numeric country code (conforming to ISO 3166-1 alpha-2 standard, e.g., 840 for USA).\",\"_investorAddress\":\"The wallet address of the investor whose country information was updated.\",\"sender\":\"The address of the account (e.g., a registrar agent) that performed the update.\"}},\"IdentityRecovered(address,address,address,address,address)\":{\"params\":{\"lostWallet\":\"The previous wallet address that has now been marked as lost. (Indexed)\",\"newIdentityContract\":\"The new IIdentity contract for the new wallet. (Indexed)\",\"newWallet\":\"The new active wallet address for the identity. (Indexed)\",\"oldIdentityContract\":\"The old IIdentity contract that was associated with the lost wallet.\",\"sender\":\"The address of the account (e.g., a registrar agent) that performed the recovery.\"}},\"IdentityRegistered(address,address,address,uint16)\":{\"details\":\"This event marks the creation of an association between a wallet and an on-chain identity contract.\",\"params\":{\"_country\":\"The numeric country code (ISO 3166-1 alpha-2 standard) representing the investor's jurisdiction.\",\"_identity\":\"The address of the investor's `IIdentity` smart contract, which holds their claims and attestations.\",\"_investorAddress\":\"The wallet address of the investor being registered.\",\"sender\":\"The address of the account (e.g., a registrar agent) that performed the registration.\"}},\"IdentityRemoved(address,address,address)\":{\"details\":\"This event indicates that the link between a wallet address and its associated `IIdentity` contract has been severed.\",\"params\":{\"_identity\":\"The address of the `IIdentity` smart contract that was previously associated with the investor address.\",\"_investorAddress\":\"The wallet address of the investor whose registration was removed.\",\"sender\":\"The address of the account (e.g., a registrar agent) that performed the removal.\"}},\"IdentityStorageSet(address,address)\":{\"details\":\"This event is crucial for transparency, allowing external observers to track changes in the underlying      storage mechanism used by the Identity Registry.\",\"params\":{\"_identityStorage\":\"The new address of the contract implementing `ISMARTIdentityRegistryStorage`.\",\"sender\":\"The address of the account (typically the owner or an admin) that initiated this change.\"}},\"IdentityUpdated(address,address,address)\":{\"details\":\"This typically occurs during identity recovery processes or when an investor chooses to link a new identity contract.\",\"params\":{\"_newIdentity\":\"The address of the newly associated `IIdentity` contract.\",\"_oldIdentity\":\"The address of the previously associated `IIdentity` contract.\",\"sender\":\"The address of the account (e.g., a registrar agent) that performed the update.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TopicSchemeRegistrySet(address,address)\":{\"details\":\"This event signals a change in the topic scheme registry that defines valid claim topics.\",\"params\":{\"_topicSchemeRegistry\":\"The new address of the contract implementing `ISMARTTopicSchemeRegistry`.\",\"sender\":\"The address of the account (typically the owner or an admin) that initiated this change.\"}},\"TrustedIssuersRegistrySet(address,address)\":{\"details\":\"This event signals a change in the list of authorities whose claims are recognized by this Identity Registry.      It's important for users and relying parties to be aware of which issuers are trusted.\",\"params\":{\"_trustedIssuersRegistry\":\"The new address of the contract implementing `IERC3643TrustedIssuersRegistry`.\",\"sender\":\"The address of the account (typically the owner or an admin) that initiated this change.\"}},\"WalletRecoveryLinked(address,address,address)\":{\"details\":\"This event helps track the recovery chain for token reclaim purposes.\",\"params\":{\"lostWallet\":\"The lost wallet address.\",\"newWallet\":\"The new replacement wallet address.\",\"sender\":\"The address that performed the recovery operation.\"}}},\"kind\":\"dev\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It iterates through the provided arrays (`_userAddresses`, `_identities`, `_countries`) and calls `_registerIdentity` for each set of parameters. It performs checks to ensure that all provided arrays have the same length to prevent errors.\",\"params\":{\"_countries\":\"An array of numerical country codes (uint16) corresponding to each user address. Reverts with `ArrayLengthMismatch` if the lengths of the input arrays are inconsistent.\",\"_identities\":\"An array of `IIdentity` contract addresses corresponding to each user address.\",\"_userAddresses\":\"An array of user blockchain addresses to be registered.\"}},\"constructor\":{\"details\":\"This constructor is typically called only once when the implementation contract is deployed. It initializes the `ERC2771ContextUpgradeable` by setting the `trustedForwarder` address. Meta-transactions sent via this `trustedForwarder` will have `_msgSender()` return the original sender rather than the forwarder contract. The `_disableInitializers()` function is called to prevent the `initialize` function from being called on this implementation contract directly after deployment if it were not an upgradeable contract. For UUPS proxies, the initializer is called on the proxy.\",\"params\":{\"trustedForwarder\":\"The address of the trusted forwarder contract for meta-transactions. If address(0) is provided, meta-transactions are effectively disabled for this context.\"}},\"contains(address)\":{\"details\":\"This function queries the `_identityStorage` contract by attempting to retrieve the `storedIdentity`. If the retrieval is successful (does not revert), it means the identity exists, and the function returns `true`. If the retrieval reverts (e.g., identity not found in storage), it's caught, and the function returns `false`. This approach avoids a direct \\\"exists\\\" function on the storage if not available, relying on try/catch.\",\"params\":{\"_userAddress\":\"The user's blockchain address to check for registration.\"},\"returns\":{\"_0\":\"`true` if the `_userAddress` is registered, `false` otherwise.\"}},\"deleteIdentity(address)\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered using `this.contains()`. If registered, it retrieves the `IIdentity` contract to be deleted (for event emission), then calls `_identityStorage.removeIdentityFromStorage()` to remove the data from the storage contract. Emits an `IdentityRemoved` event upon successful deletion.\",\"params\":{\"_userAddress\":\"The blockchain address of the user whose identity is to be deleted. Reverts with `IdentityNotRegistered` if the address is not found.\"}},\"getRecoveredWallet(address)\":{\"details\":\"This is the key function for token recovery validation.\",\"params\":{\"lostWallet\":\"The lost wallet address.\"},\"returns\":{\"_0\":\"The new wallet address that replaced the lost wallet, or address(0) if not found.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"identity(address)\":{\"details\":\"This function directly calls `_identityStorage.storedIdentity()` to fetch the identity contract. It's a public view function, meaning it can be called externally without gas costs for reading data. If the `_userAddress` is not registered, this call will likely revert (behavior depends on the storage contract). Consider using `contains()` first if a revert is not desired for non-existent users.\",\"params\":{\"_userAddress\":\"The user's blockchain address whose `IIdentity` contract is to be retrieved.\"},\"returns\":{\"_0\":\"The address of the `IIdentity` contract associated with the `_userAddress`. Returns address(0) or reverts if the user is not registered, depending on storage implementation.\"}},\"identityStorage()\":{\"details\":\"This allows external contracts or UIs to discover the location of the storage layer.\",\"returns\":{\"_0\":\"The address of the `ISMARTIdentityRegistryStorage` contract.\"}},\"initialize(address,address,address,address)\":{\"details\":\"This function sets up the core components of the identity registry: 1.  Initializes `ERC165Upgradeable` for interface detection. 2.  Initializes `AccessControlUpgradeable` for role-based access management. 3.  Grants the `DEFAULT_ADMIN_ROLE` and `REGISTRAR_ROLE` to the `initialAdmin` address.     The `DEFAULT_ADMIN_ROLE` allows managing other roles and system parameters.     The `REGISTRAR_ROLE` allows managing identities. 4.  Sets the addresses for the `_identityStorage`, `_trustedIssuersRegistry`, and `_topicSchemeRegistry` contracts.     These addresses must not be zero addresses. It is protected by the `initializer` modifier from OpenZeppelin, ensuring it can only be called once.\",\"params\":{\"identityStorage_\":\"The address of the deployed `ISMARTIdentityRegistryStorage` contract. This contract will be used to store all identity data.\",\"initialAdmin\":\"The address that will receive initial administrative and registrar privileges. This address will be responsible for the initial setup and management of the registry.\",\"topicSchemeRegistry_\":\"The address of the deployed `ISMARTTopicSchemeRegistry` contract. This contract will be used to validate claim topics against registered schemes.\",\"trustedIssuersRegistry_\":\"The address of the deployed `IERC3643TrustedIssuersRegistry` contract. This contract will be used to verify claims against trusted issuers.\"}},\"investorCountry(address)\":{\"details\":\"This function first checks if the `_userAddress` is registered using `this.contains()`. If not registered, it reverts with `IdentityNotRegistered`. Otherwise, it calls `_identityStorage.storedInvestorCountry()` to fetch the country code.\",\"params\":{\"_userAddress\":\"The user's blockchain address whose country code is to be retrieved.\"},\"returns\":{\"_0\":\"The numerical country code (uint16) associated with the `_userAddress`. Reverts if the user is not registered.\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"isVerified(address,uint256[])\":{\"details\":\"An identity is considered verified if: 1. The `_userAddress` is registered in the system (checked via `this.contains()`). 2. For *each* `requiredClaimTopics` (that is not zero):    a. The topic is registered in the topic scheme registry.    b. The identity contract (`IIdentity`) associated with `_userAddress` has a claim for that topic.    c. The issuer of that claim is one of the trusted issuers for that specific topic, as defined in the `_trustedIssuersRegistry`.    d. The claim is considered valid by the issuer (checked by calling `issuer.isClaimValid()`). If `requiredClaimTopics` is an empty array, the function returns `true` (no specific claims are required for verification). If any required claim topic is 0, it's skipped. This allows for optional or placeholder topics. The function iterates through each required claim topic and then through the trusted issuers for that topic, attempting to find a valid claim. If a valid claim is found for a topic, it moves to the next topic. If any required topic does not have a corresponding valid claim from a trusted issuer, the function returns `false`.\",\"params\":{\"_userAddress\":\"The user's blockchain address whose verification status is being checked.\",\"requiredClaimTopics\":\"An array of `uint256` values, where each value is a claim topic ID (e.g., KYC, AML). These are the topics for which the identity must hold valid claims.\"},\"returns\":{\"_0\":\"`true` if the identity is registered and all non-zero `requiredClaimTopics` are satisfied by valid claims from trusted issuers, `false` otherwise.\"}},\"isWalletLost(address)\":{\"params\":{\"userWallet\":\"The wallet address to check.\"},\"returns\":{\"_0\":\"True if the wallet is marked as lost, false otherwise.\"}},\"issuersRegistry()\":{\"details\":\"This allows external contracts or UIs to discover the location of the trusted issuers list.\",\"returns\":{\"_0\":\"The address of the `IERC3643TrustedIssuersRegistry` contract.\"}},\"recoverIdentity(address,address,address)\":{\"details\":\"This function handles the practical reality that losing wallet access often means losing      access to the identity contract as well. It creates a fresh start while maintaining      regulatory compliance data and recovery links for token reclaim.      The function is typically restricted to registrar roles.\",\"params\":{\"lostWallet\":\"The current wallet address to be marked as lost.\",\"newOnchainId\":\"The new IIdentity contract address for the new wallet.\",\"newWallet\":\"The new wallet address to be registered.\"}},\"registerIdentity(address,address,uint16)\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It internally calls the `_registerIdentity` helper function to perform the registration logic after access control checks have passed.\",\"params\":{\"_country\":\"A numerical code (uint16) representing the user's country of residence or jurisdiction.\",\"_identity\":\"The address of the `IIdentity` (ERC725/ERC734) contract representing the user's on-chain identity.\",\"_userAddress\":\"The blockchain address of the user whose identity is being registered. This address will be linked to the `_identity` contract.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setIdentityRegistryStorage(address)\":{\"details\":\"This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `identityStorage_` address is not the zero address. Emits an `IdentityStorageSet` event upon successful update.\",\"params\":{\"identityStorage_\":\"The new address for the `ISMARTIdentityRegistryStorage` contract.\"}},\"setTopicSchemeRegistry(address)\":{\"details\":\"This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `topicSchemeRegistry_` address is not the zero address. Emits a `TopicSchemeRegistrySet` event upon successful update.\",\"params\":{\"topicSchemeRegistry_\":\"The new address for the `ISMARTTopicSchemeRegistry` contract.\"}},\"setTrustedIssuersRegistry(address)\":{\"details\":\"This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `trustedIssuersRegistry_` address is not the zero address. Emits a `TrustedIssuersRegistrySet` event upon successful update.\",\"params\":{\"trustedIssuersRegistry_\":\"The new address for the `IERC3643TrustedIssuersRegistry` contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"This function is part of the ERC165 standard for interface detection. It checks if the contract implements the `ISMARTIdentityRegistry` interface or any interfaces supported by its parent contracts (via `super.supportsInterface`). This allows other contracts to query if this registry conforms to the expected interface.\",\"params\":{\"interfaceId\":\"The EIP-165 interface identifier (bytes4) to check.\"},\"returns\":{\"_0\":\"`true` if the contract supports the `interfaceId`, `false` otherwise.\"}},\"topicSchemeRegistry()\":{\"details\":\"This allows external contracts or UIs to discover the location of the topic scheme registry.\",\"returns\":{\"_0\":\"The address of the `ISMARTTopicSchemeRegistry` contract.\"}},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"updateCountry(address,uint16)\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered. If registered, it calls `_identityStorage.modifyStoredInvestorCountry()` to update the country code in the storage contract. Emits a `CountryUpdated` event upon successful update.\",\"params\":{\"_country\":\"The new numerical country code (uint16) for the user.\",\"_userAddress\":\"The blockchain address of the user whose country code is to be updated. Reverts with `IdentityNotRegistered` if the address is not found.\"}},\"updateIdentity(address,address)\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered and if the new `_identity` address is not zero. If checks pass, it retrieves the old `IIdentity` contract (for event emission), then calls `_identityStorage.modifyStoredIdentity()` to update the identity contract in the storage contract. Emits an `IdentityUpdated` event upon successful update.\",\"params\":{\"_identity\":\"The address of the new `IIdentity` contract to associate with the `_userAddress`. Reverts with `InvalidIdentityAddress` if this is the zero address.\",\"_userAddress\":\"The blockchain address of the user whose `IIdentity` contract is to be updated. Reverts with `IdentityNotRegistered` if the address is not found.\"}}},\"stateVariables\":{\"_identityStorage\":{\"details\":\"This external contract is responsible for persisting all identity-related data, such as the mapping from user addresses to their identity contracts and investor country codes. This separation of logic and storage enhances upgradeability and modularity.\"},\"_topicSchemeRegistry\":{\"details\":\"This external contract maintains the valid topic schemes and their signatures. The `isVerified` function uses this registry to validate that claim topics are registered before checking claims.\"},\"_trustedIssuersRegistry\":{\"details\":\"This external contract maintains a list of trusted entities (claim issuers) that are authorized to issue verifiable claims about identities (e.g., KYC/AML status). The `isVerified` function uses this registry to check the validity of claims.\"}},\"title\":\"ATK Identity Registry Implementation\",\"version\":1},\"userdoc\":{\"errors\":{\"ArrayLengthMismatch()\":[{\"notice\":\"Error triggered when the lengths of arrays provided for a batch operation do not match.\"}],\"IdentityAlreadyRegistered(address)\":[{\"notice\":\"Error triggered when an attempt is made to register an identity for a user address that is already registered.\"}],\"IdentityNotRegistered(address)\":[{\"notice\":\"Error triggered when an operation is attempted on a user address that is not registered in the system.\"}],\"InvalidIdentityAddress()\":[{\"notice\":\"Error triggered when an invalid identity contract address (e.g., address(0)) is provided.\"}],\"InvalidRegistryAddress()\":[{\"notice\":\"Error triggered when an invalid registry address (e.g., address(0)) is provided.\"}],\"InvalidStorageAddress()\":[{\"notice\":\"Error triggered when an invalid storage address (e.g., address(0)) is provided.\"}],\"InvalidTopicSchemeRegistryAddress()\":[{\"notice\":\"Error triggered when an invalid topic scheme registry address (e.g., address(0)) is provided.\"}],\"InvalidUserAddress()\":[{\"notice\":\"Error triggered when an invalid user address (e.g., address(0)) is provided.\"}],\"WalletAlreadyMarkedAsLost(address)\":[{\"notice\":\"Error triggered if an operation is attempted on a wallet that is already marked as lost.\"}],\"WalletNotRegisteredToThisIdentity(address,address)\":[{\"notice\":\"Error triggered if a wallet is expected to be registered to a specific identity, but it is not.\"}]},\"events\":{\"CountryUpdated(address,address,uint16)\":{\"notice\":\"Emitted when the country code associated with a registered investor's wallet address is updated.\"},\"IdentityRecovered(address,address,address,address,address)\":{\"notice\":\"Emitted when an identity is successfully recovered, associating a new wallet with a new identity         and marking the old wallet as lost.\"},\"IdentityRegistered(address,address,address,uint16)\":{\"notice\":\"Emitted when a new identity is successfully registered for an investor's wallet address.\"},\"IdentityRemoved(address,address,address)\":{\"notice\":\"Emitted when an existing identity registration is successfully removed for an investor's wallet address.\"},\"IdentityStorageSet(address,address)\":{\"notice\":\"Emitted when the address of the `IdentityRegistryStorage` contract is successfully set or updated.\"},\"IdentityUpdated(address,address,address)\":{\"notice\":\"Emitted when the `IIdentity` contract associated with a registered investor's wallet address is updated.\"},\"TopicSchemeRegistrySet(address,address)\":{\"notice\":\"Emitted when the address of the `TopicSchemeRegistry` contract is successfully set or updated.\"},\"TrustedIssuersRegistrySet(address,address)\":{\"notice\":\"Emitted when the address of the `TrustedIssuersRegistry` contract is successfully set or updated.\"},\"WalletRecoveryLinked(address,address,address)\":{\"notice\":\"Emitted when a wallet recovery link is established between a lost wallet and its replacement.\"}},\"kind\":\"user\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"notice\":\"Registers multiple identities in a single transaction (batch operation).\"},\"constructor\":{\"notice\":\"Constructor for the `ATKIdentityRegistryImplementation` contract.\"},\"contains(address)\":{\"notice\":\"Checks if a given user address is registered in the identity system.\"},\"deleteIdentity(address)\":{\"notice\":\"Deletes an existing identity associated with a given user address from the registry.\"},\"getRecoveredWallet(address)\":{\"notice\":\"Gets the new wallet address that replaced a lost wallet during recovery.\"},\"identity(address)\":{\"notice\":\"Retrieves the `IIdentity` contract address associated with a given user address.\"},\"identityStorage()\":{\"notice\":\"Returns the address of the currently configured identity storage contract.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the `SMARTIdentityRegistryImplementation` contract after it has been deployed (typically called via a proxy).\"},\"investorCountry(address)\":{\"notice\":\"Retrieves the country code associated with a registered user address.\"},\"isVerified(address,uint256[])\":{\"notice\":\"Checks if a registered user's identity is verified for a given set of required claim topics.\"},\"isWalletLost(address)\":{\"notice\":\"Checks if a wallet address has been marked as lost.\"},\"issuersRegistry()\":{\"notice\":\"Returns the address of the currently configured trusted issuers registry contract.\"},\"recoverIdentity(address,address,address)\":{\"notice\":\"Recovers an identity by creating a new wallet registration with a new identity contract,         marking the old wallet as lost, and preserving the country code.\"},\"registerIdentity(address,address,uint16)\":{\"notice\":\"Registers a new identity in the system, associating a user's address with an identity contract and a country code.\"},\"setIdentityRegistryStorage(address)\":{\"notice\":\"Updates the address of the identity storage contract.\"},\"setTopicSchemeRegistry(address)\":{\"notice\":\"Updates the address of the topic scheme registry contract.\"},\"setTrustedIssuersRegistry(address)\":{\"notice\":\"Updates the address of the trusted issuers registry contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Indicates whether this contract supports a given interface ID.\"},\"topicSchemeRegistry()\":{\"notice\":\"Returns the address of the currently configured topic scheme registry contract.\"},\"updateCountry(address,uint16)\":{\"notice\":\"Updates the country code associated with an existing registered identity.\"},\"updateIdentity(address,address)\":{\"notice\":\"Updates the `IIdentity` contract associated with an existing registered user address.\"}},\"notice\":\"This contract is the upgradeable logic for the ATK Identity Registry. It manages on-chain investor identities and their associated data, adhering to the ERC-3643 standard for tokenized assets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/identity-registry/ATKIdentityRegistryImplementation.sol\":\"ATKIdentityRegistryImplementation\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/\",\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/\",\":forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol\":{\"keccak256\":\"0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3\",\"dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG\"]},\"contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol\":{\"keccak256\":\"0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee\",\"dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V\"]},\"contracts/smart/interface/ISMART.sol\":{\"keccak256\":\"0xfce323160dd5cd8c9db34de0ea872bec41fd2ea8d8496e1e3c17865d374994da\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://1a1fafbdec0c59e078798438d2a3cd05bd70b864d7dfa67faf135d5634c5ae51\",\"dweb:/ipfs/QmehZwexgZN2BZKA6eFrG3DHUMRUZnzYTen6j5Ry5Znbf2\"]},\"contracts/smart/interface/ISMARTCompliance.sol\":{\"keccak256\":\"0x948341e4ad374e1dded6d1b30c395ad0f01e6ea2099fb6b96c5476e8b28c1d77\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://d261e9a0c8682f11ac86048f13e367caee6d5f512d51b8752186b8c01b6ba618\",\"dweb:/ipfs/Qmdp14emh3NFSAphyuAgsTE7qZt1g1UYcNLS3tNNM8T6Hv\"]},\"contracts/smart/interface/ISMARTIdentityRegistry.sol\":{\"keccak256\":\"0x62a95a9db2ac97ceaf59f7585d7bbaf3acb65ed9b5e57597b9d1fe1b4d7c4eda\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://bd870710359396db48e70ef7e40449125ff744c6c8ce15ad7e1894df430c87ea\",\"dweb:/ipfs/QmZ6khf5Vm6hBkkUgYC1b161jSQaZeegJVRY6ndjRW1EcG\"]},\"contracts/smart/interface/ISMARTIdentityRegistryStorage.sol\":{\"keccak256\":\"0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52\",\"dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz\"]},\"contracts/smart/interface/ISMARTTopicSchemeRegistry.sol\":{\"keccak256\":\"0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0\",\"dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd\"]},\"contracts/smart/interface/structs/SMARTComplianceModuleParamPair.sol\":{\"keccak256\":\"0x489a55538b554a0c935bee7efc28f7e821e161638c5726c9d367a644a0b7c62a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://04bb06aed3ee3c5c6f3df9a59721c08ddd57b5521da1c9c6fd96b7c8b57db813\",\"dweb:/ipfs/QmRuzqKDr2sBHNuQhCzWGa8euNiMyvP7LTjSFjvAj5uFqh\"]},\"contracts/system/ATKSystemRoles.sol\":{\"keccak256\":\"0x7c5a50fcea7ee061d1bf5451217fbf83cfbc42cae638a0de4b8fc41fa5d7d980\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8dc4128ddb017dfd71ff70bd4b292bcf5e60ae6f81a07b1ceb15439607bb93c0\",\"dweb:/ipfs/QmWJpzgR3YuLvRXZPdFzvyZ1mHAyV3fhSUMcdFG4QJ3xzx\"]},\"contracts/system/identity-registry/ATKIdentityRegistryImplementation.sol\":{\"keccak256\":\"0x9d658773b2323014bb21950e8304ddc1971c710c4dbc0ba6101b2d7f65535656\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://77137d9cf8fbfe8cfc209d6724149bbcd7733bc509a2a3e25b0f95b3b7490374\",\"dweb:/ipfs/QmQVQSWWmXpCsfRihBroCyBuoorAVArVd5Ni1gsnVhXq3Y\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e\",\"dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb\",\"dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol\":{\"keccak256\":\"0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e\",\"dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8\",\"dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/access/AccessControlUpgradeable.sol\":{\"keccak256\":\"0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838551e10cc07e570b70aee1078e490658d3a0ab8f4adfd4f3f2a565200753da\",\"dweb:/ipfs/QmceT7R3Pqzywyxr3MSEA7VXU4axZAPS6BLy92iV97rGdG\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol\":{\"keccak256\":\"0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758\",\"dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89\",\"dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessControlBadConfirmation"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AccessControlUnauthorizedAccount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ArrayLengthMismatch"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "IdentityAlreadyRegistered"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "IdentityNotRegistered"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidIdentityAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInitialization"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidRegistryAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidStorageAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidTopicSchemeRegistryAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidUserAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotInitializing"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "WalletAlreadyMarkedAsLost"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "identityContract",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "WalletNotRegisteredToThisIdentity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_investorAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "CountryUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newIdentityContract",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "oldIdentityContract",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "IdentityRecovered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_investorAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "IdentityRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_investorAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_identityStorage",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityStorageSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_oldIdentity",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_newIdentity",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "version",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleAdminChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleGranted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleRevoked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_topicSchemeRegistry",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TopicSchemeRegistrySet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_trustedIssuersRegistry",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TrustedIssuersRegistrySet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "WalletRecoveryLinked",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_userAddresses",
              "type": "address[]"
            },
            {
              "internalType": "contract IIdentity[]",
              "name": "_identities",
              "type": "address[]"
            },
            {
              "internalType": "uint16[]",
              "name": "_countries",
              "type": "uint16[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchRegisterIdentity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "contains",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deleteIdentity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRecoveredWallet",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "identity",
          "outputs": [
            {
              "internalType": "contract IIdentity",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityStorage",
          "outputs": [
            {
              "internalType": "contract ISMARTIdentityRegistryStorage",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initialAdmin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "identityStorage_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "trustedIssuersRegistry_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "topicSchemeRegistry_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "investorCountry",
          "outputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTrustedForwarder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "requiredClaimTopics",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isVerified",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userWallet",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isWalletLost",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "issuersRegistry",
          "outputs": [
            {
              "internalType": "contract IERC3643TrustedIssuersRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "newOnchainId",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "recoverIdentity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerIdentity"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeRole"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "identityStorage_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setIdentityRegistryStorage"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "topicSchemeRegistry_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setTopicSchemeRegistry"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "trustedIssuersRegistry_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setTrustedIssuersRegistry"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "topicSchemeRegistry",
          "outputs": [
            {
              "internalType": "contract ISMARTTopicSchemeRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedForwarder",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateCountry"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateIdentity"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchRegisterIdentity(address[],address[],uint16[])": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It iterates through the provided arrays (`_userAddresses`, `_identities`, `_countries`) and calls `_registerIdentity` for each set of parameters. It performs checks to ensure that all provided arrays have the same length to prevent errors.",
            "params": {
              "_countries": "An array of numerical country codes (uint16) corresponding to each user address. Reverts with `ArrayLengthMismatch` if the lengths of the input arrays are inconsistent.",
              "_identities": "An array of `IIdentity` contract addresses corresponding to each user address.",
              "_userAddresses": "An array of user blockchain addresses to be registered."
            }
          },
          "constructor": {
            "details": "This constructor is typically called only once when the implementation contract is deployed. It initializes the `ERC2771ContextUpgradeable` by setting the `trustedForwarder` address. Meta-transactions sent via this `trustedForwarder` will have `_msgSender()` return the original sender rather than the forwarder contract. The `_disableInitializers()` function is called to prevent the `initialize` function from being called on this implementation contract directly after deployment if it were not an upgradeable contract. For UUPS proxies, the initializer is called on the proxy.",
            "params": {
              "trustedForwarder": "The address of the trusted forwarder contract for meta-transactions. If address(0) is provided, meta-transactions are effectively disabled for this context."
            }
          },
          "contains(address)": {
            "details": "This function queries the `_identityStorage` contract by attempting to retrieve the `storedIdentity`. If the retrieval is successful (does not revert), it means the identity exists, and the function returns `true`. If the retrieval reverts (e.g., identity not found in storage), it's caught, and the function returns `false`. This approach avoids a direct \"exists\" function on the storage if not available, relying on try/catch.",
            "params": {
              "_userAddress": "The user's blockchain address to check for registration."
            },
            "returns": {
              "_0": "`true` if the `_userAddress` is registered, `false` otherwise."
            }
          },
          "deleteIdentity(address)": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered using `this.contains()`. If registered, it retrieves the `IIdentity` contract to be deleted (for event emission), then calls `_identityStorage.removeIdentityFromStorage()` to remove the data from the storage contract. Emits an `IdentityRemoved` event upon successful deletion.",
            "params": {
              "_userAddress": "The blockchain address of the user whose identity is to be deleted. Reverts with `IdentityNotRegistered` if the address is not found."
            }
          },
          "getRecoveredWallet(address)": {
            "details": "This is the key function for token recovery validation.",
            "params": {
              "lostWallet": "The lost wallet address."
            },
            "returns": {
              "_0": "The new wallet address that replaced the lost wallet, or address(0) if not found."
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "identity(address)": {
            "details": "This function directly calls `_identityStorage.storedIdentity()` to fetch the identity contract. It's a public view function, meaning it can be called externally without gas costs for reading data. If the `_userAddress` is not registered, this call will likely revert (behavior depends on the storage contract). Consider using `contains()` first if a revert is not desired for non-existent users.",
            "params": {
              "_userAddress": "The user's blockchain address whose `IIdentity` contract is to be retrieved."
            },
            "returns": {
              "_0": "The address of the `IIdentity` contract associated with the `_userAddress`. Returns address(0) or reverts if the user is not registered, depending on storage implementation."
            }
          },
          "identityStorage()": {
            "details": "This allows external contracts or UIs to discover the location of the storage layer.",
            "returns": {
              "_0": "The address of the `ISMARTIdentityRegistryStorage` contract."
            }
          },
          "initialize(address,address,address,address)": {
            "details": "This function sets up the core components of the identity registry: 1.  Initializes `ERC165Upgradeable` for interface detection. 2.  Initializes `AccessControlUpgradeable` for role-based access management. 3.  Grants the `DEFAULT_ADMIN_ROLE` and `REGISTRAR_ROLE` to the `initialAdmin` address.     The `DEFAULT_ADMIN_ROLE` allows managing other roles and system parameters.     The `REGISTRAR_ROLE` allows managing identities. 4.  Sets the addresses for the `_identityStorage`, `_trustedIssuersRegistry`, and `_topicSchemeRegistry` contracts.     These addresses must not be zero addresses. It is protected by the `initializer` modifier from OpenZeppelin, ensuring it can only be called once.",
            "params": {
              "identityStorage_": "The address of the deployed `ISMARTIdentityRegistryStorage` contract. This contract will be used to store all identity data.",
              "initialAdmin": "The address that will receive initial administrative and registrar privileges. This address will be responsible for the initial setup and management of the registry.",
              "topicSchemeRegistry_": "The address of the deployed `ISMARTTopicSchemeRegistry` contract. This contract will be used to validate claim topics against registered schemes.",
              "trustedIssuersRegistry_": "The address of the deployed `IERC3643TrustedIssuersRegistry` contract. This contract will be used to verify claims against trusted issuers."
            }
          },
          "investorCountry(address)": {
            "details": "This function first checks if the `_userAddress` is registered using `this.contains()`. If not registered, it reverts with `IdentityNotRegistered`. Otherwise, it calls `_identityStorage.storedInvestorCountry()` to fetch the country code.",
            "params": {
              "_userAddress": "The user's blockchain address whose country code is to be retrieved."
            },
            "returns": {
              "_0": "The numerical country code (uint16) associated with the `_userAddress`. Reverts if the user is not registered."
            }
          },
          "isTrustedForwarder(address)": {
            "details": "Indicates whether any particular address is the trusted forwarder."
          },
          "isVerified(address,uint256[])": {
            "details": "An identity is considered verified if: 1. The `_userAddress` is registered in the system (checked via `this.contains()`). 2. For *each* `requiredClaimTopics` (that is not zero):    a. The topic is registered in the topic scheme registry.    b. The identity contract (`IIdentity`) associated with `_userAddress` has a claim for that topic.    c. The issuer of that claim is one of the trusted issuers for that specific topic, as defined in the `_trustedIssuersRegistry`.    d. The claim is considered valid by the issuer (checked by calling `issuer.isClaimValid()`). If `requiredClaimTopics` is an empty array, the function returns `true` (no specific claims are required for verification). If any required claim topic is 0, it's skipped. This allows for optional or placeholder topics. The function iterates through each required claim topic and then through the trusted issuers for that topic, attempting to find a valid claim. If a valid claim is found for a topic, it moves to the next topic. If any required topic does not have a corresponding valid claim from a trusted issuer, the function returns `false`.",
            "params": {
              "_userAddress": "The user's blockchain address whose verification status is being checked.",
              "requiredClaimTopics": "An array of `uint256` values, where each value is a claim topic ID (e.g., KYC, AML). These are the topics for which the identity must hold valid claims."
            },
            "returns": {
              "_0": "`true` if the identity is registered and all non-zero `requiredClaimTopics` are satisfied by valid claims from trusted issuers, `false` otherwise."
            }
          },
          "isWalletLost(address)": {
            "params": {
              "userWallet": "The wallet address to check."
            },
            "returns": {
              "_0": "True if the wallet is marked as lost, false otherwise."
            }
          },
          "issuersRegistry()": {
            "details": "This allows external contracts or UIs to discover the location of the trusted issuers list.",
            "returns": {
              "_0": "The address of the `IERC3643TrustedIssuersRegistry` contract."
            }
          },
          "recoverIdentity(address,address,address)": {
            "details": "This function handles the practical reality that losing wallet access often means losing      access to the identity contract as well. It creates a fresh start while maintaining      regulatory compliance data and recovery links for token reclaim.      The function is typically restricted to registrar roles.",
            "params": {
              "lostWallet": "The current wallet address to be marked as lost.",
              "newOnchainId": "The new IIdentity contract address for the new wallet.",
              "newWallet": "The new wallet address to be registered."
            }
          },
          "registerIdentity(address,address,uint16)": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It internally calls the `_registerIdentity` helper function to perform the registration logic after access control checks have passed.",
            "params": {
              "_country": "A numerical code (uint16) representing the user's country of residence or jurisdiction.",
              "_identity": "The address of the `IIdentity` (ERC725/ERC734) contract representing the user's on-chain identity.",
              "_userAddress": "The blockchain address of the user whose identity is being registered. This address will be linked to the `_identity` contract."
            }
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "setIdentityRegistryStorage(address)": {
            "details": "This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `identityStorage_` address is not the zero address. Emits an `IdentityStorageSet` event upon successful update.",
            "params": {
              "identityStorage_": "The new address for the `ISMARTIdentityRegistryStorage` contract."
            }
          },
          "setTopicSchemeRegistry(address)": {
            "details": "This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `topicSchemeRegistry_` address is not the zero address. Emits a `TopicSchemeRegistrySet` event upon successful update.",
            "params": {
              "topicSchemeRegistry_": "The new address for the `ISMARTTopicSchemeRegistry` contract."
            }
          },
          "setTrustedIssuersRegistry(address)": {
            "details": "This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `trustedIssuersRegistry_` address is not the zero address. Emits a `TrustedIssuersRegistrySet` event upon successful update.",
            "params": {
              "trustedIssuersRegistry_": "The new address for the `IERC3643TrustedIssuersRegistry` contract."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "This function is part of the ERC165 standard for interface detection. It checks if the contract implements the `ISMARTIdentityRegistry` interface or any interfaces supported by its parent contracts (via `super.supportsInterface`). This allows other contracts to query if this registry conforms to the expected interface.",
            "params": {
              "interfaceId": "The EIP-165 interface identifier (bytes4) to check."
            },
            "returns": {
              "_0": "`true` if the contract supports the `interfaceId`, `false` otherwise."
            }
          },
          "topicSchemeRegistry()": {
            "details": "This allows external contracts or UIs to discover the location of the topic scheme registry.",
            "returns": {
              "_0": "The address of the `ISMARTTopicSchemeRegistry` contract."
            }
          },
          "trustedForwarder()": {
            "details": "Returns the address of the trusted forwarder."
          },
          "updateCountry(address,uint16)": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered. If registered, it calls `_identityStorage.modifyStoredInvestorCountry()` to update the country code in the storage contract. Emits a `CountryUpdated` event upon successful update.",
            "params": {
              "_country": "The new numerical country code (uint16) for the user.",
              "_userAddress": "The blockchain address of the user whose country code is to be updated. Reverts with `IdentityNotRegistered` if the address is not found."
            }
          },
          "updateIdentity(address,address)": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered and if the new `_identity` address is not zero. If checks pass, it retrieves the old `IIdentity` contract (for event emission), then calls `_identityStorage.modifyStoredIdentity()` to update the identity contract in the storage contract. Emits an `IdentityUpdated` event upon successful update.",
            "params": {
              "_identity": "The address of the new `IIdentity` contract to associate with the `_userAddress`. Reverts with `InvalidIdentityAddress` if this is the zero address.",
              "_userAddress": "The blockchain address of the user whose `IIdentity` contract is to be updated. Reverts with `IdentityNotRegistered` if the address is not found."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchRegisterIdentity(address[],address[],uint16[])": {
            "notice": "Registers multiple identities in a single transaction (batch operation)."
          },
          "constructor": {
            "notice": "Constructor for the `ATKIdentityRegistryImplementation` contract."
          },
          "contains(address)": {
            "notice": "Checks if a given user address is registered in the identity system."
          },
          "deleteIdentity(address)": {
            "notice": "Deletes an existing identity associated with a given user address from the registry."
          },
          "getRecoveredWallet(address)": {
            "notice": "Gets the new wallet address that replaced a lost wallet during recovery."
          },
          "identity(address)": {
            "notice": "Retrieves the `IIdentity` contract address associated with a given user address."
          },
          "identityStorage()": {
            "notice": "Returns the address of the currently configured identity storage contract."
          },
          "initialize(address,address,address,address)": {
            "notice": "Initializes the `SMARTIdentityRegistryImplementation` contract after it has been deployed (typically called via a proxy)."
          },
          "investorCountry(address)": {
            "notice": "Retrieves the country code associated with a registered user address."
          },
          "isVerified(address,uint256[])": {
            "notice": "Checks if a registered user's identity is verified for a given set of required claim topics."
          },
          "isWalletLost(address)": {
            "notice": "Checks if a wallet address has been marked as lost."
          },
          "issuersRegistry()": {
            "notice": "Returns the address of the currently configured trusted issuers registry contract."
          },
          "recoverIdentity(address,address,address)": {
            "notice": "Recovers an identity by creating a new wallet registration with a new identity contract,         marking the old wallet as lost, and preserving the country code."
          },
          "registerIdentity(address,address,uint16)": {
            "notice": "Registers a new identity in the system, associating a user's address with an identity contract and a country code."
          },
          "setIdentityRegistryStorage(address)": {
            "notice": "Updates the address of the identity storage contract."
          },
          "setTopicSchemeRegistry(address)": {
            "notice": "Updates the address of the topic scheme registry contract."
          },
          "setTrustedIssuersRegistry(address)": {
            "notice": "Updates the address of the trusted issuers registry contract."
          },
          "supportsInterface(bytes4)": {
            "notice": "Indicates whether this contract supports a given interface ID."
          },
          "topicSchemeRegistry()": {
            "notice": "Returns the address of the currently configured topic scheme registry contract."
          },
          "updateCountry(address,uint16)": {
            "notice": "Updates the country code associated with an existing registered identity."
          },
          "updateIdentity(address,address)": {
            "notice": "Updates the `IIdentity` contract associated with an existing registered user address."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/",
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/",
        "forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/",
        "openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/identity-registry/ATKIdentityRegistryImplementation.sol": "ATKIdentityRegistryImplementation"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol": {
        "keccak256": "0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f",
        "urls": [
          "bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3",
          "dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol": {
        "keccak256": "0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c",
        "urls": [
          "bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee",
          "dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ISMART.sol": {
        "keccak256": "0xfce323160dd5cd8c9db34de0ea872bec41fd2ea8d8496e1e3c17865d374994da",
        "urls": [
          "bzz-raw://1a1fafbdec0c59e078798438d2a3cd05bd70b864d7dfa67faf135d5634c5ae51",
          "dweb:/ipfs/QmehZwexgZN2BZKA6eFrG3DHUMRUZnzYTen6j5Ry5Znbf2"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTCompliance.sol": {
        "keccak256": "0x948341e4ad374e1dded6d1b30c395ad0f01e6ea2099fb6b96c5476e8b28c1d77",
        "urls": [
          "bzz-raw://d261e9a0c8682f11ac86048f13e367caee6d5f512d51b8752186b8c01b6ba618",
          "dweb:/ipfs/Qmdp14emh3NFSAphyuAgsTE7qZt1g1UYcNLS3tNNM8T6Hv"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTIdentityRegistry.sol": {
        "keccak256": "0x62a95a9db2ac97ceaf59f7585d7bbaf3acb65ed9b5e57597b9d1fe1b4d7c4eda",
        "urls": [
          "bzz-raw://bd870710359396db48e70ef7e40449125ff744c6c8ce15ad7e1894df430c87ea",
          "dweb:/ipfs/QmZ6khf5Vm6hBkkUgYC1b161jSQaZeegJVRY6ndjRW1EcG"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTIdentityRegistryStorage.sol": {
        "keccak256": "0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985",
        "urls": [
          "bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52",
          "dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol": {
        "keccak256": "0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a",
        "urls": [
          "bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0",
          "dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/structs/SMARTComplianceModuleParamPair.sol": {
        "keccak256": "0x489a55538b554a0c935bee7efc28f7e821e161638c5726c9d367a644a0b7c62a",
        "urls": [
          "bzz-raw://04bb06aed3ee3c5c6f3df9a59721c08ddd57b5521da1c9c6fd96b7c8b57db813",
          "dweb:/ipfs/QmRuzqKDr2sBHNuQhCzWGa8euNiMyvP7LTjSFjvAj5uFqh"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/ATKSystemRoles.sol": {
        "keccak256": "0x7c5a50fcea7ee061d1bf5451217fbf83cfbc42cae638a0de4b8fc41fa5d7d980",
        "urls": [
          "bzz-raw://8dc4128ddb017dfd71ff70bd4b292bcf5e60ae6f81a07b1ceb15439607bb93c0",
          "dweb:/ipfs/QmWJpzgR3YuLvRXZPdFzvyZ1mHAyV3fhSUMcdFG4QJ3xzx"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/identity-registry/ATKIdentityRegistryImplementation.sol": {
        "keccak256": "0x9d658773b2323014bb21950e8304ddc1971c710c4dbc0ba6101b2d7f65535656",
        "urls": [
          "bzz-raw://77137d9cf8fbfe8cfc209d6724149bbcd7733bc509a2a3e25b0f95b3b7490374",
          "dweb:/ipfs/QmQVQSWWmXpCsfRihBroCyBuoorAVArVd5Ni1gsnVhXq3Y"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol": {
        "keccak256": "0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779",
        "urls": [
          "bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e",
          "dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol": {
        "keccak256": "0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e",
        "urls": [
          "bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb",
          "dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol": {
        "keccak256": "0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122",
        "urls": [
          "bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e",
          "dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol": {
        "keccak256": "0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862",
        "urls": [
          "bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8",
          "dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol": {
        "keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
        "urls": [
          "bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
          "dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
        "urls": [
          "bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
          "dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/access/AccessControlUpgradeable.sol": {
        "keccak256": "0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534",
        "urls": [
          "bzz-raw://838551e10cc07e570b70aee1078e490658d3a0ab8f4adfd4f3f2a565200753da",
          "dweb:/ipfs/QmceT7R3Pqzywyxr3MSEA7VXU4axZAPS6BLy92iV97rGdG"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol": {
        "keccak256": "0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb",
        "urls": [
          "bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758",
          "dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol": {
        "keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
        "urls": [
          "bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
          "dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol": {
        "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
        "urls": [
          "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
          "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/introspection/ERC165Upgradeable.sol": {
        "keccak256": "0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab",
        "urls": [
          "bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89",
          "dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "batchRegisterIdentity(address[],address[],uint16[])": {
        "notice": "Registers multiple identities in a single transaction (batch operation)."
      },
      "constructor": {
        "notice": "Constructor for the `ATKIdentityRegistryImplementation` contract."
      },
      "contains(address)": {
        "notice": "Checks if a given user address is registered in the identity system."
      },
      "deleteIdentity(address)": {
        "notice": "Deletes an existing identity associated with a given user address from the registry."
      },
      "getRecoveredWallet(address)": {
        "notice": "Gets the new wallet address that replaced a lost wallet during recovery."
      },
      "identity(address)": {
        "notice": "Retrieves the `IIdentity` contract address associated with a given user address."
      },
      "identityStorage()": {
        "notice": "Returns the address of the currently configured identity storage contract."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the `SMARTIdentityRegistryImplementation` contract after it has been deployed (typically called via a proxy)."
      },
      "investorCountry(address)": {
        "notice": "Retrieves the country code associated with a registered user address."
      },
      "isVerified(address,uint256[])": {
        "notice": "Checks if a registered user's identity is verified for a given set of required claim topics."
      },
      "isWalletLost(address)": {
        "notice": "Checks if a wallet address has been marked as lost."
      },
      "issuersRegistry()": {
        "notice": "Returns the address of the currently configured trusted issuers registry contract."
      },
      "recoverIdentity(address,address,address)": {
        "notice": "Recovers an identity by creating a new wallet registration with a new identity contract,         marking the old wallet as lost, and preserving the country code."
      },
      "registerIdentity(address,address,uint16)": {
        "notice": "Registers a new identity in the system, associating a user's address with an identity contract and a country code."
      },
      "setIdentityRegistryStorage(address)": {
        "notice": "Updates the address of the identity storage contract."
      },
      "setTopicSchemeRegistry(address)": {
        "notice": "Updates the address of the topic scheme registry contract."
      },
      "setTrustedIssuersRegistry(address)": {
        "notice": "Updates the address of the trusted issuers registry contract."
      },
      "supportsInterface(bytes4)": {
        "notice": "Indicates whether this contract supports a given interface ID."
      },
      "topicSchemeRegistry()": {
        "notice": "Returns the address of the currently configured topic scheme registry contract."
      },
      "updateCountry(address,uint16)": {
        "notice": "Updates the country code associated with an existing registered identity."
      },
      "updateIdentity(address,address)": {
        "notice": "Updates the `IIdentity` contract associated with an existing registered user address."
      }
    },
    "events": {
      "CountryUpdated(address,address,uint16)": {
        "notice": "Emitted when the country code associated with a registered investor's wallet address is updated."
      },
      "IdentityRecovered(address,address,address,address,address)": {
        "notice": "Emitted when an identity is successfully recovered, associating a new wallet with a new identity         and marking the old wallet as lost."
      },
      "IdentityRegistered(address,address,address,uint16)": {
        "notice": "Emitted when a new identity is successfully registered for an investor's wallet address."
      },
      "IdentityRemoved(address,address,address)": {
        "notice": "Emitted when an existing identity registration is successfully removed for an investor's wallet address."
      },
      "IdentityStorageSet(address,address)": {
        "notice": "Emitted when the address of the `IdentityRegistryStorage` contract is successfully set or updated."
      },
      "IdentityUpdated(address,address,address)": {
        "notice": "Emitted when the `IIdentity` contract associated with a registered investor's wallet address is updated."
      },
      "TopicSchemeRegistrySet(address,address)": {
        "notice": "Emitted when the address of the `TopicSchemeRegistry` contract is successfully set or updated."
      },
      "TrustedIssuersRegistrySet(address,address)": {
        "notice": "Emitted when the address of the `TrustedIssuersRegistry` contract is successfully set or updated."
      },
      "WalletRecoveryLinked(address,address,address)": {
        "notice": "Emitted when a wallet recovery link is established between a lost wallet and its replacement."
      }
    },
    "errors": {
      "ArrayLengthMismatch()": [
        {
          "notice": "Error triggered when the lengths of arrays provided for a batch operation do not match."
        }
      ],
      "IdentityAlreadyRegistered(address)": [
        {
          "notice": "Error triggered when an attempt is made to register an identity for a user address that is already registered."
        }
      ],
      "IdentityNotRegistered(address)": [
        {
          "notice": "Error triggered when an operation is attempted on a user address that is not registered in the system."
        }
      ],
      "InvalidIdentityAddress()": [
        {
          "notice": "Error triggered when an invalid identity contract address (e.g., address(0)) is provided."
        }
      ],
      "InvalidRegistryAddress()": [
        {
          "notice": "Error triggered when an invalid registry address (e.g., address(0)) is provided."
        }
      ],
      "InvalidStorageAddress()": [
        {
          "notice": "Error triggered when an invalid storage address (e.g., address(0)) is provided."
        }
      ],
      "InvalidTopicSchemeRegistryAddress()": [
        {
          "notice": "Error triggered when an invalid topic scheme registry address (e.g., address(0)) is provided."
        }
      ],
      "InvalidUserAddress()": [
        {
          "notice": "Error triggered when an invalid user address (e.g., address(0)) is provided."
        }
      ],
      "WalletAlreadyMarkedAsLost(address)": [
        {
          "notice": "Error triggered if an operation is attempted on a wallet that is already marked as lost."
        }
      ],
      "WalletNotRegisteredToThisIdentity(address,address)": [
        {
          "notice": "Error triggered if a wallet is expected to be registered to a specific identity, but it is not."
        }
      ]
    },
    "notice": "This contract is the upgradeable logic for the ATK Identity Registry. It manages on-chain investor identities and their associated data, adhering to the ERC-3643 standard for tokenized assets."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "This implementation relies on separate contracts for storing identity data (`ISMARTIdentityRegistryStorage`) and for managing trusted claim issuers (`IERC3643TrustedIssuersRegistry`). It uses OpenZeppelin's `AccessControlUpgradeable` for role-based access control, `ERC2771ContextUpgradeable` for meta-transaction support (allowing transactions to be relayed by a trusted forwarder), and is designed to be upgradeable using the UUPS (Universal Upgradeable Proxy Standard) pattern.",
    "methods": {
      "batchRegisterIdentity(address[],address[],uint16[])": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It iterates through the provided arrays (`_userAddresses`, `_identities`, `_countries`) and calls `_registerIdentity` for each set of parameters. It performs checks to ensure that all provided arrays have the same length to prevent errors.",
        "params": {
          "_countries": "An array of numerical country codes (uint16) corresponding to each user address. Reverts with `ArrayLengthMismatch` if the lengths of the input arrays are inconsistent.",
          "_identities": "An array of `IIdentity` contract addresses corresponding to each user address.",
          "_userAddresses": "An array of user blockchain addresses to be registered."
        }
      },
      "constructor": {
        "details": "This constructor is typically called only once when the implementation contract is deployed. It initializes the `ERC2771ContextUpgradeable` by setting the `trustedForwarder` address. Meta-transactions sent via this `trustedForwarder` will have `_msgSender()` return the original sender rather than the forwarder contract. The `_disableInitializers()` function is called to prevent the `initialize` function from being called on this implementation contract directly after deployment if it were not an upgradeable contract. For UUPS proxies, the initializer is called on the proxy.",
        "params": {
          "trustedForwarder": "The address of the trusted forwarder contract for meta-transactions. If address(0) is provided, meta-transactions are effectively disabled for this context."
        }
      },
      "contains(address)": {
        "details": "This function queries the `_identityStorage` contract by attempting to retrieve the `storedIdentity`. If the retrieval is successful (does not revert), it means the identity exists, and the function returns `true`. If the retrieval reverts (e.g., identity not found in storage), it's caught, and the function returns `false`. This approach avoids a direct \"exists\" function on the storage if not available, relying on try/catch.",
        "params": {
          "_userAddress": "The user's blockchain address to check for registration."
        },
        "returns": {
          "_0": "`true` if the `_userAddress` is registered, `false` otherwise."
        }
      },
      "deleteIdentity(address)": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered using `this.contains()`. If registered, it retrieves the `IIdentity` contract to be deleted (for event emission), then calls `_identityStorage.removeIdentityFromStorage()` to remove the data from the storage contract. Emits an `IdentityRemoved` event upon successful deletion.",
        "params": {
          "_userAddress": "The blockchain address of the user whose identity is to be deleted. Reverts with `IdentityNotRegistered` if the address is not found."
        }
      },
      "getRecoveredWallet(address)": {
        "details": "This is the key function for token recovery validation.",
        "params": {
          "lostWallet": "The lost wallet address."
        },
        "returns": {
          "_0": "The new wallet address that replaced the lost wallet, or address(0) if not found."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "identity(address)": {
        "details": "This function directly calls `_identityStorage.storedIdentity()` to fetch the identity contract. It's a public view function, meaning it can be called externally without gas costs for reading data. If the `_userAddress` is not registered, this call will likely revert (behavior depends on the storage contract). Consider using `contains()` first if a revert is not desired for non-existent users.",
        "params": {
          "_userAddress": "The user's blockchain address whose `IIdentity` contract is to be retrieved."
        },
        "returns": {
          "_0": "The address of the `IIdentity` contract associated with the `_userAddress`. Returns address(0) or reverts if the user is not registered, depending on storage implementation."
        }
      },
      "identityStorage()": {
        "details": "This allows external contracts or UIs to discover the location of the storage layer.",
        "returns": {
          "_0": "The address of the `ISMARTIdentityRegistryStorage` contract."
        }
      },
      "initialize(address,address,address,address)": {
        "details": "This function sets up the core components of the identity registry: 1.  Initializes `ERC165Upgradeable` for interface detection. 2.  Initializes `AccessControlUpgradeable` for role-based access management. 3.  Grants the `DEFAULT_ADMIN_ROLE` and `REGISTRAR_ROLE` to the `initialAdmin` address.     The `DEFAULT_ADMIN_ROLE` allows managing other roles and system parameters.     The `REGISTRAR_ROLE` allows managing identities. 4.  Sets the addresses for the `_identityStorage`, `_trustedIssuersRegistry`, and `_topicSchemeRegistry` contracts.     These addresses must not be zero addresses. It is protected by the `initializer` modifier from OpenZeppelin, ensuring it can only be called once.",
        "params": {
          "identityStorage_": "The address of the deployed `ISMARTIdentityRegistryStorage` contract. This contract will be used to store all identity data.",
          "initialAdmin": "The address that will receive initial administrative and registrar privileges. This address will be responsible for the initial setup and management of the registry.",
          "topicSchemeRegistry_": "The address of the deployed `ISMARTTopicSchemeRegistry` contract. This contract will be used to validate claim topics against registered schemes.",
          "trustedIssuersRegistry_": "The address of the deployed `IERC3643TrustedIssuersRegistry` contract. This contract will be used to verify claims against trusted issuers."
        }
      },
      "investorCountry(address)": {
        "details": "This function first checks if the `_userAddress` is registered using `this.contains()`. If not registered, it reverts with `IdentityNotRegistered`. Otherwise, it calls `_identityStorage.storedInvestorCountry()` to fetch the country code.",
        "params": {
          "_userAddress": "The user's blockchain address whose country code is to be retrieved."
        },
        "returns": {
          "_0": "The numerical country code (uint16) associated with the `_userAddress`. Reverts if the user is not registered."
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "isVerified(address,uint256[])": {
        "details": "An identity is considered verified if: 1. The `_userAddress` is registered in the system (checked via `this.contains()`). 2. For *each* `requiredClaimTopics` (that is not zero):    a. The topic is registered in the topic scheme registry.    b. The identity contract (`IIdentity`) associated with `_userAddress` has a claim for that topic.    c. The issuer of that claim is one of the trusted issuers for that specific topic, as defined in the `_trustedIssuersRegistry`.    d. The claim is considered valid by the issuer (checked by calling `issuer.isClaimValid()`). If `requiredClaimTopics` is an empty array, the function returns `true` (no specific claims are required for verification). If any required claim topic is 0, it's skipped. This allows for optional or placeholder topics. The function iterates through each required claim topic and then through the trusted issuers for that topic, attempting to find a valid claim. If a valid claim is found for a topic, it moves to the next topic. If any required topic does not have a corresponding valid claim from a trusted issuer, the function returns `false`.",
        "params": {
          "_userAddress": "The user's blockchain address whose verification status is being checked.",
          "requiredClaimTopics": "An array of `uint256` values, where each value is a claim topic ID (e.g., KYC, AML). These are the topics for which the identity must hold valid claims."
        },
        "returns": {
          "_0": "`true` if the identity is registered and all non-zero `requiredClaimTopics` are satisfied by valid claims from trusted issuers, `false` otherwise."
        }
      },
      "isWalletLost(address)": {
        "params": {
          "userWallet": "The wallet address to check."
        },
        "returns": {
          "_0": "True if the wallet is marked as lost, false otherwise."
        }
      },
      "issuersRegistry()": {
        "details": "This allows external contracts or UIs to discover the location of the trusted issuers list.",
        "returns": {
          "_0": "The address of the `IERC3643TrustedIssuersRegistry` contract."
        }
      },
      "recoverIdentity(address,address,address)": {
        "details": "This function handles the practical reality that losing wallet access often means losing      access to the identity contract as well. It creates a fresh start while maintaining      regulatory compliance data and recovery links for token reclaim.      The function is typically restricted to registrar roles.",
        "params": {
          "lostWallet": "The current wallet address to be marked as lost.",
          "newOnchainId": "The new IIdentity contract address for the new wallet.",
          "newWallet": "The new wallet address to be registered."
        }
      },
      "registerIdentity(address,address,uint16)": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It internally calls the `_registerIdentity` helper function to perform the registration logic after access control checks have passed.",
        "params": {
          "_country": "A numerical code (uint16) representing the user's country of residence or jurisdiction.",
          "_identity": "The address of the `IIdentity` (ERC725/ERC734) contract representing the user's on-chain identity.",
          "_userAddress": "The blockchain address of the user whose identity is being registered. This address will be linked to the `_identity` contract."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setIdentityRegistryStorage(address)": {
        "details": "This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `identityStorage_` address is not the zero address. Emits an `IdentityStorageSet` event upon successful update.",
        "params": {
          "identityStorage_": "The new address for the `ISMARTIdentityRegistryStorage` contract."
        }
      },
      "setTopicSchemeRegistry(address)": {
        "details": "This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `topicSchemeRegistry_` address is not the zero address. Emits a `TopicSchemeRegistrySet` event upon successful update.",
        "params": {
          "topicSchemeRegistry_": "The new address for the `ISMARTTopicSchemeRegistry` contract."
        }
      },
      "setTrustedIssuersRegistry(address)": {
        "details": "This function can only be called by an address holding the `DEFAULT_ADMIN_ROLE`. It performs a check to ensure the new `trustedIssuersRegistry_` address is not the zero address. Emits a `TrustedIssuersRegistrySet` event upon successful update.",
        "params": {
          "trustedIssuersRegistry_": "The new address for the `IERC3643TrustedIssuersRegistry` contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "This function is part of the ERC165 standard for interface detection. It checks if the contract implements the `ISMARTIdentityRegistry` interface or any interfaces supported by its parent contracts (via `super.supportsInterface`). This allows other contracts to query if this registry conforms to the expected interface.",
        "params": {
          "interfaceId": "The EIP-165 interface identifier (bytes4) to check."
        },
        "returns": {
          "_0": "`true` if the contract supports the `interfaceId`, `false` otherwise."
        }
      },
      "topicSchemeRegistry()": {
        "details": "This allows external contracts or UIs to discover the location of the topic scheme registry.",
        "returns": {
          "_0": "The address of the `ISMARTTopicSchemeRegistry` contract."
        }
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "updateCountry(address,uint16)": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered. If registered, it calls `_identityStorage.modifyStoredInvestorCountry()` to update the country code in the storage contract. Emits a `CountryUpdated` event upon successful update.",
        "params": {
          "_country": "The new numerical country code (uint16) for the user.",
          "_userAddress": "The blockchain address of the user whose country code is to be updated. Reverts with `IdentityNotRegistered` if the address is not found."
        }
      },
      "updateIdentity(address,address)": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered and if the new `_identity` address is not zero. If checks pass, it retrieves the old `IIdentity` contract (for event emission), then calls `_identityStorage.modifyStoredIdentity()` to update the identity contract in the storage contract. Emits an `IdentityUpdated` event upon successful update.",
        "params": {
          "_identity": "The address of the new `IIdentity` contract to associate with the `_userAddress`. Reverts with `InvalidIdentityAddress` if this is the zero address.",
          "_userAddress": "The blockchain address of the user whose `IIdentity` contract is to be updated. Reverts with `IdentityNotRegistered` if the address is not found."
        }
      }
    },
    "events": {
      "CountryUpdated(address,address,uint16)": {
        "details": "This event is important for compliance processes that may depend on the investor's jurisdiction.",
        "params": {
          "_country": "The new numeric country code (conforming to ISO 3166-1 alpha-2 standard, e.g., 840 for USA).",
          "_investorAddress": "The wallet address of the investor whose country information was updated.",
          "sender": "The address of the account (e.g., a registrar agent) that performed the update."
        }
      },
      "IdentityRecovered(address,address,address,address,address)": {
        "params": {
          "lostWallet": "The previous wallet address that has now been marked as lost. (Indexed)",
          "newIdentityContract": "The new IIdentity contract for the new wallet. (Indexed)",
          "newWallet": "The new active wallet address for the identity. (Indexed)",
          "oldIdentityContract": "The old IIdentity contract that was associated with the lost wallet.",
          "sender": "The address of the account (e.g., a registrar agent) that performed the recovery."
        }
      },
      "IdentityRegistered(address,address,address,uint16)": {
        "details": "This event marks the creation of an association between a wallet and an on-chain identity contract.",
        "params": {
          "_country": "The numeric country code (ISO 3166-1 alpha-2 standard) representing the investor's jurisdiction.",
          "_identity": "The address of the investor's `IIdentity` smart contract, which holds their claims and attestations.",
          "_investorAddress": "The wallet address of the investor being registered.",
          "sender": "The address of the account (e.g., a registrar agent) that performed the registration."
        }
      },
      "IdentityRemoved(address,address,address)": {
        "details": "This event indicates that the link between a wallet address and its associated `IIdentity` contract has been severed.",
        "params": {
          "_identity": "The address of the `IIdentity` smart contract that was previously associated with the investor address.",
          "_investorAddress": "The wallet address of the investor whose registration was removed.",
          "sender": "The address of the account (e.g., a registrar agent) that performed the removal."
        }
      },
      "IdentityStorageSet(address,address)": {
        "details": "This event is crucial for transparency, allowing external observers to track changes in the underlying      storage mechanism used by the Identity Registry.",
        "params": {
          "_identityStorage": "The new address of the contract implementing `ISMARTIdentityRegistryStorage`.",
          "sender": "The address of the account (typically the owner or an admin) that initiated this change."
        }
      },
      "IdentityUpdated(address,address,address)": {
        "details": "This typically occurs during identity recovery processes or when an investor chooses to link a new identity contract.",
        "params": {
          "_newIdentity": "The address of the newly associated `IIdentity` contract.",
          "_oldIdentity": "The address of the previously associated `IIdentity` contract.",
          "sender": "The address of the account (e.g., a registrar agent) that performed the update."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TopicSchemeRegistrySet(address,address)": {
        "details": "This event signals a change in the topic scheme registry that defines valid claim topics.",
        "params": {
          "_topicSchemeRegistry": "The new address of the contract implementing `ISMARTTopicSchemeRegistry`.",
          "sender": "The address of the account (typically the owner or an admin) that initiated this change."
        }
      },
      "TrustedIssuersRegistrySet(address,address)": {
        "details": "This event signals a change in the list of authorities whose claims are recognized by this Identity Registry.      It's important for users and relying parties to be aware of which issuers are trusted.",
        "params": {
          "_trustedIssuersRegistry": "The new address of the contract implementing `IERC3643TrustedIssuersRegistry`.",
          "sender": "The address of the account (typically the owner or an admin) that initiated this change."
        }
      },
      "WalletRecoveryLinked(address,address,address)": {
        "details": "This event helps track the recovery chain for token reclaim purposes.",
        "params": {
          "lostWallet": "The lost wallet address.",
          "newWallet": "The new replacement wallet address.",
          "sender": "The address that performed the recovery operation."
        }
      }
    },
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ArrayLengthMismatch()": [
        {
          "details": "For example, in `batchRegisterIdentity`, the `_userAddresses`, `_identities`, and `_countries` arrays must all have the same length."
        }
      ],
      "IdentityAlreadyRegistered(address)": [
        {
          "params": {
            "userAddress": "The address that is already registered."
          }
        }
      ],
      "IdentityNotRegistered(address)": [
        {
          "params": {
            "userAddress": "The address that was not found in the registry."
          }
        }
      ],
      "InvalidIdentityAddress()": [
        {
          "details": "This can occur during identity registration or updates if the identity contract address is null."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidRegistryAddress()": [
        {
          "details": "This usually happens when setting or updating the trusted issuers registry address."
        }
      ],
      "InvalidStorageAddress()": [
        {
          "details": "This typically occurs during initialization or when updating storage contract addresses."
        }
      ],
      "InvalidTopicSchemeRegistryAddress()": [
        {
          "details": "This usually happens when setting or updating the topic scheme registry address."
        }
      ],
      "InvalidUserAddress()": [
        {
          "details": "This check is often performed during identity registration to ensure a valid user address is being associated with an identity."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "WalletAlreadyMarkedAsLost(address)": [
        {
          "params": {
            "wallet": "The wallet address that is already marked as lost."
          }
        }
      ],
      "WalletNotRegisteredToThisIdentity(address,address)": [
        {
          "params": {
            "identityContract": "The IIdentity contract it was expected to be linked to.",
            "wallet": "The wallet address in question."
          }
        }
      ]
    },
    "title": "ATK Identity Registry Implementation"
  },
  "id": 151
}