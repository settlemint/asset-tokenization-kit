{
  "abi": [
    {
      "type": "function",
      "name": "batchRegisterTopicSchemes",
      "inputs": [
        {
          "name": "names",
          "type": "string[]",
          "internalType": "string[]"
        },
        {
          "name": "signatures",
          "type": "string[]",
          "internalType": "string[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getAllTopicIds",
      "inputs": [],
      "outputs": [
        {
          "name": "topicIds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTopicId",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        }
      ],
      "outputs": [
        {
          "name": "topicId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getTopicSchemeCount",
      "inputs": [],
      "outputs": [
        {
          "name": "count",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTopicSchemeSignature",
      "inputs": [
        {
          "name": "topicId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "signature",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTopicSchemeSignatureByName",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        }
      ],
      "outputs": [
        {
          "name": "signature",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasTopicScheme",
      "inputs": [
        {
          "name": "topicId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "exists",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasTopicSchemeByName",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        }
      ],
      "outputs": [
        {
          "name": "exists",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "registerTopicScheme",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "signature",
          "type": "string",
          "internalType": "string"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "removeTopicScheme",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "updateTopicScheme",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "newSignature",
          "type": "string",
          "internalType": "string"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "TopicSchemeRegistered",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "topicId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "name",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "signature",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TopicSchemeRemoved",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "topicId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "name",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TopicSchemeUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "topicId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "name",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "oldSignature",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "newSignature",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TopicSchemesBatchRegistered",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "topicIds",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "names",
          "type": "string[]",
          "indexed": false,
          "internalType": "string[]"
        },
        {
          "name": "signatures",
          "type": "string[]",
          "indexed": false,
          "internalType": "string[]"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "batchRegisterTopicSchemes(string[],string[])": "58280e98",
    "getAllTopicIds()": "c4456bda",
    "getTopicId(string)": "138309b7",
    "getTopicSchemeCount()": "172a0ddb",
    "getTopicSchemeSignature(uint256)": "bd2716b5",
    "getTopicSchemeSignatureByName(string)": "6aa085eb",
    "hasTopicScheme(uint256)": "6cc45eca",
    "hasTopicSchemeByName(string)": "e7a3d72b",
    "registerTopicScheme(string,string)": "dafb0ca3",
    "removeTopicScheme(string)": "c6f1bf23",
    "supportsInterface(bytes4)": "01ffc9a7",
    "updateTopicScheme(string,string)": "f263b663"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"TopicSchemeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TopicSchemeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newSignature\",\"type\":\"string\"}],\"name\":\"TopicSchemeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"topicIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"}],\"name\":\"TopicSchemesBatchRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"}],\"name\":\"batchRegisterTopicSchemes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTopicIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"topicIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTopicId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopicSchemeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"}],\"name\":\"getTopicSchemeSignature\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTopicSchemeSignatureByName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"}],\"name\":\"hasTopicScheme\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"hasTopicSchemeByName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"registerTopicScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"removeTopicScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSignature\",\"type\":\"string\"}],\"name\":\"updateTopicScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"This registry allows registration and management of topic schemes used for claim data structures\",\"events\":{\"TopicSchemeRegistered(address,uint256,string,string)\":{\"params\":{\"name\":\"The name of the registered topic scheme\",\"sender\":\"The address that registered the topic scheme\",\"signature\":\"The signature associated with the topic scheme\",\"topicId\":\"The unique identifier of the registered topic scheme\"}},\"TopicSchemeRemoved(address,uint256,string)\":{\"params\":{\"name\":\"The name of the removed topic scheme\",\"sender\":\"The address that removed the topic scheme\",\"topicId\":\"The unique identifier of the removed topic scheme\"}},\"TopicSchemeUpdated(address,uint256,string,string,string)\":{\"params\":{\"name\":\"The name of the updated topic scheme\",\"newSignature\":\"The new signature\",\"oldSignature\":\"The previous signature\",\"sender\":\"The address that updated the topic scheme\",\"topicId\":\"The unique identifier of the updated topic scheme\"}},\"TopicSchemesBatchRegistered(address,uint256[],string[],string[])\":{\"params\":{\"names\":\"The names of the registered topic schemes\",\"sender\":\"The address that registered the topic schemes\",\"signatures\":\"The signatures associated with the topic schemes\",\"topicIds\":\"The unique identifiers of the registered topic schemes\"}}},\"kind\":\"dev\",\"methods\":{\"batchRegisterTopicSchemes(string[],string[])\":{\"details\":\"topicIds are generated from names using keccak256 hash\",\"params\":{\"names\":\"Array of human-readable names for the topic schemes\",\"signatures\":\"Array of signature strings used for encoding/decoding data\"}},\"getAllTopicIds()\":{\"returns\":{\"topicIds\":\"Array of all registered topic scheme identifiers\"}},\"getTopicId(string)\":{\"params\":{\"name\":\"The name of the topic scheme\"},\"returns\":{\"topicId\":\"The unique identifier generated from the name\"}},\"getTopicSchemeCount()\":{\"returns\":{\"count\":\"The number of registered topic schemes\"}},\"getTopicSchemeSignature(uint256)\":{\"params\":{\"topicId\":\"The unique identifier of the topic scheme\"},\"returns\":{\"signature\":\"The signature string for the topic scheme\"}},\"getTopicSchemeSignatureByName(string)\":{\"params\":{\"name\":\"The name of the topic scheme\"},\"returns\":{\"signature\":\"The signature string for the topic scheme\"}},\"hasTopicScheme(uint256)\":{\"params\":{\"topicId\":\"The unique identifier to check\"},\"returns\":{\"exists\":\"True if the topic scheme is registered, false otherwise\"}},\"hasTopicSchemeByName(string)\":{\"params\":{\"name\":\"The name to check\"},\"returns\":{\"exists\":\"True if the topic scheme is registered, false otherwise\"}},\"registerTopicScheme(string,string)\":{\"details\":\"topicId is generated as uint256(keccak256(abi.encodePacked(name)))\",\"params\":{\"name\":\"The human-readable name for the topic scheme\",\"signature\":\"The signature string used for encoding/decoding data\"}},\"removeTopicScheme(string)\":{\"params\":{\"name\":\"The name of the topic scheme to remove\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"updateTopicScheme(string,string)\":{\"params\":{\"name\":\"The name of the topic scheme to update\",\"newSignature\":\"The new signature string\"}}},\"title\":\"SMART Topic Scheme Registry Interface\",\"version\":1},\"userdoc\":{\"events\":{\"TopicSchemeRegistered(address,uint256,string,string)\":{\"notice\":\"Emitted when a new topic scheme is registered\"},\"TopicSchemeRemoved(address,uint256,string)\":{\"notice\":\"Emitted when a topic scheme is removed\"},\"TopicSchemeUpdated(address,uint256,string,string,string)\":{\"notice\":\"Emitted when a topic scheme is updated\"},\"TopicSchemesBatchRegistered(address,uint256[],string[],string[])\":{\"notice\":\"Emitted when multiple topic schemes are registered in batch\"}},\"kind\":\"user\",\"methods\":{\"batchRegisterTopicSchemes(string[],string[])\":{\"notice\":\"Registers multiple topic schemes in a single transaction\"},\"getAllTopicIds()\":{\"notice\":\"Gets all registered topic IDs\"},\"getTopicId(string)\":{\"notice\":\"Gets the topic ID for a given name\"},\"getTopicSchemeCount()\":{\"notice\":\"Gets the total number of registered topic schemes\"},\"getTopicSchemeSignature(uint256)\":{\"notice\":\"Gets the signature for a specific topic scheme by ID\"},\"getTopicSchemeSignatureByName(string)\":{\"notice\":\"Gets the signature for a specific topic scheme by name\"},\"hasTopicScheme(uint256)\":{\"notice\":\"Checks if a topic scheme exists by ID\"},\"hasTopicSchemeByName(string)\":{\"notice\":\"Checks if a topic scheme exists by name\"},\"registerTopicScheme(string,string)\":{\"notice\":\"Registers a new topic scheme with its name and signature\"},\"removeTopicScheme(string)\":{\"notice\":\"Removes a topic scheme from the registry\"},\"updateTopicScheme(string,string)\":{\"notice\":\"Updates an existing topic scheme's signature\"}},\"notice\":\"Interface for managing topic schemes with their signatures for data encoding/decoding\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/interface/ISMARTTopicSchemeRegistry.sol\":\"ISMARTTopicSchemeRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/\",\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/\",\":forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/interface/ISMARTTopicSchemeRegistry.sol\":{\"keccak256\":\"0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0\",\"dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "signature",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TopicSchemeRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TopicSchemeRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "oldSignature",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newSignature",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TopicSchemeUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "topicIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]",
              "indexed": false
            },
            {
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TopicSchemesBatchRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchRegisterTopicSchemes"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllTopicIds",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "topicIds",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getTopicId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTopicSchemeCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTopicSchemeSignature",
          "outputs": [
            {
              "internalType": "string",
              "name": "signature",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTopicSchemeSignatureByName",
          "outputs": [
            {
              "internalType": "string",
              "name": "signature",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasTopicScheme",
          "outputs": [
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasTopicSchemeByName",
          "outputs": [
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "signature",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerTopicScheme"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeTopicScheme"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newSignature",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateTopicScheme"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchRegisterTopicSchemes(string[],string[])": {
            "details": "topicIds are generated from names using keccak256 hash",
            "params": {
              "names": "Array of human-readable names for the topic schemes",
              "signatures": "Array of signature strings used for encoding/decoding data"
            }
          },
          "getAllTopicIds()": {
            "returns": {
              "topicIds": "Array of all registered topic scheme identifiers"
            }
          },
          "getTopicId(string)": {
            "params": {
              "name": "The name of the topic scheme"
            },
            "returns": {
              "topicId": "The unique identifier generated from the name"
            }
          },
          "getTopicSchemeCount()": {
            "returns": {
              "count": "The number of registered topic schemes"
            }
          },
          "getTopicSchemeSignature(uint256)": {
            "params": {
              "topicId": "The unique identifier of the topic scheme"
            },
            "returns": {
              "signature": "The signature string for the topic scheme"
            }
          },
          "getTopicSchemeSignatureByName(string)": {
            "params": {
              "name": "The name of the topic scheme"
            },
            "returns": {
              "signature": "The signature string for the topic scheme"
            }
          },
          "hasTopicScheme(uint256)": {
            "params": {
              "topicId": "The unique identifier to check"
            },
            "returns": {
              "exists": "True if the topic scheme is registered, false otherwise"
            }
          },
          "hasTopicSchemeByName(string)": {
            "params": {
              "name": "The name to check"
            },
            "returns": {
              "exists": "True if the topic scheme is registered, false otherwise"
            }
          },
          "registerTopicScheme(string,string)": {
            "details": "topicId is generated as uint256(keccak256(abi.encodePacked(name)))",
            "params": {
              "name": "The human-readable name for the topic scheme",
              "signature": "The signature string used for encoding/decoding data"
            }
          },
          "removeTopicScheme(string)": {
            "params": {
              "name": "The name of the topic scheme to remove"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "updateTopicScheme(string,string)": {
            "params": {
              "name": "The name of the topic scheme to update",
              "newSignature": "The new signature string"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchRegisterTopicSchemes(string[],string[])": {
            "notice": "Registers multiple topic schemes in a single transaction"
          },
          "getAllTopicIds()": {
            "notice": "Gets all registered topic IDs"
          },
          "getTopicId(string)": {
            "notice": "Gets the topic ID for a given name"
          },
          "getTopicSchemeCount()": {
            "notice": "Gets the total number of registered topic schemes"
          },
          "getTopicSchemeSignature(uint256)": {
            "notice": "Gets the signature for a specific topic scheme by ID"
          },
          "getTopicSchemeSignatureByName(string)": {
            "notice": "Gets the signature for a specific topic scheme by name"
          },
          "hasTopicScheme(uint256)": {
            "notice": "Checks if a topic scheme exists by ID"
          },
          "hasTopicSchemeByName(string)": {
            "notice": "Checks if a topic scheme exists by name"
          },
          "registerTopicScheme(string,string)": {
            "notice": "Registers a new topic scheme with its name and signature"
          },
          "removeTopicScheme(string)": {
            "notice": "Removes a topic scheme from the registry"
          },
          "updateTopicScheme(string,string)": {
            "notice": "Updates an existing topic scheme's signature"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/",
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/",
        "forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/",
        "openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol": "ISMARTTopicSchemeRegistry"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol": {
        "keccak256": "0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a",
        "urls": [
          "bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0",
          "dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "batchRegisterTopicSchemes(string[],string[])": {
        "notice": "Registers multiple topic schemes in a single transaction"
      },
      "getAllTopicIds()": {
        "notice": "Gets all registered topic IDs"
      },
      "getTopicId(string)": {
        "notice": "Gets the topic ID for a given name"
      },
      "getTopicSchemeCount()": {
        "notice": "Gets the total number of registered topic schemes"
      },
      "getTopicSchemeSignature(uint256)": {
        "notice": "Gets the signature for a specific topic scheme by ID"
      },
      "getTopicSchemeSignatureByName(string)": {
        "notice": "Gets the signature for a specific topic scheme by name"
      },
      "hasTopicScheme(uint256)": {
        "notice": "Checks if a topic scheme exists by ID"
      },
      "hasTopicSchemeByName(string)": {
        "notice": "Checks if a topic scheme exists by name"
      },
      "registerTopicScheme(string,string)": {
        "notice": "Registers a new topic scheme with its name and signature"
      },
      "removeTopicScheme(string)": {
        "notice": "Removes a topic scheme from the registry"
      },
      "updateTopicScheme(string,string)": {
        "notice": "Updates an existing topic scheme's signature"
      }
    },
    "events": {
      "TopicSchemeRegistered(address,uint256,string,string)": {
        "notice": "Emitted when a new topic scheme is registered"
      },
      "TopicSchemeRemoved(address,uint256,string)": {
        "notice": "Emitted when a topic scheme is removed"
      },
      "TopicSchemeUpdated(address,uint256,string,string,string)": {
        "notice": "Emitted when a topic scheme is updated"
      },
      "TopicSchemesBatchRegistered(address,uint256[],string[],string[])": {
        "notice": "Emitted when multiple topic schemes are registered in batch"
      }
    },
    "notice": "Interface for managing topic schemes with their signatures for data encoding/decoding"
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "This registry allows registration and management of topic schemes used for claim data structures",
    "methods": {
      "batchRegisterTopicSchemes(string[],string[])": {
        "details": "topicIds are generated from names using keccak256 hash",
        "params": {
          "names": "Array of human-readable names for the topic schemes",
          "signatures": "Array of signature strings used for encoding/decoding data"
        }
      },
      "getAllTopicIds()": {
        "returns": {
          "topicIds": "Array of all registered topic scheme identifiers"
        }
      },
      "getTopicId(string)": {
        "params": {
          "name": "The name of the topic scheme"
        },
        "returns": {
          "topicId": "The unique identifier generated from the name"
        }
      },
      "getTopicSchemeCount()": {
        "returns": {
          "count": "The number of registered topic schemes"
        }
      },
      "getTopicSchemeSignature(uint256)": {
        "params": {
          "topicId": "The unique identifier of the topic scheme"
        },
        "returns": {
          "signature": "The signature string for the topic scheme"
        }
      },
      "getTopicSchemeSignatureByName(string)": {
        "params": {
          "name": "The name of the topic scheme"
        },
        "returns": {
          "signature": "The signature string for the topic scheme"
        }
      },
      "hasTopicScheme(uint256)": {
        "params": {
          "topicId": "The unique identifier to check"
        },
        "returns": {
          "exists": "True if the topic scheme is registered, false otherwise"
        }
      },
      "hasTopicSchemeByName(string)": {
        "params": {
          "name": "The name to check"
        },
        "returns": {
          "exists": "True if the topic scheme is registered, false otherwise"
        }
      },
      "registerTopicScheme(string,string)": {
        "details": "topicId is generated as uint256(keccak256(abi.encodePacked(name)))",
        "params": {
          "name": "The human-readable name for the topic scheme",
          "signature": "The signature string used for encoding/decoding data"
        }
      },
      "removeTopicScheme(string)": {
        "params": {
          "name": "The name of the topic scheme to remove"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "updateTopicScheme(string,string)": {
        "params": {
          "name": "The name of the topic scheme to update",
          "newSignature": "The new signature string"
        }
      }
    },
    "events": {
      "TopicSchemeRegistered(address,uint256,string,string)": {
        "params": {
          "name": "The name of the registered topic scheme",
          "sender": "The address that registered the topic scheme",
          "signature": "The signature associated with the topic scheme",
          "topicId": "The unique identifier of the registered topic scheme"
        }
      },
      "TopicSchemeRemoved(address,uint256,string)": {
        "params": {
          "name": "The name of the removed topic scheme",
          "sender": "The address that removed the topic scheme",
          "topicId": "The unique identifier of the removed topic scheme"
        }
      },
      "TopicSchemeUpdated(address,uint256,string,string,string)": {
        "params": {
          "name": "The name of the updated topic scheme",
          "newSignature": "The new signature",
          "oldSignature": "The previous signature",
          "sender": "The address that updated the topic scheme",
          "topicId": "The unique identifier of the updated topic scheme"
        }
      },
      "TopicSchemesBatchRegistered(address,uint256[],string[],string[])": {
        "params": {
          "names": "The names of the registered topic schemes",
          "sender": "The address that registered the topic schemes",
          "signatures": "The signatures associated with the topic schemes",
          "topicIds": "The unique identifiers of the registered topic schemes"
        }
      }
    },
    "title": "SMART Topic Scheme Registry Interface"
  },
  "id": 98
}