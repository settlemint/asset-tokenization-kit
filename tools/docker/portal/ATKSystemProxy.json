{
  "abi": [
    {
      "type": "fallback",
      "stateMutability": "payable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "error",
      "name": "ETHTransfersNotAllowed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSystemAddress",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETHTransfersNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSystemAddress\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"Child contracts must:      1. Provide their unique storage slot for the IATKSystem address via the constructor.      2. Implement `_getSpecificImplementationAddress` to fetch their logic contract address from IATKSystem         and revert with a specific error if not found.      3. In their own constructor, fetch the implementation address, prepare initialization data,         and then call `_performInitializationDelegatecall`.\",\"errors\":{\"ETHTransfersNotAllowed()\":[{\"details\":\"Many contracts are not designed to receive or hold Ether directly, and will revert such transactions to prevent loss of funds or unexpected behavior.\"}],\"InvalidSystemAddress()\":[{\"details\":\"This typically means an address expected to be a core system component (like a module proxy or implementation) was found to be the zero address or an otherwise incorrect address during a critical operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Validates and stores the `systemAddress_`.\",\"params\":{\"systemAddress_\":\"The address of the IATKSystem contract.\"}}},\"stateVariables\":{\"_ATK_SYSTEM_ADDRESS_SLOT\":{\"details\":\"Fixed storage slot for the IATKSystem address. Value: keccak256(\\\"org.smart.contracts.proxy.ATKSystemProxy.systemAddress\\\")\"}},\"title\":\"Abstract Base Proxy for ATK System Components\",\"version\":1},\"userdoc\":{\"errors\":{\"ETHTransfersNotAllowed()\":[{\"notice\":\"Error indicating that an attempt was made to send Ether to a contract that does not allow or expect it.\"}],\"InvalidSystemAddress()\":[{\"notice\":\"Error indicating that an invalid system address was provided or encountered.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the ATKSystemProxy.\"}},\"notice\":\"Provides common functionality for proxy contracts that interact with an IATKSystem contract         to determine their implementation address and handle initialization.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/ATKSystemProxy.sol\":\"ATKSystemProxy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/system/ATKSystemErrors.sol\":{\"keccak256\":\"0x85d02e1d6fb4ee127073c8cfc6effadb23579771aa5ebb0a09abc736b30a2cf2\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://95d385cbab46aecdd99df43c550212fa82e36e45fa32b4d5dde79ba46e142503\",\"dweb:/ipfs/QmT8vANsK8VjU14ZLzEvvGfXePeYThqP9wosD58APn5vCD\"]},\"contracts/system/ATKSystemProxy.sol\":{\"keccak256\":\"0x12c010a68ad78794ba027937670830daf64096a0679935f905aba52d6f59fcbd\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://7ff81a994ac5b99823ffe2a52f9474561719c9e33edf133c637388e6b5ab8790\",\"dweb:/ipfs/QmdjMocxoF2HCMpmpz37HgL2MMLYW69ZFbRYhQeF9wZ7wZ\"]},\"contracts/system/IATKSystem.sol\":{\"keccak256\":\"0xd5003b5cc8d60d6294bd8ef78aedc102250d48e6f9414cd665fce1bf06c47cad\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://76da38c57bfb2ebc21bdc229f9a7a5a48c858102e90b82682542719b303b639c\",\"dweb:/ipfs/QmUMgEPYLSkYqqdBGz5jK5xURpNf4PmSaACW8UV3LrXiiU\"]},\"dependencies/@openzeppelin-contracts-5.3.0/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ETHTransfersNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSystemAddress"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "fallback"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "constructor": {
            "details": "Validates and stores the `systemAddress_`.",
            "params": {
              "systemAddress_": "The address of the IATKSystem contract."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "constructor": {
            "notice": "Constructs the ATKSystemProxy."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/ATKSystemProxy.sol": "ATKSystemProxy"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/system/ATKSystemErrors.sol": {
        "keccak256": "0x85d02e1d6fb4ee127073c8cfc6effadb23579771aa5ebb0a09abc736b30a2cf2",
        "urls": [
          "bzz-raw://95d385cbab46aecdd99df43c550212fa82e36e45fa32b4d5dde79ba46e142503",
          "dweb:/ipfs/QmT8vANsK8VjU14ZLzEvvGfXePeYThqP9wosD58APn5vCD"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/ATKSystemProxy.sol": {
        "keccak256": "0x12c010a68ad78794ba027937670830daf64096a0679935f905aba52d6f59fcbd",
        "urls": [
          "bzz-raw://7ff81a994ac5b99823ffe2a52f9474561719c9e33edf133c637388e6b5ab8790",
          "dweb:/ipfs/QmdjMocxoF2HCMpmpz37HgL2MMLYW69ZFbRYhQeF9wZ7wZ"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/IATKSystem.sol": {
        "keccak256": "0xd5003b5cc8d60d6294bd8ef78aedc102250d48e6f9414cd665fce1bf06c47cad",
        "urls": [
          "bzz-raw://76da38c57bfb2ebc21bdc229f9a7a5a48c858102e90b82682542719b303b639c",
          "dweb:/ipfs/QmUMgEPYLSkYqqdBGz5jK5xURpNf4PmSaACW8UV3LrXiiU"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/proxy/Proxy.sol": {
        "keccak256": "0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd",
        "urls": [
          "bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac",
          "dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/StorageSlot.sol": {
        "keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
        "urls": [
          "bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
          "dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs the ATKSystemProxy."
      }
    },
    "errors": {
      "ETHTransfersNotAllowed()": [
        {
          "notice": "Error indicating that an attempt was made to send Ether to a contract that does not allow or expect it."
        }
      ],
      "InvalidSystemAddress()": [
        {
          "notice": "Error indicating that an invalid system address was provided or encountered."
        }
      ]
    },
    "notice": "Provides common functionality for proxy contracts that interact with an IATKSystem contract         to determine their implementation address and handle initialization."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "Child contracts must:      1. Provide their unique storage slot for the IATKSystem address via the constructor.      2. Implement `_getSpecificImplementationAddress` to fetch their logic contract address from IATKSystem         and revert with a specific error if not found.      3. In their own constructor, fetch the implementation address, prepare initialization data,         and then call `_performInitializationDelegatecall`.",
    "methods": {
      "constructor": {
        "details": "Validates and stores the `systemAddress_`.",
        "params": {
          "systemAddress_": "The address of the IATKSystem contract."
        }
      }
    },
    "errors": {
      "ETHTransfersNotAllowed()": [
        {
          "details": "Many contracts are not designed to receive or hold Ether directly, and will revert such transactions to prevent loss of funds or unexpected behavior."
        }
      ],
      "InvalidSystemAddress()": [
        {
          "details": "This typically means an address expected to be a core system component (like a module proxy or implementation) was found to be the zero address or an otherwise incorrect address during a critical operation."
        }
      ]
    },
    "title": "Abstract Base Proxy for ATK System Components"
  },
  "id": 114
}