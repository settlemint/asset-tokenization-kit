{
  "abi": [
    {
      "type": "function",
      "name": "balanceOfAt",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "timepoint",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setYieldSchedule",
      "inputs": [
        {
          "name": "schedule",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "totalSupplyAt",
      "inputs": [
        {
          "name": "timepoint",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "yieldBasisPerUnit",
      "inputs": [
        {
          "name": "holder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "basisPerUnit",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "yieldSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "schedule",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "yieldToken",
      "inputs": [],
      "outputs": [
        {
          "name": "paymentToken",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "CheckpointUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "oldBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "newBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "YieldScheduleSet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "schedule",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "FutureLookup",
      "inputs": [
        {
          "name": "requestedTimepoint",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "currentTimepoint",
          "type": "uint48",
          "internalType": "uint48"
        }
      ]
    },
    {
      "type": "error",
      "name": "YieldScheduleActive",
      "inputs": []
    },
    {
      "type": "error",
      "name": "YieldScheduleAlreadySet",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOfAt(address,uint256)": "4ee2cd7e",
    "setYieldSchedule(address)": "d5274738",
    "totalSupplyAt(uint256)": "981b24d0",
    "yieldBasisPerUnit(address)": "81e5bc36",
    "yieldSchedule()": "a7fc9e3f",
    "yieldToken()": "76d5de85"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedTimepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"currentTimepoint\",\"type\":\"uint48\"}],\"name\":\"FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YieldScheduleActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YieldScheduleAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CheckpointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"schedule\",\"type\":\"address\"}],\"name\":\"YieldScheduleSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"schedule\",\"type\":\"address\"}],\"name\":\"setYieldSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"yieldBasisPerUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basisPerUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldSchedule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"schedule\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface is intended to be implemented by contracts that provide yield-generating capabilities for tokens. The functions are external, allowing them to be called from other contracts or off-chain applications.\",\"errors\":{\"FutureLookup(uint256,uint48)\":[{\"details\":\"Historical data is only available for past timepoints. The `clock()` function in the implementing      contract determines the current reference timepoint.\",\"params\":{\"currentTimepoint\":\"The current valid timepoint (e.g., current block number) according to the contract's `clock()`.\",\"requestedTimepoint\":\"The future timepoint (e.g., block number) that was invalidly requested.\"}}],\"YieldScheduleActive()\":[{\"details\":\"For example, this might be reverted if an attempt is made to modify certain parameters of the token or the yield mechanism (like `_beforeMint` in `_SMARTYieldLogic` preventing minting) once the yield schedule has started (i.e., `schedule.startDate() <= block.timestamp`). Some operations might be restricted to only occur before the yield schedule begins distributing rewards.\"}],\"YieldScheduleAlreadySet()\":[{\"details\":\"This error is typically reverted when a function like `setYieldSchedule` is called but the token already has an active or previously configured yield schedule. To change a schedule, it might need to be unset or updated via a different mechanism if supported.\"}]},\"events\":{\"CheckpointUpdated(address,address,uint256,uint256)\":{\"details\":\"This event signals that a historical data point has been recorded.      Off-chain services can listen to this event to know when to update their own historical data caches      or to trigger other actions based on balance changes.\",\"params\":{\"account\":\"The address for which a balance checkpoint was created. If this is `address(0)`,                it signifies that the checkpoint is for the token's `totalSupply`.                `indexed` for tracking specific accounts or total supply updates.\",\"newBalance\":\"The balance (either of `account` or `totalSupply`) *after* the operation and at the                   time of this checkpoint.\",\"oldBalance\":\"The balance (either of `account` or `totalSupply`) *before* the operation that triggered                   the checkpoint.\",\"sender\":\"The address that initiated the token operation (e.g., minter, transferer, burner)               which resulted in this checkpoint update. `indexed` for easier filtering.\"}},\"YieldScheduleSet(address,address)\":{\"details\":\"This event is critical for transparency and tracking changes to how a token generates and distributes yield. When this event is emitted, it signifies that the `schedule` address is now the authoritative contract dictating the terms of yield for this token. The `indexed` keyword for `sender` and `schedule` allows for efficient searching and filtering of these events based on these addresses. For example, one could easily find all tokens for which a specific yield schedule was set, or all schedules set by a particular admin.\",\"params\":{\"schedule\":\"The address of the newly set yield schedule contract. This contract implements `ISMARTYieldSchedule` and contains the yield logic.\",\"sender\":\"The address of the account (e.g., an admin or owner) that initiated the transaction to set the yield schedule.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOfAt(address,uint256)\":{\"details\":\"The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.\",\"params\":{\"account\":\"The address of the account whose historical balance is being queried.\",\"timepoint\":\"The specific past timepoint (e.g., block number) to retrieve the balance for.\"},\"returns\":{\"_0\":\"uint256 The token balance of `account` at the specified `timepoint`.\"}},\"setYieldSchedule(address)\":{\"details\":\"This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.\",\"params\":{\"schedule\":\"The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`.\"}},\"totalSupplyAt(uint256)\":{\"details\":\"Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.\",\"params\":{\"timepoint\":\"The specific past timepoint (e.g., block number) to retrieve the total supply for.\"},\"returns\":{\"_0\":\"uint256 The total token supply at the specified `timepoint`.\"}},\"yieldBasisPerUnit(address)\":{\"details\":\"The \\\"yield basis\\\" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).\",\"params\":{\"holder\":\"The address of the token holder for whom the yield basis is being queried. This allows for holder-specific configurations.\"},\"returns\":{\"basisPerUnit\":\"The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations.\"}},\"yieldSchedule()\":{\"returns\":{\"schedule\":\"The address of the yield schedule contract.\"}},\"yieldToken()\":{\"details\":\"Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.\",\"returns\":{\"paymentToken\":\"An `IERC20` interface instance representing the token used for yield payments.\"}}},\"title\":\"Interface for the SMART Yield Extension\",\"version\":1},\"userdoc\":{\"errors\":{\"FutureLookup(uint256,uint48)\":[{\"notice\":\"Error reverted when a historical data lookup (e.g., `balanceOfAt`, `totalSupplyAt`) is attempted         for a `timepoint` that is in the future or is the current `timepoint`.\"}],\"YieldScheduleActive()\":[{\"notice\":\"Error indicating that an action cannot be performed because the yield schedule is currently active.\"}],\"YieldScheduleAlreadySet()\":[{\"notice\":\"Error indicating that a yield schedule has already been set for the token and an attempt was made to set it again.\"}]},\"events\":{\"CheckpointUpdated(address,address,uint256,uint256)\":{\"notice\":\"Emitted when a new checkpoint is written for an account's balance or for the total supply         due to a token operation (mint, burn, transfer).\"},\"YieldScheduleSet(address,address)\":{\"notice\":\"Emitted when a new yield schedule is successfully set or updated for a token.\"}},\"kind\":\"user\",\"methods\":{\"balanceOfAt(address,uint256)\":{\"notice\":\"Returns the token balance of a specific `account` at a given `timepoint`.\"},\"setYieldSchedule(address)\":{\"notice\":\"Sets or updates the yield schedule contract for this token.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Returns the total token supply at a given `timepoint`.\"},\"yieldBasisPerUnit(address)\":{\"notice\":\"Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals).\"},\"yieldSchedule()\":{\"notice\":\"Returns the address of the yield schedule contract for this token.\"},\"yieldToken()\":{\"notice\":\"Returns the ERC20 token contract that is used for paying out the yield.\"}},\"notice\":\"This interface defines the functions that a SMART Yield token extension must implement. It allows for the management of a yield schedule associated with a token, which dictates how yield is accrued and paid out. This interface also inherits from `ISMARTHistoricalBalances`, indicating that any implementing contract must also support querying token balances at historical points in time, a feature often crucial for accurate yield calculations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/yield/ISMARTYield.sol\":\"ISMARTYield\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/\",\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/\",\":forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/historical-balances/ISMARTHistoricalBalances.sol\":{\"keccak256\":\"0x748c28628df829a95a42783247fd2e2f082bf644370f54463dd8c060a1a4fdb8\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://ca138ff3a56bdcdbfc7dd9ff17f56c0e15643d7f63172fe03dd47da35b47515f\",\"dweb:/ipfs/Qme1CeWEWgbr2YPJ9dRK98VCZ94naen9BhrrKb2wFhs6iC\"]},\"contracts/smart/extensions/yield/ISMARTYield.sol\":{\"keccak256\":\"0xabc3a75854b3b1b2fade84c3ea2fe058dbbbe88fa07e256e62d92359863e33b4\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://fe6b2e9add6b6abe4c715f6750a8c55c14b4a88edcc2b93f98777fa71303297b\",\"dweb:/ipfs/QmdRmeFStp5yqqZgmeRBpZxvwvEat5qb7szgC6Chom7nGG\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestedTimepoint",
              "type": "uint256"
            },
            {
              "internalType": "uint48",
              "name": "currentTimepoint",
              "type": "uint48"
            }
          ],
          "type": "error",
          "name": "FutureLookup"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "YieldScheduleActive"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "YieldScheduleAlreadySet"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "oldBalance",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CheckpointUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "schedule",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "YieldScheduleSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timepoint",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "schedule",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setYieldSchedule"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "timepoint",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupplyAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "yieldBasisPerUnit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "basisPerUnit",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "yieldSchedule",
          "outputs": [
            {
              "internalType": "address",
              "name": "schedule",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "yieldToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "paymentToken",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOfAt(address,uint256)": {
            "details": "The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.",
            "params": {
              "account": "The address of the account whose historical balance is being queried.",
              "timepoint": "The specific past timepoint (e.g., block number) to retrieve the balance for."
            },
            "returns": {
              "_0": "uint256 The token balance of `account` at the specified `timepoint`."
            }
          },
          "setYieldSchedule(address)": {
            "details": "This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.",
            "params": {
              "schedule": "The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`."
            }
          },
          "totalSupplyAt(uint256)": {
            "details": "Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.",
            "params": {
              "timepoint": "The specific past timepoint (e.g., block number) to retrieve the total supply for."
            },
            "returns": {
              "_0": "uint256 The total token supply at the specified `timepoint`."
            }
          },
          "yieldBasisPerUnit(address)": {
            "details": "The \"yield basis\" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).",
            "params": {
              "holder": "The address of the token holder for whom the yield basis is being queried. This allows for holder-specific configurations."
            },
            "returns": {
              "basisPerUnit": "The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations."
            }
          },
          "yieldSchedule()": {
            "returns": {
              "schedule": "The address of the yield schedule contract."
            }
          },
          "yieldToken()": {
            "details": "Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.",
            "returns": {
              "paymentToken": "An `IERC20` interface instance representing the token used for yield payments."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOfAt(address,uint256)": {
            "notice": "Returns the token balance of a specific `account` at a given `timepoint`."
          },
          "setYieldSchedule(address)": {
            "notice": "Sets or updates the yield schedule contract for this token."
          },
          "totalSupplyAt(uint256)": {
            "notice": "Returns the total token supply at a given `timepoint`."
          },
          "yieldBasisPerUnit(address)": {
            "notice": "Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals)."
          },
          "yieldSchedule()": {
            "notice": "Returns the address of the yield schedule contract for this token."
          },
          "yieldToken()": {
            "notice": "Returns the ERC20 token contract that is used for paying out the yield."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/",
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/",
        "forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/",
        "openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/yield/ISMARTYield.sol": "ISMARTYield"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/historical-balances/ISMARTHistoricalBalances.sol": {
        "keccak256": "0x748c28628df829a95a42783247fd2e2f082bf644370f54463dd8c060a1a4fdb8",
        "urls": [
          "bzz-raw://ca138ff3a56bdcdbfc7dd9ff17f56c0e15643d7f63172fe03dd47da35b47515f",
          "dweb:/ipfs/Qme1CeWEWgbr2YPJ9dRK98VCZ94naen9BhrrKb2wFhs6iC"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/yield/ISMARTYield.sol": {
        "keccak256": "0xabc3a75854b3b1b2fade84c3ea2fe058dbbbe88fa07e256e62d92359863e33b4",
        "urls": [
          "bzz-raw://fe6b2e9add6b6abe4c715f6750a8c55c14b4a88edcc2b93f98777fa71303297b",
          "dweb:/ipfs/QmdRmeFStp5yqqZgmeRBpZxvwvEat5qb7szgC6Chom7nGG"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "balanceOfAt(address,uint256)": {
        "notice": "Returns the token balance of a specific `account` at a given `timepoint`."
      },
      "setYieldSchedule(address)": {
        "notice": "Sets or updates the yield schedule contract for this token."
      },
      "totalSupplyAt(uint256)": {
        "notice": "Returns the total token supply at a given `timepoint`."
      },
      "yieldBasisPerUnit(address)": {
        "notice": "Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals)."
      },
      "yieldSchedule()": {
        "notice": "Returns the address of the yield schedule contract for this token."
      },
      "yieldToken()": {
        "notice": "Returns the ERC20 token contract that is used for paying out the yield."
      }
    },
    "events": {
      "CheckpointUpdated(address,address,uint256,uint256)": {
        "notice": "Emitted when a new checkpoint is written for an account's balance or for the total supply         due to a token operation (mint, burn, transfer)."
      },
      "YieldScheduleSet(address,address)": {
        "notice": "Emitted when a new yield schedule is successfully set or updated for a token."
      }
    },
    "errors": {
      "FutureLookup(uint256,uint48)": [
        {
          "notice": "Error reverted when a historical data lookup (e.g., `balanceOfAt`, `totalSupplyAt`) is attempted         for a `timepoint` that is in the future or is the current `timepoint`."
        }
      ],
      "YieldScheduleActive()": [
        {
          "notice": "Error indicating that an action cannot be performed because the yield schedule is currently active."
        }
      ],
      "YieldScheduleAlreadySet()": [
        {
          "notice": "Error indicating that a yield schedule has already been set for the token and an attempt was made to set it again."
        }
      ]
    },
    "notice": "This interface defines the functions that a SMART Yield token extension must implement. It allows for the management of a yield schedule associated with a token, which dictates how yield is accrued and paid out. This interface also inherits from `ISMARTHistoricalBalances`, indicating that any implementing contract must also support querying token balances at historical points in time, a feature often crucial for accurate yield calculations."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "This interface is intended to be implemented by contracts that provide yield-generating capabilities for tokens. The functions are external, allowing them to be called from other contracts or off-chain applications.",
    "methods": {
      "balanceOfAt(address,uint256)": {
        "details": "The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.",
        "params": {
          "account": "The address of the account whose historical balance is being queried.",
          "timepoint": "The specific past timepoint (e.g., block number) to retrieve the balance for."
        },
        "returns": {
          "_0": "uint256 The token balance of `account` at the specified `timepoint`."
        }
      },
      "setYieldSchedule(address)": {
        "details": "This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.",
        "params": {
          "schedule": "The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`."
        }
      },
      "totalSupplyAt(uint256)": {
        "details": "Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.",
        "params": {
          "timepoint": "The specific past timepoint (e.g., block number) to retrieve the total supply for."
        },
        "returns": {
          "_0": "uint256 The total token supply at the specified `timepoint`."
        }
      },
      "yieldBasisPerUnit(address)": {
        "details": "The \"yield basis\" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).",
        "params": {
          "holder": "The address of the token holder for whom the yield basis is being queried. This allows for holder-specific configurations."
        },
        "returns": {
          "basisPerUnit": "The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations."
        }
      },
      "yieldSchedule()": {
        "returns": {
          "schedule": "The address of the yield schedule contract."
        }
      },
      "yieldToken()": {
        "details": "Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.",
        "returns": {
          "paymentToken": "An `IERC20` interface instance representing the token used for yield payments."
        }
      }
    },
    "events": {
      "CheckpointUpdated(address,address,uint256,uint256)": {
        "details": "This event signals that a historical data point has been recorded.      Off-chain services can listen to this event to know when to update their own historical data caches      or to trigger other actions based on balance changes.",
        "params": {
          "account": "The address for which a balance checkpoint was created. If this is `address(0)`,                it signifies that the checkpoint is for the token's `totalSupply`.                `indexed` for tracking specific accounts or total supply updates.",
          "newBalance": "The balance (either of `account` or `totalSupply`) *after* the operation and at the                   time of this checkpoint.",
          "oldBalance": "The balance (either of `account` or `totalSupply`) *before* the operation that triggered                   the checkpoint.",
          "sender": "The address that initiated the token operation (e.g., minter, transferer, burner)               which resulted in this checkpoint update. `indexed` for easier filtering."
        }
      },
      "YieldScheduleSet(address,address)": {
        "details": "This event is critical for transparency and tracking changes to how a token generates and distributes yield. When this event is emitted, it signifies that the `schedule` address is now the authoritative contract dictating the terms of yield for this token. The `indexed` keyword for `sender` and `schedule` allows for efficient searching and filtering of these events based on these addresses. For example, one could easily find all tokens for which a specific yield schedule was set, or all schedules set by a particular admin.",
        "params": {
          "schedule": "The address of the newly set yield schedule contract. This contract implements `ISMARTYieldSchedule` and contains the yield logic.",
          "sender": "The address of the account (e.g., an admin or owner) that initiated the transaction to set the yield schedule."
        }
      }
    },
    "errors": {
      "FutureLookup(uint256,uint48)": [
        {
          "details": "Historical data is only available for past timepoints. The `clock()` function in the implementing      contract determines the current reference timepoint.",
          "params": {
            "currentTimepoint": "The current valid timepoint (e.g., current block number) according to the contract's `clock()`.",
            "requestedTimepoint": "The future timepoint (e.g., block number) that was invalidly requested."
          }
        }
      ],
      "YieldScheduleActive()": [
        {
          "details": "For example, this might be reverted if an attempt is made to modify certain parameters of the token or the yield mechanism (like `_beforeMint` in `_SMARTYieldLogic` preventing minting) once the yield schedule has started (i.e., `schedule.startDate() <= block.timestamp`). Some operations might be restricted to only occur before the yield schedule begins distributing rewards."
        }
      ],
      "YieldScheduleAlreadySet()": [
        {
          "details": "This error is typically reverted when a function like `setYieldSchedule` is called but the token already has an active or previously configured yield schedule. To change a schedule, it might need to be unset or updated via a different mechanism if supported."
        }
      ]
    },
    "title": "Interface for the SMART Yield Extension"
  },
  "id": 78
}