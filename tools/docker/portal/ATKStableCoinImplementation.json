{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "forwarder_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "accessManager",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "addComplianceModule",
      "inputs": [
        {
          "name": "_module",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "allowance",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "approve",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "balanceOf",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "batchBurn",
      "inputs": [
        {
          "name": "userAddresses",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchForcedTransfer",
      "inputs": [
        {
          "name": "fromList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "toList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchFreezePartialTokens",
      "inputs": [
        {
          "name": "userAddresses",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchMint",
      "inputs": [
        {
          "name": "_toList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchSetAddressFrozen",
      "inputs": [
        {
          "name": "userAddresses",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "freeze",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchTransfer",
      "inputs": [
        {
          "name": "toList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchUnfreezePartialTokens",
      "inputs": [
        {
          "name": "userAddresses",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "burn",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "compliance",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ISMARTCompliance"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "complianceModules",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple[]",
          "internalType": "struct SMARTComplianceModuleParamPair[]",
          "components": [
            {
              "name": "module",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "params",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decimals",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "findValidCollateralClaim",
      "inputs": [],
      "outputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "issuer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "expiryTimestamp",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "forcedRecoverTokens",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "forcedTransfer",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "freezePartialTokens",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getFrozenTokens",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "identityRegistry",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ISMARTIdentityRegistry"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "name_",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "symbol_",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "decimals_",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "onchainID_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "collateralTopicId_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "initialModulePairs_",
          "type": "tuple[]",
          "internalType": "struct SMARTComplianceModuleParamPair[]",
          "components": [
            {
              "name": "module",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "params",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "identityRegistry_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "compliance_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "accessManager_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isFrozen",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isTrustedForwarder",
      "inputs": [
        {
          "name": "forwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "mint",
      "inputs": [
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "onchainID",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "pause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "paused",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "recoverERC20",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "recoverTokens",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registeredInterfaces",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes4[]",
          "internalType": "bytes4[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "removeComplianceModule",
      "inputs": [
        {
          "name": "_module",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setAddressFrozen",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "freeze",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCompliance",
      "inputs": [
        {
          "name": "_compliance",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setIdentityRegistry",
      "inputs": [
        {
          "name": "_identityRegistry",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setOnchainID",
      "inputs": [
        {
          "name": "_onchainID",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setParametersForComplianceModule",
      "inputs": [
        {
          "name": "_module",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "symbol",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalSupply",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transfer",
      "inputs": [
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferFrom",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "trustedForwarder",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "unfreezePartialTokens",
      "inputs": [
        {
          "name": "userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "unpause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "AccessManagerSet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "manager",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "AddressFrozen",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "userAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "isFrozen",
          "type": "bool",
          "indexed": true,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Approval",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BurnCompleted",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ComplianceAdded",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_compliance",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ComplianceModuleAdded",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_module",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_params",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ComplianceModuleRemoved",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_module",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ERC20TokenRecovered",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "token",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ForcedTransfer",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRegistryAdded",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_identityRegistry",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MintCompleted",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ModuleParametersUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_module",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_params",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Paused",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RecoverySuccess",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "lostWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "investorOnchainID",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokensFrozen",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokensRecovered",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "lostWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokensUnfrozen",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Transfer",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TransferCompleted",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Unpaused",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "UpdatedTokenInformation",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_newDecimals",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        },
        {
          "name": "_newOnchainID",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessControlUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "neededRole",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "CannotRecoverSelf",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DuplicateModule",
      "inputs": [
        {
          "name": "module",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InsufficientAllowance",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "allowance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "needed",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InsufficientBalance",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "balance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "needed",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidApprover",
      "inputs": [
        {
          "name": "approver",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidReceiver",
      "inputs": [
        {
          "name": "receiver",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidSender",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidSpender",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ExpectedPause",
      "inputs": []
    },
    {
      "type": "error",
      "name": "FreezeAmountExceedsAvailableBalance",
      "inputs": [
        {
          "name": "available",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "requested",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientCollateral",
      "inputs": [
        {
          "name": "required",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "available",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientFrozenTokens",
      "inputs": [
        {
          "name": "frozenBalance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "requested",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientTokenBalance",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidCollateralTopic",
      "inputs": [
        {
          "name": "topicId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidDecimals",
      "inputs": [
        {
          "name": "decimals",
          "type": "uint8",
          "internalType": "uint8"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidInitialization",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLostWallet",
      "inputs": []
    },
    {
      "type": "error",
      "name": "LengthMismatch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "MintNotCompliant",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ModuleAlreadyAdded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ModuleNotFound",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NoTokensToRecover",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotInitializing",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RecipientAddressFrozen",
      "inputs": []
    },
    {
      "type": "error",
      "name": "SafeERC20FailedOperation",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "SenderAddressFrozen",
      "inputs": []
    },
    {
      "type": "error",
      "name": "TokenPaused",
      "inputs": []
    },
    {
      "type": "error",
      "name": "TransferNotCompliant",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ZeroAddressNotAllowed",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60a03461008857601f6149d438819003918201601f19168301916001600160401b0383118484101761008c5780849260209460405283398101031261008857516001600160a01b0381168103610088576100576100a0565b6080526100626100a0565b60405161487d9081610137823960805181818161188701528181611bb901526145900152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b5f5160206149b45f395f51905f525460ff8160401c16610127576002600160401b03196001600160401b038216016100d55750565b6001600160401b0319166001600160401b039081175f5160206149b45f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b63f92ee8a960e01b5f5260045ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a71461271f5750806306fdde031461263d578063095ea7b3146125865780631171bda914612564578063125c4a3314612534578063134e18f41461250c578063158b1a57146124d457806316114acd146124a857806318160ddd1461247f5780631a7af3791461240a5780631ef5205f146122745780631fd522a8146120075780631fe56f7d14611fd657806323b872dd14611ef0578063313ce56714611ecf5780633d1ddc5b14611e345780633f4ba83a14611dbe57806340c10f1914611d8d57806342a47abc14611ca55780634710362d14611c495780634a6cc67714611bed578063572b6c0514611b985780635c975abb14611b755780636290865d14611b4c57806362b9333e14611b165780636857310714611aba57806370a0823114611a8e57806377d2f8d9146118b65780637da0a8771461187157806381418ae414610b0d5780638456cb5914610a9057806388d695b214610a3c57806391d1485414610a1557806395d89b411461091a5780639dc29fac146108e45780639fc1d0e7146108b5578063a9059cbb1461087c578063a98ac17a146106f5578063aba63705146106c8578063b5cb9db314610690578063c69c09cf1461064f578063c76f3d9b14610468578063cbf3f861146103ea578063dd62ed3e146103a2578063e583983614610363578063f8981789146102d1578063fc7e5fa8146102595763fdcb60681461022e575f80fd5b346102565780600319360112610256576009546040516001600160a01b039091168152602090f35b80fd5b50346102565761026836612864565b909161027a61027561458d565b612f04565b8181036102bf57845b81811061028e578580f35b806102b96102a76102a2600194868a613606565b613616565b6102b2838789613606565b35906131fd565b01610283565b6001621398b960e31b03198552600485fd5b5034610256576020366003190112610256576102eb6127ce565b6102fb6102f661458d565b612f7a565b6001600160a01b0316801561035457600580546001600160a01b031916821790556001600160a01b0361032c61458d565b167f4cd146021d85ad5de55052ad32d44b8b6e496b3436cf6acdfcb5e82b7b3bccb38380a380f35b6342bcdf7f60e11b8252600482fd5b50346102565760203660031901126102565760209060ff906040906001600160a01b0361038e6127ce565b168152600b84522054166040519015158152f35b5034610256576040366003190112610256576103bc6127ce565b6103cd6103c76127e4565b91612a63565b9060018060a01b03165f52602052602060405f2054604051908152f35b5034610256576020366003190112610256576104046127ce565b61040f6102f661458d565b6001600160a01b0316801561035457600480546001600160a01b031916821790556001600160a01b0361044061458d565b167f95d78da2896224ccde884cbed0572281fdb51e155034d0012fc6593806df69768380a380f35b5034610256576020366003190112610256576104826127ce565b61048d6102f661458d565b6001600160a01b0316808252600660205260408220548015610640575f19810181811161062c576008545f198101908111610618578082036105b6575b50505060085480156105a2575f19016104e281612ac1565b81549060018060a01b039060031b1b1916905560085580825260066020528160408120558082526007602052816040812061051d8154612aed565b80610560575b506001600160a01b039150610538905061458d565b167f34edd82cbb989f04be4723e96eec51ffb91f506ef585c7f28ce53110782f5f5e8380a380f35b601f81116001146105765750555b815f80610523565b8183526020832061059291601f0160051c81019060010161366c565b808252816020812091555561056e565b634e487b7160e01b83526031600452602483fd5b6105e0916105c661060492612ac1565b905460039190911b1c6001600160a01b0316928391612ac1565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b8352600660205260408320555f80806104ca565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b84526011600452602484fd5b631c94b02360e21b8352600483fd5b5034610256576040366003190112610256576106696127ce565b602435801515810361068c576106899161068461027561458d565b614545565b80f35b8280fd5b503461025657806003193601126102565760606106ab612b6c565b604080519384526001600160a01b03909216602084015290820152f35b503461025657806003193601126102565760035460405160089190911c6001600160a01b03168152602090f35b503461025657806003193601126102565760085490610713826129d5565b906107216040519283612945565b828252601f19610730846129d5565b01815b81811061085257505080925b808410610758576040518061075485826129ec565b0390f35b61076484939293612ac1565b905460039190911b1c6001600160a01b031680845260076020526040808520905190959161079182612916565b81526040519585908054906107a582612aed565b808a52916001811690811561082b57506001146107f4575b5050956107d1816001959697980382612945565b60208201526107e08286612b25565b526107eb8185612b25565b5001929061073f565b8752602087208792505b81831061081557505086016020016107d1876107bd565b6001816020925483868d010152019201916107fe565b60ff19166020808c019190915292151560051b8a0190920192506107d191508890506107bd565b60209060409593955161086481612916565b86815260608382015282828701015201939193610733565b5034610256576040366003190112610256576108aa6108996127ce565b602435906108a561458d565b61373b565b602060405160018152f35b50346102565760206108da6108c9366127fa565b916108d561027561458d565b613e6c565b6040519015158152f35b5034610256576040366003190112610256576106896109016127ce565b61091161090c61458d565b612ff0565b60243590613c9a565b503461025657806003193601126102565760405190805f5160206147d15f395f51905f52549061094982612aed565b80855291600181169081156109ee5750600114610985575b6107548461097181860382612945565b6040519182916020835260208301906127aa565b5f5160206147d15f395f51905f5281527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa939250905b8082106109d45750909150810160200161097182610961565b9192600181602092548385880101520191019092916109bb565b60ff191660208087019190915292151560051b850190920192506109719150839050610961565b50346102565760403660031901126102565760206108da610a346127e4565b600435613c39565b503461025657610a4b36612864565b90918181036102bf57845b818110610a61578580f35b80610a8a610a756102a2600194868a613606565b610a80838789613606565b35906108a561458d565b01610a56565b5034610256578060031936011261025657610ab1610aac61458d565b612e8e565b600d5460ff8116610afe5760ff1916600117600d556001600160a01b03610ad661458d565b167f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2588280a280f35b638dfc202b60e01b8252600482fd5b503461025657610120366003190112610256576004356001600160401b03811161186d57610b3f9036906004016129b7565b6024356001600160401b03811161068c57610b5e9036906004016129b7565b6044359060ff821680920361186957606435916001600160a01b03831690818403611865576084359360a435916001600160401b038311611861573660238401121561186157826004013592610bb3846129d5565b93610bc16040519586612945565b8085526024602086019160051b830101913683116117bd5760248101915b8383106117c55750505060c4356001600160a01b0381169391508390036115855760e4356001600160a01b03811691908290036117c157610104356001600160a01b03811697908890036117bd575f5160206148515f395f51905f52549960ff8b60401c16159a6001600160401b038116801590816117b5575b60011490816117ab575b1590816117a2575b506117935767ffffffffffffffff1981166001175f5160206148515f395f51905f52558b611767575b50610c9d6145e6565b610ca56145e6565b610cad6145e6565b80516001600160401b038111611753578c610cd55f5160206147915f395f51905f5254612aed565b601f8111611716575b505060208d601f831160011461169a5790610d0d93836115b7575b50508160011b915f199060031b1c19161790565b5f5160206147915f395f51905f52555b80516001600160401b038111611686578b610d455f5160206147d15f395f51905f5254612aed565b601f811161163e575b505060208c601f83116001146115c25790610d7c93836115b75750508160011b915f199060031b1c19161790565b5f5160206147d15f395f51905f52555b81156115a85783156115a85760128311611594578260035491610100600160a81b039060081b16916affffffffffffffffffffff60a81b161717600355826bffffffffffffffffffffffff60a01b6004541617600455806bffffffffffffffffffffffff60a01b6005541617600555803b156115855760405162fdecdb60e01b81528990818180610e2089600483016129ec565b0381865afa801561158957611570575b5050610e3a61458d565b84516001600160a01b03909116948a805b8381106113cf5750505050916020917fc5e2e9318498e1a253726df4112345358bfcbadd5aab57c99d8c7f590ab0d32a9360405192867f95d78da2896224ccde884cbed0572281fdb51e155034d0012fc6593806df69768d80a3857f4cd146021d85ad5de55052ad32d44b8b6e496b3436cf6acdfcb5e82b7b3bccb38c80a38152a3610ed56145e6565b6325e5ad7960e01b84526001602052604084205460ff1615611359575b610efa6145e6565b63d7ae59db60e01b84526001602052604084205460ff16156112e3575b610f1f6145e6565b631cf1473b60e31b84526001602052604084205460ff161561126d575b600d805460ff191660011790556001600160a01b03610f5961458d565b167f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2588580a2610f866145e6565b801561125e57600980546001600160a01b03191682179055631b068a0f60e21b84526001602052604084205460ff16156111c0575b6001600160a01b03610fcb61458d565b167f2ddabd343e5cc7a71d4628054d3292636fc1bf21d5faef22c2dcad9f96554f178580a3610ff86145e6565b80156111ae57600a5563b5cb9db360e01b82526001602052604082205460ff1615611138575b63205062b960e21b82526001602052604082205460ff161561109a575b6110425780f35b68ff0000000000000000195f5160206148515f395f51905f5254165f5160206148515f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b63205062b960e21b8252600160205260408220600160ff19825416179055600254600160401b81101561112457600181018060025581101561111057600283528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff6381418ae4831b921b191617905561103b565b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b63b5cb9db360e01b8252600160205260408220600160ff19825416179055600254600160401b81101561112457600181018060025581101561111057600283528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff63b5cb9db3831b921b191617905561101e565b632a73165b60e11b8352600452602482fd5b631b068a0f60e21b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff636c1a283c831b921b1916179055610fbb565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b85526041600452602485fd5b6342bcdf7f60e11b8452600484fd5b631cf1473b60e31b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff63e78a39d8831b921b1916179055610f3c565b63d7ae59db60e01b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff63d7ae59db831b921b1916179055610f17565b6325e5ad7960e01b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff6325e5ad79831b921b1916179055610ef2565b6001600160a01b036113e18285612b25565b515116604060206113f28487612b25565b510151938281526006602052205461155e5760408e61141083613bd1565b6008548382526006602052828220558281526007602052209280516001600160401b03811161154957908f918b926114528261144c8954612aed565b89613682565b602090601f83116001146114c15796611495836114ab945f5160206147515f395f51905f52969460019b916114b6575b508160011b915f199060031b1c19161790565b90556040519182916020835260208301906127aa565b0390a3018b90610e4b565b90508401515f611482565b601f97929197198216838252888220915b81811061151f5750826114ab949260019a5f5160206147515f395f51905f5297958c9410611507575b5050811b019055610971565b8501515f1960f88460031b161c191690555f806114fb565b929496979893955090602060018192868a015181550194019201908e9593919897969492986114d2565b50634e487b7160e01b8f52604160045260248ffd5b630da3f63f60e41b8e5260045260248dfd5b8161157a91612945565b61158557885f610e30565b8880fd5b6040513d84823e3d90fd5b63ca95039160e01b8a52600483905260248afd5b6342bcdf7f60e11b8a5260048afd5b015190505f80610cf9565b9192601f1984165f5160206147d15f395f51905f528452828420935b818110611626575090846001959493921061160e575b505050811b015f5160206147d15f395f51905f5255610d8c565b01515f1960f88460031b161c191690555f80806115f4565b929360206001819287860151815501950193016115de565b6020825f5160206147d15f395f51905f52611675945220601f840160051c8101916020851061167c575b601f0160051c019061366c565b8b5f610d4e565b9091508190611668565b634e487b7160e01b8c52604160045260248cfd5b9192601f1984165f5160206147915f395f51905f528452828420935b8181106116fe57509084600195949392106116e6575b505050811b015f5160206147915f395f51905f5255610d1d565b01515f1960f88460031b161c191690555f80806116cc565b929360206001819287860151815501950193016116b6565b6020825f5160206147915f395f51905f5261174c945220601f840160051c8101916020851061167c57601f0160051c019061366c565b8c5f610cde565b634e487b7160e01b8d52604160045260248dfd5b68ffffffffffffffffff191668010000000000000001175f5160206148515f395f51905f52555f610c94565b63f92ee8a960e01b8d5260048dfd5b9050155f610c6b565b303b159150610c63565b8d9150610c59565b8a80fd5b8980fd5b82356001600160401b03811161185d578201906040602319833603011261185d57604051916117f383612916565b60248101356001600160a01b038116810361185957835260448101356001600160401b0381116118555760249101019036601f8301121561185157602092611842849336908581359101612981565b83820152815201920191610bdf565b8d80fd5b8e80fd5b5f80fd5b8c80fd5b8780fd5b8580fd5b8380fd5b5080fd5b50346102565780600319360112610256576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610256576118c5366128b4565b906118d16102f661458d565b60055484906001600160a01b0316803b1561186d5781604051809263e50bcad360e01b8252818061190789898c6004850161364a565b03915afa801561158957611a79575b50506001600160a01b03831680855260066020526040852054909390611a6a5761193f90613bd1565b60085483855260066020526040852055828452600760205260408420906001600160401b03831161124a5761197e836119788454612aed565b84613682565b849183601f81116001146119f657806119b9915f5160206147515f395f51905f529589916119eb57508160011b915f199060031b1c19161790565b90555b6001600160a01b036119cc61458d565b16926119e560405192839260208452602084019161362a565b0390a380f35b90508401355f611482565b5080865260208620869385601f1981165b808710611a4c575f5160206147515f395f51905f52965010611a33575b5050600184811b0190556119bc565b8301355f19600387901b60f8161c191690555f80611a24565b85830135845560209687019660019094019390920191879150611a07565b63079f102d60e51b8552600485fd5b81611a8391612945565b61186957835f611916565b5034610256576020366003190112610256576020611ab2611aad6127ce565b612a9b565b604051908152f35b503461025657611ac936612864565b9091611ad661090c61458d565b8181036102bf57845b818110611aea578580f35b80611b10611afe6102a2600194868a613606565b611b09838789613606565b35906139db565b01611adf565b503461025657604036600319011261025657610689611b336127ce565b611b3b6127e4565b90611b4761027561458d565b6132b7565b50346102565780600319360112610256576005546040516001600160a01b039091168152602090f35b5034610256578060031936011261025657602060ff600d54166040519015158152f35b5034610256576020366003190112610256576020611bb46127ce565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b503461025657611bfc36612864565b9091611c0961090c61458d565b8181036102bf57845b818110611c1d578580f35b80611c43611c316102a2600194868a613606565b611c3c838789613606565b3590613c9a565b01611c12565b503461025657611c5836612864565b9091611c6561027561458d565b8181036102bf57845b818110611c79578580f35b80611c9f611c8d6102a2600194868a613606565b611c98838789613606565b35906136bc565b01611c6e565b5034610256576060366003190112610256576004356001600160401b03811161186d57611cd6903690600401612834565b6024356001600160401b03811161186957611cf5903690600401612834565b6044929192356001600160401b03811161186557611d17903690600401612834565b919092611d2561027561458d565b818103611d7b57828203611d7b57865b818110611d40578780f35b80611d74611d546102a2600194868c613606565b611d626102a284888c613606565b611d6d84898b613606565b3591613e6c565b5001611d35565b6001621398b960e31b03198752600487fd5b503461025657604036600319011261025657610689611daa6127ce565b611db561090c61458d565b602435906139db565b5034610256578060031936011261025657611dda610aac61458d565b600d5460ff811615611e255760ff1916600d556001600160a01b03611dfd61458d565b167f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa8280a280f35b63e779249560e01b8252600482fd5b503461025657602036600319011261025657611e4e6127ce565b611e596102f661458d565b60038054610100600160a81b0319811660089390931b610100600160a81b03169290921790819055907fc5e2e9318498e1a253726df4112345358bfcbadd5aab57c99d8c7f590ab0d32a6020611ead61458d565b60405160ff9490941684526001600160a01b0360089590951c8516941692a380f35b5034610256578060031936011261025657602060ff60035416604051908152f35b503461025657611eff366127fa565b91611f0861458d565b611f1182612a63565b60018060a01b0382165f5260205260405f2054905f198210611f3a575b50506108aa935061373b565b848210611fb3576001600160a01b03831615611f9f576001600160a01b03811615611f8b576108aa9550611f6d83612a63565b9060018060a01b03165f526020528360405f20910390555f80611f2e565b634a1406b160e11b86526004869052602486fd5b63e602df0560e01b86526004869052602486fd5b637dc7a0d960e11b86526001600160a01b03166004526024526044839052606484fd5b503461025657604036600319011261025657610689611ff36127ce565b611ffe61027561458d565b602435906136bc565b50346102565780600319360112610256576040518060206002549283815201918183600286525f5160206147715f395f51905f529286905b8060078301106121cf576120989454918181106121b0575b818110612191575b818110612172575b818110612153575b818110612134575b818110612115575b8181106120f8575b106120e3575b509392930383612945565b604051928392602084019060208552518091526040840192915b8181106120c0575050500390f35b82516001600160e01b0319168452859450602093840193909201916001016120b2565b6001600160e01b03191681526020015f61208d565b602083811b6001600160e01b031916855290930192600101612087565b604083901b6001600160e01b031916845260209093019260010161207f565b606083901b6001600160e01b0319168452602090930192600101612077565b608083901b6001600160e01b031916845260209093019260010161206f565b60a083901b6001600160e01b0319168452602090930192600101612067565b60c083901b6001600160e01b031916845260209093019260010161205f565b60e083901b6001600160e01b0319168452602090930192600101612057565b916008919350610100600191865463ffffffff60e01b8160e01b16825263ffffffff60e01b8160c01b16602083015263ffffffff60e01b8160a01b16604083015263ffffffff60e01b8160801b16606083015263ffffffff60e01b8160601b16608083015263ffffffff60e01b8160401b1660a083015263ffffffff60e01b8160201b1660c083015263ffffffff60e01b1660e082015201940192018492939161203f565b503461185957612283366128b4565b9061228f6102f661458d565b6001600160a01b0383165f81815260066020526040902054909390156123fb576005546001600160a01b0316803b1561185957835f91846122e7946040519586948593849363e50bcad360e01b85526004850161364a565b03915afa80156123f0576123db575b50828452600760205260408420906001600160401b03831161124a57612320836119788454612aed565b849183601f811160011461236e57806119b9917f8191c9e77ca554fa2d71249ed7be789e36d034b36dbf87dbe2a03dd92483cd159589916119eb57508160011b915f199060031b1c19161790565b5080865260208620869385601f1981165b8087106123bd577f8191c9e77ca554fa2d71249ed7be789e36d034b36dbf87dbe2a03dd92483cd15965010611a33575050600184811b0190556119bc565b8583013584556020968701966001909401939092019187915061237f565b6123e89194505f90612945565b5f925f6122f6565b6040513d5f823e3d90fd5b631c94b02360e21b5f5260045ffd5b346118595761241836612864565b9161242761027594929461458d565b828103612470575f5b81811061243957005b6124476102a2828486613606565b90612453818688613606565b359182151583036118595760019261246a91614545565b01612430565b631fec674760e31b5f5260045ffd5b34611859575f3660031901126118595760205f5160206147f15f395f51905f5254604051908152f35b34611859576020366003190112611859576124d26124c46127ce565b6124cc61458d565b906132b7565b005b34611859576020366003190112611859576001600160a01b036124f56127ce565b165f52600c602052602060405f2054604051908152f35b34611859575f366003190112611859576004546040516001600160a01b039091168152602090f35b34611859576040366003190112611859576124d26125506127ce565b61255b61027561458d565b602435906131fd565b34611859576124d2612575366127fa565b91612581610aac61458d565b613066565b346118595760403660031901126118595761259f6127ce565b602435906125ab61458d565b916001600160a01b03831691821561262a576001600160a01b0316928315612617577f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916125fa602092612a63565b855f5282528060405f2055604051908152a3602060405160018152f35b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b34611859575f366003190112611859576040515f5f5160206147915f395f51905f525461266981612aed565b80845290600181169081156126fb5750600114612691575b6107548361097181850382612945565b5f5160206147915f395f51905f525f9081527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0939250905b8082106126e157509091508101602001610971612681565b9192600181602092548385880101520191019092916126c9565b60ff191660208086019190915291151560051b840190910191506109719050612681565b34611859576020366003190112611859576004359063ffffffff60e01b82168092036118595760209163205062b960e21b8114908115612761575b5015158152f35b8091505f526001835260ff60405f205416908115612799575b8115612788575b508361275a565b6301ffc9a760e01b14905083612781565b630d67380360e31b8114915061277a565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b038216820361185957565b602435906001600160a01b038216820361185957565b6060906003190112611859576004356001600160a01b038116810361185957906024356001600160a01b0381168103611859579060443590565b9181601f84011215611859578235916001600160401b038311611859576020808501948460051b01011161185957565b6040600319820112611859576004356001600160401b038111611859578161288e91600401612834565b92909291602435906001600160401b038211611859576128b091600401612834565b9091565b6040600319820112611859576004356001600160a01b038116810361185957916024356001600160401b0381116118595782602382011215611859578060040135926001600160401b0384116118595760248483010111611859576024019190565b604081019081106001600160401b0382111761293157604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b0382111761293157604052565b6001600160401b03811161293157601f01601f191660200190565b92919261298d82612966565b9161299b6040519384612945565b829481845281830111611859578281602093845f960137010152565b9080601f83011215611859578160206129d293359101612981565b90565b6001600160401b0381116129315760051b60200190565b602081016020825282518091526040820191602060408360051b8301019401925f915b838310612a1e57505050505090565b9091929394602080612a54600193603f198682030187526040838b51878060a01b038151168452015191818582015201906127aa565b97019301930191939290612a0f565b6001600160a01b03165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b6001600160a01b03165f9081525f5160206147b15f395f51905f52602052604090205490565b600854811015612ad95760085f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b90600182811c92168015612b1b575b6020831014612b0757565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612afc565b8051821015612ad95760209160051b010190565b9081602091031261185957516001600160a01b03811681036118595790565b51906001600160a01b038216820361185957565b6040516304d3863d60e21b8152602081600481305afa9081156123f0576004916020915f91612e61575b5060405163b4f3fcb760e01b815292839182906001600160a01b03165afa9081156123f0575f91612e1f575b5060405163aba6370560e01b8152602081600481305afa9081156123f0575f91612de5575b50600a546040516352c111d160e01b8152600481018290526001600160a01b0392831693919290915f9183916024918391165afa9081156123f0575f91612d44575b50805115612d3957604051916380e9e9e160e01b835260048301525f82602481865afa9182156123f0575f92612ca7575b508151925f5b848110612c745750505050505f905f905f90565b612c8983612c828387612b25565b51846143d6565b919092612c9b57505050600101612c60565b97919650945092505050565b9091503d805f833e612cb98183612945565b810190602081830312611859578051906001600160401b03821161185957019080601f83011215611859578151612cef816129d5565b92612cfd6040519485612945565b81845260208085019260051b82010192831161185957602001905b828210612d2957505050905f612c5a565b8151815260209182019101612d18565b5050505f905f905f90565b90503d805f833e612d558183612945565b810190602081830312611859578051906001600160401b03821161185957019080601f8301121561185957815190612d8c826129d5565b92612d9a6040519485612945565b82845260208085019360051b82010191821161185957602001915b818310612dc5575050505f612c29565b82516001600160a01b038116810361185957815260209283019201612db5565b90506020813d602011612e17575b81612e0060209383612945565b8101031261185957612e1190612b58565b5f612be7565b3d9150612df3565b90506020813d602011612e59575b81612e3a60209383612945565b8101031261185957516001600160a01b0381168103611859575f612bc2565b3d9150612e2d565b612e819150823d8411612e87575b612e798183612945565b810190612b39565b5f612b96565b503d612e6f565b612eb8817fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26613c39565b15612ec05750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26602452604490fd5b612f2e817fe28434228950b641dbbc0178de89daa359a87c6ee0d8399aeace52a98fe902b9613c39565b15612f365750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fe28434228950b641dbbc0178de89daa359a87c6ee0d8399aeace52a98fe902b9602452604490fd5b612fa4817fb56f7a452f9fa4c6b1640d0352eff0d678b9d7c7618b4f73815657069f341e66613c39565b15612fac5750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fb56f7a452f9fa4c6b1640d0352eff0d678b9d7c7618b4f73815657069f341e66602452604490fd5b61301a817f47b7a6ef32f924153c4c0c2f871f8856bd114b4903c167827ef0f0694c583e27613c39565b156130225750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527f47b7a6ef32f924153c4c0c2f871f8856bd114b4903c167827ef0f0694c583e27602452604490fd5b6001600160a01b0316903082146131c05781156131b1576001600160a01b03169182156131b15780156131ac576040516370a0823160e01b8152306004820152602081602481865afa80156123f05782915f91613177575b50106131685760205f6040518281019063a9059cbb60e01b8252866024820152846044820152604481526130f3606482612945565b519082865af1156123f0575f513d61315f5750813b155b61314c577f66687834c8f406fef81052eb9008377ceb4e7305caa93f726591af6e44bcc90460206001600160a01b0361314161458d565b1692604051908152a4565b50635274afe760e01b5f5260045260245ffd5b6001141561310a565b637222ae5760e11b5f5260045ffd5b9150506020813d6020116131a4575b8161319360209383612945565b81010312611859578190515f6130be565b3d9150613186565b505050565b6342bcdf7f60e11b5f5260045ffd5b63817fbb3560e01b5f5260045ffd5b919082039182116131dc57565b634e487b7160e01b5f52601160045260245ffd5b919082018092116131dc57565b6001600160a01b0381165f818152600c602052604090205490929161322c90829061322790612a9b565b6131cf565b82811061328857508161323e916131f0565b825f52600c60205260405f20557f1bcfa03a03a5a801acedbac92e4c327445cae41571bdd6cf9b6988685c038e86602060018060a01b0361327d61458d565b1692604051908152a3565b9050637e5a39b960e01b5f5260045260245260445ffd5b90816020910312611859575180151581036118595790565b906001600160a01b0382169081156131b1573082146131c0576132d983612a9b565b9081156135f7576040516304d3863d60e21b8152602081600481305afa9081156123f0575f916135d8575b5060405163084bb03360e41b81526004810185905294906001600160a01b0316602086602481845afa9586156123f0575f9661359c575b506001600160a01b03838116961686900361355e57602060249160405192838092633f8ed17360e01b82528960048301525afa9081156123f0575f9161356d575b501561355e57613398918391600160ff195f5416175f5561373b565b60ff195f54165f55815f52600c6020528260405f2054806134c4575b5050815f52600b60205260ff60405f2054165f14613472575f838152600b60205260408082208054600160ff1991821681179092558584529190922080549091169055836001600160a01b0361340861458d565b165f5160206148315f395f51905f525f80a45f826001600160a01b0361342c61458d565b165f5160206148315f395f51905f528380a45b7fa2231b10d9b4e4166c8a827c99f97691b05aa88fb04e009a4e499005b5c50fcc60206001600160a01b0361314161458d565b825f52600b60205260ff60405f2054161561343f575f838152600b60205260408120805460ff19169055836001600160a01b036134ad61458d565b165f5160206148315f395f51905f528380a461343f565b836001600160a01b036134d561458d565b167f81aa4332c9e93af00ae5fdbed32b01fbc5d01ac7755a05d0962acd19030bd5546020604051858152a35f848152600c602090815260408083208390558483529091208290557f1bcfa03a03a5a801acedbac92e4c327445cae41571bdd6cf9b6988685c038e86906001600160a01b0361354e61458d565b1692604051908152a3825f6133b4565b630e7bebe360e01b5f5260045ffd5b61358f915060203d602011613595575b6135878183612945565b81019061329f565b5f61337c565b503d61357d565b9095506020813d6020116135d0575b816135b860209383612945565b81010312611859576135c990612b58565b945f61333b565b3d91506135ab565b6135f1915060203d602011612e8757612e798183612945565b5f613304565b635e4f582160e11b5f5260045ffd5b9190811015612ad95760051b0190565b356001600160a01b03811681036118595790565b908060209392818452848401375f828201840152601f01601f1916010190565b6001600160a01b0390911681526040602082018190526129d29391019161362a565b818110613677575050565b5f815560010161366c565b9190601f811161369157505050565b6136ba925f5260205f20906020601f840160051c8301931061167c57601f0160051c019061366c565b565b6001600160a01b03165f818152600c602052604090205490919081811061372657816136e7916131cf565b825f52600c60205260405f20557f81aa4332c9e93af00ae5fdbed32b01fbc5d01ac7755a05d0962acd19030bd554602060018060a01b0361327d61458d565b639f6422a960e01b5f5260045260245260445ffd5b90916001600160a01b03821680156139c8576001600160a01b0384169081156139b55760ff600d54166139a65760ff5f5416158061390a575b613894575b805f525f5160206147b15f395f51905f5260205260405f205483811061387a578390825f525f5160206147b15f395f51905f526020520360405f2055815f525f5160206147b15f395f51905f5260205260405f2083815401905581815f5160206148115f395f51905f526020604051878152a36001600160a01b036137fc61458d565b167f0d8423425ea24ce801d57e1af368c7ca24b3a31b719c058675916f436635eea26020604051868152a46005546001600160a01b0316803b156118595761385f935f809460405196879586948593631f2d7a6560e11b85523060048601614725565b03925af180156123f0576138705750565b5f6136ba91612945565b915063391434e360e21b5f5260045260245260445260645ffd5b6005546040516336b1527f60e11b81529060209082906001600160a01b031681806138c5898c8c3060048601614725565b03915afa9081156123f0575f916138eb575b50613779576310a151f560e01b5f5260045ffd5b613904915060203d602011613595576135878183612945565b5f6138d7565b815f52600b60205260ff60405f20541661399757825f52600b60205260ff60405f20541661398857815f52600c60205261396060405f2054835f525f5160206147b15f395f51905f5260205260405f20546131cf565b84811061396d5750613774565b92505063391434e360e21b5f5260045260245260445260645ffd5b637f3447d360e01b5f5260045ffd5b633928b55960e01b5f5260045ffd5b63e779249560e01b5f5260045ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b6001600160a01b038116919082156139b55760ff600d54166139a657825f52600b60205260ff60405f20541661398857613a13612b6c565b5050613a2d835f5160206147f15f395f51905f52546131f0565b808210613bbc57505060ff5f541615613b39575b613a59825f5160206147f15f395f51905f52546131f0565b5f5160206147f15f395f51905f5255825f525f5160206147b15f395f51905f5260205260405f20828154019055825f5f5160206148115f395f51905f526020604051868152a36005546001600160a01b0316803b1561185957604051637133bb3160e11b81523060048201526001600160a01b03929092166024830152604482018390525f908290606490829084905af180156123f057613b29575b507fe06a64fbf06d35586ace9c9da7a5c34ca3f2c0fd07e34e80be6d0341357795a860206001600160a01b0361327d61458d565b5f613b3391612945565b5f613af5565b6005546040516336b1527f60e11b81523060048201525f60248201526001600160a01b03838116604483015260648201859052909160209183916084918391165afa9081156123f0575f91613b9d575b50613a4157639b3b575b60e01b5f5260045ffd5b613bb6915060203d602011613595576135878183612945565b5f613b89565b632c1f8ef160e21b5f5260045260245260445ffd5b60085490600160401b8210156129315760018201600855600854821015612ad95760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390910180546001600160a01b0319166001600160a01b03909216919091179055565b600954604051632474521560e21b815260048101929092526001600160a01b039283166024830152909160209183916044918391165afa9081156123f0575f91613c81575090565b6129d2915060203d602011613595576135878183612945565b6001600160a01b038116919082156139c85760ff600d54166139a657825f525f5160206147b15f395f51905f5260205260405f205460ff5f541615613e49575b835f52600c60205260405f205480613e19575b5050825f525f5160206147b15f395f51905f5260205260405f2054828110613dfe578290845f525f5160206147b15f395f51905f526020520360405f2055815f5160206147f15f395f51905f5254035f5160206147f15f395f51905f52555f835f5160206148115f395f51905f526020604051868152a36005546001600160a01b0316803b156118595760405163292d480360e01b81523060048201526001600160a01b03929092166024830152604482018390525f908290606490829084905af180156123f057613dee575b507f92eda58db715be76693c72f2b6c1ffec1f5d9fa127f24d7d26acaefa731a52fa60206001600160a01b0361327d61458d565b5f613df891612945565b5f613dba565b90508263391434e360e21b5f5260045260245260445260645ffd5b613e22916131cf565b808311613e30575b80613ced565b613e3d613e4391846131cf565b826136bc565b5f613e2a565b82811015613cda5790508263391434e360e21b5f5260045260245260445260645ffd5b9091613e7782612a9b565b91818310614364576001600160a01b0381165f818152600c602052604081205491949092918591816142ee575b505050600160ff195f5416175f5560ff600d54166139a6578315948515614278576001600160a01b0381165f908152600b602052604090205460ff1661398857613eec612b6c565b5050613f06855f5160206147f15f395f51905f52546131f0565b808210613bbc57505060ff5f5416156141f5575b851561419957613f38845f5160206147f15f395f51905f52546131f0565b5f5160206147f15f395f51905f52555b6001600160a01b03811695861590811561417657855f5160206147f15f395f51905f5254035f5160206147f15f395f51905f52555b87875f5160206148115f395f51905f5260206040518a8152a31561405957506005546001600160a01b03169150813b1561068c57604051637133bb3160e11b81523060048201526001600160a01b03919091166024820152604481018490529082908290606490829084905af1801561158957908291614044575b50505b805460ff191690557f47cea260e2dfb95ed2ab59ad44fe2ac9cddb432afb828d2a1475936b5a2b829a60206001600160a01b0361403661458d565b1692604051908152a4600190565b8161404e91612945565b61025657805f613ff8565b156140d657506005546001600160a01b031690813b1561068c5760405163292d480360e01b81523060048201526001600160a01b03919091166024820152604481018490529082908290606490829084905af18015611589579082916140c1575b5050613ffb565b816140cb91612945565b61025657805f6140ba565b85856001600160a01b036140e861458d565b167f0d8423425ea24ce801d57e1af368c7ca24b3a31b719c058675916f436635eea26020604051898152a46005546001600160a01b031691823b156118595761414e925f9283879360405196879586948593631f2d7a6560e11b85523060048601614725565b03925af180156123f057614163575b50613ffb565b61416f91505f90612945565b5f5f61415d565b875f525f5160206147b15f395f51905f5260205260405f20868154019055613f7d565b845f525f5160206147b15f395f51905f5260205260405f20548481106141da578490865f525f5160206147b15f395f51905f526020520360405f2055613f48565b84908663391434e360e21b5f5260045260245260445260645ffd5b6005546040516336b1527f60e11b81523060048201525f60248201526001600160a01b03838116604483015260648201879052909160209183916084918391165afa9081156123f0575f91614259575b50613f1a57639b3b575b60e01b5f5260045ffd5b614272915060203d602011613595576135878183612945565b5f614245565b6001600160a01b0381166142e957845f525f5160206147b15f395f51905f5260205260405f2054855f52600c60205260405f2054806142b9575b5050613f1a565b6142c2916131cf565b8085116142d0575b806142b2565b6142dd6142e391866131cf565b836136bc565b5f6142ca565b613f1a565b816142f8916131cf565b80861115613ea45761430d61431491876131cf565b80926131cf565b825f52600c60205260405f20557f81aa4332c9e93af00ae5fdbed32b01fbc5d01ac7755a05d0962acd19030bd554602060018060a01b0361435361458d565b1692604051908152a3835f80613ea4565b829063391434e360e21b5f5260018060a01b031660045260245260445260645ffd5b92919261439282612966565b916143a06040519384612945565b829481845281830111611859578281602093845f96015e010152565b9080601f830112156118595781516129d292602001614386565b60405163c9100bcb60e01b81526004810192909252919291905f816024816001600160a01b0386165afa905f5f93835f935f95614498575b50614425575b505050505090505f905f905f905f90565b600a548203614414578651965f905b888210614443575b5050614414565b6001600160a01b036144558383612b25565b5116916001600160a01b03881683900361448e57505061447795969750614611565b9092916144895780808080879661443c565b600193565b6001019150614434565b935093509350503d805f833e6144ae8183612945565b81019260c082850312611859578151906144ca60408401612b58565b9160608401516001600160401b03811161185957866144ea9186016143bc565b9560808501516001600160401b038111611859578161450a9187016143bc565b9460a0810151906001600160401b03821161185957019080601f8301121561185957815161453a92602001614386565b50919492935f61440e565b6001600160a01b039081165f818152600b60205260409020805460ff191693151560ff81169490941790559061457961458d565b165f5160206148315f395f51905f525f80a4565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806145db575b156145d75760131936013681116131dc573560601c90565b3390565b5060143610156145bf565b60ff5f5160206148515f395f51905f525460401c161561460257565b631afcd79f60e31b5f5260045ffd5b9161461e9391859361464f565b156146465761462c906146ea565b919290921561463c576001929190565b5f92508291508190565b505f905f905f90565b60405163604b4d3760e11b81526001600160a01b03909216600483015260248201929092526080604482015292602092849291839182916146aa916146989060848501906127aa565b838103600319016064850152906127aa565b03916001600160a01b03165afa5f91816146c9575b506129d257505f90565b6146e391925060203d602011613595576135878183612945565b905f6146bf565b80516040810361471b578160409181010312611859576040602082015191015190914282111561463c576001929190565b50505f905f905f90565b6001600160a01b0391821681529181166020830152909116604082015260608101919091526080019056fe4df30bfa3ec06fecb039a1a7f419067e9ae43dae6bccbbe724bf4dedcca740b3405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0452c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef17ec2643977f0865dd45350e9efdcdfead258c9220974e67d1a37ca144772293f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000af0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00",
    "sourceMap": "2171:12733:28:-:0;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;3200:53:55;;:::i;:::-;1623:37:219;;2589:109:28;;:::i;:::-;2171:12733;;;;;;;;1623:37:219;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;-1:-1:-1;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;7709:422:220;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;7894:76:220;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;7983:34:220;7979:146;;7709:422;:::o;7979:146::-;-1:-1:-1;;;;;;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;8085:29:220;;2171:12733:28;;8085:29:220;7709:422::o;7894:76::-;7936:23;;;-1:-1:-1;7936:23:220;;-1:-1:-1;7936:23:220",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a71461271f5750806306fdde031461263d578063095ea7b3146125865780631171bda914612564578063125c4a3314612534578063134e18f41461250c578063158b1a57146124d457806316114acd146124a857806318160ddd1461247f5780631a7af3791461240a5780631ef5205f146122745780631fd522a8146120075780631fe56f7d14611fd657806323b872dd14611ef0578063313ce56714611ecf5780633d1ddc5b14611e345780633f4ba83a14611dbe57806340c10f1914611d8d57806342a47abc14611ca55780634710362d14611c495780634a6cc67714611bed578063572b6c0514611b985780635c975abb14611b755780636290865d14611b4c57806362b9333e14611b165780636857310714611aba57806370a0823114611a8e57806377d2f8d9146118b65780637da0a8771461187157806381418ae414610b0d5780638456cb5914610a9057806388d695b214610a3c57806391d1485414610a1557806395d89b411461091a5780639dc29fac146108e45780639fc1d0e7146108b5578063a9059cbb1461087c578063a98ac17a146106f5578063aba63705146106c8578063b5cb9db314610690578063c69c09cf1461064f578063c76f3d9b14610468578063cbf3f861146103ea578063dd62ed3e146103a2578063e583983614610363578063f8981789146102d1578063fc7e5fa8146102595763fdcb60681461022e575f80fd5b346102565780600319360112610256576009546040516001600160a01b039091168152602090f35b80fd5b50346102565761026836612864565b909161027a61027561458d565b612f04565b8181036102bf57845b81811061028e578580f35b806102b96102a76102a2600194868a613606565b613616565b6102b2838789613606565b35906131fd565b01610283565b6001621398b960e31b03198552600485fd5b5034610256576020366003190112610256576102eb6127ce565b6102fb6102f661458d565b612f7a565b6001600160a01b0316801561035457600580546001600160a01b031916821790556001600160a01b0361032c61458d565b167f4cd146021d85ad5de55052ad32d44b8b6e496b3436cf6acdfcb5e82b7b3bccb38380a380f35b6342bcdf7f60e11b8252600482fd5b50346102565760203660031901126102565760209060ff906040906001600160a01b0361038e6127ce565b168152600b84522054166040519015158152f35b5034610256576040366003190112610256576103bc6127ce565b6103cd6103c76127e4565b91612a63565b9060018060a01b03165f52602052602060405f2054604051908152f35b5034610256576020366003190112610256576104046127ce565b61040f6102f661458d565b6001600160a01b0316801561035457600480546001600160a01b031916821790556001600160a01b0361044061458d565b167f95d78da2896224ccde884cbed0572281fdb51e155034d0012fc6593806df69768380a380f35b5034610256576020366003190112610256576104826127ce565b61048d6102f661458d565b6001600160a01b0316808252600660205260408220548015610640575f19810181811161062c576008545f198101908111610618578082036105b6575b50505060085480156105a2575f19016104e281612ac1565b81549060018060a01b039060031b1b1916905560085580825260066020528160408120558082526007602052816040812061051d8154612aed565b80610560575b506001600160a01b039150610538905061458d565b167f34edd82cbb989f04be4723e96eec51ffb91f506ef585c7f28ce53110782f5f5e8380a380f35b601f81116001146105765750555b815f80610523565b8183526020832061059291601f0160051c81019060010161366c565b808252816020812091555561056e565b634e487b7160e01b83526031600452602483fd5b6105e0916105c661060492612ac1565b905460039190911b1c6001600160a01b0316928391612ac1565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b8352600660205260408320555f80806104ca565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b84526011600452602484fd5b631c94b02360e21b8352600483fd5b5034610256576040366003190112610256576106696127ce565b602435801515810361068c576106899161068461027561458d565b614545565b80f35b8280fd5b503461025657806003193601126102565760606106ab612b6c565b604080519384526001600160a01b03909216602084015290820152f35b503461025657806003193601126102565760035460405160089190911c6001600160a01b03168152602090f35b503461025657806003193601126102565760085490610713826129d5565b906107216040519283612945565b828252601f19610730846129d5565b01815b81811061085257505080925b808410610758576040518061075485826129ec565b0390f35b61076484939293612ac1565b905460039190911b1c6001600160a01b031680845260076020526040808520905190959161079182612916565b81526040519585908054906107a582612aed565b808a52916001811690811561082b57506001146107f4575b5050956107d1816001959697980382612945565b60208201526107e08286612b25565b526107eb8185612b25565b5001929061073f565b8752602087208792505b81831061081557505086016020016107d1876107bd565b6001816020925483868d010152019201916107fe565b60ff19166020808c019190915292151560051b8a0190920192506107d191508890506107bd565b60209060409593955161086481612916565b86815260608382015282828701015201939193610733565b5034610256576040366003190112610256576108aa6108996127ce565b602435906108a561458d565b61373b565b602060405160018152f35b50346102565760206108da6108c9366127fa565b916108d561027561458d565b613e6c565b6040519015158152f35b5034610256576040366003190112610256576106896109016127ce565b61091161090c61458d565b612ff0565b60243590613c9a565b503461025657806003193601126102565760405190805f5160206147d15f395f51905f52549061094982612aed565b80855291600181169081156109ee5750600114610985575b6107548461097181860382612945565b6040519182916020835260208301906127aa565b5f5160206147d15f395f51905f5281527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa939250905b8082106109d45750909150810160200161097182610961565b9192600181602092548385880101520191019092916109bb565b60ff191660208087019190915292151560051b850190920192506109719150839050610961565b50346102565760403660031901126102565760206108da610a346127e4565b600435613c39565b503461025657610a4b36612864565b90918181036102bf57845b818110610a61578580f35b80610a8a610a756102a2600194868a613606565b610a80838789613606565b35906108a561458d565b01610a56565b5034610256578060031936011261025657610ab1610aac61458d565b612e8e565b600d5460ff8116610afe5760ff1916600117600d556001600160a01b03610ad661458d565b167f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2588280a280f35b638dfc202b60e01b8252600482fd5b503461025657610120366003190112610256576004356001600160401b03811161186d57610b3f9036906004016129b7565b6024356001600160401b03811161068c57610b5e9036906004016129b7565b6044359060ff821680920361186957606435916001600160a01b03831690818403611865576084359360a435916001600160401b038311611861573660238401121561186157826004013592610bb3846129d5565b93610bc16040519586612945565b8085526024602086019160051b830101913683116117bd5760248101915b8383106117c55750505060c4356001600160a01b0381169391508390036115855760e4356001600160a01b03811691908290036117c157610104356001600160a01b03811697908890036117bd575f5160206148515f395f51905f52549960ff8b60401c16159a6001600160401b038116801590816117b5575b60011490816117ab575b1590816117a2575b506117935767ffffffffffffffff1981166001175f5160206148515f395f51905f52558b611767575b50610c9d6145e6565b610ca56145e6565b610cad6145e6565b80516001600160401b038111611753578c610cd55f5160206147915f395f51905f5254612aed565b601f8111611716575b505060208d601f831160011461169a5790610d0d93836115b7575b50508160011b915f199060031b1c19161790565b5f5160206147915f395f51905f52555b80516001600160401b038111611686578b610d455f5160206147d15f395f51905f5254612aed565b601f811161163e575b505060208c601f83116001146115c25790610d7c93836115b75750508160011b915f199060031b1c19161790565b5f5160206147d15f395f51905f52555b81156115a85783156115a85760128311611594578260035491610100600160a81b039060081b16916affffffffffffffffffffff60a81b161717600355826bffffffffffffffffffffffff60a01b6004541617600455806bffffffffffffffffffffffff60a01b6005541617600555803b156115855760405162fdecdb60e01b81528990818180610e2089600483016129ec565b0381865afa801561158957611570575b5050610e3a61458d565b84516001600160a01b03909116948a805b8381106113cf5750505050916020917fc5e2e9318498e1a253726df4112345358bfcbadd5aab57c99d8c7f590ab0d32a9360405192867f95d78da2896224ccde884cbed0572281fdb51e155034d0012fc6593806df69768d80a3857f4cd146021d85ad5de55052ad32d44b8b6e496b3436cf6acdfcb5e82b7b3bccb38c80a38152a3610ed56145e6565b6325e5ad7960e01b84526001602052604084205460ff1615611359575b610efa6145e6565b63d7ae59db60e01b84526001602052604084205460ff16156112e3575b610f1f6145e6565b631cf1473b60e31b84526001602052604084205460ff161561126d575b600d805460ff191660011790556001600160a01b03610f5961458d565b167f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2588580a2610f866145e6565b801561125e57600980546001600160a01b03191682179055631b068a0f60e21b84526001602052604084205460ff16156111c0575b6001600160a01b03610fcb61458d565b167f2ddabd343e5cc7a71d4628054d3292636fc1bf21d5faef22c2dcad9f96554f178580a3610ff86145e6565b80156111ae57600a5563b5cb9db360e01b82526001602052604082205460ff1615611138575b63205062b960e21b82526001602052604082205460ff161561109a575b6110425780f35b68ff0000000000000000195f5160206148515f395f51905f5254165f5160206148515f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b63205062b960e21b8252600160205260408220600160ff19825416179055600254600160401b81101561112457600181018060025581101561111057600283528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff6381418ae4831b921b191617905561103b565b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b63b5cb9db360e01b8252600160205260408220600160ff19825416179055600254600160401b81101561112457600181018060025581101561111057600283528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff63b5cb9db3831b921b191617905561101e565b632a73165b60e11b8352600452602482fd5b631b068a0f60e21b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff636c1a283c831b921b1916179055610fbb565b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b85526041600452602485fd5b6342bcdf7f60e11b8452600484fd5b631cf1473b60e31b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff63e78a39d8831b921b1916179055610f3c565b63d7ae59db60e01b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff63d7ae59db831b921b1916179055610f17565b6325e5ad7960e01b8452600160205260408420600160ff19825416179055600254600160401b81101561124a57600181018060025581101561123657600285528060031c5f5160206147715f395f51905f52019060e082549160051b169063ffffffff6325e5ad79831b921b1916179055610ef2565b6001600160a01b036113e18285612b25565b515116604060206113f28487612b25565b510151938281526006602052205461155e5760408e61141083613bd1565b6008548382526006602052828220558281526007602052209280516001600160401b03811161154957908f918b926114528261144c8954612aed565b89613682565b602090601f83116001146114c15796611495836114ab945f5160206147515f395f51905f52969460019b916114b6575b508160011b915f199060031b1c19161790565b90556040519182916020835260208301906127aa565b0390a3018b90610e4b565b90508401515f611482565b601f97929197198216838252888220915b81811061151f5750826114ab949260019a5f5160206147515f395f51905f5297958c9410611507575b5050811b019055610971565b8501515f1960f88460031b161c191690555f806114fb565b929496979893955090602060018192868a015181550194019201908e9593919897969492986114d2565b50634e487b7160e01b8f52604160045260248ffd5b630da3f63f60e41b8e5260045260248dfd5b8161157a91612945565b61158557885f610e30565b8880fd5b6040513d84823e3d90fd5b63ca95039160e01b8a52600483905260248afd5b6342bcdf7f60e11b8a5260048afd5b015190505f80610cf9565b9192601f1984165f5160206147d15f395f51905f528452828420935b818110611626575090846001959493921061160e575b505050811b015f5160206147d15f395f51905f5255610d8c565b01515f1960f88460031b161c191690555f80806115f4565b929360206001819287860151815501950193016115de565b6020825f5160206147d15f395f51905f52611675945220601f840160051c8101916020851061167c575b601f0160051c019061366c565b8b5f610d4e565b9091508190611668565b634e487b7160e01b8c52604160045260248cfd5b9192601f1984165f5160206147915f395f51905f528452828420935b8181106116fe57509084600195949392106116e6575b505050811b015f5160206147915f395f51905f5255610d1d565b01515f1960f88460031b161c191690555f80806116cc565b929360206001819287860151815501950193016116b6565b6020825f5160206147915f395f51905f5261174c945220601f840160051c8101916020851061167c57601f0160051c019061366c565b8c5f610cde565b634e487b7160e01b8d52604160045260248dfd5b68ffffffffffffffffff191668010000000000000001175f5160206148515f395f51905f52555f610c94565b63f92ee8a960e01b8d5260048dfd5b9050155f610c6b565b303b159150610c63565b8d9150610c59565b8a80fd5b8980fd5b82356001600160401b03811161185d578201906040602319833603011261185d57604051916117f383612916565b60248101356001600160a01b038116810361185957835260448101356001600160401b0381116118555760249101019036601f8301121561185157602092611842849336908581359101612981565b83820152815201920191610bdf565b8d80fd5b8e80fd5b5f80fd5b8c80fd5b8780fd5b8580fd5b8380fd5b5080fd5b50346102565780600319360112610256576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610256576118c5366128b4565b906118d16102f661458d565b60055484906001600160a01b0316803b1561186d5781604051809263e50bcad360e01b8252818061190789898c6004850161364a565b03915afa801561158957611a79575b50506001600160a01b03831680855260066020526040852054909390611a6a5761193f90613bd1565b60085483855260066020526040852055828452600760205260408420906001600160401b03831161124a5761197e836119788454612aed565b84613682565b849183601f81116001146119f657806119b9915f5160206147515f395f51905f529589916119eb57508160011b915f199060031b1c19161790565b90555b6001600160a01b036119cc61458d565b16926119e560405192839260208452602084019161362a565b0390a380f35b90508401355f611482565b5080865260208620869385601f1981165b808710611a4c575f5160206147515f395f51905f52965010611a33575b5050600184811b0190556119bc565b8301355f19600387901b60f8161c191690555f80611a24565b85830135845560209687019660019094019390920191879150611a07565b63079f102d60e51b8552600485fd5b81611a8391612945565b61186957835f611916565b5034610256576020366003190112610256576020611ab2611aad6127ce565b612a9b565b604051908152f35b503461025657611ac936612864565b9091611ad661090c61458d565b8181036102bf57845b818110611aea578580f35b80611b10611afe6102a2600194868a613606565b611b09838789613606565b35906139db565b01611adf565b503461025657604036600319011261025657610689611b336127ce565b611b3b6127e4565b90611b4761027561458d565b6132b7565b50346102565780600319360112610256576005546040516001600160a01b039091168152602090f35b5034610256578060031936011261025657602060ff600d54166040519015158152f35b5034610256576020366003190112610256576020611bb46127ce565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b503461025657611bfc36612864565b9091611c0961090c61458d565b8181036102bf57845b818110611c1d578580f35b80611c43611c316102a2600194868a613606565b611c3c838789613606565b3590613c9a565b01611c12565b503461025657611c5836612864565b9091611c6561027561458d565b8181036102bf57845b818110611c79578580f35b80611c9f611c8d6102a2600194868a613606565b611c98838789613606565b35906136bc565b01611c6e565b5034610256576060366003190112610256576004356001600160401b03811161186d57611cd6903690600401612834565b6024356001600160401b03811161186957611cf5903690600401612834565b6044929192356001600160401b03811161186557611d17903690600401612834565b919092611d2561027561458d565b818103611d7b57828203611d7b57865b818110611d40578780f35b80611d74611d546102a2600194868c613606565b611d626102a284888c613606565b611d6d84898b613606565b3591613e6c565b5001611d35565b6001621398b960e31b03198752600487fd5b503461025657604036600319011261025657610689611daa6127ce565b611db561090c61458d565b602435906139db565b5034610256578060031936011261025657611dda610aac61458d565b600d5460ff811615611e255760ff1916600d556001600160a01b03611dfd61458d565b167f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa8280a280f35b63e779249560e01b8252600482fd5b503461025657602036600319011261025657611e4e6127ce565b611e596102f661458d565b60038054610100600160a81b0319811660089390931b610100600160a81b03169290921790819055907fc5e2e9318498e1a253726df4112345358bfcbadd5aab57c99d8c7f590ab0d32a6020611ead61458d565b60405160ff9490941684526001600160a01b0360089590951c8516941692a380f35b5034610256578060031936011261025657602060ff60035416604051908152f35b503461025657611eff366127fa565b91611f0861458d565b611f1182612a63565b60018060a01b0382165f5260205260405f2054905f198210611f3a575b50506108aa935061373b565b848210611fb3576001600160a01b03831615611f9f576001600160a01b03811615611f8b576108aa9550611f6d83612a63565b9060018060a01b03165f526020528360405f20910390555f80611f2e565b634a1406b160e11b86526004869052602486fd5b63e602df0560e01b86526004869052602486fd5b637dc7a0d960e11b86526001600160a01b03166004526024526044839052606484fd5b503461025657604036600319011261025657610689611ff36127ce565b611ffe61027561458d565b602435906136bc565b50346102565780600319360112610256576040518060206002549283815201918183600286525f5160206147715f395f51905f529286905b8060078301106121cf576120989454918181106121b0575b818110612191575b818110612172575b818110612153575b818110612134575b818110612115575b8181106120f8575b106120e3575b509392930383612945565b604051928392602084019060208552518091526040840192915b8181106120c0575050500390f35b82516001600160e01b0319168452859450602093840193909201916001016120b2565b6001600160e01b03191681526020015f61208d565b602083811b6001600160e01b031916855290930192600101612087565b604083901b6001600160e01b031916845260209093019260010161207f565b606083901b6001600160e01b0319168452602090930192600101612077565b608083901b6001600160e01b031916845260209093019260010161206f565b60a083901b6001600160e01b0319168452602090930192600101612067565b60c083901b6001600160e01b031916845260209093019260010161205f565b60e083901b6001600160e01b0319168452602090930192600101612057565b916008919350610100600191865463ffffffff60e01b8160e01b16825263ffffffff60e01b8160c01b16602083015263ffffffff60e01b8160a01b16604083015263ffffffff60e01b8160801b16606083015263ffffffff60e01b8160601b16608083015263ffffffff60e01b8160401b1660a083015263ffffffff60e01b8160201b1660c083015263ffffffff60e01b1660e082015201940192018492939161203f565b503461185957612283366128b4565b9061228f6102f661458d565b6001600160a01b0383165f81815260066020526040902054909390156123fb576005546001600160a01b0316803b1561185957835f91846122e7946040519586948593849363e50bcad360e01b85526004850161364a565b03915afa80156123f0576123db575b50828452600760205260408420906001600160401b03831161124a57612320836119788454612aed565b849183601f811160011461236e57806119b9917f8191c9e77ca554fa2d71249ed7be789e36d034b36dbf87dbe2a03dd92483cd159589916119eb57508160011b915f199060031b1c19161790565b5080865260208620869385601f1981165b8087106123bd577f8191c9e77ca554fa2d71249ed7be789e36d034b36dbf87dbe2a03dd92483cd15965010611a33575050600184811b0190556119bc565b8583013584556020968701966001909401939092019187915061237f565b6123e89194505f90612945565b5f925f6122f6565b6040513d5f823e3d90fd5b631c94b02360e21b5f5260045ffd5b346118595761241836612864565b9161242761027594929461458d565b828103612470575f5b81811061243957005b6124476102a2828486613606565b90612453818688613606565b359182151583036118595760019261246a91614545565b01612430565b631fec674760e31b5f5260045ffd5b34611859575f3660031901126118595760205f5160206147f15f395f51905f5254604051908152f35b34611859576020366003190112611859576124d26124c46127ce565b6124cc61458d565b906132b7565b005b34611859576020366003190112611859576001600160a01b036124f56127ce565b165f52600c602052602060405f2054604051908152f35b34611859575f366003190112611859576004546040516001600160a01b039091168152602090f35b34611859576040366003190112611859576124d26125506127ce565b61255b61027561458d565b602435906131fd565b34611859576124d2612575366127fa565b91612581610aac61458d565b613066565b346118595760403660031901126118595761259f6127ce565b602435906125ab61458d565b916001600160a01b03831691821561262a576001600160a01b0316928315612617577f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916125fa602092612a63565b855f5282528060405f2055604051908152a3602060405160018152f35b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b34611859575f366003190112611859576040515f5f5160206147915f395f51905f525461266981612aed565b80845290600181169081156126fb5750600114612691575b6107548361097181850382612945565b5f5160206147915f395f51905f525f9081527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0939250905b8082106126e157509091508101602001610971612681565b9192600181602092548385880101520191019092916126c9565b60ff191660208086019190915291151560051b840190910191506109719050612681565b34611859576020366003190112611859576004359063ffffffff60e01b82168092036118595760209163205062b960e21b8114908115612761575b5015158152f35b8091505f526001835260ff60405f205416908115612799575b8115612788575b508361275a565b6301ffc9a760e01b14905083612781565b630d67380360e31b8114915061277a565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b038216820361185957565b602435906001600160a01b038216820361185957565b6060906003190112611859576004356001600160a01b038116810361185957906024356001600160a01b0381168103611859579060443590565b9181601f84011215611859578235916001600160401b038311611859576020808501948460051b01011161185957565b6040600319820112611859576004356001600160401b038111611859578161288e91600401612834565b92909291602435906001600160401b038211611859576128b091600401612834565b9091565b6040600319820112611859576004356001600160a01b038116810361185957916024356001600160401b0381116118595782602382011215611859578060040135926001600160401b0384116118595760248483010111611859576024019190565b604081019081106001600160401b0382111761293157604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b0382111761293157604052565b6001600160401b03811161293157601f01601f191660200190565b92919261298d82612966565b9161299b6040519384612945565b829481845281830111611859578281602093845f960137010152565b9080601f83011215611859578160206129d293359101612981565b90565b6001600160401b0381116129315760051b60200190565b602081016020825282518091526040820191602060408360051b8301019401925f915b838310612a1e57505050505090565b9091929394602080612a54600193603f198682030187526040838b51878060a01b038151168452015191818582015201906127aa565b97019301930191939290612a0f565b6001600160a01b03165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b6001600160a01b03165f9081525f5160206147b15f395f51905f52602052604090205490565b600854811015612ad95760085f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b90600182811c92168015612b1b575b6020831014612b0757565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612afc565b8051821015612ad95760209160051b010190565b9081602091031261185957516001600160a01b03811681036118595790565b51906001600160a01b038216820361185957565b6040516304d3863d60e21b8152602081600481305afa9081156123f0576004916020915f91612e61575b5060405163b4f3fcb760e01b815292839182906001600160a01b03165afa9081156123f0575f91612e1f575b5060405163aba6370560e01b8152602081600481305afa9081156123f0575f91612de5575b50600a546040516352c111d160e01b8152600481018290526001600160a01b0392831693919290915f9183916024918391165afa9081156123f0575f91612d44575b50805115612d3957604051916380e9e9e160e01b835260048301525f82602481865afa9182156123f0575f92612ca7575b508151925f5b848110612c745750505050505f905f905f90565b612c8983612c828387612b25565b51846143d6565b919092612c9b57505050600101612c60565b97919650945092505050565b9091503d805f833e612cb98183612945565b810190602081830312611859578051906001600160401b03821161185957019080601f83011215611859578151612cef816129d5565b92612cfd6040519485612945565b81845260208085019260051b82010192831161185957602001905b828210612d2957505050905f612c5a565b8151815260209182019101612d18565b5050505f905f905f90565b90503d805f833e612d558183612945565b810190602081830312611859578051906001600160401b03821161185957019080601f8301121561185957815190612d8c826129d5565b92612d9a6040519485612945565b82845260208085019360051b82010191821161185957602001915b818310612dc5575050505f612c29565b82516001600160a01b038116810361185957815260209283019201612db5565b90506020813d602011612e17575b81612e0060209383612945565b8101031261185957612e1190612b58565b5f612be7565b3d9150612df3565b90506020813d602011612e59575b81612e3a60209383612945565b8101031261185957516001600160a01b0381168103611859575f612bc2565b3d9150612e2d565b612e819150823d8411612e87575b612e798183612945565b810190612b39565b5f612b96565b503d612e6f565b612eb8817fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26613c39565b15612ec05750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26602452604490fd5b612f2e817fe28434228950b641dbbc0178de89daa359a87c6ee0d8399aeace52a98fe902b9613c39565b15612f365750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fe28434228950b641dbbc0178de89daa359a87c6ee0d8399aeace52a98fe902b9602452604490fd5b612fa4817fb56f7a452f9fa4c6b1640d0352eff0d678b9d7c7618b4f73815657069f341e66613c39565b15612fac5750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fb56f7a452f9fa4c6b1640d0352eff0d678b9d7c7618b4f73815657069f341e66602452604490fd5b61301a817f47b7a6ef32f924153c4c0c2f871f8856bd114b4903c167827ef0f0694c583e27613c39565b156130225750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527f47b7a6ef32f924153c4c0c2f871f8856bd114b4903c167827ef0f0694c583e27602452604490fd5b6001600160a01b0316903082146131c05781156131b1576001600160a01b03169182156131b15780156131ac576040516370a0823160e01b8152306004820152602081602481865afa80156123f05782915f91613177575b50106131685760205f6040518281019063a9059cbb60e01b8252866024820152846044820152604481526130f3606482612945565b519082865af1156123f0575f513d61315f5750813b155b61314c577f66687834c8f406fef81052eb9008377ceb4e7305caa93f726591af6e44bcc90460206001600160a01b0361314161458d565b1692604051908152a4565b50635274afe760e01b5f5260045260245ffd5b6001141561310a565b637222ae5760e11b5f5260045ffd5b9150506020813d6020116131a4575b8161319360209383612945565b81010312611859578190515f6130be565b3d9150613186565b505050565b6342bcdf7f60e11b5f5260045ffd5b63817fbb3560e01b5f5260045ffd5b919082039182116131dc57565b634e487b7160e01b5f52601160045260245ffd5b919082018092116131dc57565b6001600160a01b0381165f818152600c602052604090205490929161322c90829061322790612a9b565b6131cf565b82811061328857508161323e916131f0565b825f52600c60205260405f20557f1bcfa03a03a5a801acedbac92e4c327445cae41571bdd6cf9b6988685c038e86602060018060a01b0361327d61458d565b1692604051908152a3565b9050637e5a39b960e01b5f5260045260245260445ffd5b90816020910312611859575180151581036118595790565b906001600160a01b0382169081156131b1573082146131c0576132d983612a9b565b9081156135f7576040516304d3863d60e21b8152602081600481305afa9081156123f0575f916135d8575b5060405163084bb03360e41b81526004810185905294906001600160a01b0316602086602481845afa9586156123f0575f9661359c575b506001600160a01b03838116961686900361355e57602060249160405192838092633f8ed17360e01b82528960048301525afa9081156123f0575f9161356d575b501561355e57613398918391600160ff195f5416175f5561373b565b60ff195f54165f55815f52600c6020528260405f2054806134c4575b5050815f52600b60205260ff60405f2054165f14613472575f838152600b60205260408082208054600160ff1991821681179092558584529190922080549091169055836001600160a01b0361340861458d565b165f5160206148315f395f51905f525f80a45f826001600160a01b0361342c61458d565b165f5160206148315f395f51905f528380a45b7fa2231b10d9b4e4166c8a827c99f97691b05aa88fb04e009a4e499005b5c50fcc60206001600160a01b0361314161458d565b825f52600b60205260ff60405f2054161561343f575f838152600b60205260408120805460ff19169055836001600160a01b036134ad61458d565b165f5160206148315f395f51905f528380a461343f565b836001600160a01b036134d561458d565b167f81aa4332c9e93af00ae5fdbed32b01fbc5d01ac7755a05d0962acd19030bd5546020604051858152a35f848152600c602090815260408083208390558483529091208290557f1bcfa03a03a5a801acedbac92e4c327445cae41571bdd6cf9b6988685c038e86906001600160a01b0361354e61458d565b1692604051908152a3825f6133b4565b630e7bebe360e01b5f5260045ffd5b61358f915060203d602011613595575b6135878183612945565b81019061329f565b5f61337c565b503d61357d565b9095506020813d6020116135d0575b816135b860209383612945565b81010312611859576135c990612b58565b945f61333b565b3d91506135ab565b6135f1915060203d602011612e8757612e798183612945565b5f613304565b635e4f582160e11b5f5260045ffd5b9190811015612ad95760051b0190565b356001600160a01b03811681036118595790565b908060209392818452848401375f828201840152601f01601f1916010190565b6001600160a01b0390911681526040602082018190526129d29391019161362a565b818110613677575050565b5f815560010161366c565b9190601f811161369157505050565b6136ba925f5260205f20906020601f840160051c8301931061167c57601f0160051c019061366c565b565b6001600160a01b03165f818152600c602052604090205490919081811061372657816136e7916131cf565b825f52600c60205260405f20557f81aa4332c9e93af00ae5fdbed32b01fbc5d01ac7755a05d0962acd19030bd554602060018060a01b0361327d61458d565b639f6422a960e01b5f5260045260245260445ffd5b90916001600160a01b03821680156139c8576001600160a01b0384169081156139b55760ff600d54166139a65760ff5f5416158061390a575b613894575b805f525f5160206147b15f395f51905f5260205260405f205483811061387a578390825f525f5160206147b15f395f51905f526020520360405f2055815f525f5160206147b15f395f51905f5260205260405f2083815401905581815f5160206148115f395f51905f526020604051878152a36001600160a01b036137fc61458d565b167f0d8423425ea24ce801d57e1af368c7ca24b3a31b719c058675916f436635eea26020604051868152a46005546001600160a01b0316803b156118595761385f935f809460405196879586948593631f2d7a6560e11b85523060048601614725565b03925af180156123f0576138705750565b5f6136ba91612945565b915063391434e360e21b5f5260045260245260445260645ffd5b6005546040516336b1527f60e11b81529060209082906001600160a01b031681806138c5898c8c3060048601614725565b03915afa9081156123f0575f916138eb575b50613779576310a151f560e01b5f5260045ffd5b613904915060203d602011613595576135878183612945565b5f6138d7565b815f52600b60205260ff60405f20541661399757825f52600b60205260ff60405f20541661398857815f52600c60205261396060405f2054835f525f5160206147b15f395f51905f5260205260405f20546131cf565b84811061396d5750613774565b92505063391434e360e21b5f5260045260245260445260645ffd5b637f3447d360e01b5f5260045ffd5b633928b55960e01b5f5260045ffd5b63e779249560e01b5f5260045ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b6001600160a01b038116919082156139b55760ff600d54166139a657825f52600b60205260ff60405f20541661398857613a13612b6c565b5050613a2d835f5160206147f15f395f51905f52546131f0565b808210613bbc57505060ff5f541615613b39575b613a59825f5160206147f15f395f51905f52546131f0565b5f5160206147f15f395f51905f5255825f525f5160206147b15f395f51905f5260205260405f20828154019055825f5f5160206148115f395f51905f526020604051868152a36005546001600160a01b0316803b1561185957604051637133bb3160e11b81523060048201526001600160a01b03929092166024830152604482018390525f908290606490829084905af180156123f057613b29575b507fe06a64fbf06d35586ace9c9da7a5c34ca3f2c0fd07e34e80be6d0341357795a860206001600160a01b0361327d61458d565b5f613b3391612945565b5f613af5565b6005546040516336b1527f60e11b81523060048201525f60248201526001600160a01b03838116604483015260648201859052909160209183916084918391165afa9081156123f0575f91613b9d575b50613a4157639b3b575b60e01b5f5260045ffd5b613bb6915060203d602011613595576135878183612945565b5f613b89565b632c1f8ef160e21b5f5260045260245260445ffd5b60085490600160401b8210156129315760018201600855600854821015612ad95760085f527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390910180546001600160a01b0319166001600160a01b03909216919091179055565b600954604051632474521560e21b815260048101929092526001600160a01b039283166024830152909160209183916044918391165afa9081156123f0575f91613c81575090565b6129d2915060203d602011613595576135878183612945565b6001600160a01b038116919082156139c85760ff600d54166139a657825f525f5160206147b15f395f51905f5260205260405f205460ff5f541615613e49575b835f52600c60205260405f205480613e19575b5050825f525f5160206147b15f395f51905f5260205260405f2054828110613dfe578290845f525f5160206147b15f395f51905f526020520360405f2055815f5160206147f15f395f51905f5254035f5160206147f15f395f51905f52555f835f5160206148115f395f51905f526020604051868152a36005546001600160a01b0316803b156118595760405163292d480360e01b81523060048201526001600160a01b03929092166024830152604482018390525f908290606490829084905af180156123f057613dee575b507f92eda58db715be76693c72f2b6c1ffec1f5d9fa127f24d7d26acaefa731a52fa60206001600160a01b0361327d61458d565b5f613df891612945565b5f613dba565b90508263391434e360e21b5f5260045260245260445260645ffd5b613e22916131cf565b808311613e30575b80613ced565b613e3d613e4391846131cf565b826136bc565b5f613e2a565b82811015613cda5790508263391434e360e21b5f5260045260245260445260645ffd5b9091613e7782612a9b565b91818310614364576001600160a01b0381165f818152600c602052604081205491949092918591816142ee575b505050600160ff195f5416175f5560ff600d54166139a6578315948515614278576001600160a01b0381165f908152600b602052604090205460ff1661398857613eec612b6c565b5050613f06855f5160206147f15f395f51905f52546131f0565b808210613bbc57505060ff5f5416156141f5575b851561419957613f38845f5160206147f15f395f51905f52546131f0565b5f5160206147f15f395f51905f52555b6001600160a01b03811695861590811561417657855f5160206147f15f395f51905f5254035f5160206147f15f395f51905f52555b87875f5160206148115f395f51905f5260206040518a8152a31561405957506005546001600160a01b03169150813b1561068c57604051637133bb3160e11b81523060048201526001600160a01b03919091166024820152604481018490529082908290606490829084905af1801561158957908291614044575b50505b805460ff191690557f47cea260e2dfb95ed2ab59ad44fe2ac9cddb432afb828d2a1475936b5a2b829a60206001600160a01b0361403661458d565b1692604051908152a4600190565b8161404e91612945565b61025657805f613ff8565b156140d657506005546001600160a01b031690813b1561068c5760405163292d480360e01b81523060048201526001600160a01b03919091166024820152604481018490529082908290606490829084905af18015611589579082916140c1575b5050613ffb565b816140cb91612945565b61025657805f6140ba565b85856001600160a01b036140e861458d565b167f0d8423425ea24ce801d57e1af368c7ca24b3a31b719c058675916f436635eea26020604051898152a46005546001600160a01b031691823b156118595761414e925f9283879360405196879586948593631f2d7a6560e11b85523060048601614725565b03925af180156123f057614163575b50613ffb565b61416f91505f90612945565b5f5f61415d565b875f525f5160206147b15f395f51905f5260205260405f20868154019055613f7d565b845f525f5160206147b15f395f51905f5260205260405f20548481106141da578490865f525f5160206147b15f395f51905f526020520360405f2055613f48565b84908663391434e360e21b5f5260045260245260445260645ffd5b6005546040516336b1527f60e11b81523060048201525f60248201526001600160a01b03838116604483015260648201879052909160209183916084918391165afa9081156123f0575f91614259575b50613f1a57639b3b575b60e01b5f5260045ffd5b614272915060203d602011613595576135878183612945565b5f614245565b6001600160a01b0381166142e957845f525f5160206147b15f395f51905f5260205260405f2054855f52600c60205260405f2054806142b9575b5050613f1a565b6142c2916131cf565b8085116142d0575b806142b2565b6142dd6142e391866131cf565b836136bc565b5f6142ca565b613f1a565b816142f8916131cf565b80861115613ea45761430d61431491876131cf565b80926131cf565b825f52600c60205260405f20557f81aa4332c9e93af00ae5fdbed32b01fbc5d01ac7755a05d0962acd19030bd554602060018060a01b0361435361458d565b1692604051908152a3835f80613ea4565b829063391434e360e21b5f5260018060a01b031660045260245260445260645ffd5b92919261439282612966565b916143a06040519384612945565b829481845281830111611859578281602093845f96015e010152565b9080601f830112156118595781516129d292602001614386565b60405163c9100bcb60e01b81526004810192909252919291905f816024816001600160a01b0386165afa905f5f93835f935f95614498575b50614425575b505050505090505f905f905f905f90565b600a548203614414578651965f905b888210614443575b5050614414565b6001600160a01b036144558383612b25565b5116916001600160a01b03881683900361448e57505061447795969750614611565b9092916144895780808080879661443c565b600193565b6001019150614434565b935093509350503d805f833e6144ae8183612945565b81019260c082850312611859578151906144ca60408401612b58565b9160608401516001600160401b03811161185957866144ea9186016143bc565b9560808501516001600160401b038111611859578161450a9187016143bc565b9460a0810151906001600160401b03821161185957019080601f8301121561185957815161453a92602001614386565b50919492935f61440e565b6001600160a01b039081165f818152600b60205260409020805460ff191693151560ff81169490941790559061457961458d565b165f5160206148315f395f51905f525f80a4565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806145db575b156145d75760131936013681116131dc573560601c90565b3390565b5060143610156145bf565b60ff5f5160206148515f395f51905f525460401c161561460257565b631afcd79f60e31b5f5260045ffd5b9161461e9391859361464f565b156146465761462c906146ea565b919290921561463c576001929190565b5f92508291508190565b505f905f905f90565b60405163604b4d3760e11b81526001600160a01b03909216600483015260248201929092526080604482015292602092849291839182916146aa916146989060848501906127aa565b838103600319016064850152906127aa565b03916001600160a01b03165afa5f91816146c9575b506129d257505f90565b6146e391925060203d602011613595576135878183612945565b905f6146bf565b80516040810361471b578160409181010312611859576040602082015191015190914282111561463c576001929190565b50505f905f905f90565b6001600160a01b0391821681529181166020830152909116604082015260608101919091526080019056fe4df30bfa3ec06fecb039a1a7f419067e9ae43dae6bccbbe724bf4dedcca740b3405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0452c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef17ec2643977f0865dd45350e9efdcdfead258c9220974e67d1a37ca144772293f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000a",
    "sourceMap": "2171:12733:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3881:14:40;2171:12733:28;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;:::i;:::-;14216:38;;3416:14:40;14216:38:28;;:::i;:::-;3416:14:40;:::i;:::-;8176:38:64;;;8172:67;;8301:13;8316:10;;;;;;2171:12733:28;;;8301:13:64;8370:16;8388:10;8370:16;;2171:12733:28;8370:16:64;;;;:::i;:::-;;:::i;:::-;8388:10;;;;;:::i;:::-;2171:12733:28;8388:10:64;;:::i;:::-;2171:12733:28;8301:13:64;;8172:67;-1:-1:-1;;;;;;8223:16:64;;2171:12733:28;6297:16:64;8223;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;3416:14:40;14216:38:28;;:::i;:::-;3416:14:40;:::i;:::-;-1:-1:-1;;;;;2171:12733:28;12058:25:60;;12054:61;;12125:44;2171:12733:28;;-1:-1:-1;;;;;;2171:12733:28;;;;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;12184:54:60;;;;2171:12733:28;;12054:61:60;-1:-1:-1;;;12092:23:60;;2171:12733:28;22975:23:60;12092;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;:::i;:::-;;;;14193:8:64;2171:12733:28;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;4848:20:222;2171:12733:28;;:::i;:::-;4848:20:222;;:::i;:::-;:29;2171:12733:28;;;;;;-1:-1:-1;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;3416:14:40;14216:38:28;;:::i;3416:14:40:-;-1:-1:-1;;;;;2171:12733:28;12828:31:60;;12824:67;;2171:12733:28;;;-1:-1:-1;;;;;;2171:12733:28;;;;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;12978:66:60;;;;2171:12733:28;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;3416:14:40;14216:38:28;;:::i;3416:14:40:-;-1:-1:-1;;;;;2171:12733:28;;;;16683:13:60;2171:12733:28;;;;;;16740:10:60;;16736:39;;-1:-1:-1;;2171:12733:28;;;;;;;16891:22:60;2171:12733:28;-1:-1:-1;;2171:12733:28;;;;;;;16939:22:60;;;16935:340;;2171:12733:28;;;;16891:22:60;2171:12733:28;;;;;-1:-1:-1;;2171:12733:28;;;;:::i;:::-;;;;;;;;;;;;;;;;;16891:22:60;2171:12733:28;;;;16683:13:60;2171:12733:28;;;;;;;;;;17501:18:60;2171:12733:28;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;2171:12733:28;-1:-1:-1;14216:38:28;;-1:-1:-1;14216:38:28;:::i;:::-;2171:12733;17577:48:60;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16838:1:60;2171:12733:28;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;2171:12733:28;;;;;;;;16935:340:60;17117:33;17070;;17117:46;17070:33;;:::i;:::-;2171:12733:28;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;17117:33:60;:::i;:::-;2171:12733:28;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;17117:46:60;2171:12733:28;;16683:13:60;2171:12733:28;;;;;;16935:340:60;;;;;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;-1:-1:-1;;;2171:12733:28;;;;;;;;16736:39:60;-1:-1:-1;;;16759:16:60;;2171:12733:28;14415:16:60;16759;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;;;;;;;;;;7381:6;14216:38;3416:14:40;14216:38:28;;:::i;3416:14:40:-;7381:6:28;:::i;:::-;2171:12733;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;19391:11:60;2171:12733:28;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;20534:22:60;2171:12733:28;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2171:12733:28;;;:::i;:::-;;;;;;;;;20681:13:60;;;20676:270;20696:10;;;;;;2171:12733:28;;;;;;;:::i;:::-;;;;20681:13:60;20740:25;;;;;;:::i;:::-;2171:12733:28;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;20847:18:60;2171:12733:28;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;20790:86:60;;2171:12733:28;20779:97:60;;;;:::i;:::-;;;;;;:::i;:::-;-1:-1:-1;2171:12733:28;;20681:13:60;;;2171:12733:28;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;8619:6:59;2171:12733:28;;:::i;:::-;;;14216:38;;;:::i;:::-;8619:6:59;:::i;:::-;2171:12733:28;;;;;;;;;;;;;8996:39;2171:12733;;;:::i;:::-;14216:38;3416:14:40;14216:38:28;;:::i;3416:14:40:-;8996:39:28;:::i;:::-;2171:12733;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;6825:6;2171:12733;;:::i;:::-;3416:14:40;14216:38:28;;:::i;:::-;3416:14:40;:::i;:::-;2171:12733:28;;6825:6;;:::i;2171:12733::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;;;;;;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;4628:23:40;2171:12733:28;;:::i;:::-;;;4628:23:40;:::i;2171:12733:28:-;;;;;;;;:::i;:::-;9710:31:60;;;;;9706:60;;9822:13;9837:10;;;;;;2171:12733:28;;;9822:13:60;9880:9;8619:6:59;9880:9:60;;9176:4;9880:9;;;;:::i;:::-;9891:10;;;;;:::i;:::-;2171:12733:28;14216:38;;;:::i;8619:6:59:-;2171:12733:28;9822:13:60;;2171:12733:28;;;;;;;;;;;;;3416:14:40;14216:38:28;;:::i;:::-;3416:14:40;:::i;:::-;4132:7:73;2171:12733:28;;;;4128:35:73;;-1:-1:-1;;2171:12733:28;4222:4:73;2171:12733:28;4132:7:73;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;4241:22:73;;;;2171:12733:28;;4128:35:73;-1:-1:-1;;;4148:15:73;;2171:12733:28;4148:15:73;;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2171:12733:28;;-1:-1:-1;;;;;2171:12733:28;;;;-1:-1:-1;2171:12733:28;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;4301:16:220;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;4724:16:220;;:34;;;;2171:12733:28;;4788:16:220;:50;;;;2171:12733:28;4853:13:220;:30;;;;2171:12733:28;4849:91:220;;;-1:-1:-1;;2171:12733:28;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;4977:67:220;;2171:12733:28;6891:76:220;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;2171:12733:28;;-1:-1:-1;;;;;2171:12733:28;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;22941:25:60;;22937:61;;23012:31;;23008:67;;23101:2;23089:14;;23085:53;;2171:12733:28;2581:7:222;2171:12733:28;;;;;;;;;;;;;;;;;;2581:7:222;2171:12733:28;;;;;;;;;;;;;;;;;;;;;23446:59:60;;;;;2171:12733:28;;-1:-1:-1;;;23446:59:60;;2171:12733:28;;;;;23446:59:60;;2171:12733:28;23446:59:60;;;:::i;:::-;;;;;;;;;;;;2171:12733:28;14216:38;;;;:::i;:::-;2171:12733;;-1:-1:-1;;;;;2171:12733:28;;;;23789:13:60;;23804:28;;;;;;2171:12733:28;;;;;;;24767:54:60;2171:12733:28;;;24653:48:60;;;;;;24716:36;;;;;2171:12733:28;;24767:54:60;6891:76:220;;:::i;:::-;-1:-1:-1;;;2171:12733:28;;;;;;;;;;;3921:36:57;3917:162;;23784:813:60;6891:76:220;;:::i;:::-;-1:-1:-1;;;2171:12733:28;;;;;;;;;;;3921:36:57;3917:162;;23784:813:60;6891:76:220;;:::i;:::-;-1:-1:-1;;;2171:12733:28;;;;;;;;;;;3921:36:57;3917:162;;23784:813:60;2859:14:73;2171:12733:28;;-1:-1:-1;;2171:12733:28;;;;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;2892:22:73;;;;6891:76:220;;:::i;:::-;2401:28:40;;2397:89;;2495:31;2171:12733:28;;-1:-1:-1;;;;;;2171:12733:28;;;;;-1:-1:-1;;;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;3921:36:57;3917:162;;23784:813:60;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;2614:73:40;;;;6891:76:220;;:::i;:::-;3780:26:52;;3776:139;;3924:44;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;;;3921:36:57;3917:162;;23784:813:60;-1:-1:-1;;;2171:12733:28;;;;;;;;;;;3921:36:57;3917:162;;23784:813:60;5064:101:220;;2171:12733:28;;5064:101:220;2171:12733:28;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;-1:-1:-1;;;;;;;;;;;2171:12733:28;5140:14:220;2171:12733:28;;;;;;5140:14:220;2171:12733:28;;3917:162:57;11227:32:28;;;2171:12733;;;;;;;;;;;;;;;;;4029:21:57;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;4029:21:57;2171:12733:28;;;;;;4029:21:57;2171:12733:28;;;2581:7:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;3917:162:57;;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;-1:-1:-1;;;2171:12733:28;;;;;;;;3917:162:57;3997:34:52;;;2171:12733:28;;;;;;;;;;;;;;;;;4029:21:57;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;4029:21:57;2171:12733:28;;;;;;4029:21:57;2171:12733:28;;;2581:7:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;3917:162:57;;3776:139:52;-1:-1:-1;;;3829:45:52;;2171:12733:28;;;3829:45:52;;3917:162:57;2556:42:40;;;2171:12733:28;;;;;;;;;;;;;;;;;4029:21:57;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;4029:21:57;2171:12733:28;;;;;;4029:21:57;2171:12733:28;;;2581:7:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;3917:162:57;;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;-1:-1:-1;;;2171:12733:28;;;;;;;;2397:89:40;-1:-1:-1;;;2452:23:40;;2171:12733:28;22975:23:60;2452::40;3917:162:57;2781:32:73;;;2171:12733:28;;;;;;;;;;;;;;;;;4029:21:57;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;4029:21:57;2171:12733:28;;;;;;4029:21:57;2171:12733:28;;;2581:7:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;3917:162:57;;;2031:32:44;;;2171:12733:28;;;;;;;;;;;;;;;;;4029:21:57;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;4029:21:57;2171:12733:28;;;;;;4029:21:57;2171:12733:28;;;2581:7:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;3917:162:57;;;3377:33:64;;;2171:12733:28;;;;;;;;;;;;;;;;;4029:21:57;2171:12733:28;-1:-1:-1;;;2171:12733:28;;;;;;;;;4029:21:57;2171:12733:28;;;;;;4029:21:57;2171:12733:28;;;2581:7:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;3917:162:57;;23789:13:60;-1:-1:-1;;;;;23865:22:60;;;;:::i;:::-;;2171:12733:28;;;;23924:22:60;;;;:::i;:::-;;:29;;2171:12733:28;;;;24164:13:60;2171:12733:28;;;;24160:76:60;;2171:12733:28;24251:42:60;;;;:::i;:::-;2171:12733:28;;;;;24164:13:60;2171:12733:28;;;;;;;;;24400:18:60;2171:12733:28;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;24468:59:60;;;2171:12733:28;23789:13:60;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;2581:7:222;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2171:12733:28;;;;;;;;24160:76:60;-1:-1:-1;;;24206:30:60;;2171:12733:28;;;24206:30:60;;23446:59;;;;;:::i;:::-;2171:12733:28;;23446:59:60;;;;2171:12733:28;;;;23446:59:60;2171:12733:28;;;;;;;;;23085:53:60;-1:-1:-1;;;23112:26:60;;2171:12733:28;;;;;23112:26:60;;23008:67;-1:-1:-1;;;23052:23:60;;2171:12733:28;22975:23:60;23052;2171:12733:28;;;;-1:-1:-1;2171:12733:28;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;2581:7:222;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;2171:12733:28;;;;;-1:-1:-1;;;2171:12733:28;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;2581:7:222;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;2171:12733:28;;;;;;;;4977:67:220;-1:-1:-1;;2171:12733:28;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;4977:67:220;;;4849:91;-1:-1:-1;;;4906:23:220;;2171:12733:28;4906:23:220;;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:220;;4724:34;;;-1:-1:-1;4724:34:220;;2171:12733:28;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1830:17:219;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;:::i;:::-;14216:38;3416:14:40;14216:38:28;;:::i;3416:14:40:-;15446:12:60;2171:12733:28;;;-1:-1:-1;;;;;2171:12733:28;15446:54:60;;;;;2171:12733:28;;;;;;;;15446:54:60;;;;;;;;2171:12733:28;15446:54:60;;;:::i;:::-;;;;;;;;;;;2171:12733:28;-1:-1:-1;;;;;;;2171:12733:28;;;;;15514:13:60;2171:12733:28;;;;;;;;;15510:60:60;;15608:36;;;:::i;:::-;:22;2171:12733:28;;;;15514:13:60;2171:12733:28;;;;;;;;;15737:18:60;2171:12733:28;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;;;;;;;;;;;;;;;;:::i;:::-;15790:55:60;;;2171:12733:28;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;15510:60:60;-1:-1:-1;;;15550:20:60;;2171:12733:28;15550:20:60;;15446:54;;;;;:::i;:::-;2171:12733:28;;15446:54:60;;;;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;14216:38;;3416:14:40;14216:38:28;;:::i;3416:14:40:-;7812:31:60;;;7808:60;;7923:13;7938:10;;;;;;2171:12733:28;;;7923:13:60;7977:9;7988:10;7977:9;;2171:12733:28;7977:9:60;;;;:::i;:::-;7988:10;;;;;:::i;:::-;2171:12733:28;7988:10:60;;:::i;:::-;2171:12733:28;7923:13:60;;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;9586:9;2171:12733;;:::i;:::-;;;:::i;:::-;14216:38;3416:14:40;14216:38:28;;:::i;3416:14:40:-;9586:9:28;:::i;2171:12733::-;;;;;;;;;;;;;20027:12:60;2171:12733:28;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;3260:7:73;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;:::i;:::-;;;1830:17:219;-1:-1:-1;;;;;2171:12733:28;;;;;2054:31:219;;;;2171:12733:28;;;;;;;;;;;:::i;:::-;14216:38;;3416:14:40;14216:38:28;;:::i;3416:14:40:-;4676:38:44;;;4672:67;;4801:13;4816:10;;;;;;2171:12733:28;;;4801:13:44;4855:16;4873:10;4855:16;;2171:12733:28;4855:16:44;;;;:::i;:::-;4873:10;;;;;:::i;:::-;2171:12733:28;4873:10:44;;:::i;:::-;2171:12733:28;4801:13:44;;2171:12733:28;;;;;;;;:::i;:::-;14216:38;;3416:14:40;14216:38:28;;:::i;3416:14:40:-;9898:38:64;;;9894:67;;10023:13;10038:10;;;;;;2171:12733:28;;;10023:13:64;10094:16;10112:10;10094:16;;2171:12733:28;10094:16:64;;;;:::i;:::-;10112:10;;;;;:::i;:::-;2171:12733:28;10112:10:64;;:::i;:::-;2171:12733:28;10023:13:64;;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;:::i;:::-;14216:38;;;3416:14:40;14216:38:28;;:::i;3416:14:40:-;13466:32:64;;;13462:86;;13561:31;;;13557:85;;13698:13;13713:10;;;;;;2171:12733:28;;;13698:13:64;13762:11;13740:57;13762:11;;2171:12733:28;13762:11:64;;;;:::i;:::-;13775:9;;;;;;:::i;:::-;13786:10;;;;;:::i;:::-;2171:12733:28;13740:57:64;;:::i;:::-;;2171:12733:28;13698:13:64;;13557:85;-1:-1:-1;;;;;;13615:16:64;;2171:12733:28;6297:16:64;13615;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;5342:7;2171:12733;;:::i;:::-;3416:14:40;14216:38:28;;:::i;3416:14:40:-;2171:12733:28;;5342:7;;:::i;2171:12733::-;;;;;;;;;;;;;3416:14:40;14216:38:28;;:::i;3416:14:40:-;4904:7:73;2171:12733:28;;;;4903:8:73;4899:34;;-1:-1:-1;;2171:12733:28;4904:7:73;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;5004:24:73;;;;2171:12733:28;;4899:34:73;-1:-1:-1;;;4920:13:73;;2171:12733:28;4920:13:73;;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;3416:14:40;14216:38:28;;:::i;3416:14:40:-;13493:24:60;2171:12733:28;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;13532:64:60;2171:12733:28;14216:38;;:::i;:::-;2171:12733;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;13532:64:60;2171:12733:28;;;;;;;;;;;;;;;;;9601:10:59;2171:12733:28;;;;;;;;;;;;;;;;:::i;:::-;14216:38;;;:::i;:::-;4848:20:222;;;:::i;:::-;2171:12733:28;;;;;;;-1:-1:-1;2171:12733:28;;;;-1:-1:-1;2171:12733:28;;;;;11891:36:222;;11887:309;;2171:12733:28;6179:5:222;;;;;;:::i;11887:309::-;11947:24;;;11943:130;;-1:-1:-1;;;;;2171:12733:28;;11122:19:222;11118:89;;-1:-1:-1;;;;;2171:12733:28;;11220:21:222;11216:90;;6179:5;11315:20;;;;;:::i;:::-;:29;2171:12733:28;;;;;;-1:-1:-1;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;;;;;11887:309:222;;;;11216:90;-1:-1:-1;;;11264:31:222;;2171:12733:28;;;;;11264:31:222;;11118:89;-1:-1:-1;;;11164:32:222;;2171:12733:28;;;;;11164:32:222;;11943:130;-1:-1:-1;;;11998:60:222;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;11998:60:222;;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;7887:6;2171:12733;;:::i;:::-;3416:14:40;14216:38:28;;:::i;3416:14:40:-;2171:12733:28;;7887:6;;:::i;2171:12733::-;;;;;;;;;;;;;;;;;4554:21:57;2171:12733:28;;;;;;;;;4554:21:57;2171:12733:28;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14216:38;3416:14:40;14216:38:28;;:::i;3416:14:40:-;-1:-1:-1;;;;;2171:12733:28;;;;;;14379:13:60;2171:12733:28;;;;;;;;;14379:27:60;14375:56;;14460:12;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;14460:54:60;;;;;2171:12733:28;;;;14460:54:60;2171:12733:28;;;;;;;;;;;;;14460:54:60;;2171:12733:28;14460:54:60;;;:::i;:::-;;;;;;;;;;;2171:12733:28;;;;;14566:18:60;2171:12733:28;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;14618:57:60;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;14618:57:60;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;14460:54:60;;;;;2171:12733:28;14460:54:60;;:::i;:::-;2171:12733:28;14460:54:60;;;;;2171:12733:28;;;;;;;;;14375:56:60;14415:16;;;2171:12733:28;14415:16:60;2171:12733:28;;14415:16:60;2171:12733:28;;;;;;;:::i;:::-;14216:38;3416:14:40;14216:38:28;;;;;:::i;3416:14:40:-;6251:37:64;;;6247:66;;2171:12733:28;6390:10:64;;;;;;2171:12733:28;6375:13:64;6441:16;;;;;;:::i;:::-;6459:9;;;;;;:::i;:::-;2171:12733:28;;;;;;;;;;6459:9:64;;;;:::i;:::-;2171:12733:28;6375:13:64;;6247:66;6297:16;;;2171:12733:28;6297:16:64;2171:12733:28;;6297:16:64;2171:12733:28;;;;;;-1:-1:-1;;2171:12733:28;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;7467:14:59;2171:12733:28;;:::i;:::-;14216:38;;:::i;:::-;7467:14:59;;:::i;:::-;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;-1:-1:-1;;;;;2171:12733:28;;:::i;:::-;;;;14540:14:64;2171:12733:28;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;7632:6;2171:12733;;:::i;:::-;3416:14:40;14216:38:28;;:::i;3416:14:40:-;2171:12733:28;;7632:6;;:::i;2171:12733::-;;;;6081:6;2171:12733;;;:::i;:::-;14216:38;3416:14:40;14216:38:28;;:::i;3416:14:40:-;6081:6:28;:::i;2171:12733::-;;;;;;-1:-1:-1;;2171:12733:28;;;;;;:::i;:::-;;;14216:38;;;:::i;:::-;2171:12733;-1:-1:-1;;;;;2171:12733:28;;;11122:19:222;;11118:89;;-1:-1:-1;;;;;2171:12733:28;;11220:21:222;;11216:90;;11396:31;11315:20;;2171:12733:28;11315:20:222;;:::i;:::-;2171:12733:28;;;;;;;;;;;;;;;11396:31:222;2171:12733:28;;;;;;;11216:90:222;11264:31;;;2171:12733:28;11264:31:222;2171:12733:28;;;;;11264:31:222;11118:89;11164:32;;;2171:12733:28;11164:32:222;2171:12733:28;;;;;11164:32:222;2171:12733:28;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;-1:-1:-1;2171:12733:28;;;;;;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11212:47:28;;;:87;;;;2171:12733;;;;;;;11212:87;2171:12733;;;;;32723:22:60;2171:12733:28;;;;;;;;32723:78:60;;;;;11212:87:28;13635:78:59;;;;11212:87:28;;;;;13635:78:59;-1:-1:-1;;;1134:40:229;;-1:-1:-1;13635:78:59;;;32723::60;-1:-1:-1;;;32762:39:60;;;-1:-1:-1;32723:78:60;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;;;-1:-1:-1;;2171:12733:28;;;;:::o;:::-;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;2171:12733:28;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;:::i;:::-;;;:::o;:::-;;-1:-1:-1;;2171:12733:28;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;:::o;:::-;;;;-1:-1:-1;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;:::o;:::-;-1:-1:-1;;;;;2171:12733:28;;;;;;-1:-1:-1;;2171:12733:28;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;4848:13:222;2171:12733:28;;;;;;:::o;4087:171:222:-;-1:-1:-1;;;;;2171:12733:28;-1:-1:-1;2171:12733:28;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;;4087:171:222:o;2171:12733:28:-;20534:22:60;2171:12733:28;;;;;;20534:22:60;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;-1:-1:-1;2171:12733:28;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;2171:12733:28;;;;;;:::o;5111:2072:52:-;2171:12733:28;;-1:-1:-1;;;5529:23:52;;;2171:12733:28;5529:23:52;2171:12733:28;5529:4:52;:23;;;;;;;;;;;-1:-1:-1;5529:23:52;;;5111:2072;-1:-1:-1;2171:12733:28;;-1:-1:-1;;;5611:35:52;;2171:12733:28;;;;;-1:-1:-1;;;;;2171:12733:28;5611:35:52;;;;;;;-1:-1:-1;5611:35:52;;;5111:2072;-1:-1:-1;2171:12733:28;;-1:-1:-1;;;5686:16:52;;5529:23;2171:12733:28;5529:23:52;2171:12733:28;5529:4:52;5686:16;;;;;;;-1:-1:-1;5686:16:52;;;5111:2072;-1:-1:-1;5913:20:52;2171:12733:28;;;-1:-1:-1;;;5866:68:52;;5529:23;5866:68;;2171:12733:28;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;-1:-1:-1;;2171:12733:28;;5866:68:52;;2171:12733:28;;;5866:68:52;;;;;;;-1:-1:-1;5866:68:52;;;5111:2072;2171:12733:28;;;6031:26:52;6027:133;;2171:12733:28;;;;;;6299:48:52;;5529:23;6299:48;;2171:12733:28;-1:-1:-1;6299:48:52;5866:68;6299:48;;;;;;;;;-1:-1:-1;6299:48:52;;;5111:2072;2171:12733:28;;;6485:13:52;-1:-1:-1;6500:18:52;;;;;;7151:25;;;;;-1:-1:-1;7151:25:52;-1:-1:-1;7151:25:52;-1:-1:-1;5111:2072:52;:::o;6485:13::-;6712:56;6740:11;;;;;:::i;:::-;2171:12733:28;6712:56:52;;:::i;:::-;6783:171;;;;;2171:12733:28;;;;;6485:13:52;;6783:171;6893:46;;;-1:-1:-1;6893:46:52;-1:-1:-1;6893:46:52;-1:-1:-1;;;6893:46:52:o;6299:48::-;;;;;;-1:-1:-1;6299:48:52;;;;;;:::i;:::-;;;2171:12733:28;5529:23:52;2171:12733:28;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;5529:23:52;2171:12733:28;;;;;;;;;;;;;;5529:23:52;2171:12733:28;;;;;;;;6299:48:52;;;;;;;2171:12733:28;;;;;5529:23:52;2171:12733:28;;;;;;;6027:133:52;6073:25;;;-1:-1:-1;6073:25:52;-1:-1:-1;6073:25:52;-1:-1:-1;6073:25:52;:::o;5866:68::-;;;;;-1:-1:-1;5866:68:52;;;;;;:::i;:::-;;;2171:12733:28;5529:23:52;2171:12733:28;;;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;5529:23:52;2171:12733:28;;;;;;;;;;;;;;5529:23:52;2171:12733:28;;;;;;;;5866:68:52;;;;;;2171:12733:28;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;5529:23:52;2171:12733:28;;;;;;;5686:16:52;;;5529:23;5686:16;;5529:23;5686:16;;;;;;5529:23;5686:16;;;:::i;:::-;;;2171:12733:28;;;;;;;:::i;:::-;5686:16:52;;;;;;-1:-1:-1;5686:16:52;;5611:35;;;5529:23;5611:35;;5529:23;5611:35;;;;;;5529:23;5611:35;;;:::i;:::-;;;2171:12733:28;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;5611:35:52;;;;;;-1:-1:-1;5611:35:52;;5529:23;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;5819:190:40;5899:23;;1431:27:6;5899:23:40;:::i;:::-;5898:24;5894:109;;5819:190;:::o;5894:109::-;-1:-1:-1;;;;5945:47:40;;;-1:-1:-1;;;;;2171:12733:28;;;;5945:47:40;2171:12733:28;1431:27:6;2171:12733:28;;;;5945:47:40;5819:190;5899:23;;1180:27:6;5899:23:40;:::i;:::-;5898:24;5894:109;;5819:190;:::o;5894:109::-;-1:-1:-1;;;;5945:47:40;;;-1:-1:-1;;;;;2171:12733:28;;;;5945:47:40;2171:12733:28;1180:27:6;2171:12733:28;;;;5945:47:40;5819:190;5899:23;;697:34:6;5899:23:40;:::i;:::-;5898:24;5894:109;;5819:190;:::o;5894:109::-;-1:-1:-1;;;;5945:47:40;;;-1:-1:-1;;;;;2171:12733:28;;;;5945:47:40;2171:12733:28;697:34:6;2171:12733:28;;;;5945:47:40;5819:190;5899:23;;909:35:6;5899:23:40;:::i;:::-;5898:24;5894:109;;5819:190;:::o;5894:109::-;-1:-1:-1;;;;5945:47:40;;;-1:-1:-1;;;;;2171:12733:28;;;;5945:47:40;2171:12733:28;909:35:6;2171:12733:28;;;;5945:47:40;18354:755:60;-1:-1:-1;;;;;2171:12733:28;;18474:4:60;18457:22;;18453:54;;18564:19;;18560:55;;-1:-1:-1;;;;;2171:12733:28;;18661:16:60;;18657:52;;18759:11;;18755:24;;2171:12733:28;;-1:-1:-1;;;18831:38:60;;18474:4;18831:38;;;2171:12733:28;;;18831:38:60;2171:12733:28;18831:38:60;;;;;;;;;18581:1;18831:38;;;18354:755;18883:16;;18879:55;;2171:12733:28;18581:1:60;2171:12733:28;;1328:43:192;;;2171:12733:28;;;;1328:43:192;;;18831:38:60;1328:43:192;;2171:12733:28;;;;;;;1328:43:192;;;;;;:::i;:::-;8507:421;;;;;;;;;18581:1:60;8507:421:192;;8942:15;;8960:26;;;:31;8942:68;8938:146;;19041:61:60;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;;;;;;;19041:61:60;18354:755::o;8938:146:192:-;9033:40;;;;18581:1:60;9033:40:192;18831:38:60;2171:12733:28;18831:38:60;18581:1;9033:40:192;8942:68;9009:1;8994:16;;8942:68;;18879:55:60;18908:26;;;18581:1;18908:26;18831:38;18581:1;18908:26;18831:38;;;;2171:12733:28;18831:38:60;;2171:12733:28;18831:38:60;;;;;;2171:12733:28;18831:38:60;;;:::i;:::-;;;2171:12733:28;;;;;;;18831:38:60;;;;;;-1:-1:-1;18831:38:60;;18755:24;18772:7;;;:::o;18657:52::-;22975:23;;;18581:1;18686:23;;18581:1;18686:23;18453:54;18488:19;;;;;;;;2171:12733:28;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;7096:521:64:-;-1:-1:-1;;;;;2171:12733:28;;-1:-1:-1;2171:12733:28;;;7220:14:64;2171:12733:28;;;;;;;;7096:521:64;7284:51;;2171:12733:28;;4286:18:63;;;:::i;:::-;7284:51:64;:::i;:::-;7349:25;;;7345:124;;7508:22;;;;;:::i;:::-;2171:12733:28;-1:-1:-1;2171:12733:28;7220:14:64;2171:12733:28;;;-1:-1:-1;2171:12733:28;;7545:65:64;2171:12733:28;;;;;;14216:38;;:::i;:::-;2171:12733;;;;;;;7545:65:64;7096:521::o;7345:124::-;7397:61;;;;;-1:-1:-1;7397:61:64;;2171:12733:28;;;;-1:-1:-1;7397:61:64;2171:12733:28;;;;;;;;;;;;;;;;;;:::o;10404:1117:60:-;;-1:-1:-1;;;;;2171:12733:28;;;10496:24:60;;10492:60;;10588:4;10566:27;;10562:59;;4286:18:63;;;:::i;:::-;10693:12:60;;;10689:44;;2171:12733:28;;-1:-1:-1;;;10778:23:60;;;2171:12733:28;10778:23:60;2171:12733:28;10588:4:60;10778:23;;;;;;;10518:1;10778:23;;;10404:1117;-1:-1:-1;2171:12733:28;;-1:-1:-1;;;10930:39:60;;10778:23;10930:39;;2171:12733:28;;;;;-1:-1:-1;;;;;2171:12733:28;10778:23:60;2171:12733:28;10930:39:60;2171:12733:28;;10930:39:60;;;;;;;10518:1;10930:39;;;10404:1117;-1:-1:-1;;;;;;2171:12733:28;;;;;10983:28:60;;;10979:60;;10778:23;10930:39;2171:12733:28;;;;;;;;;;11129:33:60;;;10778:23;11129:33;;2171:12733:28;11129:33:60;;;;;;;10518:1;11129:33;;;10404:1117;11128:34;;11124:66;;8619:6:59;2171:12733:28;;;11273:4:60;2171:12733:28;;10518:1:60;2171:12733:28;;;10518:1:60;2171:12733:28;8619:6:59;:::i;:::-;2171:12733:28;;10518:1:60;2171:12733:28;;10518:1:60;2171:12733:28;;10518:1:60;2171:12733:28;20909:14:64;10778:23:60;2171:12733:28;;;10518:1:60;2171:12733:28;;20991:16:64;20987:278;;10404:1117:60;2171:12733:28;;;10518:1:60;2171:12733:28;21295:8:64;10778:23:60;2171:12733:28;;;10518:1:60;2171:12733:28;;;21364:555:64;2171:12733:28;;;10518:1:60;2171:12733:28;;;21295:8:64;10778:23:60;2171:12733:28;;;;;;;11273:4:60;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;-1:-1:-1;;;;;;;;;;;10518:1:60;21528:46:64;;10518:1:60;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;-1:-1:-1;;;;;;;;;;;21593:48:64;;;21364:555;11444:70:60;10778:23;-1:-1:-1;;;;;14216:38:28;;:::i;21364:555:64:-;2171:12733:28;10518:1:60;2171:12733:28;21295:8:64;10778:23:60;2171:12733:28;;;10518:1:60;2171:12733:28;;;21658:261:64;21364:555;21658:261;10518:1:60;2171:12733:28;;;21295:8:64;10778:23:60;2171:12733:28;;;;;;-1:-1:-1;;2171:12733:28;;;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;-1:-1:-1;;;;;;;;;;;21861:47:64;;;21364:555;;20987:278;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;21028:56:64;10778:23:60;2171:12733:28;;;;;21028:56:64;10518:1:60;2171:12733:28;;;20909:14:64;10778:23:60;2171:12733:28;;;;;;;;;;;;;;;;;;;21201:53:64;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;;;;;;;21201:53:64;20987:278;;;;11124:66:60;11020:19;;;10518:1;11171:19;10778:23;10518:1;11171:19;11129:33;;;;10778:23;11129:33;10778:23;11129:33;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;10930:39;;;;10778:23;10930:39;;10778:23;10930:39;;;;;;10778:23;10930:39;;;:::i;:::-;;;2171:12733:28;;;;;;;:::i;:::-;10930:39:60;;;;;;;-1:-1:-1;10930:39:60;;10778:23;;;;;;;;;;;;;;:::i;:::-;;;;10689:44;10714:19;;;10518:1;10714:19;;10518:1;10714:19;2171:12733:28;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;2171:12733:28;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;;;-1:-1:-1;;2171:12733:28;;;;:::o;:::-;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;2171:12733:28;;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;8918:420:64:-;-1:-1:-1;;;;;2171:12733:28;-1:-1:-1;2171:12733:28;;;9044:14:64;2171:12733:28;;;;;;;;;9085:22:64;;;9081:107;;9227:22;;;;:::i;:::-;2171:12733:28;-1:-1:-1;2171:12733:28;9044:14:64;2171:12733:28;;;-1:-1:-1;2171:12733:28;;9264:67:64;2171:12733:28;;;;;;14216:38;;:::i;9081:107:64:-;9130:47;;;-1:-1:-1;9130:47:64;;2171:12733:28;;;;-1:-1:-1;9130:47:64;6586:300:222;;;-1:-1:-1;;;;;2171:12733:28;;6669:18:222;;6665:86;;-1:-1:-1;;;;;2171:12733:28;;;6764:16:222;;6760:86;;2171:12733:28;3260:7:73;2171:12733:28;;5537:59:73;;2171:12733:28;6685:1:222;2171:12733:28;;16229:17:64;16225:695;;;6586:300:222;29835:199:60;;6586:300:222;2171:12733:28;7339:546:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;7339:546:222;2171:12733:28;;7590:19:222;;;7586:115;;2171:12733:28;;;7339:546:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;7339:546:222;2171:12733:28;;;7895:429:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;7895:429:222;2171:12733:28;;;;;;;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;8339:25:222;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;30726:51:60;2171:12733:28;;;;;;30726:51:60;30858:12;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;30858:57:60;;;;;;2171:12733:28;27038:335:60;2171:12733:28;;;;;;;;;;;;;;30858:57:60;;30891:4;30858:57;;;;:::i;:::-;;;;;;;;;;;6586:300:222;:::o;30858:57:60:-;27038:335;30858:57;;;:::i;7586:115:222:-;16825:70:64;;;;;7339:546:222;7636:50;;2171:12733:28;;;;;;7339:546:222;7636:50;29835:199:60;29935:12;2171:12733:28;;;-1:-1:-1;;;29935:57:60;;2171:12733:28;29935:57:60;;2171:12733:28;;-1:-1:-1;;;;;2171:12733:28;;;29935:57:60;29968:4;;;;29935:57;;;;:::i;:::-;;;;;;;;;;6685:1:222;29935:57:60;;;29835:199;29934:58;29835:199;29930:93;30001:22;;;6685:1:222;30001:22:60;29935:57;6685:1:222;30001:22:60;29935:57;;;;;;;;;;;;;;:::i;:::-;;;;16225:695:64;2171:12733:28;6685:1:222;2171:12733:28;16330:8:64;2171:12733:28;;;;6685:1:222;2171:12733:28;;;16326:48:64;;2171:12733:28;6685:1:222;2171:12733:28;16330:8:64;2171:12733:28;;;;6685:1:222;2171:12733:28;;;16388:49:64;;2171:12733:28;6685:1:222;2171:12733:28;16475:14:64;2171:12733:28;;16619:43:64;2171:12733:28;6685:1:222;2171:12733:28;;;6685:1:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;6685:1:222;2171:12733:28;;16619:43:64;:::i;:::-;16680:26;;;16676:234;;16225:695;;;16676:234;16825:70;;;;;;6685:1:222;16825:70:64;;2171:12733:28;;;;;;6685:1:222;16825:70:64;16388:49;16413:24;;;6685:1:222;16413:24:64;;6685:1:222;16413:24:64;16326:48;16353:21;;;6685:1:222;16353:21:64;;6685:1:222;16353:21:64;5537:59:73;4920:13;;;6685:1:222;5572:13:73;;6685:1:222;5572:13:73;6760:86:222;6803:32;;;6685:1;6803:32;6685:1;6803:32;2171:12733:28;;6685:1:222;6803:32;6665:86;6710:30;;;6685:1;6710:30;6685:1;6710:30;2171:12733:28;;6685:1:222;6710:30;6727:240:60;-1:-1:-1;;;;;2171:12733:28;;;6727:240:60;8784:21:222;;8780:91;;2171:12733:28;3260:7:73;2171:12733:28;;5537:59:73;;2171:12733:28;8803:1:222;2171:12733:28;15228:8:64;2171:12733:28;;;;8803:1:222;2171:12733:28;;;15224:49:64;;17306:26:52;;:::i;:::-;2171:12733:28;;17615:33:52;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;17615:33:52;:::i;:::-;17773:47;;;17769:155;;2171:12733:28;;;8803:1:222;2171:12733:28;;28132:17:60;28128:201;;6727:240;7479:23:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;7479:23:222;:::i;:::-;-1:-1:-1;;;;;;;;;;;2171:12733:28;;8803:1:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;8803:1:222;2171:12733:28;;;;;;;;8803:1:222;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;8339:25:222;28943:12:60;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;28943:47:60;;;;;2171:12733:28;;-1:-1:-1;;;28943:47:60;;28972:4;28943:47;;;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;-1:-1:-1;;28943:47:60;;;;;;;;6727:240;-1:-1:-1;6910:50:60;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;28943:47:60:-;8803:1:222;28943:47:60;;;:::i;:::-;8803:1:222;28943:47:60;;28128:201;28228:12;2171:12733:28;;;-1:-1:-1;;;28228:63:60;;28261:4;28228:63;;;2171:12733:28;-1:-1:-1;2171:12733:28;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;28228:63:60;;;;;;;8803:1:222;28228:63:60;;;28128:201;28227:64;28128:201;28223:95;28300:18;;;8803:1:222;28300:18:60;28228:63;8803:1:222;28300:18:60;28228:63;;;;2171:12733:28;28228:63:60;2171:12733:28;28228:63:60;;;;;;;:::i;:::-;;;;17769:155:52;17843:70;;;8803:1:222;17843:70:52;;2171:12733:28;;;;8803:1:222;17843:70:52;2171:12733:28;15608:22:60;2171:12733:28;;-1:-1:-1;;;2171:12733:28;;;;;;;;15608:22:60;2171:12733:28;15608:22:60;2171:12733:28;;;;;;15608:22:60;-1:-1:-1;2171:12733:28;;;;;;;-1:-1:-1;;;;;;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;:::o;5111:165:40:-;5231:14;2171:12733:28;;;-1:-1:-1;;;5206:63:40;;;;;2171:12733:28;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;5206:63:40;;2171:12733:28;;;5206:63:40;;;;;;;-1:-1:-1;5206:63:40;;;5199:70;5111:165;:::o;5206:63::-;;;;2171:12733:28;5206:63:40;2171:12733:28;5206:63:40;;;;;;;:::i;3638:252:44:-;-1:-1:-1;;;;;2171:12733:28;;;3638:252:44;9310:21:222;;9306:89;;2171:12733:28;3260:7:73;2171:12733:28;;5537:59:73;;2171:12733:28;9329:1:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;9329:1:222;2171:12733:28;;;9329:1:222;2171:12733:28;;18115:17:64;18111:245;;3638:252:44;2171:12733:28;9329:1:222;2171:12733:28;18390:14:64;2171:12733:28;;;9329:1:222;2171:12733:28;;18424:17:64;18420:705;;3638:252:44;7339:546:222;;2171:12733:28;7339:546:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;7339:546:222;2171:12733:28;;7590:19:222;;;7586:115;;2171:12733:28;;;7339:546:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;7339:546:222;2171:12733:28;;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;-1:-1:-1;;;;;;;;;;;2171:12733:28;9329:1:222;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;8339:25:222;31525:12:60;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;31525:51:60;;;;;2171:12733:28;;-1:-1:-1;;;31525:51:60;;31556:4;31525:51;;;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;-1:-1:-1;;31525:51:60;;;;;;;;3638:252:44;-1:-1:-1;3807:58:44;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;31525:51:60:-;9329:1:222;31525:51:60;;;:::i;:::-;9329:1:222;31525:51:60;;7586:115:222;16825:70:64;;;;;;7339:546:222;7636:50;;2171:12733:28;;;;;;7339:546:222;7636:50;18420:705:64;18479:28;;;:::i;:::-;18525:20;;;18521:594;;18420:705;;;;18521:594;18764:20;19037:16;18764:20;;;:::i;:::-;19037:16;;:::i;:::-;18521:594;;;18111:245;18218:21;;;18214:132;18111:245;18214:132;16825:70;;;;;;9329:1:222;18266:65:64;;2171:12733:28;;;;;;9329:1:222;18266:65:64;11520:1323;;;4286:18:63;;;:::i;:::-;11702:23:64;;;;11698:103;;-1:-1:-1;;;;;2171:12733:28;;-1:-1:-1;2171:12733:28;;;11927:14:64;2171:12733:28;;;;;;;;-1:-1:-1;;2171:12733:28;;;;11957:590:64;;11520:1323;2171:12733:28;;;12635:4:64;2171:12733:28;;-1:-1:-1;2171:12733:28;;;-1:-1:-1;2171:12733:28;;3260:7:73;2171:12733:28;;5537:59:73;;25970:18:60;;;;;;;-1:-1:-1;;;;;2171:12733:28;;-1:-1:-1;2171:12733:28;;;15228:8:64;2171:12733:28;;;;;;;;15224:49:64;;17306:26:52;;:::i;:::-;2171:12733:28;;17615:33:52;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;17615:33:52;:::i;:::-;17773:47;;;17769:155;;2171:12733:28;;;-1:-1:-1;2171:12733:28;;28132:17:60;28128:201;;25966:346;7343:18:222;;;;7479:23;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;7479:23:222;:::i;:::-;-1:-1:-1;;;;;;;;;;;2171:12733:28;7339:546:222;-1:-1:-1;;;;;2171:12733:28;;;7899:16:222;;;;;;;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;-1:-1:-1;;;;;;;;;;;2171:12733:28;7895:429:222;2171:12733:28;;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;;;8339:25:222;27042:18:60;;;-1:-1:-1;28943:12:60;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;-1:-1:-1;28943:47:60;;;;;2171:12733:28;;-1:-1:-1;;;28943:47:60;;28972:4;28943:47;;;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;28943:47:60;;;;;;;;;;;27038:335;;;;2171:12733:28;;-1:-1:-1;;2171:12733:28;;;12750:64:64;2171:12733:28;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;;;;;;;12750:64:64;12635:4;11520:1323;:::o;28943:47:60:-;;;;;:::i;:::-;2171:12733:28;;28943:47:60;;;;27038:335;27159:16;;;-1:-1:-1;31525:12:60;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;31525:51:60;;;;;2171:12733:28;;-1:-1:-1;;;31525:51:60;;31556:4;31525:51;;;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;31525:51:60;;;;;;;;;;;27155:218;;;27038:335;;31525:51;;;;;:::i;:::-;2171:12733:28;;31525:51:60;;;;27155:218;2171:12733:28;;-1:-1:-1;;;;;14216:38:28;;:::i;:::-;2171:12733;30726:51:60;2171:12733:28;;;;;;30726:51:60;30858:12;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;30858:57:60;;;;;;2171:12733:28;-1:-1:-1;2171:12733:28;;;;;;;;;;;;;;;;30858:57:60;;30891:4;30858:57;;;;:::i;:::-;;;;;;;;;;;27155:218;;27038:335;;30858:57;;;;-1:-1:-1;30858:57:60;;:::i;:::-;-1:-1:-1;30858:57:60;;;7895:429:222;2171:12733:28;-1:-1:-1;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;-1:-1:-1;2171:12733:28;;;;;;;7895:429:222;;7339:546;2171:12733:28;-1:-1:-1;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;-1:-1:-1;2171:12733:28;;7590:19:222;;;7586:115;;2171:12733:28;;;-1:-1:-1;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;-1:-1:-1;2171:12733:28;;7339:546:222;;7586:115;16825:70:64;;;;;;-1:-1:-1;7636:50:222;;2171:12733:28;;;;;;-1:-1:-1;7636:50:222;28128:201:60;28228:12;2171:12733:28;;;-1:-1:-1;;;28228:63:60;;28261:4;28228:63;;;2171:12733:28;-1:-1:-1;2171:12733:28;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;28228:63:60;;;;;;;-1:-1:-1;28228:63:60;;;28128:201;28227:64;28128:201;28223:95;28300:18;;;-1:-1:-1;28300:18:60;28228:63;-1:-1:-1;28300:18:60;28228:63;;;;2171:12733:28;28228:63:60;2171:12733:28;28228:63:60;;;;;;;:::i;:::-;;;;25966:346;-1:-1:-1;;;;;2171:12733:28;;;;;-1:-1:-1;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;-1:-1:-1;2171:12733:28;;;-1:-1:-1;2171:12733:28;11927:14:64;2171:12733:28;;;-1:-1:-1;2171:12733:28;;18424:17:64;18420:705;;26084:228:60;;;25966:346;;18420:705:64;18479:28;;;:::i;:::-;18525:20;;;18521:594;;18420:705;;;;18521:594;18764:20;19037:16;18764:20;;;:::i;:::-;19037:16;;:::i;:::-;18521:594;;;26084:228:60;25966:346;;11957:590:64;12016:30;;;;:::i;:::-;12064:20;;;12060:477;11957:590;12060:477;12183:20;12341:32;12183:20;;;:::i;:::-;12341:32;;;:::i;:::-;2171:12733:28;-1:-1:-1;2171:12733:28;11927:14:64;2171:12733:28;;;-1:-1:-1;2171:12733:28;;12452:70:64;2171:12733:28;;;;;;14216:38;;:::i;:::-;2171:12733;;;;;;;12452:70:64;12060:477;;;11957:590;;11698:103;16825:70;;;;;11734:67;;2171:12733:28;;;;;;11734:67:64;2171:12733:28;;;;;;11734:67:64;;2171:12733:28;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;2171:12733:28;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;12782:3092:52:-;2171:12733:28;;-1:-1:-1;;;13112:25:52;;;;;2171:12733:28;;;;12782:3092:52;;;;-1:-1:-1;2171:12733:28;13112:25:52;2171:12733:28;-1:-1:-1;;;;;2171:12733:28;;13112:25:52;;;-1:-1:-1;;;;;;;13112:25:52;;;12782:3092;13108:2582;;;12782:3092;15835:32;;;;;;;-1:-1:-1;15835:32:52;-1:-1:-1;15835:32:52;-1:-1:-1;15835:32:52;-1:-1:-1;12782:3092:52;:::o;13108:2582::-;13559:20;2171:12733:28;13541:38:52;;13537:163;;2171:12733:28;;13874:13:52;-1:-1:-1;13869:1566:52;13889:24;;;;;;13869:1566;13108:2582;;;;13874:13;-1:-1:-1;;;;;13970:17:52;;;;:::i;:::-;2171:12733:28;;;-1:-1:-1;;;;;2171:12733:28;;14186:55:52;;;14182:281;;14656:140;;;;;;;;:::i;:::-;14815:214;;;;;15353:5;;;;;;;;14815:214;14953:4;;14945:65::o;14182:281::-;2171:12733:28;;;-1:-1:-1;13874:13:52;;13112:25;;;;;;;;;;-1:-1:-1;13112:25:52;;;;;;:::i;:::-;;;2171:12733:28;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;13112:25:52;;;;;;;5498:212:64;-1:-1:-1;;;;;2171:12733:28;;;-1:-1:-1;2171:12733:28;;;5592:8:64;2171:12733:28;;;;;;;-1:-1:-1;;2171:12733:28;;;;;;;;;;;;;;14216:38;;:::i;:::-;2171:12733;-1:-1:-1;;;;;;;;;;;;5637:66:64;;5498:212::o;2329:429:219:-;2545:10;1830:17;-1:-1:-1;;;;;2171:12733:28;2054:31:219;;2526:71;;2329:429;2522:230;;;2171:12733:28;;2435:8:219;2171:12733:28;2435:8:219;2171:12733:28;;;;;;;;2613:72:219:o;2522:230::-;2545:10;2716:25;:::o;2526:71::-;2435:8;3606:2;2435:8;2560:37;;2526:71;;7082:141:220;2171:12733:28;-1:-1:-1;;;;;;;;;;;2171:12733:28;;;;7148:18:220;7144:73;;7082:141::o;7144:73::-;7189:17;;;-1:-1:-1;7189:17:220;;-1:-1:-1;7189:17:220;10567:960:52;;10942:67;10567:960;;;;10942:67;:::i;:::-;11024:16;11020:107;;11275:23;;;:::i;:::-;11313:20;;;;;11309:113;;11440:4;11432:43;;10567:960;:::o;11309:113::-;-1:-1:-1;;;;;;;;11349:20:52:o;11020:107::-;11056:20;-1:-1:-1;11056:20:52;-1:-1:-1;11056:20:52;-1:-1:-1;11056:20:52;:::o;7998:543::-;2171:12733:28;;-1:-1:-1;;;8261:63:52;;-1:-1:-1;;;;;2171:12733:28;;;8261:63:52;;;2171:12733:28;;;;;;;;;;;;;;;;;;7998:543:52;2171:12733:28;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2171:12733:28;;;;;;;:::i;:::-;8261:63:52;;-1:-1:-1;;;;;2171:12733:28;8261:63:52;;2171:12733:28;;8261:63:52;;;7998:543;-1:-1:-1;8257:278:52;;8442:12;2171:12733:28;8442:12:52;:::o;8261:63::-;;;;;2171:12733:28;8261:63:52;2171:12733:28;8261:63:52;;;;;;;:::i;:::-;;;;;9221:641;2171:12733:28;;9442:2:52;9427:17;;9423:92;;9583:36;9442:2;9583:36;;;2171:12733:28;;;;9442:2:52;9583:36;;;2171:12733:28;;;;9564:55:52;9695:15;;9685:25;;;9681:94;;2171:12733:28;9785:29:52;;9221:641;:::o;9423:92::-;9460:20;;9468:5;9460:20;9468:5;9460:20;9468:5;9460:20;:::o;2171:12733:28:-;-1:-1:-1;;;;;2171:12733:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "52453": [
        {
          "start": 6279,
          "length": 32
        },
        {
          "start": 7097,
          "length": 32
        },
        {
          "start": 17808,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "accessManager()": "fdcb6068",
    "addComplianceModule(address,bytes)": "77d2f8d9",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchBurn(address[],uint256[])": "4a6cc677",
    "batchForcedTransfer(address[],address[],uint256[])": "42a47abc",
    "batchFreezePartialTokens(address[],uint256[])": "fc7e5fa8",
    "batchMint(address[],uint256[])": "68573107",
    "batchSetAddressFrozen(address[],bool[])": "1a7af379",
    "batchTransfer(address[],uint256[])": "88d695b2",
    "batchUnfreezePartialTokens(address[],uint256[])": "4710362d",
    "burn(address,uint256)": "9dc29fac",
    "compliance()": "6290865d",
    "complianceModules()": "a98ac17a",
    "decimals()": "313ce567",
    "findValidCollateralClaim()": "b5cb9db3",
    "forcedRecoverTokens(address,address)": "62b9333e",
    "forcedTransfer(address,address,uint256)": "9fc1d0e7",
    "freezePartialTokens(address,uint256)": "125c4a33",
    "getFrozenTokens(address)": "158b1a57",
    "hasRole(bytes32,address)": "91d14854",
    "identityRegistry()": "134e18f4",
    "initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)": "81418ae4",
    "isFrozen(address)": "e5839836",
    "isTrustedForwarder(address)": "572b6c05",
    "mint(address,uint256)": "40c10f19",
    "name()": "06fdde03",
    "onchainID()": "aba63705",
    "pause()": "8456cb59",
    "paused()": "5c975abb",
    "recoverERC20(address,address,uint256)": "1171bda9",
    "recoverTokens(address)": "16114acd",
    "registeredInterfaces()": "1fd522a8",
    "removeComplianceModule(address)": "c76f3d9b",
    "setAddressFrozen(address,bool)": "c69c09cf",
    "setCompliance(address)": "f8981789",
    "setIdentityRegistry(address)": "cbf3f861",
    "setOnchainID(address)": "3d1ddc5b",
    "setParametersForComplianceModule(address,bytes)": "1ef5205f",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "trustedForwarder()": "7da0a877",
    "unfreezePartialTokens(address,uint256)": "1fe56f7d",
    "unpause()": "3f4ba83a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRecoverSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DuplicateModule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"FreezeAmountExceedsAvailableBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frozenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"InsufficientFrozenTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokenBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"}],\"name\":\"InvalidCollateralTopic\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"InvalidDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLostWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotCompliant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ModuleAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ModuleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensToRecover\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientAddressFrozen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderAddressFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotCompliant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AccessManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"ComplianceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"ComplianceModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ComplianceModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ForcedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"ModuleParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorOnchainID\",\"type\":\"address\"}],\"name\":\"RecoverySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_newDecimals\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOnchainID\",\"type\":\"address\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"addComplianceModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fromList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchForcedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchFreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"freeze\",\"type\":\"bool[]\"}],\"name\":\"batchSetAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchUnfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"internalType\":\"contract ISMARTCompliance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complianceModules\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct SMARTComplianceModuleParamPair[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findValidCollateralClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"forcedRecoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forcedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getFrozenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistry\",\"outputs\":[{\"internalType\":\"contract ISMARTIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"onchainID_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTopicId_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct SMARTComplianceModuleParamPair[]\",\"name\":\"initialModulePairs_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"identityRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compliance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registeredInterfaces\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"removeComplianceModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"setAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"setIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"setOnchainID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"setParametersForComplianceModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Combines core SMART features (compliance, verification) with extensions for pausing,      burning, custodian actions, and collateral tracking. Access control uses custom roles.\",\"errors\":{\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"Error: Account Lacks Required Role.      This error is emitted when an action is attempted by an account (`account`)      that does not possess the necessary authorization role (`neededRole`).      For example, if an account tries to mint new tokens but doesn't have the 'MINTER_ROLE'.\",\"params\":{\"account\":\"The address of the account that attempted the unauthorized action.\",\"neededRole\":\"The `bytes32` identifier of the role that the `account` was missing.\"}}],\"CannotRecoverSelf()\":[{\"details\":\"The `recoverERC20` function is designed to recover other ERC20 tokens mistakenly sent to this contract,      not the token this contract itself represents.\"}],\"DuplicateModule(address)\":[{\"params\":{\"module\":\"The address of the duplicate compliance module.\"}}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ExpectedPause()\":[{\"details\":\"For example, this might be used if an `unpause()` function is called when the contract is already unpaused,      or if a specific admin action is only allowed during a maintenance (paused) period.\"}],\"FreezeAmountExceedsAvailableBalance(uint256,uint256)\":[{\"params\":{\"available\":\"The available, unfrozen balance of the user.\",\"requested\":\"The amount of tokens requested to be frozen.\"}}],\"InsufficientCollateral(uint256,uint256)\":[{\"details\":\"This error is thrown by the `__collateral_beforeMintLogic` function if a valid collateral claim      is found on the token contract's identity, but the `amount` specified in that claim is less than      what the token's total supply would become *after* the current mint operation.      For example, if the collateral claim specifies a collateral amount (effectively a supply cap) of 1,000,000 tokens,      the current total supply is 900,000, and an attempt is made to mint 200,000 more tokens,      the `required` total supply would be 1,100,000. Since 1,100,000 (required) > 1,000,000 (available), this error occurs.      It also occurs if no valid collateral claim is found (in which case `available` would be 0), unless the      `required` supply is also 0.\",\"params\":{\"available\":\"The collateral amount found in the valid, non-expired claim on the token's identity. This acts as the effective cap.\",\"required\":\"The total supply that would be reached if the mint operation were to proceed (current supply + mint amount).\"}}],\"InsufficientFrozenTokens(uint256,uint256)\":[{\"params\":{\"frozenBalance\":\"The current amount of tokens specifically frozen for the address.\",\"requested\":\"The amount requested to be unfrozen or used from the frozen portion.\"}}],\"InsufficientTokenBalance()\":[{\"details\":\"This typically occurs during token recovery if the contract holds less of the target token than the amount requested for recovery.\"}],\"InvalidCollateralTopic(uint256)\":[{\"details\":\"This error is thrown by the initializer or constructor of the collateral extension      if the provided `collateralProofTopic_` (the ERC-735 claim topic ID) is invalid.      Typically, an invalid topic ID would be `0`, as topic ID 0 is often reserved or considered null.      A valid topic ID is crucial for correctly identifying and verifying the specific collateral claims.\",\"params\":{\"topicId\":\"The invalid topic ID (e.g., 0) that was provided during the contract's initialization.\"}}],\"InvalidDecimals(uint8)\":[{\"details\":\"This error is typically reverted if `decimals` is greater than 18, which is a common upper limit.\",\"params\":{\"decimals\":\"The invalid decimals value that was provided.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidLostWallet()\":[{\"details\":\"This can occur if the wallet is not associated with any lost identity.\"}],\"LengthMismatch()\":[{\"details\":\"This error is typically triggered in functions that process multiple items in batches,      such as `batchBurn` or `batchTransfer`, when the input arrays (e.g., an array of addresses      and an array of corresponding amounts) do not have the same number of elements.      For example, if 3 addresses are provided but only 2 amounts, this error would be raised      because it's unclear how to map the amounts to the addresses.\"}],\"MintNotCompliant()\":[{\"details\":\"This means the conditions required by the active compliance modules for minting were not met.\"}],\"ModuleNotFound()\":[{\"details\":\"This can occur when trying to remove or update parameters for a non-existent module.\"}],\"NoTokensToRecover()\":[{\"details\":\"This can occur if the contract holds no tokens to recover.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"TokenPaused()\":[{\"details\":\"For example, this error is typically used in a `whenNotPaused` modifier if a function like `transfer`      is called while the token operations are halted.\"}],\"TransferNotCompliant()\":[{\"details\":\"This means the conditions required by the active compliance modules for transferring tokens were not met.\"}],\"ZeroAddressNotAllowed()\":[{\"details\":\"This error is used to indicate that an operation or initialization was attempted with the      zero address (`address(0)`), which is often an invalid or disallowed address in many contexts.      For example, setting a critical administrative role to the zero address, or transferring tokens      to the zero address (which can effectively burn them, but should be explicit if intended).\"}]},\"events\":{\"AccessManagerSet(address,address)\":{\"details\":\"This event is crucial for transparency and monitoring. It allows external observers      to know when the authority managing roles and permissions for a token has been updated.      The `indexed` keyword for `sender` and `manager` allows these addresses to be efficiently      searched for in event logs.\",\"params\":{\"manager\":\"The new address of the `SMARTTokenAccessManager` contract that will now                oversee access control for the token.\",\"sender\":\"The address of the account that initiated the change of the access manager.               This is typically an administrator or an account with special privileges.\"}},\"AddressFrozen(address,address,bool)\":{\"params\":{\"isFrozen\":\"The new frozen status: `true` if the address is now frozen, `false` if unfrozen.                 `indexed` to quickly find all freeze or unfreeze events.\",\"sender\":\"The address (e.g., custodian, admin) that initiated the freeze/unfreeze operation.               `indexed` for easier filtering of operations by a specific admin.\",\"userAddress\":\"The address whose frozen status was changed. `indexed` for tracking a specific user.\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"BurnCompleted(address,address,uint256)\":{\"details\":\"This event signifies that a specified `amount` of tokens has been destroyed from the `from` address,      triggered by the `sender`.      The `indexed` keyword for `sender` and `from` parameters is a special feature in Solidity events.      It allows these parameters to be efficiently searched and filtered by off-chain applications.      Think of them as creating a searchable index for these specific fields in the event logs.\",\"params\":{\"amount\":\"The quantity of tokens that were burned (destroyed).\",\"from\":\"The address from which the tokens were actually burned. This is the account whose token balance was reduced.\",\"sender\":\"The address of the account that initiated or authorized the burn operation.               This could be an administrator, an operator, or under certain rules, the token holder themselves.\"}},\"ComplianceAdded(address,address)\":{\"details\":\"This event indicates a change in the primary contract responsible for enforcing compliance rules on token transfers.\",\"params\":{\"_compliance\":\"The address of the newly configured `ISMARTCompliance` contract.\",\"sender\":\"The address of the account (e.g., admin) that initiated this configuration change.\"}},\"ComplianceModuleAdded(address,address,bytes)\":{\"details\":\"Compliance modules implement specific rules (e.g., geographic restrictions, holding limits).\",\"params\":{\"_module\":\"The address of the newly added compliance module contract (which should implement `ISMARTComplianceModule`).\",\"_params\":\"The ABI-encoded configuration parameters initially set for this module instance on this token.\",\"sender\":\"The address of the account (e.g., admin) that added the module.\"}},\"ComplianceModuleRemoved(address,address)\":{\"details\":\"Removing a module means its rules will no longer be applied to token operations.\",\"params\":{\"_module\":\"The address of the compliance module contract that was removed.\",\"sender\":\"The address of the account (e.g., admin) that removed the module.\"}},\"ERC20TokenRecovered(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens recovered.\",\"sender\":\"The address that initiated the recovery operation.\",\"to\":\"The address to which the tokens were recovered.\",\"token\":\"The address of the ERC20 token recovered.\"}},\"ForcedTransfer(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens transferred.\",\"from\":\"The source address of the tokens. `indexed`.\",\"sender\":\"The address of the custodian who initiated the forced transfer. `indexed`.\",\"to\":\"The destination address of the tokens. `indexed`.\"}},\"IdentityRegistryAdded(address,address)\":{\"details\":\"This event signals a change in the system component responsible for managing and verifying user identities.\",\"params\":{\"_identityRegistry\":\"The address of the newly configured `ISMARTIdentityRegistry` contract.\",\"sender\":\"The address of the account (e.g., admin) that initiated this configuration change.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MintCompleted(address,address,uint256)\":{\"params\":{\"amount\":\"The quantity of tokens minted.\",\"sender\":\"The address of the account (e.g., minter role) that initiated the minting.\",\"to\":\"The address that received the newly minted tokens.\"}},\"ModuleParametersUpdated(address,address,bytes)\":{\"details\":\"This allows tweaking the behavior of a module without removing and re-adding it.\",\"params\":{\"_module\":\"The address of the compliance module whose parameters were updated.\",\"_params\":\"The new ABI-encoded configuration parameters for the module.\",\"sender\":\"The address of the account (e.g., admin) that updated the parameters.\"}},\"Paused(address)\":{\"details\":\"This event signals that standard operations (like transfers) are likely now blocked.\",\"params\":{\"sender\":\"The address that initiated the `pause` operation. This is typically an authorized               account with a PAUSER_ROLE. `indexed` for easier filtering of events initiated               by a specific admin or pauser address.\"}},\"RecoverySuccess(address,address,address,address)\":{\"params\":{\"investorOnchainID\":\"The on-chain ID contract address that links the `lostWallet` and `newWallet`,                          confirming they belong to the same beneficial owner.                          Not typically indexed as it might be a shared contract for many users.\",\"lostWallet\":\"The address from which assets were recovered. `indexed`.\",\"newWallet\":\"The address to which assets were transferred and identity re-associated. `indexed`.\",\"sender\":\"The address (e.g., custodian) that initiated the recovery operation. `indexed`.\"}},\"TokensFrozen(address,address,uint256)\":{\"details\":\"This refers to freezing a portion of an address's tokens, distinct from freezing the entire address.\",\"params\":{\"amount\":\"The quantity of tokens that were specifically frozen.\",\"sender\":\"The address that initiated the partial freeze operation. `indexed`.\",\"user\":\"The address for which a specific amount of tokens was frozen. `indexed`.\"}},\"TokensRecovered(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens recovered.\",\"lostWallet\":\"The address of the lost wallet containing tokens to recover.\",\"newWallet\":\"The address to which the tokens were recovered.\",\"sender\":\"The address that initiated the recovery operation.\"}},\"TokensUnfrozen(address,address,uint256)\":{\"params\":{\"amount\":\"The quantity of tokens that were unfrozen from the partial freeze.\",\"sender\":\"The address that initiated the partial unfreeze operation. `indexed`.\",\"user\":\"The address for which a specific amount of tokens was unfrozen. `indexed`.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"TransferCompleted(address,address,address,uint256)\":{\"params\":{\"amount\":\"The quantity of tokens transferred.\",\"from\":\"The address from which tokens were sent.\",\"sender\":\"The address that initiated the transfer action (could be the `from` address or an operator).\",\"to\":\"The address to which tokens were received.\"}},\"Unpaused(address)\":{\"details\":\"This event signals that standard operations are likely resumed.\",\"params\":{\"sender\":\"The address that initiated the `unpause` operation. Similar to `Paused` event, this is               typically an authorized account. `indexed` for filtering.\"}},\"UpdatedTokenInformation(address,uint8,address)\":{\"details\":\"Note: While `name` and `symbol` are part of `IERC20Metadata`, their update mechanism isn't explicitly defined here,      but if updatable, would likely also trigger such an event. This event specifically calls out decimals and onchainID.\",\"params\":{\"_newDecimals\":\"The new number of decimal places the token uses. (Note: Changing decimals post-deployment is highly unusual and complex for ERC20 tokens).\",\"_newOnchainID\":\"The address of the new on-chain Identity contract representing the token itself (if applicable).\",\"sender\":\"The address of the account (e.g., admin) that initiated the update.\"}}},\"kind\":\"dev\",\"methods\":{\"accessManager()\":{\"details\":\"This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.\",\"returns\":{\"_0\":\"The address of the `_accessManager`.\"}},\"addComplianceModule(address,bytes)\":{\"details\":\"Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.\",\"params\":{\"_module\":\"The address of the compliance module contract to add.\",\"_params\":\"The initial ABI-encoded configuration parameters for this module specific to this token.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"batchBurn(address[],uint256[])\":{\"details\":\"This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.\",\"params\":{\"amounts\":\"An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.\",\"userAddresses\":\"An array of blockchain addresses from which tokens will be burned.\"}},\"batchForcedTransfer(address[],address[],uint256[])\":{\"details\":\"A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.\",\"params\":{\"amounts\":\"A list of corresponding token amounts to transfer.\",\"fromList\":\"A list of sender addresses.\",\"toList\":\"A list of recipient addresses.\"}},\"batchFreezePartialTokens(address[],uint256[])\":{\"details\":\"Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.\",\"params\":{\"amounts\":\"A list of corresponding token amounts to freeze.\",\"userAddresses\":\"A list of target addresses.\"}},\"batchMint(address[],uint256[])\":{\"details\":\"This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.\",\"params\":{\"_amounts\":\"An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.\",\"_toList\":\"An array of addresses to receive the newly minted tokens.\"}},\"batchSetAddressFrozen(address[],bool[])\":{\"details\":\"A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.\",\"params\":{\"freeze\":\"A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).\",\"userAddresses\":\"A list of target addresses.\"}},\"batchTransfer(address[],uint256[])\":{\"details\":\"Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.\",\"params\":{\"amounts\":\"An array of corresponding token amounts.\",\"toList\":\"An array of recipient addresses.\"}},\"batchUnfreezePartialTokens(address[],uint256[])\":{\"details\":\"Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.\",\"params\":{\"amounts\":\"A list of corresponding token amounts to unfreeze.\",\"userAddresses\":\"A list of target addresses.\"}},\"burn(address,uint256)\":{\"details\":\"This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.\",\"params\":{\"amount\":\"The quantity of tokens to burn. This should be a non-negative integer.\",\"userAddress\":\"The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.\"}},\"compliance()\":{\"details\":\"The Compliance contract is responsible for orchestrating compliance checks for token operations.\",\"returns\":{\"_0\":\"ISMARTCompliance The current compliance contract.\"}},\"complianceModules()\":{\"details\":\"Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.\",\"returns\":{\"_0\":\"SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"forwarder_\":\"The address of the forwarder contract.\"}},\"decimals()\":{\"details\":\"Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.\",\"returns\":{\"_0\":\"uint8 The number of decimals.\"}},\"findValidCollateralClaim()\":{\"details\":\"Implements the `ISMARTCollateral` interface function.      It fetches trusted issuers for the `collateralProofTopic` from the `identityRegistry`.      Then, it retrieves all claims with this topic from the token's own `onchainID` contract.      It iterates through these claims, calling `__checkSingleClaim` for each to find the first one      that is valid, issued by a trusted issuer, not expired, and correctly decodable.      `virtual` allows this to be overridden in derived contracts if more specific logic is needed.\",\"returns\":{\"amount\":\"The collateral amount from the first valid claim found (0 if none).\",\"expiryTimestamp\":\"The expiry timestamp of the first valid claim (0 if none or expired).\",\"issuer\":\"The address of the claim issuer for the first valid claim (address(0) if none).\"}},\"forcedRecoverTokens(address,address)\":{\"details\":\"This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).\",\"params\":{\"lostWallet\":\"The address from which tokens will be recovered.\",\"newWallet\":\"The address to which tokens will be recovered.\"}},\"forcedTransfer(address,address,uint256)\":{\"details\":\"This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).\",\"params\":{\"amount\":\"The quantity of tokens to transfer.\",\"from\":\"The address from which tokens will be transferred.\",\"to\":\"The address to which tokens will be transferred.\"},\"returns\":{\"_0\":\"bool Returns `true` upon successful execution (should revert on failure).\"}},\"freezePartialTokens(address,uint256)\":{\"details\":\"This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.\",\"params\":{\"amount\":\"The quantity of tokens to freeze.\",\"userAddress\":\"The address for which to freeze tokens.\"}},\"getFrozenTokens(address)\":{\"details\":\"This does not include tokens that are implicitly frozen because the entire address is frozen.\",\"params\":{\"userAddress\":\"The address to check.\"},\"returns\":{\"_0\":\"uint256 The value stored in `__frozenTokens[userAddress]`.\"}},\"hasRole(bytes32,address)\":{\"details\":\"This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.\",\"params\":{\"account\":\"The address of the account whose roles are being checked.\",\"role\":\"The `bytes32` identifier of the role to check.\"},\"returns\":{\"_0\":\"`true` if the account has the role, `false` otherwise.\"}},\"identityRegistry()\":{\"details\":\"The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.\",\"returns\":{\"_0\":\"ISMARTIdentityRegistry The current identity registry contract.\"}},\"initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)\":{\"params\":{\"accessManager_\":\"The address of the access manager contract.\",\"collateralTopicId_\":\"The topic ID of the collateral claim.\",\"compliance_\":\"The address of the main compliance contract.\",\"decimals_\":\"The number of decimals the token uses.\",\"identityRegistry_\":\"The address of the Identity Registry contract.\",\"initialModulePairs_\":\"Initial compliance module configurations.\",\"name_\":\"The name of the token.\",\"onchainID_\":\"Optional address of an existing onchain identity contract. Pass address(0) to create a new one.\",\"symbol_\":\"The symbol of the token.\"}},\"isFrozen(address)\":{\"details\":\"A `view` function does not modify blockchain state and does not cost gas when called externally.\",\"params\":{\"userAddress\":\"The address to check.\"},\"returns\":{\"_0\":\"bool `true` if `__frozen[userAddress]` is true, `false` otherwise.\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"mint(address,uint256)\":{\"details\":\"This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).\",\"params\":{\"_amount\":\"The quantity of tokens to mint.\",\"_to\":\"The address that will receive the newly minted tokens.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onchainID()\":{\"details\":\"This can represent the token issuer or the token entity.\",\"returns\":{\"_0\":\"address The current on-chain ID address.\"}},\"pause()\":{\"details\":\"Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.\"},\"paused()\":{\"details\":\"Reads the private `_paused` state variable.\",\"returns\":{\"_0\":\"bool The current paused state of the contract.\"}},\"recoverERC20(address,address,uint256)\":{\"details\":\"This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.\",\"params\":{\"amount\":\"The quantity of the `token` to recover and send to `to`.\",\"to\":\"The address where the recovered tokens will be sent.\",\"token\":\"The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.\"}},\"recoverTokens(address)\":{\"details\":\"Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.\",\"params\":{\"lostWallet\":\"The address of the lost wallet containing tokens to recover.\"}},\"registeredInterfaces()\":{\"details\":\"This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.\",\"returns\":{\"_0\":\"An array of `bytes4` interface identifiers that have been registered.\"}},\"removeComplianceModule(address)\":{\"details\":\"Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.\",\"params\":{\"_module\":\"The address of the compliance module contract to remove.\"}},\"setAddressFrozen(address,bool)\":{\"details\":\"When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).\",\"params\":{\"freeze\":\"`true` to freeze the address, `false` to unfreeze it.\",\"userAddress\":\"The target address whose frozen status is to be changed.\"}},\"setCompliance(address)\":{\"details\":\"The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.\",\"params\":{\"_compliance\":\"The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.\"}},\"setIdentityRegistry(address)\":{\"details\":\"The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.\",\"params\":{\"_identityRegistry\":\"The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.\"}},\"setOnchainID(address)\":{\"details\":\"This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.\",\"params\":{\"_onchainID\":\"The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.\"}},\"setParametersForComplianceModule(address,bytes)\":{\"details\":\"This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.\",\"params\":{\"_module\":\"The address of the compliance module (must be an active module for this token).\",\"_params\":\"The new ABI-encoded configuration parameters for the module.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.\",\"params\":{\"interfaceId\":\"The `bytes4` interface identifier.\"},\"returns\":{\"_0\":\"bool `true` if the interface is supported, `false` otherwise.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"unfreezePartialTokens(address,uint256)\":{\"details\":\"Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.\",\"params\":{\"amount\":\"The quantity of tokens to unfreeze.\",\"userAddress\":\"The address for which to unfreeze tokens.\"}},\"unpause()\":{\"details\":\"Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.\"}},\"title\":\"ATKStableCoin\",\"version\":1},\"userdoc\":{\"errors\":{\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"notice\":\"This error is functionally identical to `AccessControlUnauthorizedAccount`         defined in OpenZeppelin's `access/AccessControl.sol` contract.         Re-defining it here ensures consistency within the SMART framework and can         help in scenarios where specific error catching is needed for this module.\"}],\"CannotRecoverSelf()\":[{\"notice\":\"Error indicating an attempt to recover the token contract's own tokens.\"}],\"DuplicateModule(address)\":[{\"notice\":\"Error indicating that a compliance module is being added but already exists.\"}],\"ExpectedPause()\":[{\"notice\":\"Error reverted when an action is attempted that requires the contract to be in a paused state,         but the contract is currently not paused (i.e., it is unpaused).\"}],\"FreezeAmountExceedsAvailableBalance(uint256,uint256)\":[{\"notice\":\"Error indicating that the amount requested to be frozen exceeds the user's available (unfrozen) balance.\"}],\"InsufficientCollateral(uint256,uint256)\":[{\"notice\":\"Error: Insufficient collateral to cover the proposed total supply after minting.\"}],\"InsufficientFrozenTokens(uint256,uint256)\":[{\"notice\":\"Error indicating that an attempt to unfreeze or use frozen tokens failed because the         amount requested exceeds the currently frozen token balance for the address.\"}],\"InsufficientTokenBalance()\":[{\"notice\":\"Error indicating that the token balance is insufficient for an operation.\"}],\"InvalidCollateralTopic(uint256)\":[{\"notice\":\"Error: An invalid collateral proof topic ID was provided during initialization.\"}],\"InvalidDecimals(uint8)\":[{\"notice\":\"Error indicating that the provided decimals value is invalid.\"}],\"InvalidLostWallet()\":[{\"notice\":\"Error indicating that the provided lost wallet is not marked as lost.\"}],\"LengthMismatch()\":[{\"notice\":\"Error: Array Length Mismatch in Batch Operation.\"}],\"MintNotCompliant()\":[{\"notice\":\"Error indicating that a mint operation failed compliance checks.\"}],\"ModuleAlreadyAdded()\":[{\"notice\":\"Error indicating that an attempt was made to add a compliance module that is already registered.\"}],\"ModuleNotFound()\":[{\"notice\":\"Error indicating that a specified compliance module was not found.\"}],\"NoTokensToRecover()\":[{\"notice\":\"Error indicating that there are no tokens to recover.\"}],\"RecipientAddressFrozen()\":[{\"notice\":\"Error indicating that an operation (e.g., mint, transfer) cannot proceed because the recipient address is frozen.\"}],\"SenderAddressFrozen()\":[{\"notice\":\"Error indicating that an operation (e.g., transfer, burn, redeem) cannot proceed because the sender address is frozen.\"}],\"TokenPaused()\":[{\"notice\":\"Error reverted when an action is attempted that requires the contract to be unpaused (not paused),         but the contract is currently paused.\"}],\"TransferNotCompliant()\":[{\"notice\":\"Error indicating that a transfer operation failed compliance checks.\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Error: Zero Address Not Allowed.\"}]},\"events\":{\"AccessManagerSet(address,address)\":{\"notice\":\"Emitted when the address of the access manager contract is successfully changed or set.\"},\"AddressFrozen(address,address,bool)\":{\"notice\":\"Emitted when an address's full frozen status (i.e., the entire address is frozen or unfrozen)         is changed by an authorized custodian.\"},\"BurnCompleted(address,address,uint256)\":{\"notice\":\"Emitted when a token burn operation has been successfully completed.\"},\"ComplianceAdded(address,address)\":{\"notice\":\"Emitted when the address of the main `ISMARTCompliance` contract, used by this token, is successfully updated.\"},\"ComplianceModuleAdded(address,address,bytes)\":{\"notice\":\"Emitted when a new compliance module is successfully added to the token's compliance framework.\"},\"ComplianceModuleRemoved(address,address)\":{\"notice\":\"Emitted when an existing compliance module is successfully removed from the token's compliance framework.\"},\"ERC20TokenRecovered(address,address,address,uint256)\":{\"notice\":\"Emitted when mistakenly sent ERC20 tokens are recovered from the contract.\"},\"ForcedTransfer(address,address,address,uint256)\":{\"notice\":\"Emitted when a forced transfer of tokens is executed by a custodian.\"},\"IdentityRegistryAdded(address,address)\":{\"notice\":\"Emitted when the address of the `ISMARTIdentityRegistry` contract, used by this token, is successfully updated.\"},\"MintCompleted(address,address,uint256)\":{\"notice\":\"Emitted after a token minting operation has successfully completed, passing all relevant checks.\"},\"ModuleParametersUpdated(address,address,bytes)\":{\"notice\":\"Emitted when the configuration parameters for an existing, active compliance module are successfully updated.\"},\"Paused(address)\":{\"notice\":\"Emitted when the contract transitions to a paused state.\"},\"RecoverySuccess(address,address,address,address)\":{\"notice\":\"Emitted when assets are successfully recovered from a lost or compromised wallet to a new wallet         belonging to the same verified identity.\"},\"TokensFrozen(address,address,uint256)\":{\"notice\":\"Emitted when a specific amount of tokens is partially frozen for an address.\"},\"TokensRecovered(address,address,address,uint256)\":{\"notice\":\"Emitted when tokens are recovered from a lost wallet to the caller's address.\"},\"TokensUnfrozen(address,address,uint256)\":{\"notice\":\"Emitted when a specific amount of previously partially frozen tokens is unfrozen for an address.\"},\"TransferCompleted(address,address,address,uint256)\":{\"notice\":\"Emitted after a token transfer operation (e.g., via `transfer` or `transferFrom`) has successfully completed,         passing all identity and compliance checks.\"},\"Unpaused(address)\":{\"notice\":\"Emitted when the contract transitions out of a paused state (i.e., is unpaused).\"},\"UpdatedTokenInformation(address,uint8,address)\":{\"notice\":\"Emitted when fundamental information about the token, such as its decimals or on-chain ID, is updated.\"}},\"kind\":\"user\",\"methods\":{\"accessManager()\":{\"notice\":\"Returns the address of the current `SMARTTokenAccessManager`.\"},\"addComplianceModule(address,bytes)\":{\"notice\":\"Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.\"},\"batchBurn(address[],uint256[])\":{\"notice\":\"Burns (destroys) tokens from multiple user addresses in a single transaction.\"},\"batchForcedTransfer(address[],address[],uint256[])\":{\"notice\":\"Forcefully transfers tokens for multiple address pairs in a batch.\"},\"batchFreezePartialTokens(address[],uint256[])\":{\"notice\":\"Freezes specific amounts of tokens for multiple addresses in a batch.\"},\"batchMint(address[],uint256[])\":{\"notice\":\"Mints tokens to multiple recipient addresses in a single batch transaction.\"},\"batchSetAddressFrozen(address[],bool[])\":{\"notice\":\"Freezes or unfreezes multiple addresses in a batch operation.\"},\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers tokens to multiple recipients in a batch from the effective sender.\"},\"batchUnfreezePartialTokens(address[],uint256[])\":{\"notice\":\"Unfreezes specific amounts of tokens for multiple addresses in a batch.\"},\"burn(address,uint256)\":{\"notice\":\"Burns (destroys) a specific amount of tokens from a given user's address.\"},\"compliance()\":{\"notice\":\"Returns the `ISMARTCompliance` contract instance used by this token.\"},\"complianceModules()\":{\"notice\":\"Returns a list of all active compliance modules and their current parameters.\"},\"decimals()\":{\"notice\":\"Returns the number of decimals for the token.\"},\"findValidCollateralClaim()\":{\"notice\":\"Attempts to find the first valid collateral claim on the token contract's own identity.\"},\"forcedRecoverTokens(address,address)\":{\"notice\":\"Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.\"},\"forcedTransfer(address,address,uint256)\":{\"notice\":\"Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.\"},\"freezePartialTokens(address,uint256)\":{\"notice\":\"Freezes a specific amount of tokens for a given address.\"},\"getFrozenTokens(address)\":{\"notice\":\"Gets the amount of tokens specifically (partially) frozen for an address.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks if a given account has a specific role, as defined by the `_accessManager`.\"},\"identityRegistry()\":{\"notice\":\"Returns the `ISMARTIdentityRegistry` contract instance used by this token.\"},\"initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)\":{\"notice\":\"Initializes the SMART token contract and its extensions.\"},\"isFrozen(address)\":{\"notice\":\"Checks if an address is currently fully frozen.\"},\"mint(address,uint256)\":{\"notice\":\"Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.\"},\"onchainID()\":{\"notice\":\"Returns the on-chain ID address associated with this token.\"},\"pause()\":{\"notice\":\"Pauses the contract, which typically prevents certain actions like token transfers.\"},\"paused()\":{\"notice\":\"Returns `true` if the contract is currently paused, and `false` otherwise.\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.\"},\"recoverTokens(address)\":{\"notice\":\"Recovers SMART tokens from a lost wallet to the caller's address.\"},\"registeredInterfaces()\":{\"notice\":\"Returns an array of all registered interface IDs.\"},\"removeComplianceModule(address)\":{\"notice\":\"Removes an active compliance module from this token's compliance framework.\"},\"setAddressFrozen(address,bool)\":{\"notice\":\"Freezes or unfreezes an entire address, preventing or allowing standard token operations.\"},\"setCompliance(address)\":{\"notice\":\"Sets or updates the address of the main `ISMARTCompliance` contract used by this token.\"},\"setIdentityRegistry(address)\":{\"notice\":\"Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.\"},\"setOnchainID(address)\":{\"notice\":\"Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.\"},\"setParametersForComplianceModule(address,bytes)\":{\"notice\":\"Sets or updates the configuration parameters for a specific, already added compliance module.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Standard ERC165 function to check interface support in an upgradeable context.\"},\"unfreezePartialTokens(address,uint256)\":{\"notice\":\"Unfreezes a specific amount of previously partially frozen tokens for an address.\"},\"unpause()\":{\"notice\":\"Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).\"}},\"notice\":\"An implementation of a stablecoin using the SMART extension framework,         backed by collateral and using custom roles.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/stable-coin/ATKStableCoinImplementation.sol\":\"ATKStableCoinImplementation\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/assets/ATKRoles.sol\":{\"keccak256\":\"0x8000271f6ff4a1cfac5af0339c0b96e73df6ea830a26432ae185a382a7480fde\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://fc8038cca8b6189c4aedc8225f63667a2b8b42af4b0124beaa782ee53261ee03\",\"dweb:/ipfs/QmauCtiUFDk1qWMC7CtJRmActU4u8qTAkfRT3uF4DSbN8H\"]},\"contracts/assets/stable-coin/ATKStableCoinImplementation.sol\":{\"keccak256\":\"0xe470f5a39382cbc23282d5c15c446e56772000856c5ebfb8edcc2c5e87175a33\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://d332f665ceeb2e267b7ac579f649aacede028078c26f82697b2ceaad0c2e8779\",\"dweb:/ipfs/QmPrXkYFDVL9XKrZ8E1Jte4j21wRCvZH47HLERpFqmsMmq\"]},\"contracts/assets/stable-coin/IATKStableCoin.sol\":{\"keccak256\":\"0x98087f2dd109fc0a1ad39bae454dce73d4f24a5c611b9f126ca6fc9c80be1197\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://dd357e8d28de729b7cff2729c2d32105d862f6530f4e912533e28157f972449b\",\"dweb:/ipfs/QmQCnJ8CSzwVxmjNoPHB6RKAyQG1PRCNCeZunquGcf4hn2\"]},\"contracts/smart/extensions/access-managed/ISMARTTokenAccessManaged.sol\":{\"keccak256\":\"0xb05c08191398db750d9fd974e8df1bace09434c27fd81a9db7d36ff429affd97\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://5155ee4da616fb8e3365c933952b07b93d603c6a4eb6542433b08c651a0e0c25\",\"dweb:/ipfs/QmW4C4YbYuDLX32oEFrp11t9TK44B5otKCXQemXs1jMgCD\"]},\"contracts/smart/extensions/access-managed/ISMARTTokenAccessManager.sol\":{\"keccak256\":\"0xd8fb2176229e603ed535b0ade30c09c41c416a90997edf8eab72af01cdcd51f3\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://90d07eb638bcd5a00efd0e4752c414e8ea25a3be93efcdc765d147b6c49c004a\",\"dweb:/ipfs/QmRLK1p8b6jZqQ9EMxoMQQMtSgeEqz2P12xbHozaXztdBw\"]},\"contracts/smart/extensions/access-managed/SMARTTokenAccessManagedUpgradeable.sol\":{\"keccak256\":\"0xb991c2c529a611de71c274b9041a1b6af31c0224bb89485e2f6b05bba9713f9b\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://fb1e53f83a90cf5984ae6c7b334ac5bc18d9197078a3d8e96c3737152a221415\",\"dweb:/ipfs/QmZeWnamwJnJfuNk7SUjEd2MesKUaJ4MY42qvDt718oAVr\"]},\"contracts/smart/extensions/access-managed/internal/_SMARTTokenAccessManagedLogic.sol\":{\"keccak256\":\"0x5cfabd6d2c1570df5cec93db1f01142792f0774ea9d823826e232a57ab3e8afa\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://e1b4b68a6f9c2ebefe87b1919dd71777f28b540fd0a9b304dd37b942509a5b55\",\"dweb:/ipfs/QmeBSSkr1ZpyCdq7tLPF6Wt2wLaBKi1sYKHUiAGXJtF5mv\"]},\"contracts/smart/extensions/burnable/ISMARTBurnable.sol\":{\"keccak256\":\"0x4b3408d79782202ec6b6f01f615b13ca00ad9c5974208acfa3d2ae8be3d28f1d\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://df0fe9c4bb881f299c985f917761f16b7a2118d840cf36060f99e54fcc9f7f68\",\"dweb:/ipfs/QmPQrXG8UPPzK2Wt1aYNgPC2F17Yq5Bs2TW4Bt9fDjXo42\"]},\"contracts/smart/extensions/burnable/SMARTBurnableUpgradeable.sol\":{\"keccak256\":\"0x4c02bd3e535d829472362a45051d16178021a66c2f5beacee16a15d24f75e082\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://51256e429bcd56eee7bca86aa14b680e02eb77415351fd206ed86660887fcb6a\",\"dweb:/ipfs/QmTN7YGxNLqMejnJSsQAL8rrKzXuGPwipuNxJtuGrpRTsS\"]},\"contracts/smart/extensions/burnable/internal/_SMARTBurnableLogic.sol\":{\"keccak256\":\"0xfe35213c987846fa85a1bff3157e19b5eaebf1ecaeb4ab283ef2786579247108\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://87dfd9ddc4e5eeede59846bb195c67a911a3b35adc8e68a8f4477c1d877dd69b\",\"dweb:/ipfs/QmUFiwLTus84bhBpiTphE5JF6vw3kVL7Ak8FRjAX2o1twe\"]},\"contracts/smart/extensions/collateral/ISMARTCollateral.sol\":{\"keccak256\":\"0x822bf674043d5c717d66f1b9b21fdafd260db4ab9ec7fe3d59561d90ee72bcdb\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://3ca1244fdd5e5f9737c7d36ce509fa041c41bff32744bb4a46835e49d9d4f0c0\",\"dweb:/ipfs/QmYhtFGkBqL4ZVDErazggigrsd3dYX33D1utbVp3JHB2Ft\"]},\"contracts/smart/extensions/collateral/SMARTCollateralUpgradeable.sol\":{\"keccak256\":\"0x5524ff33798b4f23b93ee486263e30b56abd78c599fb4ebacd2be3d82f755329\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://e20350ff328592478162aa43c04362e956bd7b9f181bf1be4d9a6b305d20bbb8\",\"dweb:/ipfs/Qmaea6VLWRqPuCNrw4TijB7BKo74DmcvUeXsbX7UnPm14Y\"]},\"contracts/smart/extensions/collateral/internal/_SMARTCollateralLogic.sol\":{\"keccak256\":\"0x8931706e40515193f4d1e907d481663567c6111322b262a559f51e4ed9eda1a9\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://14c2aa3c104b515e6486398cceb60a4c84fef074f3cc7b46b865796ffbad9179\",\"dweb:/ipfs/QmTP1rmX7HdvL4yaeiWQwXj22PyK8qGgzuVeiu2FWKk4yx\"]},\"contracts/smart/extensions/common/SMARTContext.sol\":{\"keccak256\":\"0x93de881d605f705729ccdc60c72a2e33cc90220f652d999c165ffa44e19745a4\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://7bff2fd34d370970b57aa1b4fcbf84921a184e9eacc3f4846fba66da0e03e7f2\",\"dweb:/ipfs/QmfAQ6aHrSzh3KhLbN6jxWHAUmkHRR7geC6YNgVrmawtFr\"]},\"contracts/smart/extensions/common/SMARTExtensionUpgradeable.sol\":{\"keccak256\":\"0x3342c9fc1ccd824037ea0104fec2fa0856150205b3329d54469a7befa35e13f9\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://a4c185e2058e345862a8d4e46a0595ef3147eca7ec16a1b21d17e6a6a312568e\",\"dweb:/ipfs/QmSjgsJDhJMd16pCeLbMC1w2tJVcAHXtP3MMJ8taMP9Kpy\"]},\"contracts/smart/extensions/common/SMARTHooks.sol\":{\"keccak256\":\"0x241082e06589edc00accef716c9c745fcc7caa87ad1e50f1edaccdd65d061880\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://6e2a1619cdec07a50661eb676a24a8688d5dc5dbe5b5c60ea5056cdf5b40ce5e\",\"dweb:/ipfs/QmYbJKQSPt7rk5UECsoQxtRSM4wk28kyCSrMBqfZFbFo4d\"]},\"contracts/smart/extensions/common/_SMARTExtension.sol\":{\"keccak256\":\"0xe14f34fa858f2c5689fad9f44dfbc50437208a36c3cee6d23f9cf6116e4cdc19\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://78d3a08bdc8d8aa68ea503002cf8dd486053bbfe6e8fdd73063a38c23b717e78\",\"dweb:/ipfs/QmSBzyyejfMpa1H2oEVF4j9jcajDBhjCQ7rWFD4NUKf7Cd\"]},\"contracts/smart/extensions/core/SMARTUpgradeable.sol\":{\"keccak256\":\"0x9c50128ae0aac65d97c8a2626d5797566989d961b5f6e693861b9f9ee730fc73\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://f025c56162632a2c6e5e6d54af4dbed04732994241f12c1fad0dc20c916311cb\",\"dweb:/ipfs/Qmc1Qm42h7nKbU3oUfiUfaGSCyYRZk4ytRuaUr9RuGq6qH\"]},\"contracts/smart/extensions/core/internal/_SMARTLogic.sol\":{\"keccak256\":\"0xa8ff266a47f0ed3e1891cb694c065b4d180f7025b4bedb48a5ba8ad73dcd1751\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://35e9831567ad551d45c53084a411e521870c595d3fae0db08775d4c296b0b991\",\"dweb:/ipfs/QmYkvbiAsbWALGQ4wLNt1ty1Q5PiUX9jvR8Vx6KNxu7UcQ\"]},\"contracts/smart/extensions/custodian/ISMARTCustodian.sol\":{\"keccak256\":\"0xf7f74718eeb2d259be46ff82c7232c11b125127feb844d8140f3cff47c0c1663\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://97465ae7ef179d5abeedcf57c7fb7cd3f933268da501ae2694a82731f046f119\",\"dweb:/ipfs/QmQivprpP7h75X57xioAnrNtGkGjZaqkSndwY3CUcAXb5V\"]},\"contracts/smart/extensions/custodian/SMARTCustodianUpgradeable.sol\":{\"keccak256\":\"0xe6b35c424cbcbab42b22b179bcfb131380089c37e0ede6e5f0a4d2b7666b9558\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://56c000cf99ca39f1bb0746379e8b2eed6754010798ae4a24f1056e02d1634522\",\"dweb:/ipfs/QmVBSe7fp3o4dexkd9RzhGm8jRz6x27JLLKZ6T9Vi3bbuu\"]},\"contracts/smart/extensions/custodian/internal/_SMARTCustodianLogic.sol\":{\"keccak256\":\"0xec0393a759c3ce734ff291b1dacc9aa8c775c9218cf684fa5399c9db4a67be9d\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://58705efedab9c071fcd667e1e968b7d25542c3e9e63e27d231d79afbe2e5afb0\",\"dweb:/ipfs/QmeqWqxQHBmPa2xJqW7vBnGdqWQ2M48WeVFFa4DmJGSQ7U\"]},\"contracts/smart/extensions/pausable/ISMARTPausable.sol\":{\"keccak256\":\"0xab4d6f4bae5e7e8166d3c6206ea8ecd9742c02fb3a82f1420266b4a5872a0497\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://a437838b9641a1c59910296decade4a5c397e12127160983eadafb6ab8514582\",\"dweb:/ipfs/QmNMndn4dMgkjGABjuYHdaHEaL6XwdsJwmsaT2WQugrxR1\"]},\"contracts/smart/extensions/pausable/SMARTPausableUpgradeable.sol\":{\"keccak256\":\"0x3c664ec97b16203d42a9149e0e898875e065f3c8aaf69ea279bf7a4643ad2bcb\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8413c6535b992645d3228c52ca1f6c8e30f0b13152a42a484d410e9acfe043b4\",\"dweb:/ipfs/QmZrxCapKCyA6sFkrCmYWSxfT2LDgxSUtpgVnqEjjgLxuk\"]},\"contracts/smart/extensions/pausable/internal/_SMARTPausableLogic.sol\":{\"keccak256\":\"0xa1f304d5a54a0794eeed5102d704222eeb03b74e97d4f7f8a2c52c1a7ceed625\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://11cc8e274d76ecef1f133633c0454567627a4e94b652bcd1dcab7ede7c270df6\",\"dweb:/ipfs/QmXs9MiCgLxvR2GnC91nrZ8BdCshYLA1WzUaVdW4HFv9np\"]},\"contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol\":{\"keccak256\":\"0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3\",\"dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG\"]},\"contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol\":{\"keccak256\":\"0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee\",\"dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V\"]},\"contracts/smart/interface/ISMART.sol\":{\"keccak256\":\"0xfce323160dd5cd8c9db34de0ea872bec41fd2ea8d8496e1e3c17865d374994da\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://1a1fafbdec0c59e078798438d2a3cd05bd70b864d7dfa67faf135d5634c5ae51\",\"dweb:/ipfs/QmehZwexgZN2BZKA6eFrG3DHUMRUZnzYTen6j5Ry5Znbf2\"]},\"contracts/smart/interface/ISMARTCompliance.sol\":{\"keccak256\":\"0x948341e4ad374e1dded6d1b30c395ad0f01e6ea2099fb6b96c5476e8b28c1d77\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://d261e9a0c8682f11ac86048f13e367caee6d5f512d51b8752186b8c01b6ba618\",\"dweb:/ipfs/Qmdp14emh3NFSAphyuAgsTE7qZt1g1UYcNLS3tNNM8T6Hv\"]},\"contracts/smart/interface/ISMARTIdentityRegistry.sol\":{\"keccak256\":\"0x62a95a9db2ac97ceaf59f7585d7bbaf3acb65ed9b5e57597b9d1fe1b4d7c4eda\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://bd870710359396db48e70ef7e40449125ff744c6c8ce15ad7e1894df430c87ea\",\"dweb:/ipfs/QmZ6khf5Vm6hBkkUgYC1b161jSQaZeegJVRY6ndjRW1EcG\"]},\"contracts/smart/interface/ISMARTIdentityRegistryStorage.sol\":{\"keccak256\":\"0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52\",\"dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz\"]},\"contracts/smart/interface/ISMARTTopicSchemeRegistry.sol\":{\"keccak256\":\"0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0\",\"dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd\"]},\"contracts/smart/interface/structs/SMARTComplianceModuleParamPair.sol\":{\"keccak256\":\"0x489a55538b554a0c935bee7efc28f7e821e161638c5726c9d367a644a0b7c62a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://04bb06aed3ee3c5c6f3df9a59721c08ddd57b5521da1c9c6fd96b7c8b57db813\",\"dweb:/ipfs/QmRuzqKDr2sBHNuQhCzWGa8euNiMyvP7LTjSFjvAj5uFqh\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e\",\"dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb\",\"dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol\":{\"keccak256\":\"0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e\",\"dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8\",\"dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol\":{\"keccak256\":\"0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758\",\"dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xa0e86b70fa5a7bd63795161c0882676fde6a18bbb1991938ef014fb0184b4b13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1727a5d693a56ed6af48bace20d8ec26232f0a8f78ff482c5a691cc5c348a019\",\"dweb:/ipfs/QmdXaYmoETBqAv4YBnSmZyuoovjQMsDjfjnCnBFqXhhQEB\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89\",\"dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AccessControlUnauthorizedAccount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CannotRecoverSelf"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "DuplicateModule"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20InsufficientAllowance"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20InsufficientBalance"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidApprover"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidReceiver"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidSender"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidSpender"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExpectedPause"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "available",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requested",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "FreezeAmountExceedsAvailableBalance"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "required",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "available",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InsufficientCollateral"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "frozenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requested",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InsufficientFrozenTokens"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientTokenBalance"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "topicId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidCollateralTopic"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "type": "error",
          "name": "InvalidDecimals"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInitialization"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLostWallet"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "LengthMismatch"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintNotCompliant"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ModuleAlreadyAdded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ModuleNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoTokensToRecover"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotInitializing"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RecipientAddressFrozen"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "SafeERC20FailedOperation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SenderAddressFrozen"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TokenPaused"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferNotCompliant"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroAddressNotAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AccessManagerSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "isFrozen",
              "type": "bool",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AddressFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BurnCompleted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_compliance",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ComplianceAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_module",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ComplianceModuleAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_module",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ComplianceModuleRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ERC20TokenRecovered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ForcedTransfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_identityRegistry",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityRegistryAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "version",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MintCompleted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_module",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ModuleParametersUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Paused",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "investorOnchainID",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RecoverySuccess",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensRecovered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensUnfrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferCompleted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Unpaused",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint8",
              "name": "_newDecimals",
              "type": "uint8",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "_newOnchainID",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "UpdatedTokenInformation",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "accessManager",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addComplianceModule"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "userAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchBurn"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "fromList",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "toList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchForcedTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "userAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchFreezePartialTokens"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_toList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchMint"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "userAddresses",
              "type": "address[]"
            },
            {
              "internalType": "bool[]",
              "name": "freeze",
              "type": "bool[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchSetAddressFrozen"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "toList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "userAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchUnfreezePartialTokens"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "compliance",
          "outputs": [
            {
              "internalType": "contract ISMARTCompliance",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "complianceModules",
          "outputs": [
            {
              "internalType": "struct SMARTComplianceModuleParamPair[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "module",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "findValidCollateralClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "forcedRecoverTokens"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "forcedTransfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "freezePartialTokens"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getFrozenTokens",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityRegistry",
          "outputs": [
            {
              "internalType": "contract ISMARTIdentityRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol_",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals_",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "onchainID_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralTopicId_",
              "type": "uint256"
            },
            {
              "internalType": "struct SMARTComplianceModuleParamPair[]",
              "name": "initialModulePairs_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "module",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "identityRegistry_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "compliance_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessManager_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTrustedForwarder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "onchainID",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pause"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "recoverERC20"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "recoverTokens"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "registeredInterfaces",
          "outputs": [
            {
              "internalType": "bytes4[]",
              "name": "",
              "type": "bytes4[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_module",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeComplianceModule"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "freeze",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAddressFrozen"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_compliance",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCompliance"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_identityRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setIdentityRegistry"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_onchainID",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOnchainID"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_module",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setParametersForComplianceModule"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedForwarder",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unfreezePartialTokens"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unpause"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "accessManager()": {
            "details": "This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.",
            "returns": {
              "_0": "The address of the `_accessManager`."
            }
          },
          "addComplianceModule(address,bytes)": {
            "details": "Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.",
            "params": {
              "_module": "The address of the compliance module contract to add.",
              "_params": "The initial ABI-encoded configuration parameters for this module specific to this token."
            }
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "batchBurn(address[],uint256[])": {
            "details": "This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.",
            "params": {
              "amounts": "An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.",
              "userAddresses": "An array of blockchain addresses from which tokens will be burned."
            }
          },
          "batchForcedTransfer(address[],address[],uint256[])": {
            "details": "A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.",
            "params": {
              "amounts": "A list of corresponding token amounts to transfer.",
              "fromList": "A list of sender addresses.",
              "toList": "A list of recipient addresses."
            }
          },
          "batchFreezePartialTokens(address[],uint256[])": {
            "details": "Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.",
            "params": {
              "amounts": "A list of corresponding token amounts to freeze.",
              "userAddresses": "A list of target addresses."
            }
          },
          "batchMint(address[],uint256[])": {
            "details": "This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.",
            "params": {
              "_amounts": "An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.",
              "_toList": "An array of addresses to receive the newly minted tokens."
            }
          },
          "batchSetAddressFrozen(address[],bool[])": {
            "details": "A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.",
            "params": {
              "freeze": "A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).",
              "userAddresses": "A list of target addresses."
            }
          },
          "batchTransfer(address[],uint256[])": {
            "details": "Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.",
            "params": {
              "amounts": "An array of corresponding token amounts.",
              "toList": "An array of recipient addresses."
            }
          },
          "batchUnfreezePartialTokens(address[],uint256[])": {
            "details": "Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.",
            "params": {
              "amounts": "A list of corresponding token amounts to unfreeze.",
              "userAddresses": "A list of target addresses."
            }
          },
          "burn(address,uint256)": {
            "details": "This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.",
            "params": {
              "amount": "The quantity of tokens to burn. This should be a non-negative integer.",
              "userAddress": "The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease."
            }
          },
          "compliance()": {
            "details": "The Compliance contract is responsible for orchestrating compliance checks for token operations.",
            "returns": {
              "_0": "ISMARTCompliance The current compliance contract."
            }
          },
          "complianceModules()": {
            "details": "Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.",
            "returns": {
              "_0": "SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs."
            }
          },
          "constructor": {
            "custom:oz-upgrades-unsafe-allow": "constructor",
            "params": {
              "forwarder_": "The address of the forwarder contract."
            }
          },
          "decimals()": {
            "details": "Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.",
            "returns": {
              "_0": "uint8 The number of decimals."
            }
          },
          "findValidCollateralClaim()": {
            "details": "Implements the `ISMARTCollateral` interface function.      It fetches trusted issuers for the `collateralProofTopic` from the `identityRegistry`.      Then, it retrieves all claims with this topic from the token's own `onchainID` contract.      It iterates through these claims, calling `__checkSingleClaim` for each to find the first one      that is valid, issued by a trusted issuer, not expired, and correctly decodable.      `virtual` allows this to be overridden in derived contracts if more specific logic is needed.",
            "returns": {
              "amount": "The collateral amount from the first valid claim found (0 if none).",
              "expiryTimestamp": "The expiry timestamp of the first valid claim (0 if none or expired).",
              "issuer": "The address of the claim issuer for the first valid claim (address(0) if none)."
            }
          },
          "forcedRecoverTokens(address,address)": {
            "details": "This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).",
            "params": {
              "lostWallet": "The address from which tokens will be recovered.",
              "newWallet": "The address to which tokens will be recovered."
            }
          },
          "forcedTransfer(address,address,uint256)": {
            "details": "This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).",
            "params": {
              "amount": "The quantity of tokens to transfer.",
              "from": "The address from which tokens will be transferred.",
              "to": "The address to which tokens will be transferred."
            },
            "returns": {
              "_0": "bool Returns `true` upon successful execution (should revert on failure)."
            }
          },
          "freezePartialTokens(address,uint256)": {
            "details": "This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.",
            "params": {
              "amount": "The quantity of tokens to freeze.",
              "userAddress": "The address for which to freeze tokens."
            }
          },
          "getFrozenTokens(address)": {
            "details": "This does not include tokens that are implicitly frozen because the entire address is frozen.",
            "params": {
              "userAddress": "The address to check."
            },
            "returns": {
              "_0": "uint256 The value stored in `__frozenTokens[userAddress]`."
            }
          },
          "hasRole(bytes32,address)": {
            "details": "This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.",
            "params": {
              "account": "The address of the account whose roles are being checked.",
              "role": "The `bytes32` identifier of the role to check."
            },
            "returns": {
              "_0": "`true` if the account has the role, `false` otherwise."
            }
          },
          "identityRegistry()": {
            "details": "The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.",
            "returns": {
              "_0": "ISMARTIdentityRegistry The current identity registry contract."
            }
          },
          "initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)": {
            "params": {
              "accessManager_": "The address of the access manager contract.",
              "collateralTopicId_": "The topic ID of the collateral claim.",
              "compliance_": "The address of the main compliance contract.",
              "decimals_": "The number of decimals the token uses.",
              "identityRegistry_": "The address of the Identity Registry contract.",
              "initialModulePairs_": "Initial compliance module configurations.",
              "name_": "The name of the token.",
              "onchainID_": "Optional address of an existing onchain identity contract. Pass address(0) to create a new one.",
              "symbol_": "The symbol of the token."
            }
          },
          "isFrozen(address)": {
            "details": "A `view` function does not modify blockchain state and does not cost gas when called externally.",
            "params": {
              "userAddress": "The address to check."
            },
            "returns": {
              "_0": "bool `true` if `__frozen[userAddress]` is true, `false` otherwise."
            }
          },
          "isTrustedForwarder(address)": {
            "details": "Indicates whether any particular address is the trusted forwarder."
          },
          "mint(address,uint256)": {
            "details": "This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).",
            "params": {
              "_amount": "The quantity of tokens to mint.",
              "_to": "The address that will receive the newly minted tokens."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "onchainID()": {
            "details": "This can represent the token issuer or the token entity.",
            "returns": {
              "_0": "address The current on-chain ID address."
            }
          },
          "pause()": {
            "details": "Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions."
          },
          "paused()": {
            "details": "Reads the private `_paused` state variable.",
            "returns": {
              "_0": "bool The current paused state of the contract."
            }
          },
          "recoverERC20(address,address,uint256)": {
            "details": "This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.",
            "params": {
              "amount": "The quantity of the `token` to recover and send to `to`.",
              "to": "The address where the recovered tokens will be sent.",
              "token": "The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`."
            }
          },
          "recoverTokens(address)": {
            "details": "Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.",
            "params": {
              "lostWallet": "The address of the lost wallet containing tokens to recover."
            }
          },
          "registeredInterfaces()": {
            "details": "This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.",
            "returns": {
              "_0": "An array of `bytes4` interface identifiers that have been registered."
            }
          },
          "removeComplianceModule(address)": {
            "details": "Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.",
            "params": {
              "_module": "The address of the compliance module contract to remove."
            }
          },
          "setAddressFrozen(address,bool)": {
            "details": "When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).",
            "params": {
              "freeze": "`true` to freeze the address, `false` to unfreeze it.",
              "userAddress": "The target address whose frozen status is to be changed."
            }
          },
          "setCompliance(address)": {
            "details": "The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.",
            "params": {
              "_compliance": "The address of the new `ISMARTCompliance` contract. Must not be `address(0)`."
            }
          },
          "setIdentityRegistry(address)": {
            "details": "The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.",
            "params": {
              "_identityRegistry": "The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`."
            }
          },
          "setOnchainID(address)": {
            "details": "This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.",
            "params": {
              "_onchainID": "The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID."
            }
          },
          "setParametersForComplianceModule(address,bytes)": {
            "details": "This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.",
            "params": {
              "_module": "The address of the compliance module (must be an active module for this token).",
              "_params": "The new ABI-encoded configuration parameters for the module."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.",
            "params": {
              "interfaceId": "The `bytes4` interface identifier."
            },
            "returns": {
              "_0": "bool `true` if the interface is supported, `false` otherwise."
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
          },
          "trustedForwarder()": {
            "details": "Returns the address of the trusted forwarder."
          },
          "unfreezePartialTokens(address,uint256)": {
            "details": "Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.",
            "params": {
              "amount": "The quantity of tokens to unfreeze.",
              "userAddress": "The address for which to unfreeze tokens."
            }
          },
          "unpause()": {
            "details": "Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "accessManager()": {
            "notice": "Returns the address of the current `SMARTTokenAccessManager`."
          },
          "addComplianceModule(address,bytes)": {
            "notice": "Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters."
          },
          "batchBurn(address[],uint256[])": {
            "notice": "Burns (destroys) tokens from multiple user addresses in a single transaction."
          },
          "batchForcedTransfer(address[],address[],uint256[])": {
            "notice": "Forcefully transfers tokens for multiple address pairs in a batch."
          },
          "batchFreezePartialTokens(address[],uint256[])": {
            "notice": "Freezes specific amounts of tokens for multiple addresses in a batch."
          },
          "batchMint(address[],uint256[])": {
            "notice": "Mints tokens to multiple recipient addresses in a single batch transaction."
          },
          "batchSetAddressFrozen(address[],bool[])": {
            "notice": "Freezes or unfreezes multiple addresses in a batch operation."
          },
          "batchTransfer(address[],uint256[])": {
            "notice": "Transfers tokens to multiple recipients in a batch from the effective sender."
          },
          "batchUnfreezePartialTokens(address[],uint256[])": {
            "notice": "Unfreezes specific amounts of tokens for multiple addresses in a batch."
          },
          "burn(address,uint256)": {
            "notice": "Burns (destroys) a specific amount of tokens from a given user's address."
          },
          "compliance()": {
            "notice": "Returns the `ISMARTCompliance` contract instance used by this token."
          },
          "complianceModules()": {
            "notice": "Returns a list of all active compliance modules and their current parameters."
          },
          "decimals()": {
            "notice": "Returns the number of decimals for the token."
          },
          "findValidCollateralClaim()": {
            "notice": "Attempts to find the first valid collateral claim on the token contract's own identity."
          },
          "forcedRecoverTokens(address,address)": {
            "notice": "Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity."
          },
          "forcedTransfer(address,address,uint256)": {
            "notice": "Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions."
          },
          "freezePartialTokens(address,uint256)": {
            "notice": "Freezes a specific amount of tokens for a given address."
          },
          "getFrozenTokens(address)": {
            "notice": "Gets the amount of tokens specifically (partially) frozen for an address."
          },
          "hasRole(bytes32,address)": {
            "notice": "Checks if a given account has a specific role, as defined by the `_accessManager`."
          },
          "identityRegistry()": {
            "notice": "Returns the `ISMARTIdentityRegistry` contract instance used by this token."
          },
          "initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)": {
            "notice": "Initializes the SMART token contract and its extensions."
          },
          "isFrozen(address)": {
            "notice": "Checks if an address is currently fully frozen."
          },
          "mint(address,uint256)": {
            "notice": "Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address."
          },
          "onchainID()": {
            "notice": "Returns the on-chain ID address associated with this token."
          },
          "pause()": {
            "notice": "Pauses the contract, which typically prevents certain actions like token transfers."
          },
          "paused()": {
            "notice": "Returns `true` if the contract is currently paused, and `false` otherwise."
          },
          "recoverERC20(address,address,uint256)": {
            "notice": "Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address."
          },
          "recoverTokens(address)": {
            "notice": "Recovers SMART tokens from a lost wallet to the caller's address."
          },
          "registeredInterfaces()": {
            "notice": "Returns an array of all registered interface IDs."
          },
          "removeComplianceModule(address)": {
            "notice": "Removes an active compliance module from this token's compliance framework."
          },
          "setAddressFrozen(address,bool)": {
            "notice": "Freezes or unfreezes an entire address, preventing or allowing standard token operations."
          },
          "setCompliance(address)": {
            "notice": "Sets or updates the address of the main `ISMARTCompliance` contract used by this token."
          },
          "setIdentityRegistry(address)": {
            "notice": "Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token."
          },
          "setOnchainID(address)": {
            "notice": "Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself."
          },
          "setParametersForComplianceModule(address,bytes)": {
            "notice": "Sets or updates the configuration parameters for a specific, already added compliance module."
          },
          "supportsInterface(bytes4)": {
            "notice": "Standard ERC165 function to check interface support in an upgradeable context."
          },
          "unfreezePartialTokens(address,uint256)": {
            "notice": "Unfreezes a specific amount of previously partially frozen tokens for an address."
          },
          "unpause()": {
            "notice": "Unpauses the contract, resuming normal operations (e.g., allowing token transfers again)."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/assets/stable-coin/ATKStableCoinImplementation.sol": "ATKStableCoinImplementation"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/assets/ATKRoles.sol": {
        "keccak256": "0x8000271f6ff4a1cfac5af0339c0b96e73df6ea830a26432ae185a382a7480fde",
        "urls": [
          "bzz-raw://fc8038cca8b6189c4aedc8225f63667a2b8b42af4b0124beaa782ee53261ee03",
          "dweb:/ipfs/QmauCtiUFDk1qWMC7CtJRmActU4u8qTAkfRT3uF4DSbN8H"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/assets/stable-coin/ATKStableCoinImplementation.sol": {
        "keccak256": "0xe470f5a39382cbc23282d5c15c446e56772000856c5ebfb8edcc2c5e87175a33",
        "urls": [
          "bzz-raw://d332f665ceeb2e267b7ac579f649aacede028078c26f82697b2ceaad0c2e8779",
          "dweb:/ipfs/QmPrXkYFDVL9XKrZ8E1Jte4j21wRCvZH47HLERpFqmsMmq"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/assets/stable-coin/IATKStableCoin.sol": {
        "keccak256": "0x98087f2dd109fc0a1ad39bae454dce73d4f24a5c611b9f126ca6fc9c80be1197",
        "urls": [
          "bzz-raw://dd357e8d28de729b7cff2729c2d32105d862f6530f4e912533e28157f972449b",
          "dweb:/ipfs/QmQCnJ8CSzwVxmjNoPHB6RKAyQG1PRCNCeZunquGcf4hn2"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/access-managed/ISMARTTokenAccessManaged.sol": {
        "keccak256": "0xb05c08191398db750d9fd974e8df1bace09434c27fd81a9db7d36ff429affd97",
        "urls": [
          "bzz-raw://5155ee4da616fb8e3365c933952b07b93d603c6a4eb6542433b08c651a0e0c25",
          "dweb:/ipfs/QmW4C4YbYuDLX32oEFrp11t9TK44B5otKCXQemXs1jMgCD"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/access-managed/ISMARTTokenAccessManager.sol": {
        "keccak256": "0xd8fb2176229e603ed535b0ade30c09c41c416a90997edf8eab72af01cdcd51f3",
        "urls": [
          "bzz-raw://90d07eb638bcd5a00efd0e4752c414e8ea25a3be93efcdc765d147b6c49c004a",
          "dweb:/ipfs/QmRLK1p8b6jZqQ9EMxoMQQMtSgeEqz2P12xbHozaXztdBw"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/access-managed/SMARTTokenAccessManagedUpgradeable.sol": {
        "keccak256": "0xb991c2c529a611de71c274b9041a1b6af31c0224bb89485e2f6b05bba9713f9b",
        "urls": [
          "bzz-raw://fb1e53f83a90cf5984ae6c7b334ac5bc18d9197078a3d8e96c3737152a221415",
          "dweb:/ipfs/QmZeWnamwJnJfuNk7SUjEd2MesKUaJ4MY42qvDt718oAVr"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/access-managed/internal/_SMARTTokenAccessManagedLogic.sol": {
        "keccak256": "0x5cfabd6d2c1570df5cec93db1f01142792f0774ea9d823826e232a57ab3e8afa",
        "urls": [
          "bzz-raw://e1b4b68a6f9c2ebefe87b1919dd71777f28b540fd0a9b304dd37b942509a5b55",
          "dweb:/ipfs/QmeBSSkr1ZpyCdq7tLPF6Wt2wLaBKi1sYKHUiAGXJtF5mv"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/burnable/ISMARTBurnable.sol": {
        "keccak256": "0x4b3408d79782202ec6b6f01f615b13ca00ad9c5974208acfa3d2ae8be3d28f1d",
        "urls": [
          "bzz-raw://df0fe9c4bb881f299c985f917761f16b7a2118d840cf36060f99e54fcc9f7f68",
          "dweb:/ipfs/QmPQrXG8UPPzK2Wt1aYNgPC2F17Yq5Bs2TW4Bt9fDjXo42"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/burnable/SMARTBurnableUpgradeable.sol": {
        "keccak256": "0x4c02bd3e535d829472362a45051d16178021a66c2f5beacee16a15d24f75e082",
        "urls": [
          "bzz-raw://51256e429bcd56eee7bca86aa14b680e02eb77415351fd206ed86660887fcb6a",
          "dweb:/ipfs/QmTN7YGxNLqMejnJSsQAL8rrKzXuGPwipuNxJtuGrpRTsS"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/burnable/internal/_SMARTBurnableLogic.sol": {
        "keccak256": "0xfe35213c987846fa85a1bff3157e19b5eaebf1ecaeb4ab283ef2786579247108",
        "urls": [
          "bzz-raw://87dfd9ddc4e5eeede59846bb195c67a911a3b35adc8e68a8f4477c1d877dd69b",
          "dweb:/ipfs/QmUFiwLTus84bhBpiTphE5JF6vw3kVL7Ak8FRjAX2o1twe"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/collateral/ISMARTCollateral.sol": {
        "keccak256": "0x822bf674043d5c717d66f1b9b21fdafd260db4ab9ec7fe3d59561d90ee72bcdb",
        "urls": [
          "bzz-raw://3ca1244fdd5e5f9737c7d36ce509fa041c41bff32744bb4a46835e49d9d4f0c0",
          "dweb:/ipfs/QmYhtFGkBqL4ZVDErazggigrsd3dYX33D1utbVp3JHB2Ft"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/collateral/SMARTCollateralUpgradeable.sol": {
        "keccak256": "0x5524ff33798b4f23b93ee486263e30b56abd78c599fb4ebacd2be3d82f755329",
        "urls": [
          "bzz-raw://e20350ff328592478162aa43c04362e956bd7b9f181bf1be4d9a6b305d20bbb8",
          "dweb:/ipfs/Qmaea6VLWRqPuCNrw4TijB7BKo74DmcvUeXsbX7UnPm14Y"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/collateral/internal/_SMARTCollateralLogic.sol": {
        "keccak256": "0x8931706e40515193f4d1e907d481663567c6111322b262a559f51e4ed9eda1a9",
        "urls": [
          "bzz-raw://14c2aa3c104b515e6486398cceb60a4c84fef074f3cc7b46b865796ffbad9179",
          "dweb:/ipfs/QmTP1rmX7HdvL4yaeiWQwXj22PyK8qGgzuVeiu2FWKk4yx"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/common/SMARTContext.sol": {
        "keccak256": "0x93de881d605f705729ccdc60c72a2e33cc90220f652d999c165ffa44e19745a4",
        "urls": [
          "bzz-raw://7bff2fd34d370970b57aa1b4fcbf84921a184e9eacc3f4846fba66da0e03e7f2",
          "dweb:/ipfs/QmfAQ6aHrSzh3KhLbN6jxWHAUmkHRR7geC6YNgVrmawtFr"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/common/SMARTExtensionUpgradeable.sol": {
        "keccak256": "0x3342c9fc1ccd824037ea0104fec2fa0856150205b3329d54469a7befa35e13f9",
        "urls": [
          "bzz-raw://a4c185e2058e345862a8d4e46a0595ef3147eca7ec16a1b21d17e6a6a312568e",
          "dweb:/ipfs/QmSjgsJDhJMd16pCeLbMC1w2tJVcAHXtP3MMJ8taMP9Kpy"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/common/SMARTHooks.sol": {
        "keccak256": "0x241082e06589edc00accef716c9c745fcc7caa87ad1e50f1edaccdd65d061880",
        "urls": [
          "bzz-raw://6e2a1619cdec07a50661eb676a24a8688d5dc5dbe5b5c60ea5056cdf5b40ce5e",
          "dweb:/ipfs/QmYbJKQSPt7rk5UECsoQxtRSM4wk28kyCSrMBqfZFbFo4d"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/common/_SMARTExtension.sol": {
        "keccak256": "0xe14f34fa858f2c5689fad9f44dfbc50437208a36c3cee6d23f9cf6116e4cdc19",
        "urls": [
          "bzz-raw://78d3a08bdc8d8aa68ea503002cf8dd486053bbfe6e8fdd73063a38c23b717e78",
          "dweb:/ipfs/QmSBzyyejfMpa1H2oEVF4j9jcajDBhjCQ7rWFD4NUKf7Cd"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/core/SMARTUpgradeable.sol": {
        "keccak256": "0x9c50128ae0aac65d97c8a2626d5797566989d961b5f6e693861b9f9ee730fc73",
        "urls": [
          "bzz-raw://f025c56162632a2c6e5e6d54af4dbed04732994241f12c1fad0dc20c916311cb",
          "dweb:/ipfs/Qmc1Qm42h7nKbU3oUfiUfaGSCyYRZk4ytRuaUr9RuGq6qH"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/core/internal/_SMARTLogic.sol": {
        "keccak256": "0xa8ff266a47f0ed3e1891cb694c065b4d180f7025b4bedb48a5ba8ad73dcd1751",
        "urls": [
          "bzz-raw://35e9831567ad551d45c53084a411e521870c595d3fae0db08775d4c296b0b991",
          "dweb:/ipfs/QmYkvbiAsbWALGQ4wLNt1ty1Q5PiUX9jvR8Vx6KNxu7UcQ"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/custodian/ISMARTCustodian.sol": {
        "keccak256": "0xf7f74718eeb2d259be46ff82c7232c11b125127feb844d8140f3cff47c0c1663",
        "urls": [
          "bzz-raw://97465ae7ef179d5abeedcf57c7fb7cd3f933268da501ae2694a82731f046f119",
          "dweb:/ipfs/QmQivprpP7h75X57xioAnrNtGkGjZaqkSndwY3CUcAXb5V"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/custodian/SMARTCustodianUpgradeable.sol": {
        "keccak256": "0xe6b35c424cbcbab42b22b179bcfb131380089c37e0ede6e5f0a4d2b7666b9558",
        "urls": [
          "bzz-raw://56c000cf99ca39f1bb0746379e8b2eed6754010798ae4a24f1056e02d1634522",
          "dweb:/ipfs/QmVBSe7fp3o4dexkd9RzhGm8jRz6x27JLLKZ6T9Vi3bbuu"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/custodian/internal/_SMARTCustodianLogic.sol": {
        "keccak256": "0xec0393a759c3ce734ff291b1dacc9aa8c775c9218cf684fa5399c9db4a67be9d",
        "urls": [
          "bzz-raw://58705efedab9c071fcd667e1e968b7d25542c3e9e63e27d231d79afbe2e5afb0",
          "dweb:/ipfs/QmeqWqxQHBmPa2xJqW7vBnGdqWQ2M48WeVFFa4DmJGSQ7U"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/pausable/ISMARTPausable.sol": {
        "keccak256": "0xab4d6f4bae5e7e8166d3c6206ea8ecd9742c02fb3a82f1420266b4a5872a0497",
        "urls": [
          "bzz-raw://a437838b9641a1c59910296decade4a5c397e12127160983eadafb6ab8514582",
          "dweb:/ipfs/QmNMndn4dMgkjGABjuYHdaHEaL6XwdsJwmsaT2WQugrxR1"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/pausable/SMARTPausableUpgradeable.sol": {
        "keccak256": "0x3c664ec97b16203d42a9149e0e898875e065f3c8aaf69ea279bf7a4643ad2bcb",
        "urls": [
          "bzz-raw://8413c6535b992645d3228c52ca1f6c8e30f0b13152a42a484d410e9acfe043b4",
          "dweb:/ipfs/QmZrxCapKCyA6sFkrCmYWSxfT2LDgxSUtpgVnqEjjgLxuk"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/extensions/pausable/internal/_SMARTPausableLogic.sol": {
        "keccak256": "0xa1f304d5a54a0794eeed5102d704222eeb03b74e97d4f7f8a2c52c1a7ceed625",
        "urls": [
          "bzz-raw://11cc8e274d76ecef1f133633c0454567627a4e94b652bcd1dcab7ede7c270df6",
          "dweb:/ipfs/QmXs9MiCgLxvR2GnC91nrZ8BdCshYLA1WzUaVdW4HFv9np"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol": {
        "keccak256": "0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f",
        "urls": [
          "bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3",
          "dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol": {
        "keccak256": "0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c",
        "urls": [
          "bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee",
          "dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ISMART.sol": {
        "keccak256": "0xfce323160dd5cd8c9db34de0ea872bec41fd2ea8d8496e1e3c17865d374994da",
        "urls": [
          "bzz-raw://1a1fafbdec0c59e078798438d2a3cd05bd70b864d7dfa67faf135d5634c5ae51",
          "dweb:/ipfs/QmehZwexgZN2BZKA6eFrG3DHUMRUZnzYTen6j5Ry5Znbf2"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTCompliance.sol": {
        "keccak256": "0x948341e4ad374e1dded6d1b30c395ad0f01e6ea2099fb6b96c5476e8b28c1d77",
        "urls": [
          "bzz-raw://d261e9a0c8682f11ac86048f13e367caee6d5f512d51b8752186b8c01b6ba618",
          "dweb:/ipfs/Qmdp14emh3NFSAphyuAgsTE7qZt1g1UYcNLS3tNNM8T6Hv"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTIdentityRegistry.sol": {
        "keccak256": "0x62a95a9db2ac97ceaf59f7585d7bbaf3acb65ed9b5e57597b9d1fe1b4d7c4eda",
        "urls": [
          "bzz-raw://bd870710359396db48e70ef7e40449125ff744c6c8ce15ad7e1894df430c87ea",
          "dweb:/ipfs/QmZ6khf5Vm6hBkkUgYC1b161jSQaZeegJVRY6ndjRW1EcG"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTIdentityRegistryStorage.sol": {
        "keccak256": "0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985",
        "urls": [
          "bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52",
          "dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol": {
        "keccak256": "0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a",
        "urls": [
          "bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0",
          "dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/structs/SMARTComplianceModuleParamPair.sol": {
        "keccak256": "0x489a55538b554a0c935bee7efc28f7e821e161638c5726c9d367a644a0b7c62a",
        "urls": [
          "bzz-raw://04bb06aed3ee3c5c6f3df9a59721c08ddd57b5521da1c9c6fd96b7c8b57db813",
          "dweb:/ipfs/QmRuzqKDr2sBHNuQhCzWGa8euNiMyvP7LTjSFjvAj5uFqh"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol": {
        "keccak256": "0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779",
        "urls": [
          "bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e",
          "dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol": {
        "keccak256": "0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e",
        "urls": [
          "bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb",
          "dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol": {
        "keccak256": "0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122",
        "urls": [
          "bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e",
          "dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol": {
        "keccak256": "0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862",
        "urls": [
          "bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8",
          "dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol": {
        "keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
        "urls": [
          "bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
          "dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC1363.sol": {
        "keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        "urls": [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC165.sol": {
        "keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        "urls": [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC20.sol": {
        "keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        "urls": [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/draft-IERC6093.sol": {
        "keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
        "urls": [
          "bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
          "dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
        "urls": [
          "bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
          "dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5",
        "urls": [
          "bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508",
          "dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol": {
        "keccak256": "0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb",
        "urls": [
          "bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758",
          "dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol": {
        "keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
        "urls": [
          "bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
          "dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/token/ERC20/ERC20Upgradeable.sol": {
        "keccak256": "0xa0e86b70fa5a7bd63795161c0882676fde6a18bbb1991938ef014fb0184b4b13",
        "urls": [
          "bzz-raw://1727a5d693a56ed6af48bace20d8ec26232f0a8f78ff482c5a691cc5c348a019",
          "dweb:/ipfs/QmdXaYmoETBqAv4YBnSmZyuoovjQMsDjfjnCnBFqXhhQEB"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol": {
        "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
        "urls": [
          "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
          "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/introspection/ERC165Upgradeable.sol": {
        "keccak256": "0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab",
        "urls": [
          "bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89",
          "dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "accessManager()": {
        "notice": "Returns the address of the current `SMARTTokenAccessManager`."
      },
      "addComplianceModule(address,bytes)": {
        "notice": "Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters."
      },
      "batchBurn(address[],uint256[])": {
        "notice": "Burns (destroys) tokens from multiple user addresses in a single transaction."
      },
      "batchForcedTransfer(address[],address[],uint256[])": {
        "notice": "Forcefully transfers tokens for multiple address pairs in a batch."
      },
      "batchFreezePartialTokens(address[],uint256[])": {
        "notice": "Freezes specific amounts of tokens for multiple addresses in a batch."
      },
      "batchMint(address[],uint256[])": {
        "notice": "Mints tokens to multiple recipient addresses in a single batch transaction."
      },
      "batchSetAddressFrozen(address[],bool[])": {
        "notice": "Freezes or unfreezes multiple addresses in a batch operation."
      },
      "batchTransfer(address[],uint256[])": {
        "notice": "Transfers tokens to multiple recipients in a batch from the effective sender."
      },
      "batchUnfreezePartialTokens(address[],uint256[])": {
        "notice": "Unfreezes specific amounts of tokens for multiple addresses in a batch."
      },
      "burn(address,uint256)": {
        "notice": "Burns (destroys) a specific amount of tokens from a given user's address."
      },
      "compliance()": {
        "notice": "Returns the `ISMARTCompliance` contract instance used by this token."
      },
      "complianceModules()": {
        "notice": "Returns a list of all active compliance modules and their current parameters."
      },
      "decimals()": {
        "notice": "Returns the number of decimals for the token."
      },
      "findValidCollateralClaim()": {
        "notice": "Attempts to find the first valid collateral claim on the token contract's own identity."
      },
      "forcedRecoverTokens(address,address)": {
        "notice": "Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity."
      },
      "forcedTransfer(address,address,uint256)": {
        "notice": "Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions."
      },
      "freezePartialTokens(address,uint256)": {
        "notice": "Freezes a specific amount of tokens for a given address."
      },
      "getFrozenTokens(address)": {
        "notice": "Gets the amount of tokens specifically (partially) frozen for an address."
      },
      "hasRole(bytes32,address)": {
        "notice": "Checks if a given account has a specific role, as defined by the `_accessManager`."
      },
      "identityRegistry()": {
        "notice": "Returns the `ISMARTIdentityRegistry` contract instance used by this token."
      },
      "initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)": {
        "notice": "Initializes the SMART token contract and its extensions."
      },
      "isFrozen(address)": {
        "notice": "Checks if an address is currently fully frozen."
      },
      "mint(address,uint256)": {
        "notice": "Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address."
      },
      "onchainID()": {
        "notice": "Returns the on-chain ID address associated with this token."
      },
      "pause()": {
        "notice": "Pauses the contract, which typically prevents certain actions like token transfers."
      },
      "paused()": {
        "notice": "Returns `true` if the contract is currently paused, and `false` otherwise."
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address."
      },
      "recoverTokens(address)": {
        "notice": "Recovers SMART tokens from a lost wallet to the caller's address."
      },
      "registeredInterfaces()": {
        "notice": "Returns an array of all registered interface IDs."
      },
      "removeComplianceModule(address)": {
        "notice": "Removes an active compliance module from this token's compliance framework."
      },
      "setAddressFrozen(address,bool)": {
        "notice": "Freezes or unfreezes an entire address, preventing or allowing standard token operations."
      },
      "setCompliance(address)": {
        "notice": "Sets or updates the address of the main `ISMARTCompliance` contract used by this token."
      },
      "setIdentityRegistry(address)": {
        "notice": "Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token."
      },
      "setOnchainID(address)": {
        "notice": "Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself."
      },
      "setParametersForComplianceModule(address,bytes)": {
        "notice": "Sets or updates the configuration parameters for a specific, already added compliance module."
      },
      "supportsInterface(bytes4)": {
        "notice": "Standard ERC165 function to check interface support in an upgradeable context."
      },
      "unfreezePartialTokens(address,uint256)": {
        "notice": "Unfreezes a specific amount of previously partially frozen tokens for an address."
      },
      "unpause()": {
        "notice": "Unpauses the contract, resuming normal operations (e.g., allowing token transfers again)."
      }
    },
    "events": {
      "AccessManagerSet(address,address)": {
        "notice": "Emitted when the address of the access manager contract is successfully changed or set."
      },
      "AddressFrozen(address,address,bool)": {
        "notice": "Emitted when an address's full frozen status (i.e., the entire address is frozen or unfrozen)         is changed by an authorized custodian."
      },
      "BurnCompleted(address,address,uint256)": {
        "notice": "Emitted when a token burn operation has been successfully completed."
      },
      "ComplianceAdded(address,address)": {
        "notice": "Emitted when the address of the main `ISMARTCompliance` contract, used by this token, is successfully updated."
      },
      "ComplianceModuleAdded(address,address,bytes)": {
        "notice": "Emitted when a new compliance module is successfully added to the token's compliance framework."
      },
      "ComplianceModuleRemoved(address,address)": {
        "notice": "Emitted when an existing compliance module is successfully removed from the token's compliance framework."
      },
      "ERC20TokenRecovered(address,address,address,uint256)": {
        "notice": "Emitted when mistakenly sent ERC20 tokens are recovered from the contract."
      },
      "ForcedTransfer(address,address,address,uint256)": {
        "notice": "Emitted when a forced transfer of tokens is executed by a custodian."
      },
      "IdentityRegistryAdded(address,address)": {
        "notice": "Emitted when the address of the `ISMARTIdentityRegistry` contract, used by this token, is successfully updated."
      },
      "MintCompleted(address,address,uint256)": {
        "notice": "Emitted after a token minting operation has successfully completed, passing all relevant checks."
      },
      "ModuleParametersUpdated(address,address,bytes)": {
        "notice": "Emitted when the configuration parameters for an existing, active compliance module are successfully updated."
      },
      "Paused(address)": {
        "notice": "Emitted when the contract transitions to a paused state."
      },
      "RecoverySuccess(address,address,address,address)": {
        "notice": "Emitted when assets are successfully recovered from a lost or compromised wallet to a new wallet         belonging to the same verified identity."
      },
      "TokensFrozen(address,address,uint256)": {
        "notice": "Emitted when a specific amount of tokens is partially frozen for an address."
      },
      "TokensRecovered(address,address,address,uint256)": {
        "notice": "Emitted when tokens are recovered from a lost wallet to the caller's address."
      },
      "TokensUnfrozen(address,address,uint256)": {
        "notice": "Emitted when a specific amount of previously partially frozen tokens is unfrozen for an address."
      },
      "TransferCompleted(address,address,address,uint256)": {
        "notice": "Emitted after a token transfer operation (e.g., via `transfer` or `transferFrom`) has successfully completed,         passing all identity and compliance checks."
      },
      "Unpaused(address)": {
        "notice": "Emitted when the contract transitions out of a paused state (i.e., is unpaused)."
      },
      "UpdatedTokenInformation(address,uint8,address)": {
        "notice": "Emitted when fundamental information about the token, such as its decimals or on-chain ID, is updated."
      }
    },
    "errors": {
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "notice": "This error is functionally identical to `AccessControlUnauthorizedAccount`         defined in OpenZeppelin's `access/AccessControl.sol` contract.         Re-defining it here ensures consistency within the SMART framework and can         help in scenarios where specific error catching is needed for this module."
        }
      ],
      "CannotRecoverSelf()": [
        {
          "notice": "Error indicating an attempt to recover the token contract's own tokens."
        }
      ],
      "DuplicateModule(address)": [
        {
          "notice": "Error indicating that a compliance module is being added but already exists."
        }
      ],
      "ExpectedPause()": [
        {
          "notice": "Error reverted when an action is attempted that requires the contract to be in a paused state,         but the contract is currently not paused (i.e., it is unpaused)."
        }
      ],
      "FreezeAmountExceedsAvailableBalance(uint256,uint256)": [
        {
          "notice": "Error indicating that the amount requested to be frozen exceeds the user's available (unfrozen) balance."
        }
      ],
      "InsufficientCollateral(uint256,uint256)": [
        {
          "notice": "Error: Insufficient collateral to cover the proposed total supply after minting."
        }
      ],
      "InsufficientFrozenTokens(uint256,uint256)": [
        {
          "notice": "Error indicating that an attempt to unfreeze or use frozen tokens failed because the         amount requested exceeds the currently frozen token balance for the address."
        }
      ],
      "InsufficientTokenBalance()": [
        {
          "notice": "Error indicating that the token balance is insufficient for an operation."
        }
      ],
      "InvalidCollateralTopic(uint256)": [
        {
          "notice": "Error: An invalid collateral proof topic ID was provided during initialization."
        }
      ],
      "InvalidDecimals(uint8)": [
        {
          "notice": "Error indicating that the provided decimals value is invalid."
        }
      ],
      "InvalidLostWallet()": [
        {
          "notice": "Error indicating that the provided lost wallet is not marked as lost."
        }
      ],
      "LengthMismatch()": [
        {
          "notice": "Error: Array Length Mismatch in Batch Operation."
        }
      ],
      "MintNotCompliant()": [
        {
          "notice": "Error indicating that a mint operation failed compliance checks."
        }
      ],
      "ModuleAlreadyAdded()": [
        {
          "notice": "Error indicating that an attempt was made to add a compliance module that is already registered."
        }
      ],
      "ModuleNotFound()": [
        {
          "notice": "Error indicating that a specified compliance module was not found."
        }
      ],
      "NoTokensToRecover()": [
        {
          "notice": "Error indicating that there are no tokens to recover."
        }
      ],
      "RecipientAddressFrozen()": [
        {
          "notice": "Error indicating that an operation (e.g., mint, transfer) cannot proceed because the recipient address is frozen."
        }
      ],
      "SenderAddressFrozen()": [
        {
          "notice": "Error indicating that an operation (e.g., transfer, burn, redeem) cannot proceed because the sender address is frozen."
        }
      ],
      "TokenPaused()": [
        {
          "notice": "Error reverted when an action is attempted that requires the contract to be unpaused (not paused),         but the contract is currently paused."
        }
      ],
      "TransferNotCompliant()": [
        {
          "notice": "Error indicating that a transfer operation failed compliance checks."
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Error: Zero Address Not Allowed."
        }
      ]
    },
    "notice": "An implementation of a stablecoin using the SMART extension framework,         backed by collateral and using custom roles."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "Combines core SMART features (compliance, verification) with extensions for pausing,      burning, custodian actions, and collateral tracking. Access control uses custom roles.",
    "methods": {
      "accessManager()": {
        "details": "This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.",
        "returns": {
          "_0": "The address of the `_accessManager`."
        }
      },
      "addComplianceModule(address,bytes)": {
        "details": "Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.",
        "params": {
          "_module": "The address of the compliance module contract to add.",
          "_params": "The initial ABI-encoded configuration parameters for this module specific to this token."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "batchBurn(address[],uint256[])": {
        "details": "This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.",
        "params": {
          "amounts": "An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.",
          "userAddresses": "An array of blockchain addresses from which tokens will be burned."
        }
      },
      "batchForcedTransfer(address[],address[],uint256[])": {
        "details": "A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.",
        "params": {
          "amounts": "A list of corresponding token amounts to transfer.",
          "fromList": "A list of sender addresses.",
          "toList": "A list of recipient addresses."
        }
      },
      "batchFreezePartialTokens(address[],uint256[])": {
        "details": "Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.",
        "params": {
          "amounts": "A list of corresponding token amounts to freeze.",
          "userAddresses": "A list of target addresses."
        }
      },
      "batchMint(address[],uint256[])": {
        "details": "This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.",
        "params": {
          "_amounts": "An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.",
          "_toList": "An array of addresses to receive the newly minted tokens."
        }
      },
      "batchSetAddressFrozen(address[],bool[])": {
        "details": "A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.",
        "params": {
          "freeze": "A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).",
          "userAddresses": "A list of target addresses."
        }
      },
      "batchTransfer(address[],uint256[])": {
        "details": "Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.",
        "params": {
          "amounts": "An array of corresponding token amounts.",
          "toList": "An array of recipient addresses."
        }
      },
      "batchUnfreezePartialTokens(address[],uint256[])": {
        "details": "Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.",
        "params": {
          "amounts": "A list of corresponding token amounts to unfreeze.",
          "userAddresses": "A list of target addresses."
        }
      },
      "burn(address,uint256)": {
        "details": "This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.",
        "params": {
          "amount": "The quantity of tokens to burn. This should be a non-negative integer.",
          "userAddress": "The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease."
        }
      },
      "compliance()": {
        "details": "The Compliance contract is responsible for orchestrating compliance checks for token operations.",
        "returns": {
          "_0": "ISMARTCompliance The current compliance contract."
        }
      },
      "complianceModules()": {
        "details": "Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.",
        "returns": {
          "_0": "SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs."
        }
      },
      "constructor": {
        "params": {
          "forwarder_": "The address of the forwarder contract."
        }
      },
      "decimals()": {
        "details": "Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.",
        "returns": {
          "_0": "uint8 The number of decimals."
        }
      },
      "findValidCollateralClaim()": {
        "details": "Implements the `ISMARTCollateral` interface function.      It fetches trusted issuers for the `collateralProofTopic` from the `identityRegistry`.      Then, it retrieves all claims with this topic from the token's own `onchainID` contract.      It iterates through these claims, calling `__checkSingleClaim` for each to find the first one      that is valid, issued by a trusted issuer, not expired, and correctly decodable.      `virtual` allows this to be overridden in derived contracts if more specific logic is needed.",
        "returns": {
          "amount": "The collateral amount from the first valid claim found (0 if none).",
          "expiryTimestamp": "The expiry timestamp of the first valid claim (0 if none or expired).",
          "issuer": "The address of the claim issuer for the first valid claim (address(0) if none)."
        }
      },
      "forcedRecoverTokens(address,address)": {
        "details": "This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).",
        "params": {
          "lostWallet": "The address from which tokens will be recovered.",
          "newWallet": "The address to which tokens will be recovered."
        }
      },
      "forcedTransfer(address,address,uint256)": {
        "details": "This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).",
        "params": {
          "amount": "The quantity of tokens to transfer.",
          "from": "The address from which tokens will be transferred.",
          "to": "The address to which tokens will be transferred."
        },
        "returns": {
          "_0": "bool Returns `true` upon successful execution (should revert on failure)."
        }
      },
      "freezePartialTokens(address,uint256)": {
        "details": "This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.",
        "params": {
          "amount": "The quantity of tokens to freeze.",
          "userAddress": "The address for which to freeze tokens."
        }
      },
      "getFrozenTokens(address)": {
        "details": "This does not include tokens that are implicitly frozen because the entire address is frozen.",
        "params": {
          "userAddress": "The address to check."
        },
        "returns": {
          "_0": "uint256 The value stored in `__frozenTokens[userAddress]`."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.",
        "params": {
          "account": "The address of the account whose roles are being checked.",
          "role": "The `bytes32` identifier of the role to check."
        },
        "returns": {
          "_0": "`true` if the account has the role, `false` otherwise."
        }
      },
      "identityRegistry()": {
        "details": "The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.",
        "returns": {
          "_0": "ISMARTIdentityRegistry The current identity registry contract."
        }
      },
      "initialize(string,string,uint8,address,uint256,(address,bytes)[],address,address,address)": {
        "params": {
          "accessManager_": "The address of the access manager contract.",
          "collateralTopicId_": "The topic ID of the collateral claim.",
          "compliance_": "The address of the main compliance contract.",
          "decimals_": "The number of decimals the token uses.",
          "identityRegistry_": "The address of the Identity Registry contract.",
          "initialModulePairs_": "Initial compliance module configurations.",
          "name_": "The name of the token.",
          "onchainID_": "Optional address of an existing onchain identity contract. Pass address(0) to create a new one.",
          "symbol_": "The symbol of the token."
        }
      },
      "isFrozen(address)": {
        "details": "A `view` function does not modify blockchain state and does not cost gas when called externally.",
        "params": {
          "userAddress": "The address to check."
        },
        "returns": {
          "_0": "bool `true` if `__frozen[userAddress]` is true, `false` otherwise."
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "mint(address,uint256)": {
        "details": "This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).",
        "params": {
          "_amount": "The quantity of tokens to mint.",
          "_to": "The address that will receive the newly minted tokens."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onchainID()": {
        "details": "This can represent the token issuer or the token entity.",
        "returns": {
          "_0": "address The current on-chain ID address."
        }
      },
      "pause()": {
        "details": "Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions."
      },
      "paused()": {
        "details": "Reads the private `_paused` state variable.",
        "returns": {
          "_0": "bool The current paused state of the contract."
        }
      },
      "recoverERC20(address,address,uint256)": {
        "details": "This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.",
        "params": {
          "amount": "The quantity of the `token` to recover and send to `to`.",
          "to": "The address where the recovered tokens will be sent.",
          "token": "The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`."
        }
      },
      "recoverTokens(address)": {
        "details": "Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.",
        "params": {
          "lostWallet": "The address of the lost wallet containing tokens to recover."
        }
      },
      "registeredInterfaces()": {
        "details": "This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.",
        "returns": {
          "_0": "An array of `bytes4` interface identifiers that have been registered."
        }
      },
      "removeComplianceModule(address)": {
        "details": "Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.",
        "params": {
          "_module": "The address of the compliance module contract to remove."
        }
      },
      "setAddressFrozen(address,bool)": {
        "details": "When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).",
        "params": {
          "freeze": "`true` to freeze the address, `false` to unfreeze it.",
          "userAddress": "The target address whose frozen status is to be changed."
        }
      },
      "setCompliance(address)": {
        "details": "The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.",
        "params": {
          "_compliance": "The address of the new `ISMARTCompliance` contract. Must not be `address(0)`."
        }
      },
      "setIdentityRegistry(address)": {
        "details": "The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.",
        "params": {
          "_identityRegistry": "The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`."
        }
      },
      "setOnchainID(address)": {
        "details": "This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.",
        "params": {
          "_onchainID": "The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID."
        }
      },
      "setParametersForComplianceModule(address,bytes)": {
        "details": "This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.",
        "params": {
          "_module": "The address of the compliance module (must be an active module for this token).",
          "_params": "The new ABI-encoded configuration parameters for the module."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.",
        "params": {
          "interfaceId": "The `bytes4` interface identifier."
        },
        "returns": {
          "_0": "bool `true` if the interface is supported, `false` otherwise."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "unfreezePartialTokens(address,uint256)": {
        "details": "Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.",
        "params": {
          "amount": "The quantity of tokens to unfreeze.",
          "userAddress": "The address for which to unfreeze tokens."
        }
      },
      "unpause()": {
        "details": "Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused."
      }
    },
    "events": {
      "AccessManagerSet(address,address)": {
        "details": "This event is crucial for transparency and monitoring. It allows external observers      to know when the authority managing roles and permissions for a token has been updated.      The `indexed` keyword for `sender` and `manager` allows these addresses to be efficiently      searched for in event logs.",
        "params": {
          "manager": "The new address of the `SMARTTokenAccessManager` contract that will now                oversee access control for the token.",
          "sender": "The address of the account that initiated the change of the access manager.               This is typically an administrator or an account with special privileges."
        }
      },
      "AddressFrozen(address,address,bool)": {
        "params": {
          "isFrozen": "The new frozen status: `true` if the address is now frozen, `false` if unfrozen.                 `indexed` to quickly find all freeze or unfreeze events.",
          "sender": "The address (e.g., custodian, admin) that initiated the freeze/unfreeze operation.               `indexed` for easier filtering of operations by a specific admin.",
          "userAddress": "The address whose frozen status was changed. `indexed` for tracking a specific user."
        }
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "BurnCompleted(address,address,uint256)": {
        "details": "This event signifies that a specified `amount` of tokens has been destroyed from the `from` address,      triggered by the `sender`.      The `indexed` keyword for `sender` and `from` parameters is a special feature in Solidity events.      It allows these parameters to be efficiently searched and filtered by off-chain applications.      Think of them as creating a searchable index for these specific fields in the event logs.",
        "params": {
          "amount": "The quantity of tokens that were burned (destroyed).",
          "from": "The address from which the tokens were actually burned. This is the account whose token balance was reduced.",
          "sender": "The address of the account that initiated or authorized the burn operation.               This could be an administrator, an operator, or under certain rules, the token holder themselves."
        }
      },
      "ComplianceAdded(address,address)": {
        "details": "This event indicates a change in the primary contract responsible for enforcing compliance rules on token transfers.",
        "params": {
          "_compliance": "The address of the newly configured `ISMARTCompliance` contract.",
          "sender": "The address of the account (e.g., admin) that initiated this configuration change."
        }
      },
      "ComplianceModuleAdded(address,address,bytes)": {
        "details": "Compliance modules implement specific rules (e.g., geographic restrictions, holding limits).",
        "params": {
          "_module": "The address of the newly added compliance module contract (which should implement `ISMARTComplianceModule`).",
          "_params": "The ABI-encoded configuration parameters initially set for this module instance on this token.",
          "sender": "The address of the account (e.g., admin) that added the module."
        }
      },
      "ComplianceModuleRemoved(address,address)": {
        "details": "Removing a module means its rules will no longer be applied to token operations.",
        "params": {
          "_module": "The address of the compliance module contract that was removed.",
          "sender": "The address of the account (e.g., admin) that removed the module."
        }
      },
      "ERC20TokenRecovered(address,address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens recovered.",
          "sender": "The address that initiated the recovery operation.",
          "to": "The address to which the tokens were recovered.",
          "token": "The address of the ERC20 token recovered."
        }
      },
      "ForcedTransfer(address,address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens transferred.",
          "from": "The source address of the tokens. `indexed`.",
          "sender": "The address of the custodian who initiated the forced transfer. `indexed`.",
          "to": "The destination address of the tokens. `indexed`."
        }
      },
      "IdentityRegistryAdded(address,address)": {
        "details": "This event signals a change in the system component responsible for managing and verifying user identities.",
        "params": {
          "_identityRegistry": "The address of the newly configured `ISMARTIdentityRegistry` contract.",
          "sender": "The address of the account (e.g., admin) that initiated this configuration change."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MintCompleted(address,address,uint256)": {
        "params": {
          "amount": "The quantity of tokens minted.",
          "sender": "The address of the account (e.g., minter role) that initiated the minting.",
          "to": "The address that received the newly minted tokens."
        }
      },
      "ModuleParametersUpdated(address,address,bytes)": {
        "details": "This allows tweaking the behavior of a module without removing and re-adding it.",
        "params": {
          "_module": "The address of the compliance module whose parameters were updated.",
          "_params": "The new ABI-encoded configuration parameters for the module.",
          "sender": "The address of the account (e.g., admin) that updated the parameters."
        }
      },
      "Paused(address)": {
        "details": "This event signals that standard operations (like transfers) are likely now blocked.",
        "params": {
          "sender": "The address that initiated the `pause` operation. This is typically an authorized               account with a PAUSER_ROLE. `indexed` for easier filtering of events initiated               by a specific admin or pauser address."
        }
      },
      "RecoverySuccess(address,address,address,address)": {
        "params": {
          "investorOnchainID": "The on-chain ID contract address that links the `lostWallet` and `newWallet`,                          confirming they belong to the same beneficial owner.                          Not typically indexed as it might be a shared contract for many users.",
          "lostWallet": "The address from which assets were recovered. `indexed`.",
          "newWallet": "The address to which assets were transferred and identity re-associated. `indexed`.",
          "sender": "The address (e.g., custodian) that initiated the recovery operation. `indexed`."
        }
      },
      "TokensFrozen(address,address,uint256)": {
        "details": "This refers to freezing a portion of an address's tokens, distinct from freezing the entire address.",
        "params": {
          "amount": "The quantity of tokens that were specifically frozen.",
          "sender": "The address that initiated the partial freeze operation. `indexed`.",
          "user": "The address for which a specific amount of tokens was frozen. `indexed`."
        }
      },
      "TokensRecovered(address,address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens recovered.",
          "lostWallet": "The address of the lost wallet containing tokens to recover.",
          "newWallet": "The address to which the tokens were recovered.",
          "sender": "The address that initiated the recovery operation."
        }
      },
      "TokensUnfrozen(address,address,uint256)": {
        "params": {
          "amount": "The quantity of tokens that were unfrozen from the partial freeze.",
          "sender": "The address that initiated the partial unfreeze operation. `indexed`.",
          "user": "The address for which a specific amount of tokens was unfrozen. `indexed`."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "TransferCompleted(address,address,address,uint256)": {
        "params": {
          "amount": "The quantity of tokens transferred.",
          "from": "The address from which tokens were sent.",
          "sender": "The address that initiated the transfer action (could be the `from` address or an operator).",
          "to": "The address to which tokens were received."
        }
      },
      "Unpaused(address)": {
        "details": "This event signals that standard operations are likely resumed.",
        "params": {
          "sender": "The address that initiated the `unpause` operation. Similar to `Paused` event, this is               typically an authorized account. `indexed` for filtering."
        }
      },
      "UpdatedTokenInformation(address,uint8,address)": {
        "details": "Note: While `name` and `symbol` are part of `IERC20Metadata`, their update mechanism isn't explicitly defined here,      but if updatable, would likely also trigger such an event. This event specifically calls out decimals and onchainID.",
        "params": {
          "_newDecimals": "The new number of decimal places the token uses. (Note: Changing decimals post-deployment is highly unusual and complex for ERC20 tokens).",
          "_newOnchainID": "The address of the new on-chain Identity contract representing the token itself (if applicable).",
          "sender": "The address of the account (e.g., admin) that initiated the update."
        }
      }
    },
    "errors": {
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "Error: Account Lacks Required Role.      This error is emitted when an action is attempted by an account (`account`)      that does not possess the necessary authorization role (`neededRole`).      For example, if an account tries to mint new tokens but doesn't have the 'MINTER_ROLE'.",
          "params": {
            "account": "The address of the account that attempted the unauthorized action.",
            "neededRole": "The `bytes32` identifier of the role that the `account` was missing."
          }
        }
      ],
      "CannotRecoverSelf()": [
        {
          "details": "The `recoverERC20` function is designed to recover other ERC20 tokens mistakenly sent to this contract,      not the token this contract itself represents."
        }
      ],
      "DuplicateModule(address)": [
        {
          "params": {
            "module": "The address of the duplicate compliance module."
          }
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ExpectedPause()": [
        {
          "details": "For example, this might be used if an `unpause()` function is called when the contract is already unpaused,      or if a specific admin action is only allowed during a maintenance (paused) period."
        }
      ],
      "FreezeAmountExceedsAvailableBalance(uint256,uint256)": [
        {
          "params": {
            "available": "The available, unfrozen balance of the user.",
            "requested": "The amount of tokens requested to be frozen."
          }
        }
      ],
      "InsufficientCollateral(uint256,uint256)": [
        {
          "details": "This error is thrown by the `__collateral_beforeMintLogic` function if a valid collateral claim      is found on the token contract's identity, but the `amount` specified in that claim is less than      what the token's total supply would become *after* the current mint operation.      For example, if the collateral claim specifies a collateral amount (effectively a supply cap) of 1,000,000 tokens,      the current total supply is 900,000, and an attempt is made to mint 200,000 more tokens,      the `required` total supply would be 1,100,000. Since 1,100,000 (required) > 1,000,000 (available), this error occurs.      It also occurs if no valid collateral claim is found (in which case `available` would be 0), unless the      `required` supply is also 0.",
          "params": {
            "available": "The collateral amount found in the valid, non-expired claim on the token's identity. This acts as the effective cap.",
            "required": "The total supply that would be reached if the mint operation were to proceed (current supply + mint amount)."
          }
        }
      ],
      "InsufficientFrozenTokens(uint256,uint256)": [
        {
          "params": {
            "frozenBalance": "The current amount of tokens specifically frozen for the address.",
            "requested": "The amount requested to be unfrozen or used from the frozen portion."
          }
        }
      ],
      "InsufficientTokenBalance()": [
        {
          "details": "This typically occurs during token recovery if the contract holds less of the target token than the amount requested for recovery."
        }
      ],
      "InvalidCollateralTopic(uint256)": [
        {
          "details": "This error is thrown by the initializer or constructor of the collateral extension      if the provided `collateralProofTopic_` (the ERC-735 claim topic ID) is invalid.      Typically, an invalid topic ID would be `0`, as topic ID 0 is often reserved or considered null.      A valid topic ID is crucial for correctly identifying and verifying the specific collateral claims.",
          "params": {
            "topicId": "The invalid topic ID (e.g., 0) that was provided during the contract's initialization."
          }
        }
      ],
      "InvalidDecimals(uint8)": [
        {
          "details": "This error is typically reverted if `decimals` is greater than 18, which is a common upper limit.",
          "params": {
            "decimals": "The invalid decimals value that was provided."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidLostWallet()": [
        {
          "details": "This can occur if the wallet is not associated with any lost identity."
        }
      ],
      "LengthMismatch()": [
        {
          "details": "This error is typically triggered in functions that process multiple items in batches,      such as `batchBurn` or `batchTransfer`, when the input arrays (e.g., an array of addresses      and an array of corresponding amounts) do not have the same number of elements.      For example, if 3 addresses are provided but only 2 amounts, this error would be raised      because it's unclear how to map the amounts to the addresses."
        }
      ],
      "MintNotCompliant()": [
        {
          "details": "This means the conditions required by the active compliance modules for minting were not met."
        }
      ],
      "ModuleNotFound()": [
        {
          "details": "This can occur when trying to remove or update parameters for a non-existent module."
        }
      ],
      "NoTokensToRecover()": [
        {
          "details": "This can occur if the contract holds no tokens to recover."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "TokenPaused()": [
        {
          "details": "For example, this error is typically used in a `whenNotPaused` modifier if a function like `transfer`      is called while the token operations are halted."
        }
      ],
      "TransferNotCompliant()": [
        {
          "details": "This means the conditions required by the active compliance modules for transferring tokens were not met."
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "details": "This error is used to indicate that an operation or initialization was attempted with the      zero address (`address(0)`), which is often an invalid or disallowed address in many contexts.      For example, setting a critical administrative role to the zero address, or transferring tokens      to the zero address (which can effectively burn them, but should be explicit if intended)."
        }
      ]
    },
    "title": "ATKStableCoin"
  },
  "id": 28
}