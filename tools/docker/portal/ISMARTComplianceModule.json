{
  "abi": [
    {
      "type": "function",
      "name": "canTransfer",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "created",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "destroyed",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferred",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "validateParameters",
      "inputs": [
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "error",
      "name": "ComplianceCheckFailed",
      "inputs": [
        {
          "name": "reason",
          "type": "string",
          "internalType": "string"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidParameters",
      "inputs": [
        {
          "name": "reason",
          "type": "string",
          "internalType": "string"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "canTransfer(address,address,address,uint256,bytes)": "ddfcf377",
    "created(address,address,uint256,bytes)": "c4c104b9",
    "destroyed(address,address,uint256,bytes)": "10efe2a5",
    "name()": "06fdde03",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferred(address,address,address,uint256,bytes)": "ea6b97a5",
    "validateParameters(bytes)": "6974f58e"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ComplianceCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"canTransfer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"validateParameters\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint\",\"details\":\"Each compliance module can be thought of as a pluggable rule set. For example, one module might enforce      KYC/AML checks, another might restrict transfers to certain geographic locations, and yet another might      impose daily transfer limits. This modular design allows for flexible and extensible compliance frameworks.      This interface inherits from IERC165 for contract interface detection (supportsInterface).\",\"errors\":{\"ComplianceCheckFailed(string)\":[{\"details\":\"This error indicates that a proposed token transfer, mint, or burn operation violates      the rules enforced by this specific compliance module.\",\"params\":{\"reason\":\"A descriptive string explaining why the compliance check failed (e.g., \\\"Sender not allow listed\\\", \\\"Transfer exceeds daily limit\\\").\"}}],\"InvalidParameters(string)\":[{\"details\":\"This error signals that the data supplied to configure or update the module is malformed, out of expected range,      or otherwise unsuitable for the module's intended operation.\",\"params\":{\"reason\":\"A descriptive string explaining why the parameters are considered invalid (e.g., \\\"Invalid country code format\\\", \\\"Limit parameter cannot be zero\\\").\"}}]},\"kind\":\"dev\",\"methods\":{\"canTransfer(address,address,address,uint256,bytes)\":{\"details\":\"This is a critical view-only function called by the main `ISMARTCompliance` contract before any token movement.      It MUST NOT modify the contract state. If the proposed action is non-compliant, this function MUST revert,      ideally with the `ComplianceCheckFailed` error, providing a reason for the failure.      For mint operations, `_from` will be `address(0)`.      For burn/redeem operations, `_to` will be `address(0)`.\",\"params\":{\"_from\":\"The address of the account initiating the transfer (sender). For token minting, this will be the zero address (`address(0)`).\",\"_params\":\"Token-specific configuration parameters that were set for this module instance when it was added to the token.                These parameters allow the module's behavior to be tailored for different tokens or scenarios.\",\"_to\":\"The address of the account receiving the transfer (recipient). For token burning/redeeming, this will be the zero address (`address(0)`).\",\"_token\":\"The address of the ISMART token contract for which this compliance check is being performed.\",\"_value\":\"The amount of tokens involved in the potential transfer.\"}},\"created(address,address,uint256,bytes)\":{\"details\":\"This function allows the compliance module to react to a completed mint. It CAN modify the module's state.      For example, it could update total supply trackers specific to this module or log minting events.      This is part of the post-creation hook mechanism.\",\"params\":{\"_params\":\"Token-specific configuration parameters for this module instance.\",\"_to\":\"The address of the account that received the newly minted tokens.\",\"_token\":\"The address of the ISMART token contract where tokens were minted.\",\"_value\":\"The amount of tokens that were minted.\"}},\"destroyed(address,address,uint256,bytes)\":{\"details\":\"This function allows the compliance module to react to a completed burn/redeem. It CAN modify the module's state.      For instance, it might update records related to token destruction or adjust available quotas.      This is part of the post-destruction hook mechanism.\",\"params\":{\"_from\":\"The address of the account whose tokens were burned.\",\"_params\":\"Token-specific configuration parameters for this module instance.\",\"_token\":\"The address of the ISMART token contract from which tokens were burned.\",\"_value\":\"The amount of tokens that were burned.\"}},\"name()\":{\"details\":\"This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., \\\"KYC Module\\\", \\\"Country Restriction Module\\\").\",\"returns\":{\"_0\":\"A string representing the name of the compliance module.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferred(address,address,address,uint256,bytes)\":{\"details\":\"This function allows the compliance module to react to a completed transfer. It CAN modify the module's state,      for example, to update usage counters, record transaction details, or adjust dynamic limits.      This function is part of the post-transfer hook mechanism.\",\"params\":{\"_from\":\"The address of the account that sent the tokens.\",\"_params\":\"Token-specific configuration parameters for this module instance.\",\"_to\":\"The address of the account that received the tokens.\",\"_token\":\"The address of the ISMART token contract where the transfer occurred.\",\"_value\":\"The amount of tokens that were transferred.\"}},\"validateParameters(bytes)\":{\"details\":\"This view-only function is called by the ISMART token contract when a compliance module is first added      (via `addComplianceModule`) or when its existing parameters are updated (via `setParametersForComplianceModule`).      It MUST NOT modify the contract state. If the provided `_params` are not valid or correctly formatted for this      specific module, this function MUST revert, ideally with the `InvalidParameters` error.      The module itself is responsible for defining what constitutes valid parameters.\",\"params\":{\"_params\":\"The ABI-encoded byte string containing the configuration parameters to be validated.\"}}},\"title\":\"ISMARTComplianceModule Interface\",\"version\":1},\"userdoc\":{\"errors\":{\"ComplianceCheckFailed(string)\":[{\"notice\":\"Emitted when a compliance check performed by the `canTransfer` function fails.\"}],\"InvalidParameters(string)\":[{\"notice\":\"Emitted by the `validateParameters` function if the provided configuration parameters are invalid for this module.\"}]},\"kind\":\"user\",\"methods\":{\"canTransfer(address,address,address,uint256,bytes)\":{\"notice\":\"Checks if a potential token transfer (including mints and burns) complies with the rules of this module.\"},\"created(address,address,uint256,bytes)\":{\"notice\":\"Called by the main `ISMARTCompliance` contract immediately AFTER a token mint operation has successfully occurred.\"},\"destroyed(address,address,uint256,bytes)\":{\"notice\":\"Called by the main `ISMARTCompliance` contract immediately AFTER a token burn or redeem operation has successfully occurred.\"},\"name()\":{\"notice\":\"Returns a human-readable name for the compliance module.\"},\"transferred(address,address,address,uint256,bytes)\":{\"notice\":\"Called by the main `ISMARTCompliance` contract immediately AFTER a token transfer has successfully occurred.\"},\"validateParameters(bytes)\":{\"notice\":\"Validates the format and content of ABI-encoded configuration parameters intended for this module.\"}},\"notice\":\"This interface defines the standard functions that all individual compliance modules within the SMART protocol         must implement. Compliance modules are specialized contracts that enforce specific rules or actions         related to token transfers, minting, and burning. They are managed by a central `ISMARTCompliance` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/interface/ISMARTComplianceModule.sol\":\"ISMARTComplianceModule\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/\",\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/\",\":forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\",\":openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/interface/ISMARTComplianceModule.sol\":{\"keccak256\":\"0x0506b3696a61f59ebb32ffb0fcb1c955c3c76e1ab9f85440cf5562a800490c6e\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://2aef21997c167cf1dc9430b232e0dcddd6316f945f44e2ebe943241c2c257896\",\"dweb:/ipfs/Qmbp5MEoHkBMTTreXYoxjKohVVbEPBtcwX1QPfLHv71FxQ\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "ComplianceCheckFailed"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "InvalidParameters"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "canTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "created"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "destroyed"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferred"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "validateParameters"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "canTransfer(address,address,address,uint256,bytes)": {
            "details": "This is a critical view-only function called by the main `ISMARTCompliance` contract before any token movement.      It MUST NOT modify the contract state. If the proposed action is non-compliant, this function MUST revert,      ideally with the `ComplianceCheckFailed` error, providing a reason for the failure.      For mint operations, `_from` will be `address(0)`.      For burn/redeem operations, `_to` will be `address(0)`.",
            "params": {
              "_from": "The address of the account initiating the transfer (sender). For token minting, this will be the zero address (`address(0)`).",
              "_params": "Token-specific configuration parameters that were set for this module instance when it was added to the token.                These parameters allow the module's behavior to be tailored for different tokens or scenarios.",
              "_to": "The address of the account receiving the transfer (recipient). For token burning/redeeming, this will be the zero address (`address(0)`).",
              "_token": "The address of the ISMART token contract for which this compliance check is being performed.",
              "_value": "The amount of tokens involved in the potential transfer."
            }
          },
          "created(address,address,uint256,bytes)": {
            "details": "This function allows the compliance module to react to a completed mint. It CAN modify the module's state.      For example, it could update total supply trackers specific to this module or log minting events.      This is part of the post-creation hook mechanism.",
            "params": {
              "_params": "Token-specific configuration parameters for this module instance.",
              "_to": "The address of the account that received the newly minted tokens.",
              "_token": "The address of the ISMART token contract where tokens were minted.",
              "_value": "The amount of tokens that were minted."
            }
          },
          "destroyed(address,address,uint256,bytes)": {
            "details": "This function allows the compliance module to react to a completed burn/redeem. It CAN modify the module's state.      For instance, it might update records related to token destruction or adjust available quotas.      This is part of the post-destruction hook mechanism.",
            "params": {
              "_from": "The address of the account whose tokens were burned.",
              "_params": "Token-specific configuration parameters for this module instance.",
              "_token": "The address of the ISMART token contract from which tokens were burned.",
              "_value": "The amount of tokens that were burned."
            }
          },
          "name()": {
            "details": "This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., \"KYC Module\", \"Country Restriction Module\").",
            "returns": {
              "_0": "A string representing the name of the compliance module."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "transferred(address,address,address,uint256,bytes)": {
            "details": "This function allows the compliance module to react to a completed transfer. It CAN modify the module's state,      for example, to update usage counters, record transaction details, or adjust dynamic limits.      This function is part of the post-transfer hook mechanism.",
            "params": {
              "_from": "The address of the account that sent the tokens.",
              "_params": "Token-specific configuration parameters for this module instance.",
              "_to": "The address of the account that received the tokens.",
              "_token": "The address of the ISMART token contract where the transfer occurred.",
              "_value": "The amount of tokens that were transferred."
            }
          },
          "validateParameters(bytes)": {
            "details": "This view-only function is called by the ISMART token contract when a compliance module is first added      (via `addComplianceModule`) or when its existing parameters are updated (via `setParametersForComplianceModule`).      It MUST NOT modify the contract state. If the provided `_params` are not valid or correctly formatted for this      specific module, this function MUST revert, ideally with the `InvalidParameters` error.      The module itself is responsible for defining what constitutes valid parameters.",
            "params": {
              "_params": "The ABI-encoded byte string containing the configuration parameters to be validated."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "canTransfer(address,address,address,uint256,bytes)": {
            "notice": "Checks if a potential token transfer (including mints and burns) complies with the rules of this module."
          },
          "created(address,address,uint256,bytes)": {
            "notice": "Called by the main `ISMARTCompliance` contract immediately AFTER a token mint operation has successfully occurred."
          },
          "destroyed(address,address,uint256,bytes)": {
            "notice": "Called by the main `ISMARTCompliance` contract immediately AFTER a token burn or redeem operation has successfully occurred."
          },
          "name()": {
            "notice": "Returns a human-readable name for the compliance module."
          },
          "transferred(address,address,address,uint256,bytes)": {
            "notice": "Called by the main `ISMARTCompliance` contract immediately AFTER a token transfer has successfully occurred."
          },
          "validateParameters(bytes)": {
            "notice": "Validates the format and content of ABI-encoded configuration parameters intended for this module."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@axelar-network/axelar-gmp-sdk-solidity/=dependencies/openzeppelin-community-contracts-0.0.1/node_modules/@axelar-network/axelar-gmp-sdk-solidity/",
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.2.0/=dependencies/@openzeppelin-contracts-5.2.0/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/community-contracts/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "eas-contracts-1.4.0/=dependencies/eas-contracts-1.4.0/contracts/",
        "forge-std-1.9.5/=dependencies/forge-std-1.9.5/src/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/",
        "openzeppelin-community-contracts-0.0.1/=dependencies/openzeppelin-community-contracts-0.0.1/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/interface/ISMARTComplianceModule.sol": "ISMARTComplianceModule"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/interface/ISMARTComplianceModule.sol": {
        "keccak256": "0x0506b3696a61f59ebb32ffb0fcb1c955c3c76e1ab9f85440cf5562a800490c6e",
        "urls": [
          "bzz-raw://2aef21997c167cf1dc9430b232e0dcddd6316f945f44e2ebe943241c2c257896",
          "dweb:/ipfs/Qmbp5MEoHkBMTTreXYoxjKohVVbEPBtcwX1QPfLHv71FxQ"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "canTransfer(address,address,address,uint256,bytes)": {
        "notice": "Checks if a potential token transfer (including mints and burns) complies with the rules of this module."
      },
      "created(address,address,uint256,bytes)": {
        "notice": "Called by the main `ISMARTCompliance` contract immediately AFTER a token mint operation has successfully occurred."
      },
      "destroyed(address,address,uint256,bytes)": {
        "notice": "Called by the main `ISMARTCompliance` contract immediately AFTER a token burn or redeem operation has successfully occurred."
      },
      "name()": {
        "notice": "Returns a human-readable name for the compliance module."
      },
      "transferred(address,address,address,uint256,bytes)": {
        "notice": "Called by the main `ISMARTCompliance` contract immediately AFTER a token transfer has successfully occurred."
      },
      "validateParameters(bytes)": {
        "notice": "Validates the format and content of ABI-encoded configuration parameters intended for this module."
      }
    },
    "errors": {
      "ComplianceCheckFailed(string)": [
        {
          "notice": "Emitted when a compliance check performed by the `canTransfer` function fails."
        }
      ],
      "InvalidParameters(string)": [
        {
          "notice": "Emitted by the `validateParameters` function if the provided configuration parameters are invalid for this module."
        }
      ]
    },
    "notice": "This interface defines the standard functions that all individual compliance modules within the SMART protocol         must implement. Compliance modules are specialized contracts that enforce specific rules or actions         related to token transfers, minting, and burning. They are managed by a central `ISMARTCompliance` contract."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint",
    "details": "Each compliance module can be thought of as a pluggable rule set. For example, one module might enforce      KYC/AML checks, another might restrict transfers to certain geographic locations, and yet another might      impose daily transfer limits. This modular design allows for flexible and extensible compliance frameworks.      This interface inherits from IERC165 for contract interface detection (supportsInterface).",
    "methods": {
      "canTransfer(address,address,address,uint256,bytes)": {
        "details": "This is a critical view-only function called by the main `ISMARTCompliance` contract before any token movement.      It MUST NOT modify the contract state. If the proposed action is non-compliant, this function MUST revert,      ideally with the `ComplianceCheckFailed` error, providing a reason for the failure.      For mint operations, `_from` will be `address(0)`.      For burn/redeem operations, `_to` will be `address(0)`.",
        "params": {
          "_from": "The address of the account initiating the transfer (sender). For token minting, this will be the zero address (`address(0)`).",
          "_params": "Token-specific configuration parameters that were set for this module instance when it was added to the token.                These parameters allow the module's behavior to be tailored for different tokens or scenarios.",
          "_to": "The address of the account receiving the transfer (recipient). For token burning/redeeming, this will be the zero address (`address(0)`).",
          "_token": "The address of the ISMART token contract for which this compliance check is being performed.",
          "_value": "The amount of tokens involved in the potential transfer."
        }
      },
      "created(address,address,uint256,bytes)": {
        "details": "This function allows the compliance module to react to a completed mint. It CAN modify the module's state.      For example, it could update total supply trackers specific to this module or log minting events.      This is part of the post-creation hook mechanism.",
        "params": {
          "_params": "Token-specific configuration parameters for this module instance.",
          "_to": "The address of the account that received the newly minted tokens.",
          "_token": "The address of the ISMART token contract where tokens were minted.",
          "_value": "The amount of tokens that were minted."
        }
      },
      "destroyed(address,address,uint256,bytes)": {
        "details": "This function allows the compliance module to react to a completed burn/redeem. It CAN modify the module's state.      For instance, it might update records related to token destruction or adjust available quotas.      This is part of the post-destruction hook mechanism.",
        "params": {
          "_from": "The address of the account whose tokens were burned.",
          "_params": "Token-specific configuration parameters for this module instance.",
          "_token": "The address of the ISMART token contract from which tokens were burned.",
          "_value": "The amount of tokens that were burned."
        }
      },
      "name()": {
        "details": "This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., \"KYC Module\", \"Country Restriction Module\").",
        "returns": {
          "_0": "A string representing the name of the compliance module."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferred(address,address,address,uint256,bytes)": {
        "details": "This function allows the compliance module to react to a completed transfer. It CAN modify the module's state,      for example, to update usage counters, record transaction details, or adjust dynamic limits.      This function is part of the post-transfer hook mechanism.",
        "params": {
          "_from": "The address of the account that sent the tokens.",
          "_params": "Token-specific configuration parameters for this module instance.",
          "_to": "The address of the account that received the tokens.",
          "_token": "The address of the ISMART token contract where the transfer occurred.",
          "_value": "The amount of tokens that were transferred."
        }
      },
      "validateParameters(bytes)": {
        "details": "This view-only function is called by the ISMART token contract when a compliance module is first added      (via `addComplianceModule`) or when its existing parameters are updated (via `setParametersForComplianceModule`).      It MUST NOT modify the contract state. If the provided `_params` are not valid or correctly formatted for this      specific module, this function MUST revert, ideally with the `InvalidParameters` error.      The module itself is responsible for defining what constitutes valid parameters.",
        "params": {
          "_params": "The ABI-encoded byte string containing the configuration parameters to be validated."
        }
      }
    },
    "errors": {
      "ComplianceCheckFailed(string)": [
        {
          "details": "This error indicates that a proposed token transfer, mint, or burn operation violates      the rules enforced by this specific compliance module.",
          "params": {
            "reason": "A descriptive string explaining why the compliance check failed (e.g., \"Sender not allow listed\", \"Transfer exceeds daily limit\")."
          }
        }
      ],
      "InvalidParameters(string)": [
        {
          "details": "This error signals that the data supplied to configure or update the module is malformed, out of expected range,      or otherwise unsuitable for the module's intended operation.",
          "params": {
            "reason": "A descriptive string explaining why the parameters are considered invalid (e.g., \"Invalid country code format\", \"Limit parameter cannot be zero\")."
          }
        }
      ]
    },
    "title": "ISMARTComplianceModule Interface"
  },
  "id": 95
}