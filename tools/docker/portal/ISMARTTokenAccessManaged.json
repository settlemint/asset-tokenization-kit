{
  "abi": [
    {
      "type": "function",
      "name": "accessManager",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "AccessManagerSet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "manager",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessControlUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "neededRole",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "accessManager()": "fdcb6068",
    "hasRole(bytes32,address)": "91d14854"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AccessManagerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"Error: Account Lacks Required Role.      This error is emitted when an action is attempted by an account (`account`)      that does not possess the necessary authorization role (`neededRole`).      For example, if an account tries to mint new tokens but doesn't have the 'MINTER_ROLE'.\",\"params\":{\"account\":\"The address of the account that attempted the unauthorized action.\",\"neededRole\":\"The `bytes32` identifier of the role that the `account` was missing.\"}}]},\"events\":{\"AccessManagerSet(address,address)\":{\"details\":\"This event is crucial for transparency and monitoring. It allows external observers      to know when the authority managing roles and permissions for a token has been updated.      The `indexed` keyword for `sender` and `manager` allows these addresses to be efficiently      searched for in event logs.\",\"params\":{\"manager\":\"The new address of the `SMARTTokenAccessManager` contract that will now                oversee access control for the token.\",\"sender\":\"The address of the account that initiated the change of the access manager.               This is typically an administrator or an account with special privileges.\"}}},\"kind\":\"dev\",\"methods\":{\"accessManager()\":{\"returns\":{\"_0\":\"The address of the access manager.\"}},\"hasRole(bytes32,address)\":{\"details\":\"This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).\",\"params\":{\"account\":\"The address of the account whose roles are being checked.\",\"role\":\"The identifier of the role to check. Roles are typically represented             as a `bytes32` value, which is a fixed-size byte array often derived             from a descriptive string (e.g., keccak256(\\\"MINTER_ROLE\\\")).\"},\"returns\":{\"_0\":\"A boolean value: `true` if the account has the specified role,         `false` otherwise.\"}}},\"title\":\"Interface for SMART Token Access Management\",\"version\":1},\"userdoc\":{\"errors\":{\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"notice\":\"This error is functionally identical to `AccessControlUnauthorizedAccount`         defined in OpenZeppelin's `access/AccessControl.sol` contract.         Re-defining it here ensures consistency within the SMART framework and can         help in scenarios where specific error catching is needed for this module.\"}]},\"events\":{\"AccessManagerSet(address,address)\":{\"notice\":\"Emitted when the address of the access manager contract is successfully changed or set.\"}},\"kind\":\"user\",\"methods\":{\"accessManager()\":{\"notice\":\"Returns the address of the access manager for the token.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks if a given account has a specific role.\"}},\"notice\":\"This interface defines the functions that a contract must implement         to be considered compatible with the SMART token access management system.         In Solidity, an interface is like a contract blueprint. It specifies         what functions a contract has, but not how they are implemented.         Other contracts can then interact with any contract that implements this         interface, knowing that these functions will be available.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/access-managed/ISMARTTokenAccessManaged.sol\":\"ISMARTTokenAccessManaged\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/access-managed/ISMARTTokenAccessManaged.sol\":{\"keccak256\":\"0xb05c08191398db750d9fd974e8df1bace09434c27fd81a9db7d36ff429affd97\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://5155ee4da616fb8e3365c933952b07b93d603c6a4eb6542433b08c651a0e0c25\",\"dweb:/ipfs/QmW4C4YbYuDLX32oEFrp11t9TK44B5otKCXQemXs1jMgCD\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AccessControlUnauthorizedAccount"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AccessManagerSet",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "accessManager",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "accessManager()": {
            "returns": {
              "_0": "The address of the access manager."
            }
          },
          "hasRole(bytes32,address)": {
            "details": "This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).",
            "params": {
              "account": "The address of the account whose roles are being checked.",
              "role": "The identifier of the role to check. Roles are typically represented             as a `bytes32` value, which is a fixed-size byte array often derived             from a descriptive string (e.g., keccak256(\"MINTER_ROLE\"))."
            },
            "returns": {
              "_0": "A boolean value: `true` if the account has the specified role,         `false` otherwise."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "accessManager()": {
            "notice": "Returns the address of the access manager for the token."
          },
          "hasRole(bytes32,address)": {
            "notice": "Checks if a given account has a specific role."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/access-managed/ISMARTTokenAccessManaged.sol": "ISMARTTokenAccessManaged"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/access-managed/ISMARTTokenAccessManaged.sol": {
        "keccak256": "0xb05c08191398db750d9fd974e8df1bace09434c27fd81a9db7d36ff429affd97",
        "urls": [
          "bzz-raw://5155ee4da616fb8e3365c933952b07b93d603c6a4eb6542433b08c651a0e0c25",
          "dweb:/ipfs/QmW4C4YbYuDLX32oEFrp11t9TK44B5otKCXQemXs1jMgCD"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "accessManager()": {
        "notice": "Returns the address of the access manager for the token."
      },
      "hasRole(bytes32,address)": {
        "notice": "Checks if a given account has a specific role."
      }
    },
    "events": {
      "AccessManagerSet(address,address)": {
        "notice": "Emitted when the address of the access manager contract is successfully changed or set."
      }
    },
    "errors": {
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "notice": "This error is functionally identical to `AccessControlUnauthorizedAccount`         defined in OpenZeppelin's `access/AccessControl.sol` contract.         Re-defining it here ensures consistency within the SMART framework and can         help in scenarios where specific error catching is needed for this module."
        }
      ]
    },
    "notice": "This interface defines the functions that a contract must implement         to be considered compatible with the SMART token access management system.         In Solidity, an interface is like a contract blueprint. It specifies         what functions a contract has, but not how they are implemented.         Other contracts can then interact with any contract that implements this         interface, knowing that these functions will be available."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "accessManager()": {
        "returns": {
          "_0": "The address of the access manager."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).",
        "params": {
          "account": "The address of the account whose roles are being checked.",
          "role": "The identifier of the role to check. Roles are typically represented             as a `bytes32` value, which is a fixed-size byte array often derived             from a descriptive string (e.g., keccak256(\"MINTER_ROLE\"))."
        },
        "returns": {
          "_0": "A boolean value: `true` if the account has the specified role,         `false` otherwise."
        }
      }
    },
    "events": {
      "AccessManagerSet(address,address)": {
        "details": "This event is crucial for transparency and monitoring. It allows external observers      to know when the authority managing roles and permissions for a token has been updated.      The `indexed` keyword for `sender` and `manager` allows these addresses to be efficiently      searched for in event logs.",
        "params": {
          "manager": "The new address of the `SMARTTokenAccessManager` contract that will now                oversee access control for the token.",
          "sender": "The address of the account that initiated the change of the access manager.               This is typically an administrator or an account with special privileges."
        }
      }
    },
    "errors": {
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "Error: Account Lacks Required Role.      This error is emitted when an action is attempted by an account (`account`)      that does not possess the necessary authorization role (`neededRole`).      For example, if an account tries to mint new tokens but doesn't have the 'MINTER_ROLE'.",
          "params": {
            "account": "The address of the account that attempted the unauthorized action.",
            "neededRole": "The `bytes32` identifier of the role that the `account` was missing."
          }
        }
      ]
    },
    "title": "Interface for SMART Token Access Management"
  },
  "id": 36
}