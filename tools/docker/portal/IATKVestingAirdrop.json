{
  "abi": [
    {
      "type": "function",
      "name": "batchClaim",
      "inputs": [
        {
          "name": "indices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "totalAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "merkleProofs",
          "type": "bytes32[][]",
          "internalType": "bytes32[][]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchInitializeVesting",
      "inputs": [
        {
          "name": "indices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "totalAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "merkleProofs",
          "type": "bytes32[][]",
          "internalType": "bytes32[][]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claim",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "merkleProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claimPeriodEnd",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "claimTracker",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IATKClaimTracker"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getClaimedAmount",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getInitializationTimestamp",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "token_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "root_",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "owner_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "vestingStrategy_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "initializationDeadline_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeVesting",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "merkleProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isClaimed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isVestingInitialized",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "merkleRoot",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setVestingStrategy",
      "inputs": [
        {
          "name": "newVestingStrategy_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "token",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "vestingStrategy",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IATKVestingStrategy"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawTokens",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "batchClaim(uint256[],uint256[],bytes32[][])": "4be7adee",
    "batchInitializeVesting(uint256[],uint256[],bytes32[][])": "41162b75",
    "claim(uint256,uint256,bytes32[])": "ae0b51df",
    "claimPeriodEnd()": "3da082a0",
    "claimTracker()": "222abc11",
    "getClaimedAmount(uint256)": "429c6e5b",
    "getInitializationTimestamp(uint256)": "52ae2c20",
    "initialize(address,bytes32,address,address,uint256)": "e30e28f4",
    "initializeVesting(uint256,uint256,bytes32[])": "10639fef",
    "isClaimed(uint256,uint256)": "f364c90c",
    "isVestingInitialized(uint256)": "bd3f22b2",
    "merkleRoot()": "2eb4a7ab",
    "setVestingStrategy(address)": "3ecfea49",
    "token()": "fc0c546a",
    "vestingStrategy()": "f567fa9d",
    "withdrawTokens(address)": "49df728c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchInitializeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriodEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTracker\",\"outputs\":[{\"internalType\":\"contract IATKClaimTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInitializationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vestingStrategy_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initializationDeadline_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"initializeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isVestingInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVestingStrategy_\",\"type\":\"address\"}],\"name\":\"setVestingStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStrategy\",\"outputs\":[{\"internalType\":\"contract IATKVestingStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface extends IATKAirdrop and defines a two-phase vesting airdrop process:      1. `initializeVesting` or `batchInitializeVesting`: User proves their allocation and starts the vesting clock.      2. `claim` or `batchClaim`: User claims the vested portion of their tokens at any time after initialization.\",\"kind\":\"dev\",\"methods\":{\"batchClaim(uint256[],uint256[],bytes32[][])\":{\"params\":{\"indices\":\"The indices of the claims in the Merkle tree.\",\"merkleProofs\":\"The Merkle proofs for each index.\",\"totalAmounts\":\"The total amounts allocated for each index.\"}},\"batchInitializeVesting(uint256[],uint256[],bytes32[][])\":{\"params\":{\"indices\":\"The indices of the claims in the Merkle tree.\",\"merkleProofs\":\"The Merkle proof arrays for verification of each index.\",\"totalAmounts\":\"The total amounts allocated for each index.\"}},\"claim(uint256,uint256,bytes32[])\":{\"params\":{\"index\":\"The index of the claim in the Merkle tree.\",\"merkleProof\":\"The Merkle proof array.\",\"totalAmount\":\"The total amount allocated for this index.\"}},\"claimPeriodEnd()\":{\"returns\":{\"_0\":\"The timestamp after which no new vesting can be initialized.\"}},\"claimTracker()\":{\"returns\":{\"_0\":\"The claim tracker contract.\"}},\"getClaimedAmount(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"claimedAmount The amount already claimed for this index.\"}},\"getInitializationTimestamp(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"timestamp The timestamp when vesting was initialized for this index (0 if not initialized).\"}},\"initialize(address,bytes32,address,address,uint256)\":{\"params\":{\"initializationDeadline_\":\"The timestamp after which no new vesting can be initialized.\",\"owner_\":\"The initial owner of the contract.\",\"root_\":\"The Merkle root for verifying claims.\",\"token_\":\"The address of the ERC20 token to be distributed.\",\"vestingStrategy_\":\"The address of the vesting strategy contract for vesting calculations.\"}},\"initializeVesting(uint256,uint256,bytes32[])\":{\"params\":{\"index\":\"The index of the claim in the Merkle tree.\",\"merkleProof\":\"The Merkle proof array for verification.\",\"totalAmount\":\"The total amount allocated for this index.\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"index\":\"The index to check in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"},\"returns\":{\"_0\":\"claimed True if the index has been fully claimed, false otherwise.\"}},\"isVestingInitialized(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"initialized True if vesting has been initialized for this index.\"}},\"merkleRoot()\":{\"returns\":{\"_0\":\"The Merkle root for verifying airdrop claims.\"}},\"setVestingStrategy(address)\":{\"params\":{\"newVestingStrategy_\":\"The address of the new vesting strategy contract.\"}},\"token()\":{\"returns\":{\"_0\":\"The ERC20 token being distributed.\"}},\"vestingStrategy()\":{\"returns\":{\"_0\":\"The vesting strategy contract.\"}},\"withdrawTokens(address)\":{\"params\":{\"to\":\"The address to send the withdrawn tokens to.\"}}},\"title\":\"Interface for a ATK Vesting Airdrop\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchClaim(uint256[],uint256[],bytes32[][])\":{\"notice\":\"Claims multiple airdrop allocations for the caller in a single transaction.\"},\"batchInitializeVesting(uint256[],uint256[],bytes32[][])\":{\"notice\":\"Initializes vesting for multiple allocations in a single transaction.\"},\"claim(uint256,uint256,bytes32[])\":{\"notice\":\"Claims an airdrop allocation for the caller.\"},\"claimPeriodEnd()\":{\"notice\":\"Returns the claim period end timestamp.\"},\"claimTracker()\":{\"notice\":\"Returns the claim tracker contract.\"},\"getClaimedAmount(uint256)\":{\"notice\":\"Gets the amount already claimed for a specific index.\"},\"getInitializationTimestamp(uint256)\":{\"notice\":\"Returns the initialization timestamp for a specific claim index.\"},\"initialize(address,bytes32,address,address,uint256)\":{\"notice\":\"Initializes the vesting airdrop contract with specified parameters.\"},\"initializeVesting(uint256,uint256,bytes32[])\":{\"notice\":\"Initializes vesting for a specific allocation without transferring tokens.\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"Checks if a claim has been fully claimed for a specific index.\"},\"isVestingInitialized(uint256)\":{\"notice\":\"Checks if vesting has been initialized for a specific index.\"},\"merkleRoot()\":{\"notice\":\"Returns the Merkle root for verifying airdrop claims.\"},\"setVestingStrategy(address)\":{\"notice\":\"Updates the vesting strategy contract.\"},\"token()\":{\"notice\":\"Returns the token being distributed in this airdrop.\"},\"vestingStrategy()\":{\"notice\":\"Returns the current vesting strategy contract.\"},\"withdrawTokens(address)\":{\"notice\":\"Allows the owner to withdraw any tokens remaining in the contract.\"}},\"notice\":\"Defines the core functionality for a vesting airdrop contract that uses pluggable claim strategies in the ATK Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/airdrop/vesting-airdrop/IATKVestingAirdrop.sol\":\"IATKVestingAirdrop\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/system/airdrop/IATKAirdrop.sol\":{\"keccak256\":\"0x5693909b573592bc415bc92930d365b8ec1d7ef8eddc0a9e45e3fb3ca07c9eb7\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://fbeaa32c2f1ad5513f01abb8500f05fc86e756180a386f933f502ae8f8457fee\",\"dweb:/ipfs/QmciPuDp6YuJjHuGTJxpi7eBBSL2Ac1aX9p8US7wP7YzA7\"]},\"contracts/system/airdrop/claim-tracker/IATKClaimTracker.sol\":{\"keccak256\":\"0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f\",\"dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne\"]},\"contracts/system/airdrop/vesting-airdrop/IATKVestingAirdrop.sol\":{\"keccak256\":\"0xe4c2debc655501d4e2922df37838d49221cca3b87acba27319c2453886bcf0e7\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://ad93b784a93c5ce2b93671695acc0f0712e5280d9c9b07f2245ee0d77ca47cf0\",\"dweb:/ipfs/QmVuN3oKAnkk6BcGnQZag3ec4CkGZ7MN21CkY9FcH69PJ6\"]},\"contracts/system/airdrop/vesting-airdrop/IATKVestingStrategy.sol\":{\"keccak256\":\"0x4b407d87d884f6e3f8d005f6b5f31760168dd0d7e73b4794b817f64215a33153\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://27e95586b6131529d539130c90d51fa3c625f5d047451780f2c9f551737bdc84\",\"dweb:/ipfs/QmUa7u4dMP99YoWPpepXWQvGUhUNZKzYcNG44XZV8RZm6R\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "totalAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "merkleProofs",
              "type": "bytes32[][]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchClaim"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "totalAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "merkleProofs",
              "type": "bytes32[][]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchInitializeVesting"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimPeriodEnd",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimTracker",
          "outputs": [
            {
              "internalType": "contract IATKClaimTracker",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getClaimedAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getInitializationTimestamp",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token_",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "root_",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vestingStrategy_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "initializationDeadline_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initializeVesting"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isVestingInitialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "merkleRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newVestingStrategy_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setVestingStrategy"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "vestingStrategy",
          "outputs": [
            {
              "internalType": "contract IATKVestingStrategy",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTokens"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchClaim(uint256[],uint256[],bytes32[][])": {
            "params": {
              "indices": "The indices of the claims in the Merkle tree.",
              "merkleProofs": "The Merkle proofs for each index.",
              "totalAmounts": "The total amounts allocated for each index."
            }
          },
          "batchInitializeVesting(uint256[],uint256[],bytes32[][])": {
            "params": {
              "indices": "The indices of the claims in the Merkle tree.",
              "merkleProofs": "The Merkle proof arrays for verification of each index.",
              "totalAmounts": "The total amounts allocated for each index."
            }
          },
          "claim(uint256,uint256,bytes32[])": {
            "params": {
              "index": "The index of the claim in the Merkle tree.",
              "merkleProof": "The Merkle proof array.",
              "totalAmount": "The total amount allocated for this index."
            }
          },
          "claimPeriodEnd()": {
            "returns": {
              "_0": "The timestamp after which no new vesting can be initialized."
            }
          },
          "claimTracker()": {
            "returns": {
              "_0": "The claim tracker contract."
            }
          },
          "getClaimedAmount(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "claimedAmount The amount already claimed for this index."
            }
          },
          "getInitializationTimestamp(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "timestamp The timestamp when vesting was initialized for this index (0 if not initialized)."
            }
          },
          "initialize(address,bytes32,address,address,uint256)": {
            "params": {
              "initializationDeadline_": "The timestamp after which no new vesting can be initialized.",
              "owner_": "The initial owner of the contract.",
              "root_": "The Merkle root for verifying claims.",
              "token_": "The address of the ERC20 token to be distributed.",
              "vestingStrategy_": "The address of the vesting strategy contract for vesting calculations."
            }
          },
          "initializeVesting(uint256,uint256,bytes32[])": {
            "params": {
              "index": "The index of the claim in the Merkle tree.",
              "merkleProof": "The Merkle proof array for verification.",
              "totalAmount": "The total amount allocated for this index."
            }
          },
          "isClaimed(uint256,uint256)": {
            "params": {
              "index": "The index to check in the Merkle tree.",
              "totalAmount": "The total amount allocated for this index."
            },
            "returns": {
              "_0": "claimed True if the index has been fully claimed, false otherwise."
            }
          },
          "isVestingInitialized(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "initialized True if vesting has been initialized for this index."
            }
          },
          "merkleRoot()": {
            "returns": {
              "_0": "The Merkle root for verifying airdrop claims."
            }
          },
          "setVestingStrategy(address)": {
            "params": {
              "newVestingStrategy_": "The address of the new vesting strategy contract."
            }
          },
          "token()": {
            "returns": {
              "_0": "The ERC20 token being distributed."
            }
          },
          "vestingStrategy()": {
            "returns": {
              "_0": "The vesting strategy contract."
            }
          },
          "withdrawTokens(address)": {
            "params": {
              "to": "The address to send the withdrawn tokens to."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchClaim(uint256[],uint256[],bytes32[][])": {
            "notice": "Claims multiple airdrop allocations for the caller in a single transaction."
          },
          "batchInitializeVesting(uint256[],uint256[],bytes32[][])": {
            "notice": "Initializes vesting for multiple allocations in a single transaction."
          },
          "claim(uint256,uint256,bytes32[])": {
            "notice": "Claims an airdrop allocation for the caller."
          },
          "claimPeriodEnd()": {
            "notice": "Returns the claim period end timestamp."
          },
          "claimTracker()": {
            "notice": "Returns the claim tracker contract."
          },
          "getClaimedAmount(uint256)": {
            "notice": "Gets the amount already claimed for a specific index."
          },
          "getInitializationTimestamp(uint256)": {
            "notice": "Returns the initialization timestamp for a specific claim index."
          },
          "initialize(address,bytes32,address,address,uint256)": {
            "notice": "Initializes the vesting airdrop contract with specified parameters."
          },
          "initializeVesting(uint256,uint256,bytes32[])": {
            "notice": "Initializes vesting for a specific allocation without transferring tokens."
          },
          "isClaimed(uint256,uint256)": {
            "notice": "Checks if a claim has been fully claimed for a specific index."
          },
          "isVestingInitialized(uint256)": {
            "notice": "Checks if vesting has been initialized for a specific index."
          },
          "merkleRoot()": {
            "notice": "Returns the Merkle root for verifying airdrop claims."
          },
          "setVestingStrategy(address)": {
            "notice": "Updates the vesting strategy contract."
          },
          "token()": {
            "notice": "Returns the token being distributed in this airdrop."
          },
          "vestingStrategy()": {
            "notice": "Returns the current vesting strategy contract."
          },
          "withdrawTokens(address)": {
            "notice": "Allows the owner to withdraw any tokens remaining in the contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/airdrop/vesting-airdrop/IATKVestingAirdrop.sol": "IATKVestingAirdrop"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/system/airdrop/IATKAirdrop.sol": {
        "keccak256": "0x5693909b573592bc415bc92930d365b8ec1d7ef8eddc0a9e45e3fb3ca07c9eb7",
        "urls": [
          "bzz-raw://fbeaa32c2f1ad5513f01abb8500f05fc86e756180a386f933f502ae8f8457fee",
          "dweb:/ipfs/QmciPuDp6YuJjHuGTJxpi7eBBSL2Ac1aX9p8US7wP7YzA7"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/airdrop/claim-tracker/IATKClaimTracker.sol": {
        "keccak256": "0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be",
        "urls": [
          "bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f",
          "dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/airdrop/vesting-airdrop/IATKVestingAirdrop.sol": {
        "keccak256": "0xe4c2debc655501d4e2922df37838d49221cca3b87acba27319c2453886bcf0e7",
        "urls": [
          "bzz-raw://ad93b784a93c5ce2b93671695acc0f0712e5280d9c9b07f2245ee0d77ca47cf0",
          "dweb:/ipfs/QmVuN3oKAnkk6BcGnQZag3ec4CkGZ7MN21CkY9FcH69PJ6"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/airdrop/vesting-airdrop/IATKVestingStrategy.sol": {
        "keccak256": "0x4b407d87d884f6e3f8d005f6b5f31760168dd0d7e73b4794b817f64215a33153",
        "urls": [
          "bzz-raw://27e95586b6131529d539130c90d51fa3c625f5d047451780f2c9f551737bdc84",
          "dweb:/ipfs/QmUa7u4dMP99YoWPpepXWQvGUhUNZKzYcNG44XZV8RZm6R"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "batchClaim(uint256[],uint256[],bytes32[][])": {
        "notice": "Claims multiple airdrop allocations for the caller in a single transaction."
      },
      "batchInitializeVesting(uint256[],uint256[],bytes32[][])": {
        "notice": "Initializes vesting for multiple allocations in a single transaction."
      },
      "claim(uint256,uint256,bytes32[])": {
        "notice": "Claims an airdrop allocation for the caller."
      },
      "claimPeriodEnd()": {
        "notice": "Returns the claim period end timestamp."
      },
      "claimTracker()": {
        "notice": "Returns the claim tracker contract."
      },
      "getClaimedAmount(uint256)": {
        "notice": "Gets the amount already claimed for a specific index."
      },
      "getInitializationTimestamp(uint256)": {
        "notice": "Returns the initialization timestamp for a specific claim index."
      },
      "initialize(address,bytes32,address,address,uint256)": {
        "notice": "Initializes the vesting airdrop contract with specified parameters."
      },
      "initializeVesting(uint256,uint256,bytes32[])": {
        "notice": "Initializes vesting for a specific allocation without transferring tokens."
      },
      "isClaimed(uint256,uint256)": {
        "notice": "Checks if a claim has been fully claimed for a specific index."
      },
      "isVestingInitialized(uint256)": {
        "notice": "Checks if vesting has been initialized for a specific index."
      },
      "merkleRoot()": {
        "notice": "Returns the Merkle root for verifying airdrop claims."
      },
      "setVestingStrategy(address)": {
        "notice": "Updates the vesting strategy contract."
      },
      "token()": {
        "notice": "Returns the token being distributed in this airdrop."
      },
      "vestingStrategy()": {
        "notice": "Returns the current vesting strategy contract."
      },
      "withdrawTokens(address)": {
        "notice": "Allows the owner to withdraw any tokens remaining in the contract."
      }
    },
    "notice": "Defines the core functionality for a vesting airdrop contract that uses pluggable claim strategies in the ATK Protocol."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "This interface extends IATKAirdrop and defines a two-phase vesting airdrop process:      1. `initializeVesting` or `batchInitializeVesting`: User proves their allocation and starts the vesting clock.      2. `claim` or `batchClaim`: User claims the vested portion of their tokens at any time after initialization.",
    "methods": {
      "batchClaim(uint256[],uint256[],bytes32[][])": {
        "params": {
          "indices": "The indices of the claims in the Merkle tree.",
          "merkleProofs": "The Merkle proofs for each index.",
          "totalAmounts": "The total amounts allocated for each index."
        }
      },
      "batchInitializeVesting(uint256[],uint256[],bytes32[][])": {
        "params": {
          "indices": "The indices of the claims in the Merkle tree.",
          "merkleProofs": "The Merkle proof arrays for verification of each index.",
          "totalAmounts": "The total amounts allocated for each index."
        }
      },
      "claim(uint256,uint256,bytes32[])": {
        "params": {
          "index": "The index of the claim in the Merkle tree.",
          "merkleProof": "The Merkle proof array.",
          "totalAmount": "The total amount allocated for this index."
        }
      },
      "claimPeriodEnd()": {
        "returns": {
          "_0": "The timestamp after which no new vesting can be initialized."
        }
      },
      "claimTracker()": {
        "returns": {
          "_0": "The claim tracker contract."
        }
      },
      "getClaimedAmount(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "claimedAmount The amount already claimed for this index."
        }
      },
      "getInitializationTimestamp(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "timestamp The timestamp when vesting was initialized for this index (0 if not initialized)."
        }
      },
      "initialize(address,bytes32,address,address,uint256)": {
        "params": {
          "initializationDeadline_": "The timestamp after which no new vesting can be initialized.",
          "owner_": "The initial owner of the contract.",
          "root_": "The Merkle root for verifying claims.",
          "token_": "The address of the ERC20 token to be distributed.",
          "vestingStrategy_": "The address of the vesting strategy contract for vesting calculations."
        }
      },
      "initializeVesting(uint256,uint256,bytes32[])": {
        "params": {
          "index": "The index of the claim in the Merkle tree.",
          "merkleProof": "The Merkle proof array for verification.",
          "totalAmount": "The total amount allocated for this index."
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "index": "The index to check in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        },
        "returns": {
          "_0": "claimed True if the index has been fully claimed, false otherwise."
        }
      },
      "isVestingInitialized(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "initialized True if vesting has been initialized for this index."
        }
      },
      "merkleRoot()": {
        "returns": {
          "_0": "The Merkle root for verifying airdrop claims."
        }
      },
      "setVestingStrategy(address)": {
        "params": {
          "newVestingStrategy_": "The address of the new vesting strategy contract."
        }
      },
      "token()": {
        "returns": {
          "_0": "The ERC20 token being distributed."
        }
      },
      "vestingStrategy()": {
        "returns": {
          "_0": "The vesting strategy contract."
        }
      },
      "withdrawTokens(address)": {
        "params": {
          "to": "The address to send the withdrawn tokens to."
        }
      }
    },
    "title": "Interface for a ATK Vesting Airdrop"
  },
  "id": 128
}