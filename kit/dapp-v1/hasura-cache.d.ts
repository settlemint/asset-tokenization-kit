/* eslint-disable */
/* prettier-ignore */
import type { TadaDocumentNode, $tada } from 'gql.tada';

declare module 'gql.tada' {
 interface setupCache {
    "\n  query RegulationDetail($assetId: String!, $regulationType: String!) {\n    regulation_configs(\n      where: {\n        asset_id: { _eq: $assetId },\n        regulation_type: { _eq: $regulationType }\n      },\n      limit: 1\n    ) {\n      id\n      asset_id\n      regulation_type\n      status\n      created_at\n      updated_at\n    }\n  }\n":
      TadaDocumentNode<{ regulation_configs: { id: string; asset_id: string; regulation_type: string; status: string; created_at: unknown; updated_at: unknown; }[]; }, { regulationType: string; assetId: string; }, void>;
    "\n  mutation AddAssetPrice($assetId: String!, $amount: numeric, $currency: currency) {\n    insert_asset_price_one(object: {asset_id: $assetId, amount: $amount, currency: $currency}) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ insert_asset_price_one: { id: string; } | null; }, { currency?: unknown; amount?: string | null | undefined; assetId: string; }, void>;
    "\n  mutation CreateOffchainBond($id: String!, $isin: String, $internalid: String) {\n    insert_asset_one(object: {id: $id, isin: $isin, internalid: $internalid}, on_conflict: {constraint: asset_pkey, update_columns: [isin, internalid]}) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ insert_asset_one: { id: string; } | null; }, { internalid?: string | null | undefined; isin?: string | null | undefined; id: string; }, void>;
    "\n  mutation CreateOffchainCryptoCurrency($id: String!, $isin: String, $internalid: String) {\n    insert_asset_one(object: {id: $id, isin: $isin, internalid: $internalid}, on_conflict: {constraint: asset_pkey, update_columns: [isin, internalid]}) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ insert_asset_one: { id: string; } | null; }, { internalid?: string | null | undefined; isin?: string | null | undefined; id: string; }, void>;
    "\n  mutation CreateOffchainDeposit($id: String!, $isin: String, $internalid: String) {\n    insert_asset_one(object: {id: $id, isin: $isin, internalid: $internalid}, on_conflict: {constraint: asset_pkey, update_columns: [isin, internalid]}) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ insert_asset_one: { id: string; } | null; }, { internalid?: string | null | undefined; isin?: string | null | undefined; id: string; }, void>;
    "\n    mutation CreateOffchainEquity($id: String!, $isin: String, $internalid: String) {\n      insert_asset_one(object: {id: $id, isin: $isin, internalid: $internalid}, on_conflict: {constraint: asset_pkey, update_columns: [isin, internalid]}) {\n        id\n      }\n  }\n":
      TadaDocumentNode<{ insert_asset_one: { id: string; } | null; }, { internalid?: string | null | undefined; isin?: string | null | undefined; id: string; }, void>;
    "\n  mutation CreateOffchainFund($id: String!, $isin: String, $internalid: String) {\n    insert_asset_one(object: {id: $id, isin: $isin, internalid: $internalid}, on_conflict: {constraint: asset_pkey, update_columns: [isin, internalid]}) {\n      id\n      isin\n    }\n  }\n":
      TadaDocumentNode<{ insert_asset_one: { id: string; isin: string | null; } | null; }, { internalid?: string | null | undefined; isin?: string | null | undefined; id: string; }, void>;
    "\n    mutation CreateOffchainStablecoin($id: String!, $isin: String, $internalid: String) {\n      insert_asset_one(\n        object: {id: $id, isin: $isin, internalid: $internalid},\n        on_conflict: {\n          constraint: asset_pkey,\n          update_columns: [isin, internalid]\n        }\n      ) {\n        id\n      }\n  }\n":
      TadaDocumentNode<{ insert_asset_one: { id: string; } | null; }, { internalid?: string | null | undefined; isin?: string | null | undefined; id: string; }, void>;
    "\n  fragment OffchainAssetFragment on asset {\n    id\n    isin\n  }\n":
      TadaDocumentNode<{ id: string; isin: string | null; }, {}, { fragment: "OffchainAssetFragment"; on: "asset"; masked: false; }>;
    "\n  mutation AddAirdropDistribution($objects: [airdrop_distribution_insert_input!]!) {\n    insert_airdrop_distribution(\n      objects: $objects\n      on_conflict: {\n        constraint: airdrop_distribution_unique_constraint\n        update_columns: [amount, index]\n      }\n    ) {\n      affected_rows\n      returning {\n        id\n        airdrop_id\n        recipient\n        amount\n        index\n      }\n    }\n  }\n":
      TadaDocumentNode<{ insert_airdrop_distribution: { affected_rows: number; returning: { id: string; airdrop_id: string; recipient: string; amount: string; index: number; }[]; } | null; }, { objects: { recipient?: string | null | undefined; index?: number | null | undefined; id?: string | null | undefined; claimed?: unknown; amount?: string | null | undefined; airdrop_id?: string | null | undefined; }[]; }, void>;
    "\n  fragment OffchainBondFragment on asset {\n    id\n    isin\n  }\n":
      TadaDocumentNode<{ id: string; isin: string | null; }, {}, { fragment: "OffchainBondFragment"; on: "asset"; masked: false; }>;
    "\n  query OffchainBondDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainBondFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; isin: string | null; }[]; }, { id: string; }, void>;
    "\n  fragment OffchainCryptoCurrencyFragment on asset {\n    id\n    isin\n  }\n":
      TadaDocumentNode<{ id: string; isin: string | null; }, {}, { fragment: "OffchainCryptoCurrencyFragment"; on: "asset"; masked: false; }>;
    "\n  query OffchainCryptoCurrencyDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainCryptoCurrencyFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; isin: string | null; }[]; }, { id: string; }, void>;
    "\n  fragment OffchainDepositFragment on asset {\n    id\n    isin\n  }\n":
      TadaDocumentNode<{ id: string; isin: string | null; }, {}, { fragment: "OffchainDepositFragment"; on: "asset"; masked: false; }>;
    "\n  query OffchainDepositDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainDepositFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; isin: string | null; }[]; }, { id: string; }, void>;
    "\n  fragment OffchainEquityFragment on asset {\n    id\n    isin\n  }\n":
      TadaDocumentNode<{ id: string; isin: string | null; }, {}, { fragment: "OffchainEquityFragment"; on: "asset"; masked: false; }>;
    "\n  query OffchainEquityDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainEquityFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; isin: string | null; }[]; }, { id: string; }, void>;
    "\n  fragment OffchainFundFragment on asset {\n    id\n    isin\n  }\n":
      TadaDocumentNode<{ id: string; isin: string | null; }, {}, { fragment: "OffchainFundFragment"; on: "asset"; masked: false; }>;
    "\n  query OffchainFundDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainFundFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; isin: string | null; }[]; }, { id: string; }, void>;
    "\n  fragment OffchainStableCoinFragment on asset {\n    id\n  }\n":
      TadaDocumentNode<{ id: string; }, {}, { fragment: "OffchainStableCoinFragment"; on: "asset"; masked: false; }>;
    "\n  query OffchainStableCoinDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainStableCoinFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; }[]; }, { id: string; }, void>;
    "\n  fragment ContactFragment on contact {\n    id\n    wallet\n    name\n  }\n":
      TadaDocumentNode<{ id: string; wallet: string; name: string; }, {}, { fragment: "ContactFragment"; on: "contact"; masked: false; }>;
    "\n  mutation AddContact($address: String!, $name: String!, $id: String!, $userId: String!) {\n    insert_contact_one(\n      object: {\n        id: $id,\n        wallet: $address,\n        name: $name,\n        user_id: $userId,\n      }\n    ) {\n      ...ContactFragment\n    }\n  }\n":
      TadaDocumentNode<{ insert_contact_one: { id: string; wallet: string; name: string; } | null; }, { userId: string; id: string; name: string; address: string; }, void>;
    "\n  query GetSetting($_eq: String = \"\") {\n    settings(where: {key: {_eq: $_eq}}) {\n      key\n      value\n    }\n  }\n":
      TadaDocumentNode<{ settings: { key: string; value: string; }[]; }, { _eq?: string | null | undefined; }, void>;
    "\n  query OffchainAssetDetail($id: String!) {\n    asset(where: {id: {_eq: $id}}, limit: 1) {\n      ...OffchainAssetFragment\n    }\n  }\n":
      TadaDocumentNode<{ asset: { id: string; isin: string | null; }[]; }, { id: string; }, void>;
    "\n  fragment AssetPriceFragment on asset_price {\n    id\n    amount\n    currency\n    asset_id\n  }\n":
      TadaDocumentNode<{ id: string; amount: string | null; currency: unknown; asset_id: string; }, {}, { fragment: "AssetPriceFragment"; on: "asset_price"; masked: false; }>;
    "\n  query OffchainBondList($limit: Int, $offset: Int) {\n    asset_aggregate(limit: $limit, offset: $offset) {\n      nodes {\n        ...OffchainBondFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ asset_aggregate: { nodes: { id: string; isin: string | null; }[]; }; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query OffchainCryptocurrencyList($limit: Int, $offset: Int) {\n    asset_aggregate(limit: $limit, offset: $offset) {\n      nodes {\n        ...OffchainCryptoCurrencyFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ asset_aggregate: { nodes: { id: string; isin: string | null; }[]; }; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query OffchainDepositList($limit: Int, $offset: Int) {\n    asset_aggregate(limit: $limit, offset: $offset) {\n      nodes {\n        ...OffchainDepositFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ asset_aggregate: { nodes: { id: string; isin: string | null; }[]; }; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query OffchainEquityList($limit: Int, $offset: Int) {\n    asset_aggregate(limit: $limit, offset: $offset) {\n      nodes {\n        ...OffchainEquityFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ asset_aggregate: { nodes: { id: string; isin: string | null; }[]; }; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query OffchainFundList($limit: Int, $offset: Int) {\n    asset_aggregate(limit: $limit, offset: $offset) {\n      nodes {\n        ...OffchainFundFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ asset_aggregate: { nodes: { id: string; isin: string | null; }[]; }; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query RegulationEnabled($assetId: String!, $regulationType: String!) {\n    regulation_configs(\n      where: {\n        asset_id: { _eq: $assetId },\n        regulation_type: { _eq: $regulationType }\n      },\n      limit: 1\n    ) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ regulation_configs: { id: string; }[]; }, { regulationType: string; assetId: string; }, void>;
    "\n  query RegulationList($assetId: String!) {\n    regulation_configs(\n      where: { asset_id: { _eq: $assetId } }\n    ) {\n      id\n      regulation_type\n      status\n      created_at\n      updated_at\n    }\n  }\n":
      TadaDocumentNode<{ regulation_configs: { id: string; regulation_type: string; status: string; created_at: unknown; updated_at: unknown; }[]; }, { assetId: string; }, void>;
    "\n  query OffchainStableCoinList($limit: Int, $offset: Int) {\n    asset_aggregate(limit: $limit, offset: $offset) {\n      nodes {\n        ...OffchainStableCoinFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ asset_aggregate: { nodes: { id: string; }[]; }; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  fragment UserFragment on user {\n    id\n    name\n    email\n    wallet\n    createdAt: created_at\n    updatedAt: updated_at\n    kycVerifiedAt: kyc_verified_at\n    role\n    banned\n    banReason: ban_reason\n    banExpires: ban_expires\n    lastLoginAt: last_login_at\n    image\n    currency\n  }\n":
      TadaDocumentNode<{ id: string; name: string; email: string; wallet: string | null; createdAt: unknown; updatedAt: unknown; kycVerifiedAt: unknown; role: string | null; banned: boolean | null; banReason: string | null; banExpires: unknown; lastLoginAt: unknown; image: string | null; currency: string; }, {}, { fragment: "UserFragment"; on: "user"; masked: false; }>;
    "\n  fragment RecentUsersCountFragment on user_aggregate_fields {\n      count\n  }\n":
      TadaDocumentNode<{ count: number; }, {}, { fragment: "RecentUsersCountFragment"; on: "user_aggregate_fields"; masked: false; }>;
    "\n  query UserCount($date: timestamptz!) {\n    recentUsers: user_aggregate(where: { created_at: { _gte: $date } }) {\n      aggregate {\n        ...RecentUsersCountFragment\n      }\n    }\n    totalUsers: user_aggregate {\n      aggregate {\n        ...RecentUsersCountFragment\n      }\n    }\n    user(order_by: { created_at: asc }) {\n      ...UserFragment\n    }\n  }\n":
      TadaDocumentNode<{ recentUsers: { aggregate: { count: number; } | null; }; totalUsers: { aggregate: { count: number; } | null; }; user: { id: string; name: string; email: string; wallet: string | null; createdAt: unknown; updatedAt: unknown; kycVerifiedAt: unknown; role: string | null; banned: boolean | null; banReason: string | null; banExpires: unknown; lastLoginAt: unknown; image: string | null; currency: string; }[]; }, { date: unknown; }, void>;
    "\n  query BannedUsersCount {\n    bannedUsers: user_aggregate(where: { banned: { _eq: true } }) {\n      aggregate {\n        ...RecentUsersCountFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ bannedUsers: { aggregate: { count: number; } | null; }; }, {}, void>;
    "\n  query UserDetail($id: String!) {\n    user_by_pk(id: $id) {\n      ...UserFragment\n    }\n  }\n":
      TadaDocumentNode<{ user_by_pk: { id: string; name: string; email: string; wallet: string | null; createdAt: unknown; updatedAt: unknown; kycVerifiedAt: unknown; role: string | null; banned: boolean | null; banReason: string | null; banExpires: unknown; lastLoginAt: unknown; image: string | null; currency: string; } | null; }, { id: string; }, void>;
    "\n  query UserDetailByWallet($address: String!) {\n    user(limit: 1, where: {wallet: {_ilike: $address}}) {\n      ...UserFragment\n    }\n  }\n":
      TadaDocumentNode<{ user: { id: string; name: string; email: string; wallet: string | null; createdAt: unknown; updatedAt: unknown; kycVerifiedAt: unknown; role: string | null; banned: boolean | null; banReason: string | null; banExpires: unknown; lastLoginAt: unknown; image: string | null; currency: string; }[]; }, { address: string; }, void>;
    "\n  query UserList($limit: Int, $offset: Int) {\n    user(order_by: { created_at: desc }, limit: $limit, offset: $offset) {\n      ...UserFragment\n    }\n  }\n":
      TadaDocumentNode<{ user: { id: string; name: string; email: string; wallet: string | null; createdAt: unknown; updatedAt: unknown; kycVerifiedAt: unknown; role: string | null; banned: boolean | null; banReason: string | null; banExpires: unknown; lastLoginAt: unknown; image: string | null; currency: string; }[]; }, { offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query ContactList($limit: Int, $offset: Int, $where: contact_bool_exp!) {\n    contact(\n      where: $where,\n      order_by: {created_at: desc},\n      limit: $limit,\n      offset: $offset\n    ) {\n      ...ContactFragment\n    }\n  }\n":
      TadaDocumentNode<{ contact: { id: string; wallet: string; name: string; }[]; }, { where: { wallet?: { _similar?: string | null | undefined; _regex?: string | null | undefined; _nsimilar?: string | null | undefined; _nregex?: string | null | undefined; _nlike?: string | null | undefined; _niregex?: string | null | undefined; _nin?: string[] | null | undefined; _nilike?: string | null | undefined; _neq?: string | null | undefined; _lte?: string | null | undefined; _lt?: string | null | undefined; _like?: string | null | undefined; _is_null?: boolean | null | undefined; _iregex?: string | null | undefined; _in?: string[] | null | undefined; _ilike?: string | null | undefined; _gte?: string | null | undefined; _gt?: string | null | undefined; _eq?: string | null | undefined; } | null | undefined; user_id?: { _similar?: string | null | undefined; _regex?: string | null | undefined; _nsimilar?: string | null | undefined; _nregex?: string | null | undefined; _nlike?: string | null | undefined; _niregex?: string | null | undefined; _nin?: string[] | null | undefined; _nilike?: string | null | undefined; _neq?: string | null | undefined; _lte?: string | null | undefined; _lt?: string | null | undefined; _like?: string | null | undefined; _is_null?: boolean | null | undefined; _iregex?: string | null | undefined; _in?: string[] | null | undefined; _ilike?: string | null | undefined; _gte?: string | null | undefined; _gt?: string | null | undefined; _eq?: string | null | undefined; } | null | undefined; updated_at?: { _nin?: unknown[] | null | undefined; _neq?: unknown; _lte?: unknown; _lt?: unknown; _is_null?: boolean | null | undefined; _in?: unknown[] | null | undefined; _gte?: unknown; _gt?: unknown; _eq?: unknown; } | null | undefined; name?: { _similar?: string | null | undefined; _regex?: string | null | undefined; _nsimilar?: string | null | undefined; _nregex?: string | null | undefined; _nlike?: string | null | undefined; _niregex?: string | null | undefined; _nin?: string[] | null | undefined; _nilike?: string | null | undefined; _neq?: string | null | undefined; _lte?: string | null | undefined; _lt?: string | null | undefined; _like?: string | null | undefined; _is_null?: boolean | null | undefined; _iregex?: string | null | undefined; _in?: string[] | null | undefined; _ilike?: string | null | undefined; _gte?: string | null | undefined; _gt?: string | null | undefined; _eq?: string | null | undefined; } | null | undefined; id?: { _similar?: string | null | undefined; _regex?: string | null | undefined; _nsimilar?: string | null | undefined; _nregex?: string | null | undefined; _nlike?: string | null | undefined; _niregex?: string | null | undefined; _nin?: string[] | null | undefined; _nilike?: string | null | undefined; _neq?: string | null | undefined; _lte?: string | null | undefined; _lt?: string | null | undefined; _like?: string | null | undefined; _is_null?: boolean | null | undefined; _iregex?: string | null | undefined; _in?: string[] | null | undefined; _ilike?: string | null | undefined; _gte?: string | null | undefined; _gt?: string | null | undefined; _eq?: string | null | undefined; } | null | undefined; created_at?: { _nin?: unknown[] | null | undefined; _neq?: unknown; _lte?: unknown; _lt?: unknown; _is_null?: boolean | null | undefined; _in?: unknown[] | null | undefined; _gte?: unknown; _gt?: unknown; _eq?: unknown; } | null | undefined; _or?: any[] | null | undefined; _not?: any | null | undefined; _and?: any[] | null | undefined; }; offset?: number | null | undefined; limit?: number | null | undefined; }, void>;
    "\n  query UserSearch($address: String!) {\n    user(\n      where: {\n        _or: [\n          { name: { _ilike: $address } },\n          { wallet: { _ilike: $address } },\n          { email: { _like: $address } }\n        ]\n      },\n      limit: 10\n    ) {\n      ...UserFragment\n    }\n  }\n":
      TadaDocumentNode<{ user: { id: string; name: string; email: string; wallet: string | null; createdAt: unknown; updatedAt: unknown; kycVerifiedAt: unknown; role: string | null; banned: boolean | null; banReason: string | null; banExpires: unknown; lastLoginAt: unknown; image: string | null; currency: string; }[]; }, { address: string; }, void>;
    "\n  query ContactDetail($id: String!) {\n    contact_by_pk(id: $id) {\n      ...ContactFragment\n    }\n  }\n":
      TadaDocumentNode<{ contact_by_pk: { id: string; wallet: string; name: string; } | null; }, { id: string; }, void>;
  }
}
