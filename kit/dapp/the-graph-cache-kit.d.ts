/* eslint-disable */
/* prettier-ignore */
import type { TadaDocumentNode, $tada } from 'gql.tada';

declare module 'gql.tada' {
 interface setupCache {
    "\n  fragment AccessControlFragment on AccessControl {\n    admin { id }\n    registrar { id }\n    claimManager { id }\n    identityIssuer { id }\n    tokenIdentityIssuer { id }\n    tokenIdentityIssuerAdmin { id }\n    deployer { id }\n    storageModifier { id }\n    manageRegistries { id }\n    tokenGovernance { id }\n    supplyManagement { id }\n    custodian { id }\n    emergency { id }\n    implementationManager { id }\n    bypassListManager { id }\n  }\n":
      TadaDocumentNode<{ admin: { id: string; }[]; registrar: { id: string; }[]; claimManager: { id: string; }[]; identityIssuer: { id: string; }[]; tokenIdentityIssuer: { id: string; }[]; tokenIdentityIssuerAdmin: { id: string; }[]; deployer: { id: string; }[]; storageModifier: { id: string; }[]; manageRegistries: { id: string; }[]; tokenGovernance: { id: string; }[]; supplyManagement: { id: string; }[]; custodian: { id: string; }[]; emergency: { id: string; }[]; implementationManager: { id: string; }[]; bypassListManager: { id: string; }[]; }, {}, { fragment: "AccessControlFragment"; on: "AccessControl"; masked: false; }>;
    "\n        query GetIndexingStatus {\n          _meta {\n            block {\n              number\n            }\n          }\n        }\n      ":
      TadaDocumentNode<{ _meta: { block: { number: number; }; } | null; }, {}, void>;
    "\n  query GetTokenFactories($systemAddress: ID!) {\n    system(id: $systemAddress) {\n      tokenFactoryRegistry {\n        tokenFactories {\n          id\n          name\n          accessControl {\n            ...AccessControlFragment\n          }\n        }\n      }\n    }\n  }\n":
      TadaDocumentNode<{ system: { tokenFactoryRegistry: { tokenFactories: { id: string; name: string; accessControl: { admin: { id: string; }[]; registrar: { id: string; }[]; claimManager: { id: string; }[]; identityIssuer: { id: string; }[]; tokenIdentityIssuer: { id: string; }[]; tokenIdentityIssuerAdmin: { id: string; }[]; deployer: { id: string; }[]; storageModifier: { id: string; }[]; manageRegistries: { id: string; }[]; tokenGovernance: { id: string; }[]; supplyManagement: { id: string; }[]; custodian: { id: string; }[]; emergency: { id: string; }[]; implementationManager: { id: string; }[]; bypassListManager: { id: string; }[]; }; }[]; } | null; } | null; }, { systemAddress: string; }, void>;
    "\n  query ReadTokenQuery($id: ID!) {\n    token(id: $id) {\n      id\n      name\n      symbol\n      decimals\n      requiredClaimTopics {\n        name\n      }\n      accessControl {\n        ...AccessControlFragment\n      }\n    }\n  }\n  ":
      TadaDocumentNode<{ token: { id: string; name: string; symbol: string; decimals: number; requiredClaimTopics: { name: string; }[]; accessControl: { admin: { id: string; }[]; registrar: { id: string; }[]; claimManager: { id: string; }[]; identityIssuer: { id: string; }[]; tokenIdentityIssuer: { id: string; }[]; tokenIdentityIssuerAdmin: { id: string; }[]; deployer: { id: string; }[]; storageModifier: { id: string; }[]; manageRegistries: { id: string; }[]; tokenGovernance: { id: string; }[]; supplyManagement: { id: string; }[]; custodian: { id: string; }[]; emergency: { id: string; }[]; implementationManager: { id: string; }[]; bypassListManager: { id: string; }[]; } | null; } | null; }, { id: string; }, void>;
    "\nquery ReadAccountQuery($walletAddress: ID!) {\n  account(id: $walletAddress) {\n    id\n  }\n}\n":
      TadaDocumentNode<{ account: { id: string; } | null; }, { walletAddress: string; }, void>;
    "\n  query ListTokenQuery($skip: Int!, $orderDirection: OrderDirection = asc, $first: Int = 20) {\n    tokens(\n        first: $first\n        orderDirection: $orderDirection\n        skip: $skip\n      ) {\n        id\n        name\n        symbol\n        decimals\n      }\n    }\n  ":
      TadaDocumentNode<{ tokens: { id: string; name: string; symbol: string; decimals: number; }[]; }, { first?: number | null | undefined; orderDirection?: "asc" | "desc" | null | undefined; skip: number; }, void>;
    "\n  query ReadAccountQuery($id: ID!) {\n    account(id: $id) {\n      id\n      identity {\n        claims {\n          name\n        }\n      }\n    }\n  }\n  ":
      TadaDocumentNode<{ account: { id: string; identity: { claims: { name: string; }[]; } | null; } | null; }, { id: string; }, void>;
    "\n  query findSystemForTransaction($deployedInTransaction: Bytes) {\n    systems(where: {deployedInTransaction: $deployedInTransaction}) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ systems: { id: string; }[]; }, { deployedInTransaction?: string | null | undefined; }, void>;
    "\n  query ListSystemQuery($skip: Int!, $orderDirection: OrderDirection = asc, $first: Int = 20) {\n    systems(\n        first: $first\n        orderDirection: $orderDirection\n        skip: $skip\n      ) {\n      id\n    }\n  }\n":
      TadaDocumentNode<{ systems: { id: string; }[]; }, { first?: number | null | undefined; orderDirection?: "asc" | "desc" | null | undefined; skip: number; }, void>;
    "\n  query SystemDetails($id: ID!) {\n    system(id: $id) {\n      id\n      tokenFactoryRegistry {\n        id\n        tokenFactories {\n          id\n          name\n          typeId\n        }\n      }\n    }\n  }\n":
      TadaDocumentNode<{ system: { id: string; tokenFactoryRegistry: { id: string; tokenFactories: { id: string; name: string; typeId: string; }[]; } | null; } | null; }, { id: string; }, void>;
  }
}
