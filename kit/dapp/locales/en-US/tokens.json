{
  "actions": {
    "addCompliance": {
      "description": "Add a new compliance module to enforce additional rules.",
      "label": "Add Compliance Module",
      "messages": {
        "error": "An error occurred while adding module",
        "failed": "Failed to add compliance module",
        "preparing": "Preparing to add compliance module...",
        "submitting": "Submitting module addition...",
        "success": "Compliance module added successfully"
      },
      "submit": "Add Module",
      "submitting": "Adding module...",
      "title": "Add Compliance Module"
    },
    "addressCopied": "Token address copied to clipboard",
    "approve": {
      "description": "Allow another address to spend tokens on your behalf.",
      "label": "Approve Spending",
      "messages": {
        "error": "An error occurred while approving",
        "failed": "Failed to approve spending",
        "preparing": "Preparing approval...",
        "submitting": "Submitting approval transaction...",
        "success": "Approval granted successfully"
      },
      "submit": "Approve",
      "submitting": "Approving...",
      "title": "Approve Token Spending"
    },
    "burn": {
      "description": "Permanently remove tokens from circulation. This action cannot be undone.",
      "label": "Burn Tokens",
      "messages": {
        "error": "An error occurred while burning tokens",
        "failed": "Failed to burn tokens",
        "preparing": "Preparing to burn tokens...",
        "submitting": "Submitting burn transaction...",
        "success": "Tokens burned successfully"
      },
      "submit": "Burn Tokens",
      "submitting": "Burning...",
      "title": "Burn Tokens"
    },
    "copyAddress": "Copy Address",
    "create": {
      "creating": "Creating {{type}} token...",
      "error": {
        "default": "An error occurred while creating the token"
      },
      "failed": "Failed to create {{type}} token",
      "messages": {
        "error": "Failed to create {{type}} token",
        "pending": "Creating {{type}} token...",
        "success": "{{type}} token created successfully"
      },
      "preparing": "Preparing to create {{type}} token...",
      "success": "{{type}} token created successfully"
    },
    "createToken": "Create Token",
    "forcedRecover": {
      "description": "Forcibly recover tokens from an address (requires special permissions).",
      "label": "Force Recovery",
      "messages": {
        "error": "An error occurred during recovery",
        "failed": "Failed to recover tokens",
        "preparing": "Preparing forced recovery...",
        "submitting": "Submitting recovery transaction...",
        "success": "Tokens recovered successfully"
      },
      "submit": "Force Recovery",
      "submitting": "Recovering...",
      "title": "Force Token Recovery"
    },
    "forcedTransfer": {
      "messages": {
        "error": "An error occurred during forced transfer",
        "failed": "Failed to complete forced transfer",
        "preparing": "Preparing forced transfer...",
        "submitting": "Submitting forced transfer transaction...",
        "success": "Forced transfer completed successfully"
      }
    },
    "freeze": {
      "description": "Prevent an address from performing any token transfers.",
      "label": "Freeze Address",
      "messages": {
        "error": "An error occurred while freezing address",
        "failed": "Failed to freeze address",
        "preparing": "Preparing to freeze address...",
        "submitting": "Submitting freeze transaction...",
        "success": "Address frozen successfully"
      },
      "submit": "Freeze",
      "submitting": "Freezing...",
      "title": "Freeze Address"
    },
    "grantRole": {
      "description": "Grant access control roles to specified accounts.",
      "label": "Grant role",
      "messages": {
        "error": "An error occurred while granting role",
        "failed": "Failed to grant role",
        "preparing": "Preparing to grant role...",
        "submitting": "Submitting grant role transaction...",
        "success": "Role '{{role}}' granted successfully"
      },
      "submit": "Grant role",
      "submitting": "Granting role...",
      "title": "Grant role",
      "form": {
        "selectRoleTitle": "Select role",
        "targetAccountsTitle": "Target accounts",
        "accountLabel": "Account",
        "addAccount": "Add account",
        "roleOptionDescription": "Grant {{role}} permissions to the selected accounts"
      }
    },
    "mint": {
      "description": "Create new tokens and assign them to specified addresses. This action requires verification.",
      "label": "Mint Tokens",
      "messages": {
        "error": "An error occurred while minting tokens",
        "failed": "Failed to mint tokens",
        "failedBatch": "Failed to mint tokens to recipients",
        "preparing": "Preparing to mint tokens...",
        "preparingBatch": "Preparing to mint tokens to multiple recipients...",
        "submitting": "Submitting mint transaction...",
        "submittingBatch": "Submitting batch mint transaction...",
        "success": "Tokens minted successfully",
        "successBatch": "Tokens minted successfully to all recipients"
      },
      "submit": "Mint Tokens",
      "submitting": "Minting...",
      "title": "Mint New Tokens"
    },
    "pause": {
      "description": "Pausing this token will prevent all transfers until it is unpaused. This action requires verification.",
      "label": "Pause Token",
      "messages": {
        "error": "An error occurred while pausing the token",
        "failed": "Failed to pause token",
        "preparing": "Preparing to pause token...",
        "submitting": "Submitting pause transaction...",
        "success": "Token paused successfully"
      },
      "submit": "Pause Token",
      "submitting": "Pausing...",
      "title": "Pause Token Transfers"
    },
    "recoverERC20": {
      "description": "Recover other ERC20 tokens sent to this contract by mistake.",
      "label": "Recover ERC20",
      "messages": {
        "error": "An error occurred during recovery",
        "failed": "Failed to recover ERC20 tokens",
        "preparing": "Preparing ERC20 recovery...",
        "submitting": "Submitting recovery transaction...",
        "success": "ERC20 tokens recovered successfully"
      },
      "submit": "Recover",
      "submitting": "Recovering...",
      "title": "Recover ERC20 Tokens"
    },
    "recoverTokens": {
      "description": "Recover tokens that were sent to this contract by mistake.",
      "label": "Recover Tokens",
      "messages": {
        "error": "An error occurred during recovery",
        "failed": "Failed to recover tokens",
        "preparing": "Preparing token recovery...",
        "submitting": "Submitting recovery transaction...",
        "success": "Tokens recovered successfully"
      },
      "submit": "Recover",
      "submitting": "Recovering...",
      "title": "Recover Lost Tokens"
    },
    "redeem": {
      "description": "Redeem tokens for their underlying value.",
      "label": "Redeem Tokens",
      "messages": {
        "error": "An error occurred during redemption",
        "failed": "Failed to redeem tokens",
        "failedAll": "Failed to redeem all tokens",
        "preparing": "Preparing token redemption...",
        "preparingAll": "Preparing to redeem all tokens...",
        "submitting": "Submitting redemption transaction...",
        "success": "Tokens redeemed successfully",
        "successAll": "All tokens redeemed successfully"
      },
      "submit": "Redeem",
      "submitting": "Redeeming...",
      "title": "Redeem Tokens"
    },
    "redeemAll": {
      "description": "Redeem all your tokens at once.",
      "label": "Redeem All",
      "messages": {
        "error": "An error occurred during redemption",
        "failed": "Failed to redeem all tokens",
        "preparing": "Preparing to redeem all tokens...",
        "submitting": "Submitting redemption transaction...",
        "success": "All tokens redeemed successfully"
      },
      "submit": "Redeem All",
      "submitting": "Redeeming all...",
      "title": "Redeem All Tokens"
    },
    "removeCompliance": {
      "description": "Remove an existing compliance module from the token.",
      "label": "Remove Compliance Module",
      "messages": {
        "error": "An error occurred while removing module",
        "failed": "Failed to remove compliance module",
        "preparing": "Preparing to remove compliance module...",
        "submitting": "Submitting module removal...",
        "success": "Compliance module removed successfully"
      },
      "submit": "Remove Module",
      "submitting": "Removing module...",
      "title": "Remove Compliance Module"
    },
    "setCap": {
      "description": "Define the maximum number of tokens that can ever be minted.",
      "label": "Set Max Supply",
      "messages": {
        "error": "An error occurred while setting cap",
        "failed": "Failed to set supply cap",
        "preparing": "Preparing to set supply cap...",
        "submitting": "Submitting cap transaction...",
        "success": "Supply cap set successfully"
      },
      "submit": "Set Cap",
      "submitting": "Setting cap...",
      "title": "Set Maximum Supply Cap"
    },
    "setYieldSchedule": {
      "description": "Set the yield distribution schedule for token holders.",
      "label": "Set Yield Schedule",
      "messages": {
        "error": "An error occurred while setting schedule",
        "failed": "Failed to set yield schedule",
        "invalidSchedule": "Invalid yield schedule configuration",
        "noSchedules": "No yield schedules provided",
        "preparing": "Preparing yield schedule configuration...",
        "submitting": "Submitting yield schedule...",
        "success": "Yield schedule set successfully"
      },
      "submit": "Set Schedule",
      "submitting": "Setting schedule...",
      "title": "Configure Yield Schedule"
    },
    "transfer": {
      "description": "Send tokens to another address.",
      "label": "Transfer Tokens",
      "messages": {
        "error": "An error occurred while transferring tokens",
        "failed": "Failed to transfer tokens",
        "preparing": "Preparing token transfer...",
        "submitting": "Submitting transfer transaction...",
        "success": "Tokens transferred successfully"
      },
      "submit": "Transfer Tokens",
      "submitting": "Transferring...",
      "title": "Transfer Tokens"
    },
    "transferFrom": {
      "messages": {
        "error": "An error occurred during delegated transfer",
        "failed": "Failed to complete delegated transfer",
        "preparing": "Preparing delegated transfer...",
        "submitting": "Submitting transfer on behalf of owner...",
        "success": "Delegated transfer completed successfully"
      }
    },
    "unfreeze": {
      "description": "Allow a previously frozen address to transfer tokens again.",
      "label": "Unfreeze Address",
      "messages": {
        "error": "An error occurred while unfreezing address",
        "failed": "Failed to unfreeze address",
        "preparing": "Preparing to unfreeze address...",
        "submitting": "Submitting unfreeze transaction...",
        "success": "Address unfrozen successfully"
      },
      "submit": "Unfreeze",
      "submitting": "Unfreezing...",
      "title": "Unfreeze Address"
    },
    "unpause": {
      "description": "Unpausing this token will allow transfers to resume. This action requires verification.",
      "label": "Unpause Token",
      "messages": {
        "error": "An error occurred while unpausing the token",
        "failed": "Failed to unpause token",
        "preparing": "Preparing to unpause token...",
        "submitting": "Submitting unpause transaction...",
        "success": "Token unpaused successfully"
      },
      "submit": "Unpause Token",
      "submitting": "Unpausing...",
      "title": "Unpause Token Transfers"
    },
    "viewDetails": "View Details",
    "viewEvents": "View Events",
    "viewOnEtherscan": "View on Etherscan"
  },
  "asset-types": {
    "bond": "Bonds",
    "deposit": "Deposits",
    "equity": "Equities",
    "fund": "Funds",
    "stablecoin": "Stablecoins"
  },
  "bulkActions": {
    "archiveMessage": "Would archive {{count}} token(s). This is a demo action.",
    "duplicateMessage": "Would duplicate {{count}} token(s). This is a demo action."
  },
  "columns": {
    "actions": "Actions",
    "contractAddress": "Contract Address",
    "createdAt": "Created At",
    "decimals": "Decimals",
    "name": "Name",
    "paused": "Status",
    "symbol": "Symbol",
    "tokenName": "Token Name",
    "tokenSymbol": "Token Symbol",
    "totalSupply": "Total Supply"
  },
  "details": {
    "bondInformation": "Bond Information",
    "collateralInformation": "Collateral",
    "events": "Events",
    "fundInformation": "Fund Information",
    "holders": "Holders",
    "tokenInformation": "Details",
    "stateChange": "State Change",
    "currentState": "Current State",
    "targetState": "Target State"
  },
  "emptyState": {
    "description": "This factory has not created any tokens yet. Create your first token to get started.",
    "title": "No tokens found"
  },
  "events": {
    "actions": {
      "copyTransactionHash": "Copy Transaction Hash",
      "transactionHashCopied": "Transaction hash copied to clipboard",
      "viewDetails": "View Details",
      "viewOnEtherscan": "View on Etherscan"
    },
    "columns": {
      "event": "Event",
      "sender": "Sender",
      "timestamp": "Timestamp",
      "txIndex": "Tx Index"
    },
    "description": "Historical activity and transactions for this token",
    "details": {
      "asset": "Asset",
      "blockNumber": "Block Number",
      "description": "{{eventName}} event for {{tokenName}}",
      "eventParameters": "Event Parameters",
      "sender": "Sender",
      "timestamp": "Date",
      "title": "Event Details",
      "transactionHash": "Transaction Hash"
    },
    "searchPlaceholder": "Search events by type, sender...",
    "title": "Token Events"
  },
  "factory": {
    "create": {
      "all-completed": "All token factories deployed successfully",
      "completed": "{{completed}} of {{total}} factories deployed",
      "deploying": "Deploying {{current}} of {{total}} factories...",
      "description": "Deploy factory contracts for your selected asset types",
      "error": {
        "default": "Failed to deploy token factory",
        "no-result": "Factory deployment completed but no address was returned",
        "system-not-bootstrapped": "System needs to be bootstrapped first. Please wait for system initialization to complete.",
        "system-not-found": "System address not found. Please ensure a system is deployed first."
      },
      "success": "Token factory successfully created",
      "title": "Create Token Factories"
    },
    "info": {
      "bond": {
        "description": "A bond is a debt instrument through which an issuer raises capital from investors, agreeing to repay the principal with interest over a defined period. When issued on blockchain, bonds become programmable assets with transparent terms, automated compliance, and efficient end-to-end lifecycle management from issuance to settlement.",
        "title": "A digital fixed-income security asset"
      },
      "deposit": {
        "description": "A deposit is the act of placing funds into a financial account, typically for safekeeping, future use, or to fulfill a contractual obligation. On blockchain platforms, deposits can be represented as digital tokens, enabling automated verification, conditional release, and auditable custody throughout the transaction lifecycle.",
        "title": "Secure and compliant digital deposit management"
      },
      "equity": {
        "description": "Equity refers to the ownership interest in a company or asset, typically entitling the holder to a share of profits and voting rights. When tokenized on blockchain, equity can be issued, managed, and transferred with programmable rules, improving access, liquidity, and operational efficiency in ownership markets.",
        "title": "Institutional-grade digital equity management"
      },
      "fund": {
        "description": "A fund aggregates capital from multiple investors to invest in a portfolio of assets according to a defined strategy and management structure. Tokenizing funds on blockchain enables granular ownership tracking, efficient distribution of returns, and streamlined operations through smart contracts and real-time reporting.",
        "title": "Digital asset for institutional fund management"
      },
      "stablecoin": {
        "description": "A stablecoin is a type of cryptocurrency engineered to maintain a stable value, often backed by reserves like fiat currencies or other assets. On blockchain platforms, stablecoins provide a dependable medium of exchange and store of value, facilitating seamless, low-volatility transactions and programmable financial operations.",
        "title": "A secure and collateralized digital currency"
      }
    },
    "related": {
      "bond": {
        "box1": {
          "button": "Read Guide",
          "description": "Learn how to create and deploy tokenized bonds with customizable maturity dates, interest rates, and compliance rules tailored for institutional investors.",
          "title": "Getting Started with Bond Creation"
        },
        "box2": {
          "button": "View Documentation",
          "description": "Understand the regulatory requirements for tokenized bonds, including investor eligibility, transfer restrictions, and automated coupon payment mechanisms.",
          "title": "Bond Compliance and Regulatory Framework"
        },
        "box3": {
          "button": "Technical Docs",
          "description": "Explore the technical implementation of bond tokens including face value calculations, yield management, and integration with payment systems for automated settlements.",
          "title": "Bond Contract Architecture"
        }
      },
      "deposit": {
        "box1": {
          "button": "Read Guide",
          "description": "Learn how to tokenize deposits with configurable withdrawal conditions, interest accrual, and multi-signature approval workflows.",
          "title": "Getting Started with Deposit Token Creation"
        },
        "box2": {
          "button": "View Documentation",
          "description": "Understand the security measures and compliance features for tokenized deposits, including custody controls and audit trail requirements.",
          "title": "Deposit Compliance and Security Standards"
        },
        "box3": {
          "button": "Technical Docs",
          "description": "Explore the technical design of deposit tokens including time-lock mechanisms, conditional release logic, and integration with custody providers.",
          "title": "Deposit Contract Architecture"
        }
      },
      "equity": {
        "box1": {
          "button": "Read Guide",
          "description": "Learn how to tokenize company shares with voting rights, dividend distribution capabilities, and cap table management features.",
          "title": "Getting Started with Equity Token Creation"
        },
        "box2": {
          "button": "View Documentation",
          "description": "Understand the regulatory framework for tokenized equity, including shareholder agreements, voting mechanisms, and transfer restrictions.",
          "title": "Equity Compliance and Shareholder Rights"
        },
        "box3": {
          "button": "Technical Docs",
          "description": "Explore the implementation of equity tokens including governance features, dividend distribution systems, and corporate action handling.",
          "title": "Equity Contract Architecture"
        }
      },
      "fund": {
        "box1": {
          "button": "Read Guide",
          "description": "Learn how to create tokenized investment funds with NAV calculations, subscription/redemption workflows, and performance fee structures.",
          "title": "Getting Started with Fund Token Creation"
        },
        "box2": {
          "button": "View Documentation",
          "description": "Understand the regulatory requirements for tokenized funds, including investor accreditation, lock-up periods, and reporting obligations.",
          "title": "Fund Compliance and Investor Protection"
        },
        "box3": {
          "button": "Technical Docs",
          "description": "Explore the technical design of fund tokens including portfolio management, fee calculations, and integration with fund administration systems.",
          "title": "Fund Contract Architecture"
        }
      },
      "stablecoin": {
        "box1": {
          "button": "Read Guide",
          "description": "Learn how to deploy stablecoins with configurable collateral requirements, minting/burning controls, and price stability mechanisms.",
          "title": "Getting Started with Stablecoin Creation"
        },
        "box2": {
          "button": "View Documentation",
          "description": "Understand the regulatory framework for stablecoins, including reserve auditing, redemption guarantees, and anti-money laundering controls.",
          "title": "Stablecoin Compliance and Reserve Management"
        },
        "box3": {
          "button": "Technical Docs",
          "description": "Explore the implementation of stablecoins including oracle integrations, collateral management, and automated rebalancing mechanisms.",
          "title": "Stablecoin Contract Architecture"
        }
      }
    }
  },
  "fields": {
    "assetType": "Asset Type",
    "assetTypeInfo": "The type of asset this token represents",
    "cap": "Max Supply",
    "capInfo": "The maximum amount of tokens that can be minted",
    "collateral": "Collateral",
    "collateralExpiry": "Collateral Expiry",
    "collateralExpiryInfo": "The date when the collateral expires",
    "collateralInfo": "The amount of collateral backing this token",
    "contractAddress": "Contract Address",
    "contractAddressInfo": "The blockchain address of this token contract",
    "createdBy": "Created By",
    "createdByInfo": "The address of the user who created the token",
    "decimals": "Decimals",
    "decimalsInfo": "Number of decimal places for this token",
    "faceValue": "Face Value",
    "faceValueInfo": "The face value of the bond",
    "isMatured": "Is Matured",
    "isMaturedInfo": "Whether the bond is matured",
    "managementFeeBps": "Management Fee",
    "managementFeeBpsInfo": "The management fee of the fund",
    "maturityDate": "Maturity Date",
    "maturityDateInfo": "The maturity date of the bond",
    "name": "Token Name",
    "nameInfo": "The full name of the token",
    "noExpiry": "No expiry",
    "noRequiredClaims": "No claims required",
    "redeemedAmount": "Redeemed Amount",
    "redeemedAmountInfo": "The amount of tokens redeemed",
    "requiredClaims": "Required Claims",
    "requiredClaimsInfo": "Identity claims required to interact with this token",
    "status": "Status",
    "statusInfo": "Current operational status of the token",
    "symbol": "Symbol",
    "symbolInfo": "The trading symbol for this token",
    "totalSupply": "Total Supply",
    "totalSupplyInfo": "The total amount of tokens in circulation"
  },
  "holders": {
    "actions": {
      "addressCopied": "Address copied to clipboard",
      "copyAddress": "Copy Address",
      "viewOnEtherscan": "View on Etherscan",
      "viewProfile": "View Profile"
    },
    "bulkActions": {
      "freezeMessage": "Would freeze {{count}} holder(s). This is a demo action.",
      "unfreezeMessage": "Would unfreeze {{count}} holder(s). This is a demo action."
    },
    "columns": {
      "actions": "Actions",
      "address": "Address",
      "available": "Available",
      "frozen": "Frozen",
      "status": "Status",
      "totalBalance": "Total Balance"
    },
    "searchPlaceholder": "Search by holder address...",
    "status": {
      "active": "Active",
      "frozen": "Frozen"
    }
  },
  "manage": "Manage Asset",
  "searchPlaceholder": "Search tokens by name, symbol, or address...",
  "status": {
    "active": "Active",
    "paused": "Paused"
  },
  "tabs": {
    "actions": "Actions",
    "allowlist": "Allowlist",
    "blocklist": "Blocklist",
    "events": "Events",
    "holders": "Holders",
    "mica": "MICA",
    "permissions": "Permissions",
    "tokenInformation": "Asset Details",
    "underlyingAssets": "Denomination Assets",
    "yield": "Yield"
  },
  "api": {
    "errors": {
      "InvalidSender": "Invalid sender address",
      "InvalidReceiver": "Invalid receiver address",
      "InsufficientBalance": "Insufficient balance to complete transfer",
      "InsufficientAllowance": "Insufficient allowance for transfer",
      "TokenFrozen": "Token transfers are currently frozen",
      "WalletFrozen": "Wallet is frozen and cannot perform transfers",
      "SelfTransfer": "Cannot transfer tokens to yourself",
      "InvalidIdentity": "Invalid identity verification",
      "ZeroAddress": "Cannot use zero address",
      "ComplianceCheckFailed": "Compliance check failed for this transfer",
      "NonTransferable": "Token is not transferable",
      "NotVerified": "Identity not verified",
      "Paused": "Token is paused",
      "OnlyOwner": "Only owner can perform this action",
      "OnlyAgent": "Only authorized agent can perform this action",
      "OnlySupplyManager": "Only supply manager can perform this action",
      "OnlyComplianceManager": "Only compliance manager can perform this action",
      "OnlyTokenAdmin": "Only token admin can perform this action",
      "ForcedTransferNotAllowed": "Forced transfers not allowed",
      "RecoveryNotAllowed": "Recovery not allowed",
      "MaxSupplyReached": "Maximum supply limit reached",
      "AmountExceedsBalance": "Amount exceeds available balance",
      "AmountExceedsFrozenTokens": "Amount exceeds frozen tokens",
      "NotEnoughFrozenTokens": "Not enough frozen tokens",
      "AlreadyFrozen": "Already frozen",
      "NotFrozen": "Not frozen",
      "ClaimNotFound": "Required claim not found",
      "ClaimNotValid": "Claim validation failed",
      "ClaimExpired": "Claim has expired",
      "ClaimRevoked": "Claim has been revoked",
      "IdentityNotFound": "Identity not found",
      "IdentityAlreadyExists": "Identity already exists",
      "IdentityMismatch": "Identity mismatch",
      "BurnNotAllowed": "Token burning not allowed",
      "MintNotAllowed": "Token minting not allowed",
      "AlreadyPaused": "Token is already paused",
      "NotPaused": "Token is not paused",
      "InvalidBatchLength": "Invalid batch operation length",
      "BatchOperationFailed": "Batch operation failed at index {{index}}",
      "InvalidYieldSchedule": "Invalid yield schedule",
      "YieldNotEnabled": "Yield distribution not enabled",
      "NoYieldAvailable": "No yield available for distribution",
      "InvalidCollateral": "Invalid collateral configuration",
      "CollateralLocked": "Collateral is locked",
      "BondNotMatured": "Bond has not matured yet",
      "BondAlreadyMatured": "Bond has already matured",
      "RedemptionNotAllowed": "Redemption not allowed",
      "InvalidFaceValue": "Invalid face value",
      "InvalidMaturityDate": "Invalid maturity date",
      "ModuleNotFound": "Compliance module not found",
      "ModuleAlreadyBound": "Module already bound",
      "ModuleBindingFailed": "Module binding failed",
      "InvalidManagementFee": "Invalid management fee",
      "FeeExceedsMaximum": "Fee exceeds maximum allowed",
      "InvalidTokenType": "Invalid token type",
      "ContractNotFound": "Contract not found",
      "ContractUpgradeFailed": "Contract upgrade failed",
      "InvalidImplementation": "Invalid implementation contract",
      "ProxyDeployFailed": "Proxy deployment failed",
      "FactoryNotDeployed": "Factory not deployed",
      "SystemNotBootstrapped": "System not bootstrapped",
      "InvalidConfiguration": "Invalid configuration",
      "NetworkError": "Network error occurred",
      "TransactionFailed": "Transaction failed: {{reason}}",
      "TransactionReverted": "Transaction reverted: {{reason}}",
      "EstimationFailed": "Gas estimation failed",
      "SignatureFailed": "Signature verification failed",
      "NonceTooLow": "Transaction nonce too low",
      "ReplacementUnderpriced": "Replacement transaction underpriced",
      "UnknownError": "An unknown error occurred",
      "ChainMismatch": "Connected to wrong blockchain network",
      "WalletNotConnected": "Wallet not connected",
      "UserRejected": "User rejected the transaction"
    },
    "queries": {
      "holders": {
        "messages": {
          "failed": "Failed to fetch token holders"
        }
      },
      "events": {
        "messages": {
          "failed": "Failed to fetch token events"
        }
      },
      "list": {
        "messages": {
          "failed": "Failed to list tokens"
        }
      }
    },
    "factory": {
      "read": {
        "messages": {
          "failed": "Failed to read token factory"
        }
      },
      "list": {
        "messages": {
          "failed": "Failed to list token factories"
        }
      },
      "create": {
        "messages": {
          "failed": "Failed to create factory: {{name}}",
          "batchFailed": "Failed to create all {{count}} {{count, plural, one {factory} other {factories}}}",
          "alreadyExists": "Factory already exists",
          "systemNotBootstrapped": "System needs to be bootstrapped first. Please wait for system initialization to complete.",
          "completed": "Factory creation completed",
          "allSucceeded": "Successfully created {{count}} {{count, plural, one {factory} other {factories}}}",
          "allSkipped": "All {{count}} {{count, plural, one {factory} other {factories}}} already exist",
          "mixedResults": "Created {{successCount}}, skipped {{skippedCount}}, failed {{failureCount}} factories",
          "successAndSkipped": "Created {{successCount}}, skipped {{skippedCount}} factories",
          "successAndFailed": "Created {{successCount}}, failed {{failureCount}} factories",
          "skippedAndFailed": "Skipped {{skippedCount}}, failed {{failureCount}} factories"
        }
      },
      "predict": {
        "messages": {
          "invalidType": "Invalid token type"
        },
        "fund": {
          "messages": {
            "failed": "Failed to predict fund address"
          }
        },
        "equity": {
          "messages": {
            "failed": "Failed to predict equity address"
          }
        },
        "bond": {
          "messages": {
            "failed": "Failed to predict bond address"
          }
        },
        "stablecoin": {
          "messages": {
            "failed": "Failed to predict stablecoin address"
          }
        },
        "deposit": {
          "messages": {
            "failed": "Failed to predict deposit address"
          }
        }
      }
    },
    "mutations": {
      "create": {
        "messages": {
          "notFound": "Failed to find created token",
          "missingAfterCreation": "Token not found after creation",
          "notFoundForTransaction": "Token not found for transaction {{transactionHash}}",
          "failed": "Failed to create token",
          "nullObject": "Token object is null for transaction {{transactionHash}}"
        },
        "fund": {
          "messages": {
            "invalidType": "Invalid token type",
            "failed": "Failed to create fund token"
          }
        },
        "equity": {
          "messages": {
            "invalidType": "Invalid token type",
            "failed": "Failed to create equity token"
          }
        },
        "bond": {
          "messages": {
            "invalidType": "Invalid token type",
            "failed": "Failed to create bond token"
          }
        },
        "stablecoin": {
          "messages": {
            "invalidType": "Invalid token type",
            "failed": "Failed to create stablecoin token"
          }
        },
        "deposit": {
          "messages": {
            "invalidType": "Invalid token type",
            "failed": "Failed to create deposit token"
          }
        }
      },
      "yield": {
        "messages": {
          "createScheduleFailed": "Failed to create yield schedule",
          "transactionFailed": "Transaction failed",
          "transactionFailedWithStatus": "Transaction failed with status: {{status}}",
          "receiptFailed": "Failed to get transaction receipt",
          "scheduleAddressNotFound": "Schedule address not found",
          "setScheduleFailed": "Failed to set yield schedule"
        }
      }
    },
    "stats": {
      "supplyChanges": {
        "messages": {
          "failed": "Failed to fetch token supply changes history"
        }
      }
    }
  },
  "validation": {
    "mint": {
      "recipientRequired": "At least one recipient required",
      "amountRequired": "At least one amount required"
    },
    "burn": {
      "addressRequired": "At least one address required",
      "amountRequired": "At least one amount required",
      "batchDescription": "batch burn"
    },
    "transfer": {
      "fromRequired": "From address(es) required for transferFrom and forced transfers"
    }
  }
}
