schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "account"
"""
type account {
  access_token: String
  access_token_expires_at: timestamptz
  account_id: String!
  created_at: timestamptz!
  id: String!
  id_token: String
  password: String
  provider_id: String!
  refresh_token: String
  refresh_token_expires_at: timestamptz
  scope: String
  updated_at: timestamptz!
  user_id: String!
}

"""
aggregated selection of "account"
"""
type account_aggregate {
  aggregate: account_aggregate_fields
  nodes: [account!]!
}

"""
aggregate fields of "account"
"""
type account_aggregate_fields {
  count(columns: [account_select_column!], distinct: Boolean): Int!
  max: account_max_fields
  min: account_min_fields
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input account_bool_exp {
  _and: [account_bool_exp!]
  _not: account_bool_exp
  _or: [account_bool_exp!]
  access_token: String_comparison_exp
  access_token_expires_at: timestamptz_comparison_exp
  account_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: String_comparison_exp
  id_token: String_comparison_exp
  password: String_comparison_exp
  provider_id: String_comparison_exp
  refresh_token: String_comparison_exp
  refresh_token_expires_at: timestamptz_comparison_exp
  scope: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "account"
"""
enum account_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  account_pkey
}

"""
input type for inserting data into table "account"
"""
input account_insert_input {
  access_token: String
  access_token_expires_at: timestamptz
  account_id: String
  created_at: timestamptz
  id: String
  id_token: String
  password: String
  provider_id: String
  refresh_token: String
  refresh_token_expires_at: timestamptz
  scope: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate max on columns"""
type account_max_fields {
  access_token: String
  access_token_expires_at: timestamptz
  account_id: String
  created_at: timestamptz
  id: String
  id_token: String
  password: String
  provider_id: String
  refresh_token: String
  refresh_token_expires_at: timestamptz
  scope: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate min on columns"""
type account_min_fields {
  access_token: String
  access_token_expires_at: timestamptz
  account_id: String
  created_at: timestamptz
  id: String
  id_token: String
  password: String
  provider_id: String
  refresh_token: String
  refresh_token_expires_at: timestamptz
  scope: String
  updated_at: timestamptz
  user_id: String
}

"""
response of any mutation on the table "account"
"""
type account_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account!]!
}

"""
on_conflict condition type for table "account"
"""
input account_on_conflict {
  constraint: account_constraint!
  update_columns: [account_update_column!]! = []
  where: account_bool_exp
}

"""Ordering options when selecting data from "account"."""
input account_order_by {
  access_token: order_by
  access_token_expires_at: order_by
  account_id: order_by
  created_at: order_by
  id: order_by
  id_token: order_by
  password: order_by
  provider_id: order_by
  refresh_token: order_by
  refresh_token_expires_at: order_by
  scope: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: account"""
input account_pk_columns_input {
  id: String!
}

"""
select columns of table "account"
"""
enum account_select_column {
  """column name"""
  access_token

  """column name"""
  access_token_expires_at

  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  id_token

  """column name"""
  password

  """column name"""
  provider_id

  """column name"""
  refresh_token

  """column name"""
  refresh_token_expires_at

  """column name"""
  scope

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "account"
"""
input account_set_input {
  access_token: String
  access_token_expires_at: timestamptz
  account_id: String
  created_at: timestamptz
  id: String
  id_token: String
  password: String
  provider_id: String
  refresh_token: String
  refresh_token_expires_at: timestamptz
  scope: String
  updated_at: timestamptz
  user_id: String
}

"""
Streaming cursor of the table "account"
"""
input account_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: account_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input account_stream_cursor_value_input {
  access_token: String
  access_token_expires_at: timestamptz
  account_id: String
  created_at: timestamptz
  id: String
  id_token: String
  password: String
  provider_id: String
  refresh_token: String
  refresh_token_expires_at: timestamptz
  scope: String
  updated_at: timestamptz
  user_id: String
}

"""
update columns of table "account"
"""
enum account_update_column {
  """column name"""
  access_token

  """column name"""
  access_token_expires_at

  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  id_token

  """column name"""
  password

  """column name"""
  provider_id

  """column name"""
  refresh_token

  """column name"""
  refresh_token_expires_at

  """column name"""
  scope

  """column name"""
  updated_at

  """column name"""
  user_id
}

input account_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: account_set_input

  """filter the rows which have to be updated"""
  where: account_bool_exp!
}

"""
columns and relationships of "apikey"
"""
type apikey {
  created_at: timestamptz!
  enabled: Boolean
  expires_at: timestamptz
  id: String!
  key: String!
  last_refill_at: timestamptz
  last_request: timestamptz
  metadata: String
  name: String
  permissions: String
  prefix: String
  rate_limit_enabled: Boolean
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
  start: String
  updated_at: timestamptz!
  user_id: String!
}

"""
aggregated selection of "apikey"
"""
type apikey_aggregate {
  aggregate: apikey_aggregate_fields
  nodes: [apikey!]!
}

"""
aggregate fields of "apikey"
"""
type apikey_aggregate_fields {
  avg: apikey_avg_fields
  count(columns: [apikey_select_column!], distinct: Boolean): Int!
  max: apikey_max_fields
  min: apikey_min_fields
  stddev: apikey_stddev_fields
  stddev_pop: apikey_stddev_pop_fields
  stddev_samp: apikey_stddev_samp_fields
  sum: apikey_sum_fields
  var_pop: apikey_var_pop_fields
  var_samp: apikey_var_samp_fields
  variance: apikey_variance_fields
}

"""aggregate avg on columns"""
type apikey_avg_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""
Boolean expression to filter rows from the table "apikey". All fields are combined with a logical 'AND'.
"""
input apikey_bool_exp {
  _and: [apikey_bool_exp!]
  _not: apikey_bool_exp
  _or: [apikey_bool_exp!]
  created_at: timestamptz_comparison_exp
  enabled: Boolean_comparison_exp
  expires_at: timestamptz_comparison_exp
  id: String_comparison_exp
  key: String_comparison_exp
  last_refill_at: timestamptz_comparison_exp
  last_request: timestamptz_comparison_exp
  metadata: String_comparison_exp
  name: String_comparison_exp
  permissions: String_comparison_exp
  prefix: String_comparison_exp
  rate_limit_enabled: Boolean_comparison_exp
  rate_limit_max: Int_comparison_exp
  rate_limit_time_window: Int_comparison_exp
  refill_amount: Int_comparison_exp
  refill_interval: Int_comparison_exp
  remaining: Int_comparison_exp
  request_count: Int_comparison_exp
  start: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "apikey"
"""
enum apikey_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  apikey_pkey
}

"""
input type for incrementing numeric columns in table "apikey"
"""
input apikey_inc_input {
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
}

"""
input type for inserting data into table "apikey"
"""
input apikey_insert_input {
  created_at: timestamptz
  enabled: Boolean
  expires_at: timestamptz
  id: String
  key: String
  last_refill_at: timestamptz
  last_request: timestamptz
  metadata: String
  name: String
  permissions: String
  prefix: String
  rate_limit_enabled: Boolean
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
  start: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate max on columns"""
type apikey_max_fields {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  key: String
  last_refill_at: timestamptz
  last_request: timestamptz
  metadata: String
  name: String
  permissions: String
  prefix: String
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
  start: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate min on columns"""
type apikey_min_fields {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  key: String
  last_refill_at: timestamptz
  last_request: timestamptz
  metadata: String
  name: String
  permissions: String
  prefix: String
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
  start: String
  updated_at: timestamptz
  user_id: String
}

"""
response of any mutation on the table "apikey"
"""
type apikey_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [apikey!]!
}

"""
on_conflict condition type for table "apikey"
"""
input apikey_on_conflict {
  constraint: apikey_constraint!
  update_columns: [apikey_update_column!]! = []
  where: apikey_bool_exp
}

"""Ordering options when selecting data from "apikey"."""
input apikey_order_by {
  created_at: order_by
  enabled: order_by
  expires_at: order_by
  id: order_by
  key: order_by
  last_refill_at: order_by
  last_request: order_by
  metadata: order_by
  name: order_by
  permissions: order_by
  prefix: order_by
  rate_limit_enabled: order_by
  rate_limit_max: order_by
  rate_limit_time_window: order_by
  refill_amount: order_by
  refill_interval: order_by
  remaining: order_by
  request_count: order_by
  start: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: apikey"""
input apikey_pk_columns_input {
  id: String!
}

"""
select columns of table "apikey"
"""
enum apikey_select_column {
  """column name"""
  created_at

  """column name"""
  enabled

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  key

  """column name"""
  last_refill_at

  """column name"""
  last_request

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  permissions

  """column name"""
  prefix

  """column name"""
  rate_limit_enabled

  """column name"""
  rate_limit_max

  """column name"""
  rate_limit_time_window

  """column name"""
  refill_amount

  """column name"""
  refill_interval

  """column name"""
  remaining

  """column name"""
  request_count

  """column name"""
  start

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "apikey"
"""
input apikey_set_input {
  created_at: timestamptz
  enabled: Boolean
  expires_at: timestamptz
  id: String
  key: String
  last_refill_at: timestamptz
  last_request: timestamptz
  metadata: String
  name: String
  permissions: String
  prefix: String
  rate_limit_enabled: Boolean
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
  start: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate stddev on columns"""
type apikey_stddev_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""aggregate stddev_pop on columns"""
type apikey_stddev_pop_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""aggregate stddev_samp on columns"""
type apikey_stddev_samp_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""
Streaming cursor of the table "apikey"
"""
input apikey_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: apikey_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input apikey_stream_cursor_value_input {
  created_at: timestamptz
  enabled: Boolean
  expires_at: timestamptz
  id: String
  key: String
  last_refill_at: timestamptz
  last_request: timestamptz
  metadata: String
  name: String
  permissions: String
  prefix: String
  rate_limit_enabled: Boolean
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
  start: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate sum on columns"""
type apikey_sum_fields {
  rate_limit_max: Int
  rate_limit_time_window: Int
  refill_amount: Int
  refill_interval: Int
  remaining: Int
  request_count: Int
}

"""
update columns of table "apikey"
"""
enum apikey_update_column {
  """column name"""
  created_at

  """column name"""
  enabled

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  key

  """column name"""
  last_refill_at

  """column name"""
  last_request

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  permissions

  """column name"""
  prefix

  """column name"""
  rate_limit_enabled

  """column name"""
  rate_limit_max

  """column name"""
  rate_limit_time_window

  """column name"""
  refill_amount

  """column name"""
  refill_interval

  """column name"""
  remaining

  """column name"""
  request_count

  """column name"""
  start

  """column name"""
  updated_at

  """column name"""
  user_id
}

input apikey_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: apikey_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: apikey_set_input

  """filter the rows which have to be updated"""
  where: apikey_bool_exp!
}

"""aggregate var_pop on columns"""
type apikey_var_pop_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""aggregate var_samp on columns"""
type apikey_var_samp_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""aggregate variance on columns"""
type apikey_variance_fields {
  rate_limit_max: Float
  rate_limit_time_window: Float
  refill_amount: Float
  refill_interval: Float
  remaining: Float
  request_count: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "account"
  """
  delete_account(
    """filter the rows which have to be deleted"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  delete single row from the table: "account"
  """
  delete_account_by_pk(id: String!): account

  """
  delete data from the table: "apikey"
  """
  delete_apikey(
    """filter the rows which have to be deleted"""
    where: apikey_bool_exp!
  ): apikey_mutation_response

  """
  delete single row from the table: "apikey"
  """
  delete_apikey_by_pk(id: String!): apikey

  """
  delete data from the table: "passkey"
  """
  delete_passkey(
    """filter the rows which have to be deleted"""
    where: passkey_bool_exp!
  ): passkey_mutation_response

  """
  delete single row from the table: "passkey"
  """
  delete_passkey_by_pk(id: String!): passkey

  """
  delete data from the table: "session"
  """
  delete_session(
    """filter the rows which have to be deleted"""
    where: session_bool_exp!
  ): session_mutation_response

  """
  delete single row from the table: "session"
  """
  delete_session_by_pk(id: String!): session

  """
  delete data from the table: "settings"
  """
  delete_settings(
    """filter the rows which have to be deleted"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  delete single row from the table: "settings"
  """
  delete_settings_by_pk(key: String!): settings

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: String!): user

  """
  delete data from the table: "verification"
  """
  delete_verification(
    """filter the rows which have to be deleted"""
    where: verification_bool_exp!
  ): verification_mutation_response

  """
  delete single row from the table: "verification"
  """
  delete_verification_by_pk(id: String!): verification

  """
  insert data into the table: "account"
  """
  insert_account(
    """the rows to be inserted"""
    objects: [account_insert_input!]!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account_mutation_response

  """
  insert a single row into the table: "account"
  """
  insert_account_one(
    """the row to be inserted"""
    object: account_insert_input!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account

  """
  insert data into the table: "apikey"
  """
  insert_apikey(
    """the rows to be inserted"""
    objects: [apikey_insert_input!]!

    """upsert condition"""
    on_conflict: apikey_on_conflict
  ): apikey_mutation_response

  """
  insert a single row into the table: "apikey"
  """
  insert_apikey_one(
    """the row to be inserted"""
    object: apikey_insert_input!

    """upsert condition"""
    on_conflict: apikey_on_conflict
  ): apikey

  """
  insert data into the table: "passkey"
  """
  insert_passkey(
    """the rows to be inserted"""
    objects: [passkey_insert_input!]!

    """upsert condition"""
    on_conflict: passkey_on_conflict
  ): passkey_mutation_response

  """
  insert a single row into the table: "passkey"
  """
  insert_passkey_one(
    """the row to be inserted"""
    object: passkey_insert_input!

    """upsert condition"""
    on_conflict: passkey_on_conflict
  ): passkey

  """
  insert data into the table: "session"
  """
  insert_session(
    """the rows to be inserted"""
    objects: [session_insert_input!]!

    """upsert condition"""
    on_conflict: session_on_conflict
  ): session_mutation_response

  """
  insert a single row into the table: "session"
  """
  insert_session_one(
    """the row to be inserted"""
    object: session_insert_input!

    """upsert condition"""
    on_conflict: session_on_conflict
  ): session

  """
  insert data into the table: "settings"
  """
  insert_settings(
    """the rows to be inserted"""
    objects: [settings_insert_input!]!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ): settings_mutation_response

  """
  insert a single row into the table: "settings"
  """
  insert_settings_one(
    """the row to be inserted"""
    object: settings_insert_input!

    """upsert condition"""
    on_conflict: settings_on_conflict
  ): settings

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  insert data into the table: "verification"
  """
  insert_verification(
    """the rows to be inserted"""
    objects: [verification_insert_input!]!

    """upsert condition"""
    on_conflict: verification_on_conflict
  ): verification_mutation_response

  """
  insert a single row into the table: "verification"
  """
  insert_verification_one(
    """the row to be inserted"""
    object: verification_insert_input!

    """upsert condition"""
    on_conflict: verification_on_conflict
  ): verification

  """
  update data of the table: "account"
  """
  update_account(
    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input

    """filter the rows which have to be updated"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  update single row of the table: "account"
  """
  update_account_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input
    pk_columns: account_pk_columns_input!
  ): account

  """
  update multiples rows of table: "account"
  """
  update_account_many(
    """updates to execute, in order"""
    updates: [account_updates!]!
  ): [account_mutation_response]

  """
  update data of the table: "apikey"
  """
  update_apikey(
    """increments the numeric columns with given value of the filtered values"""
    _inc: apikey_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: apikey_set_input

    """filter the rows which have to be updated"""
    where: apikey_bool_exp!
  ): apikey_mutation_response

  """
  update single row of the table: "apikey"
  """
  update_apikey_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: apikey_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: apikey_set_input
    pk_columns: apikey_pk_columns_input!
  ): apikey

  """
  update multiples rows of table: "apikey"
  """
  update_apikey_many(
    """updates to execute, in order"""
    updates: [apikey_updates!]!
  ): [apikey_mutation_response]

  """
  update data of the table: "passkey"
  """
  update_passkey(
    """increments the numeric columns with given value of the filtered values"""
    _inc: passkey_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: passkey_set_input

    """filter the rows which have to be updated"""
    where: passkey_bool_exp!
  ): passkey_mutation_response

  """
  update single row of the table: "passkey"
  """
  update_passkey_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: passkey_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: passkey_set_input
    pk_columns: passkey_pk_columns_input!
  ): passkey

  """
  update multiples rows of table: "passkey"
  """
  update_passkey_many(
    """updates to execute, in order"""
    updates: [passkey_updates!]!
  ): [passkey_mutation_response]

  """
  update data of the table: "session"
  """
  update_session(
    """sets the columns of the filtered rows to the given values"""
    _set: session_set_input

    """filter the rows which have to be updated"""
    where: session_bool_exp!
  ): session_mutation_response

  """
  update single row of the table: "session"
  """
  update_session_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: session_set_input
    pk_columns: session_pk_columns_input!
  ): session

  """
  update multiples rows of table: "session"
  """
  update_session_many(
    """updates to execute, in order"""
    updates: [session_updates!]!
  ): [session_mutation_response]

  """
  update data of the table: "settings"
  """
  update_settings(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input

    """filter the rows which have to be updated"""
    where: settings_bool_exp!
  ): settings_mutation_response

  """
  update single row of the table: "settings"
  """
  update_settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: settings_set_input
    pk_columns: settings_pk_columns_input!
  ): settings

  """
  update multiples rows of table: "settings"
  """
  update_settings_many(
    """updates to execute, in order"""
    updates: [settings_updates!]!
  ): [settings_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]

  """
  update data of the table: "verification"
  """
  update_verification(
    """sets the columns of the filtered rows to the given values"""
    _set: verification_set_input

    """filter the rows which have to be updated"""
    where: verification_bool_exp!
  ): verification_mutation_response

  """
  update single row of the table: "verification"
  """
  update_verification_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: verification_set_input
    pk_columns: verification_pk_columns_input!
  ): verification

  """
  update multiples rows of table: "verification"
  """
  update_verification_many(
    """updates to execute, in order"""
    updates: [verification_updates!]!
  ): [verification_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "passkey"
"""
type passkey {
  aaguid: String
  backed_up: Boolean!
  counter: Int!
  created_at: timestamptz
  credential_i_d: String!
  device_type: String!
  id: String!
  name: String
  public_key: String!
  transports: String
  user_id: String!
}

"""
aggregated selection of "passkey"
"""
type passkey_aggregate {
  aggregate: passkey_aggregate_fields
  nodes: [passkey!]!
}

"""
aggregate fields of "passkey"
"""
type passkey_aggregate_fields {
  avg: passkey_avg_fields
  count(columns: [passkey_select_column!], distinct: Boolean): Int!
  max: passkey_max_fields
  min: passkey_min_fields
  stddev: passkey_stddev_fields
  stddev_pop: passkey_stddev_pop_fields
  stddev_samp: passkey_stddev_samp_fields
  sum: passkey_sum_fields
  var_pop: passkey_var_pop_fields
  var_samp: passkey_var_samp_fields
  variance: passkey_variance_fields
}

"""aggregate avg on columns"""
type passkey_avg_fields {
  counter: Float
}

"""
Boolean expression to filter rows from the table "passkey". All fields are combined with a logical 'AND'.
"""
input passkey_bool_exp {
  _and: [passkey_bool_exp!]
  _not: passkey_bool_exp
  _or: [passkey_bool_exp!]
  aaguid: String_comparison_exp
  backed_up: Boolean_comparison_exp
  counter: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  credential_i_d: String_comparison_exp
  device_type: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  public_key: String_comparison_exp
  transports: String_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "passkey"
"""
enum passkey_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  passkey_pkey
}

"""
input type for incrementing numeric columns in table "passkey"
"""
input passkey_inc_input {
  counter: Int
}

"""
input type for inserting data into table "passkey"
"""
input passkey_insert_input {
  aaguid: String
  backed_up: Boolean
  counter: Int
  created_at: timestamptz
  credential_i_d: String
  device_type: String
  id: String
  name: String
  public_key: String
  transports: String
  user_id: String
}

"""aggregate max on columns"""
type passkey_max_fields {
  aaguid: String
  counter: Int
  created_at: timestamptz
  credential_i_d: String
  device_type: String
  id: String
  name: String
  public_key: String
  transports: String
  user_id: String
}

"""aggregate min on columns"""
type passkey_min_fields {
  aaguid: String
  counter: Int
  created_at: timestamptz
  credential_i_d: String
  device_type: String
  id: String
  name: String
  public_key: String
  transports: String
  user_id: String
}

"""
response of any mutation on the table "passkey"
"""
type passkey_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [passkey!]!
}

"""
on_conflict condition type for table "passkey"
"""
input passkey_on_conflict {
  constraint: passkey_constraint!
  update_columns: [passkey_update_column!]! = []
  where: passkey_bool_exp
}

"""Ordering options when selecting data from "passkey"."""
input passkey_order_by {
  aaguid: order_by
  backed_up: order_by
  counter: order_by
  created_at: order_by
  credential_i_d: order_by
  device_type: order_by
  id: order_by
  name: order_by
  public_key: order_by
  transports: order_by
  user_id: order_by
}

"""primary key columns input for table: passkey"""
input passkey_pk_columns_input {
  id: String!
}

"""
select columns of table "passkey"
"""
enum passkey_select_column {
  """column name"""
  aaguid

  """column name"""
  backed_up

  """column name"""
  counter

  """column name"""
  created_at

  """column name"""
  credential_i_d

  """column name"""
  device_type

  """column name"""
  id

  """column name"""
  name

  """column name"""
  public_key

  """column name"""
  transports

  """column name"""
  user_id
}

"""
input type for updating data in table "passkey"
"""
input passkey_set_input {
  aaguid: String
  backed_up: Boolean
  counter: Int
  created_at: timestamptz
  credential_i_d: String
  device_type: String
  id: String
  name: String
  public_key: String
  transports: String
  user_id: String
}

"""aggregate stddev on columns"""
type passkey_stddev_fields {
  counter: Float
}

"""aggregate stddev_pop on columns"""
type passkey_stddev_pop_fields {
  counter: Float
}

"""aggregate stddev_samp on columns"""
type passkey_stddev_samp_fields {
  counter: Float
}

"""
Streaming cursor of the table "passkey"
"""
input passkey_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: passkey_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input passkey_stream_cursor_value_input {
  aaguid: String
  backed_up: Boolean
  counter: Int
  created_at: timestamptz
  credential_i_d: String
  device_type: String
  id: String
  name: String
  public_key: String
  transports: String
  user_id: String
}

"""aggregate sum on columns"""
type passkey_sum_fields {
  counter: Int
}

"""
update columns of table "passkey"
"""
enum passkey_update_column {
  """column name"""
  aaguid

  """column name"""
  backed_up

  """column name"""
  counter

  """column name"""
  created_at

  """column name"""
  credential_i_d

  """column name"""
  device_type

  """column name"""
  id

  """column name"""
  name

  """column name"""
  public_key

  """column name"""
  transports

  """column name"""
  user_id
}

input passkey_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: passkey_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: passkey_set_input

  """filter the rows which have to be updated"""
  where: passkey_bool_exp!
}

"""aggregate var_pop on columns"""
type passkey_var_pop_fields {
  counter: Float
}

"""aggregate var_samp on columns"""
type passkey_var_samp_fields {
  counter: Float
}

"""aggregate variance on columns"""
type passkey_variance_fields {
  counter: Float
}

type query_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: String!): account

  """
  fetch data from the table: "apikey"
  """
  apikey(
    """distinct select on columns"""
    distinct_on: [apikey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [apikey_order_by!]

    """filter the rows returned"""
    where: apikey_bool_exp
  ): [apikey!]!

  """
  fetch aggregated fields from the table: "apikey"
  """
  apikey_aggregate(
    """distinct select on columns"""
    distinct_on: [apikey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [apikey_order_by!]

    """filter the rows returned"""
    where: apikey_bool_exp
  ): apikey_aggregate!

  """fetch data from the table: "apikey" using primary key columns"""
  apikey_by_pk(id: String!): apikey

  """
  fetch data from the table: "passkey"
  """
  passkey(
    """distinct select on columns"""
    distinct_on: [passkey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passkey_order_by!]

    """filter the rows returned"""
    where: passkey_bool_exp
  ): [passkey!]!

  """
  fetch aggregated fields from the table: "passkey"
  """
  passkey_aggregate(
    """distinct select on columns"""
    distinct_on: [passkey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passkey_order_by!]

    """filter the rows returned"""
    where: passkey_bool_exp
  ): passkey_aggregate!

  """fetch data from the table: "passkey" using primary key columns"""
  passkey_by_pk(id: String!): passkey

  """
  fetch data from the table: "session"
  """
  session(
    """distinct select on columns"""
    distinct_on: [session_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [session_order_by!]

    """filter the rows returned"""
    where: session_bool_exp
  ): [session!]!

  """
  fetch aggregated fields from the table: "session"
  """
  session_aggregate(
    """distinct select on columns"""
    distinct_on: [session_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [session_order_by!]

    """filter the rows returned"""
    where: session_bool_exp
  ): session_aggregate!

  """fetch data from the table: "session" using primary key columns"""
  session_by_pk(id: String!): session

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(key: String!): settings

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user

  """
  fetch data from the table: "verification"
  """
  verification(
    """distinct select on columns"""
    distinct_on: [verification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_order_by!]

    """filter the rows returned"""
    where: verification_bool_exp
  ): [verification!]!

  """
  fetch aggregated fields from the table: "verification"
  """
  verification_aggregate(
    """distinct select on columns"""
    distinct_on: [verification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_order_by!]

    """filter the rows returned"""
    where: verification_bool_exp
  ): verification_aggregate!

  """fetch data from the table: "verification" using primary key columns"""
  verification_by_pk(id: String!): verification
}

"""
columns and relationships of "session"
"""
type session {
  created_at: timestamptz!
  expires_at: timestamptz!
  id: String!
  impersonated_by: String
  ip_address: String
  token: String!
  updated_at: timestamptz!
  user_agent: String
  user_id: String!
}

"""
aggregated selection of "session"
"""
type session_aggregate {
  aggregate: session_aggregate_fields
  nodes: [session!]!
}

"""
aggregate fields of "session"
"""
type session_aggregate_fields {
  count(columns: [session_select_column!], distinct: Boolean): Int!
  max: session_max_fields
  min: session_min_fields
}

"""
Boolean expression to filter rows from the table "session". All fields are combined with a logical 'AND'.
"""
input session_bool_exp {
  _and: [session_bool_exp!]
  _not: session_bool_exp
  _or: [session_bool_exp!]
  created_at: timestamptz_comparison_exp
  expires_at: timestamptz_comparison_exp
  id: String_comparison_exp
  impersonated_by: String_comparison_exp
  ip_address: String_comparison_exp
  token: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_agent: String_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "session"
"""
enum session_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  session_pkey

  """
  unique or primary key constraint on columns "token"
  """
  session_token_unique
}

"""
input type for inserting data into table "session"
"""
input session_insert_input {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  impersonated_by: String
  ip_address: String
  token: String
  updated_at: timestamptz
  user_agent: String
  user_id: String
}

"""aggregate max on columns"""
type session_max_fields {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  impersonated_by: String
  ip_address: String
  token: String
  updated_at: timestamptz
  user_agent: String
  user_id: String
}

"""aggregate min on columns"""
type session_min_fields {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  impersonated_by: String
  ip_address: String
  token: String
  updated_at: timestamptz
  user_agent: String
  user_id: String
}

"""
response of any mutation on the table "session"
"""
type session_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [session!]!
}

"""
on_conflict condition type for table "session"
"""
input session_on_conflict {
  constraint: session_constraint!
  update_columns: [session_update_column!]! = []
  where: session_bool_exp
}

"""Ordering options when selecting data from "session"."""
input session_order_by {
  created_at: order_by
  expires_at: order_by
  id: order_by
  impersonated_by: order_by
  ip_address: order_by
  token: order_by
  updated_at: order_by
  user_agent: order_by
  user_id: order_by
}

"""primary key columns input for table: session"""
input session_pk_columns_input {
  id: String!
}

"""
select columns of table "session"
"""
enum session_select_column {
  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  impersonated_by

  """column name"""
  ip_address

  """column name"""
  token

  """column name"""
  updated_at

  """column name"""
  user_agent

  """column name"""
  user_id
}

"""
input type for updating data in table "session"
"""
input session_set_input {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  impersonated_by: String
  ip_address: String
  token: String
  updated_at: timestamptz
  user_agent: String
  user_id: String
}

"""
Streaming cursor of the table "session"
"""
input session_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: session_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input session_stream_cursor_value_input {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  impersonated_by: String
  ip_address: String
  token: String
  updated_at: timestamptz
  user_agent: String
  user_id: String
}

"""
update columns of table "session"
"""
enum session_update_column {
  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  impersonated_by

  """column name"""
  ip_address

  """column name"""
  token

  """column name"""
  updated_at

  """column name"""
  user_agent

  """column name"""
  user_id
}

input session_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: session_set_input

  """filter the rows which have to be updated"""
  where: session_bool_exp!
}

"""
columns and relationships of "settings"
"""
type settings {
  key: String!
  last_updated: timestamp!
  value: String!
}

"""
aggregated selection of "settings"
"""
type settings_aggregate {
  aggregate: settings_aggregate_fields
  nodes: [settings!]!
}

"""
aggregate fields of "settings"
"""
type settings_aggregate_fields {
  count(columns: [settings_select_column!], distinct: Boolean): Int!
  max: settings_max_fields
  min: settings_min_fields
}

"""
Boolean expression to filter rows from the table "settings". All fields are combined with a logical 'AND'.
"""
input settings_bool_exp {
  _and: [settings_bool_exp!]
  _not: settings_bool_exp
  _or: [settings_bool_exp!]
  key: String_comparison_exp
  last_updated: timestamp_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "settings"
"""
enum settings_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  settings_pkey
}

"""
input type for inserting data into table "settings"
"""
input settings_insert_input {
  key: String
  last_updated: timestamp
  value: String
}

"""aggregate max on columns"""
type settings_max_fields {
  key: String
  last_updated: timestamp
  value: String
}

"""aggregate min on columns"""
type settings_min_fields {
  key: String
  last_updated: timestamp
  value: String
}

"""
response of any mutation on the table "settings"
"""
type settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [settings!]!
}

"""
on_conflict condition type for table "settings"
"""
input settings_on_conflict {
  constraint: settings_constraint!
  update_columns: [settings_update_column!]! = []
  where: settings_bool_exp
}

"""Ordering options when selecting data from "settings"."""
input settings_order_by {
  key: order_by
  last_updated: order_by
  value: order_by
}

"""primary key columns input for table: settings"""
input settings_pk_columns_input {
  key: String!
}

"""
select columns of table "settings"
"""
enum settings_select_column {
  """column name"""
  key

  """column name"""
  last_updated

  """column name"""
  value
}

"""
input type for updating data in table "settings"
"""
input settings_set_input {
  key: String
  last_updated: timestamp
  value: String
}

"""
Streaming cursor of the table "settings"
"""
input settings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: settings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input settings_stream_cursor_value_input {
  key: String
  last_updated: timestamp
  value: String
}

"""
update columns of table "settings"
"""
enum settings_update_column {
  """column name"""
  key

  """column name"""
  last_updated

  """column name"""
  value
}

input settings_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: settings_set_input

  """filter the rows which have to be updated"""
  where: settings_bool_exp!
}

type subscription_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: String!): account

  """
  fetch data from the table in a streaming manner: "account"
  """
  account_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [account_stream_cursor_input]!

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch data from the table: "apikey"
  """
  apikey(
    """distinct select on columns"""
    distinct_on: [apikey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [apikey_order_by!]

    """filter the rows returned"""
    where: apikey_bool_exp
  ): [apikey!]!

  """
  fetch aggregated fields from the table: "apikey"
  """
  apikey_aggregate(
    """distinct select on columns"""
    distinct_on: [apikey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [apikey_order_by!]

    """filter the rows returned"""
    where: apikey_bool_exp
  ): apikey_aggregate!

  """fetch data from the table: "apikey" using primary key columns"""
  apikey_by_pk(id: String!): apikey

  """
  fetch data from the table in a streaming manner: "apikey"
  """
  apikey_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [apikey_stream_cursor_input]!

    """filter the rows returned"""
    where: apikey_bool_exp
  ): [apikey!]!

  """
  fetch data from the table: "passkey"
  """
  passkey(
    """distinct select on columns"""
    distinct_on: [passkey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passkey_order_by!]

    """filter the rows returned"""
    where: passkey_bool_exp
  ): [passkey!]!

  """
  fetch aggregated fields from the table: "passkey"
  """
  passkey_aggregate(
    """distinct select on columns"""
    distinct_on: [passkey_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passkey_order_by!]

    """filter the rows returned"""
    where: passkey_bool_exp
  ): passkey_aggregate!

  """fetch data from the table: "passkey" using primary key columns"""
  passkey_by_pk(id: String!): passkey

  """
  fetch data from the table in a streaming manner: "passkey"
  """
  passkey_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [passkey_stream_cursor_input]!

    """filter the rows returned"""
    where: passkey_bool_exp
  ): [passkey!]!

  """
  fetch data from the table: "session"
  """
  session(
    """distinct select on columns"""
    distinct_on: [session_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [session_order_by!]

    """filter the rows returned"""
    where: session_bool_exp
  ): [session!]!

  """
  fetch aggregated fields from the table: "session"
  """
  session_aggregate(
    """distinct select on columns"""
    distinct_on: [session_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [session_order_by!]

    """filter the rows returned"""
    where: session_bool_exp
  ): session_aggregate!

  """fetch data from the table: "session" using primary key columns"""
  session_by_pk(id: String!): session

  """
  fetch data from the table in a streaming manner: "session"
  """
  session_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [session_stream_cursor_input]!

    """filter the rows returned"""
    where: session_bool_exp
  ): [session!]!

  """
  fetch data from the table: "settings"
  """
  settings(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch aggregated fields from the table: "settings"
  """
  settings_aggregate(
    """distinct select on columns"""
    distinct_on: [settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settings_order_by!]

    """filter the rows returned"""
    where: settings_bool_exp
  ): settings_aggregate!

  """fetch data from the table: "settings" using primary key columns"""
  settings_by_pk(key: String!): settings

  """
  fetch data from the table in a streaming manner: "settings"
  """
  settings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [settings_stream_cursor_input]!

    """filter the rows returned"""
    where: settings_bool_exp
  ): [settings!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch data from the table: "verification"
  """
  verification(
    """distinct select on columns"""
    distinct_on: [verification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_order_by!]

    """filter the rows returned"""
    where: verification_bool_exp
  ): [verification!]!

  """
  fetch aggregated fields from the table: "verification"
  """
  verification_aggregate(
    """distinct select on columns"""
    distinct_on: [verification_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_order_by!]

    """filter the rows returned"""
    where: verification_bool_exp
  ): verification_aggregate!

  """fetch data from the table: "verification" using primary key columns"""
  verification_by_pk(id: String!): verification

  """
  fetch data from the table in a streaming manner: "verification"
  """
  verification_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [verification_stream_cursor_input]!

    """filter the rows returned"""
    where: verification_bool_exp
  ): [verification!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user"
"""
type user {
  ban_expires: timestamptz
  ban_reason: String
  banned: Boolean
  created_at: timestamptz!
  email: String!
  email_verified: Boolean!
  id: String!
  image: String
  last_login_at: timestamptz
  name: String!
  pincode_enabled: Boolean!
  pincode_verification_id: String
  role: String
  secret_code_verification_id: String
  two_factor_enabled: Boolean!
  two_factor_verification_id: String
  updated_at: timestamptz!
  wallet: String
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  ban_expires: timestamptz_comparison_exp
  ban_reason: String_comparison_exp
  banned: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  email_verified: Boolean_comparison_exp
  id: String_comparison_exp
  image: String_comparison_exp
  last_login_at: timestamptz_comparison_exp
  name: String_comparison_exp
  pincode_enabled: Boolean_comparison_exp
  pincode_verification_id: String_comparison_exp
  role: String_comparison_exp
  secret_code_verification_id: String_comparison_exp
  two_factor_enabled: Boolean_comparison_exp
  two_factor_verification_id: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  user_email_unique

  """
  unique or primary key constraint on columns "pincode_verification_id"
  """
  user_pincode_verification_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  user_pkey

  """
  unique or primary key constraint on columns "secret_code_verification_id"
  """
  user_secret_code_verification_id_unique

  """
  unique or primary key constraint on columns "two_factor_verification_id"
  """
  user_two_factor_verification_id_unique

  """
  unique or primary key constraint on columns "wallet"
  """
  user_wallet_unique
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  ban_expires: timestamptz
  ban_reason: String
  banned: Boolean
  created_at: timestamptz
  email: String
  email_verified: Boolean
  id: String
  image: String
  last_login_at: timestamptz
  name: String
  pincode_enabled: Boolean
  pincode_verification_id: String
  role: String
  secret_code_verification_id: String
  two_factor_enabled: Boolean
  two_factor_verification_id: String
  updated_at: timestamptz
  wallet: String
}

"""aggregate max on columns"""
type user_max_fields {
  ban_expires: timestamptz
  ban_reason: String
  created_at: timestamptz
  email: String
  id: String
  image: String
  last_login_at: timestamptz
  name: String
  pincode_verification_id: String
  role: String
  secret_code_verification_id: String
  two_factor_verification_id: String
  updated_at: timestamptz
  wallet: String
}

"""aggregate min on columns"""
type user_min_fields {
  ban_expires: timestamptz
  ban_reason: String
  created_at: timestamptz
  email: String
  id: String
  image: String
  last_login_at: timestamptz
  name: String
  pincode_verification_id: String
  role: String
  secret_code_verification_id: String
  two_factor_verification_id: String
  updated_at: timestamptz
  wallet: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  ban_expires: order_by
  ban_reason: order_by
  banned: order_by
  created_at: order_by
  email: order_by
  email_verified: order_by
  id: order_by
  image: order_by
  last_login_at: order_by
  name: order_by
  pincode_enabled: order_by
  pincode_verification_id: order_by
  role: order_by
  secret_code_verification_id: order_by
  two_factor_enabled: order_by
  two_factor_verification_id: order_by
  updated_at: order_by
  wallet: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: String!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  ban_expires

  """column name"""
  ban_reason

  """column name"""
  banned

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  email_verified

  """column name"""
  id

  """column name"""
  image

  """column name"""
  last_login_at

  """column name"""
  name

  """column name"""
  pincode_enabled

  """column name"""
  pincode_verification_id

  """column name"""
  role

  """column name"""
  secret_code_verification_id

  """column name"""
  two_factor_enabled

  """column name"""
  two_factor_verification_id

  """column name"""
  updated_at

  """column name"""
  wallet
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  ban_expires: timestamptz
  ban_reason: String
  banned: Boolean
  created_at: timestamptz
  email: String
  email_verified: Boolean
  id: String
  image: String
  last_login_at: timestamptz
  name: String
  pincode_enabled: Boolean
  pincode_verification_id: String
  role: String
  secret_code_verification_id: String
  two_factor_enabled: Boolean
  two_factor_verification_id: String
  updated_at: timestamptz
  wallet: String
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  ban_expires: timestamptz
  ban_reason: String
  banned: Boolean
  created_at: timestamptz
  email: String
  email_verified: Boolean
  id: String
  image: String
  last_login_at: timestamptz
  name: String
  pincode_enabled: Boolean
  pincode_verification_id: String
  role: String
  secret_code_verification_id: String
  two_factor_enabled: Boolean
  two_factor_verification_id: String
  updated_at: timestamptz
  wallet: String
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  ban_expires

  """column name"""
  ban_reason

  """column name"""
  banned

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  email_verified

  """column name"""
  id

  """column name"""
  image

  """column name"""
  last_login_at

  """column name"""
  name

  """column name"""
  pincode_enabled

  """column name"""
  pincode_verification_id

  """column name"""
  role

  """column name"""
  secret_code_verification_id

  """column name"""
  two_factor_enabled

  """column name"""
  two_factor_verification_id

  """column name"""
  updated_at

  """column name"""
  wallet
}

input user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

"""
columns and relationships of "verification"
"""
type verification {
  created_at: timestamptz
  expires_at: timestamptz!
  id: String!
  identifier: String!
  updated_at: timestamptz
  value: String!
}

"""
aggregated selection of "verification"
"""
type verification_aggregate {
  aggregate: verification_aggregate_fields
  nodes: [verification!]!
}

"""
aggregate fields of "verification"
"""
type verification_aggregate_fields {
  count(columns: [verification_select_column!], distinct: Boolean): Int!
  max: verification_max_fields
  min: verification_min_fields
}

"""
Boolean expression to filter rows from the table "verification". All fields are combined with a logical 'AND'.
"""
input verification_bool_exp {
  _and: [verification_bool_exp!]
  _not: verification_bool_exp
  _or: [verification_bool_exp!]
  created_at: timestamptz_comparison_exp
  expires_at: timestamptz_comparison_exp
  id: String_comparison_exp
  identifier: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "verification"
"""
enum verification_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  verification_pkey
}

"""
input type for inserting data into table "verification"
"""
input verification_insert_input {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  identifier: String
  updated_at: timestamptz
  value: String
}

"""aggregate max on columns"""
type verification_max_fields {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  identifier: String
  updated_at: timestamptz
  value: String
}

"""aggregate min on columns"""
type verification_min_fields {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  identifier: String
  updated_at: timestamptz
  value: String
}

"""
response of any mutation on the table "verification"
"""
type verification_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [verification!]!
}

"""
on_conflict condition type for table "verification"
"""
input verification_on_conflict {
  constraint: verification_constraint!
  update_columns: [verification_update_column!]! = []
  where: verification_bool_exp
}

"""Ordering options when selecting data from "verification"."""
input verification_order_by {
  created_at: order_by
  expires_at: order_by
  id: order_by
  identifier: order_by
  updated_at: order_by
  value: order_by
}

"""primary key columns input for table: verification"""
input verification_pk_columns_input {
  id: String!
}

"""
select columns of table "verification"
"""
enum verification_select_column {
  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  updated_at

  """column name"""
  value
}

"""
input type for updating data in table "verification"
"""
input verification_set_input {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  identifier: String
  updated_at: timestamptz
  value: String
}

"""
Streaming cursor of the table "verification"
"""
input verification_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: verification_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input verification_stream_cursor_value_input {
  created_at: timestamptz
  expires_at: timestamptz
  id: String
  identifier: String
  updated_at: timestamptz
  value: String
}

"""
update columns of table "verification"
"""
enum verification_update_column {
  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  updated_at

  """column name"""
  value
}

input verification_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: verification_set_input

  """filter the rows which have to be updated"""
  where: verification_bool_exp!
}