type ATKAssetProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKAssetProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKAssetProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKBondFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isFactoryAccessManager(accessManagerAddress: String!): ATKBondFactoryImplementationIsFactoryAccessManagerOutput
  isFactoryToken(tokenAddress: String!): ATKBondFactoryImplementationIsFactoryTokenOutput
  isTrustedForwarder(forwarder: String!): Boolean
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictBondAddress(cap_: String!, decimals_: Int!, faceValue_: String!, initialModulePairs_: [ATKBondFactoryImplementationPredictBondAddressInitialModulePairsInput!]!, maturityDate_: String!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!, underlyingAsset_: String!): ATKBondFactoryImplementationPredictBondAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
  trustedForwarder: String
}

input ATKBondFactoryImplementationATKBondFactoryImplementationCreateBondInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKBondFactoryImplementationCreateBondInput {
  cap_: String!
  decimals_: Int!
  faceValue_: String!
  initialModulePairs_: [ATKBondFactoryImplementationATKBondFactoryImplementationCreateBondInitialModulePairsInput!]!
  maturityDate_: String!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
  underlyingAsset_: String!
}

input ATKBondFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKBondFactoryImplementationInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

type ATKBondFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKBondFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKBondFactoryImplementationPredictBondAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKBondFactoryImplementationPredictBondAddressOutput {
  predictedAddress: String
}

input ATKBondFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKBondFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKBondFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKBondFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKBondFactoryImplementationUpdateTokenImplementationInput {
  newImplementation: String!
}

type ATKBondImplementation {
  CLOCK_MODE: String
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  balanceOfAt(account: String!, timepoint: String!): String
  bondRedeemed(holder: String!): ATKBondImplementationBondRedeemedOutput
  cap: String
  clock: Float
  compliance: String
  complianceModules: [ATKBondImplementationTuple0ComplianceModulesOutput!]
  decimals: Int
  faceValue: String
  getFrozenTokens(userAddress: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: String
  isFrozen(userAddress: String!): Boolean
  isMatured: Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  maturityDate: String
  missingUnderlyingAmount: String
  name: String
  onchainID: String
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  totalSupplyAt(timepoint: String!): String
  totalUnderlyingNeeded: String
  trustedForwarder: String
  underlyingAsset: String
  underlyingAssetBalance: String
  withdrawableUnderlyingAmount: String
  yieldBasisPerUnit(address0: String!): String
  yieldSchedule: String
  yieldToken: String
}

input ATKBondImplementationATKBondImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKBondImplementationAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input ATKBondImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKBondImplementationBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKBondImplementationBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input ATKBondImplementationBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKBondImplementationBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input ATKBondImplementationBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input ATKBondImplementationBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

input ATKBondImplementationBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

type ATKBondImplementationBondRedeemedOutput {
  redeemed: String
}

input ATKBondImplementationBurnInput {
  amount: String!
  userAddress: String!
}

input ATKBondImplementationForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input ATKBondImplementationForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input ATKBondImplementationFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input ATKBondImplementationInitializeInput {
  accessManager_: String!
  cap_: String!
  compliance_: String!
  decimals_: Int!
  faceValue_: String!
  identityRegistry_: String!
  initialModulePairs_: [ATKBondImplementationATKBondImplementationInitializeInitialModulePairsInput!]!
  maturityDate_: String!
  name_: String!
  onchainID_: String!
  symbol_: String!
  underlyingAsset_: String!
}

input ATKBondImplementationMintInput {
  _amount: String!
  _to: String!
}

input ATKBondImplementationRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input ATKBondImplementationRecoverTokensInput {
  lostWallet: String!
}

input ATKBondImplementationRedeemInput {
  amount: String!
}

input ATKBondImplementationRemoveComplianceModuleInput {
  _module: String!
}

input ATKBondImplementationSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input ATKBondImplementationSetCapInput {
  newCap: String!
}

input ATKBondImplementationSetComplianceInput {
  _compliance: String!
}

input ATKBondImplementationSetIdentityRegistryInput {
  _identityRegistry: String!
}

input ATKBondImplementationSetOnchainIDInput {
  _onchainID: String!
}

input ATKBondImplementationSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

input ATKBondImplementationSetYieldScheduleInput {
  schedule: String!
}

"""Returns the transaction hash"""
type ATKBondImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKBondImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKBondImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKBondImplementationTransferInput {
  _amount: String!
  _to: String!
}

type ATKBondImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKBondImplementationUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type ATKBondProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKBondProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKBondProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKComplianceImplementation {
  DEFAULT_ADMIN_ROLE: String
  canTransfer(_amount: String!, _from: String!, _to: String!, _token: String!): Boolean
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isAllowListed(account: String!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKComplianceImplementationAddMultipleToAllowListInput {
  accounts: [String!]!
}

input ATKComplianceImplementationAddToAllowListInput {
  account: String!
}

input ATKComplianceImplementationCreatedInput {
  _amount: String!
  _to: String!
  _token: String!
}

input ATKComplianceImplementationDestroyedInput {
  _amount: String!
  _from: String!
  _token: String!
}

input ATKComplianceImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKComplianceImplementationInitializeInput {
  initialAdmins: [String!]!
}

input ATKComplianceImplementationRemoveFromAllowListInput {
  account: String!
}

input ATKComplianceImplementationRemoveMultipleFromAllowListInput {
  accounts: [String!]!
}

input ATKComplianceImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKComplianceImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKComplianceImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKComplianceImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKComplianceImplementationTransferredInput {
  _amount: String!
  _from: String!
  _to: String!
  _token: String!
}

type ATKComplianceProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKComplianceProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKComplianceProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKDepositFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isFactoryAccessManager(accessManagerAddress: String!): ATKDepositFactoryImplementationIsFactoryAccessManagerOutput
  isFactoryToken(tokenAddress: String!): ATKDepositFactoryImplementationIsFactoryTokenOutput
  isTrustedForwarder(forwarder: String!): Boolean
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictDepositAddress(decimals_: Int!, initialModulePairs_: [ATKDepositFactoryImplementationPredictDepositAddressInitialModulePairsInput!]!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): ATKDepositFactoryImplementationPredictDepositAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
  trustedForwarder: String
}

input ATKDepositFactoryImplementationATKDepositFactoryImplementationCreateDepositInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKDepositFactoryImplementationCreateDepositInput {
  decimals_: Int!
  initialModulePairs_: [ATKDepositFactoryImplementationATKDepositFactoryImplementationCreateDepositInitialModulePairsInput!]!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input ATKDepositFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKDepositFactoryImplementationInitializeInput {
  identityVerificationModule_: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

type ATKDepositFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKDepositFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKDepositFactoryImplementationPredictDepositAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKDepositFactoryImplementationPredictDepositAddressOutput {
  predictedAddress: String
}

input ATKDepositFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKDepositFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKDepositFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKDepositFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKDepositFactoryImplementationUpdateTokenImplementationInput {
  newImplementation: String!
}

type ATKDepositImplementation {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: String
  complianceModules: [ATKDepositImplementationTuple0ComplianceModulesOutput!]
  decimals: Int
  findValidCollateralClaim: ATKDepositImplementationFindValidCollateralClaimOutput
  getFrozenTokens(userAddress: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: String
  isFrozen(userAddress: String!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  onchainID: String
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  trustedForwarder: String
}

input ATKDepositImplementationATKDepositImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKDepositImplementationAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input ATKDepositImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKDepositImplementationBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKDepositImplementationBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input ATKDepositImplementationBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKDepositImplementationBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input ATKDepositImplementationBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input ATKDepositImplementationBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

input ATKDepositImplementationBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKDepositImplementationBurnInput {
  amount: String!
  userAddress: String!
}

type ATKDepositImplementationFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

input ATKDepositImplementationForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input ATKDepositImplementationForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input ATKDepositImplementationFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input ATKDepositImplementationInitializeInput {
  accessManager_: String!
  collateralTopicId_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKDepositImplementationATKDepositImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input ATKDepositImplementationMintInput {
  _amount: String!
  _to: String!
}

input ATKDepositImplementationRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input ATKDepositImplementationRecoverTokensInput {
  lostWallet: String!
}

input ATKDepositImplementationRemoveComplianceModuleInput {
  _module: String!
}

input ATKDepositImplementationSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input ATKDepositImplementationSetComplianceInput {
  _compliance: String!
}

input ATKDepositImplementationSetIdentityRegistryInput {
  _identityRegistry: String!
}

input ATKDepositImplementationSetOnchainIDInput {
  _onchainID: String!
}

input ATKDepositImplementationSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type ATKDepositImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKDepositImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKDepositImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKDepositImplementationTransferInput {
  _amount: String!
  _to: String!
}

type ATKDepositImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKDepositImplementationUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type ATKDepositProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKDepositProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKDepositProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKEquityFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isFactoryAccessManager(accessManagerAddress: String!): ATKEquityFactoryImplementationIsFactoryAccessManagerOutput
  isFactoryToken(tokenAddress: String!): ATKEquityFactoryImplementationIsFactoryTokenOutput
  isTrustedForwarder(forwarder: String!): Boolean
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictEquityAddress(decimals_: Int!, initialModulePairs_: [ATKEquityFactoryImplementationPredictEquityAddressInitialModulePairsInput!]!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): ATKEquityFactoryImplementationPredictEquityAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
  trustedForwarder: String
}

input ATKEquityFactoryImplementationATKEquityFactoryImplementationCreateEquityInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKEquityFactoryImplementationCreateEquityInput {
  decimals_: Int!
  initialModulePairs_: [ATKEquityFactoryImplementationATKEquityFactoryImplementationCreateEquityInitialModulePairsInput!]!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input ATKEquityFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKEquityFactoryImplementationInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

type ATKEquityFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKEquityFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKEquityFactoryImplementationPredictEquityAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKEquityFactoryImplementationPredictEquityAddressOutput {
  predictedAddress: String
}

input ATKEquityFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKEquityFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKEquityFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKEquityFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKEquityFactoryImplementationUpdateTokenImplementationInput {
  newImplementation: String!
}

type ATKEquityImplementation {
  CLOCK_MODE: String
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  checkpoints(account: String!, pos: Float!): ATKEquityImplementationTuple0CheckpointsOutput
  clock: Float
  compliance: String
  complianceModules: [ATKEquityImplementationTuple0ComplianceModulesOutput!]
  decimals: Int
  delegates(account: String!): String
  eip712Domain: ATKEquityImplementationEip712DomainOutput
  getFrozenTokens(userAddress: String!): String
  getPastTotalSupply(timepoint: String!): String
  getPastVotes(account: String!, timepoint: String!): String
  getVotes(account: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: String
  isFrozen(userAddress: String!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  nonces(owner: String!): String
  numCheckpoints(account: String!): Float
  onchainID: String
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  trustedForwarder: String
}

input ATKEquityImplementationATKEquityImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKEquityImplementationAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input ATKEquityImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKEquityImplementationBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKEquityImplementationBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input ATKEquityImplementationBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKEquityImplementationBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input ATKEquityImplementationBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input ATKEquityImplementationBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

input ATKEquityImplementationBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKEquityImplementationBurnInput {
  amount: String!
  userAddress: String!
}

input ATKEquityImplementationDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input ATKEquityImplementationDelegateInput {
  delegatee: String!
}

type ATKEquityImplementationEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ATKEquityImplementationForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input ATKEquityImplementationForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input ATKEquityImplementationFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input ATKEquityImplementationInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKEquityImplementationATKEquityImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input ATKEquityImplementationMintInput {
  _amount: String!
  _to: String!
}

input ATKEquityImplementationRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input ATKEquityImplementationRecoverTokensInput {
  lostWallet: String!
}

input ATKEquityImplementationRemoveComplianceModuleInput {
  _module: String!
}

input ATKEquityImplementationSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input ATKEquityImplementationSetComplianceInput {
  _compliance: String!
}

input ATKEquityImplementationSetIdentityRegistryInput {
  _identityRegistry: String!
}

input ATKEquityImplementationSetOnchainIDInput {
  _onchainID: String!
}

input ATKEquityImplementationSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type ATKEquityImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKEquityImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKEquityImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKEquityImplementationTransferInput {
  _amount: String!
  _to: String!
}

type ATKEquityImplementationTuple0CheckpointsOutput {
  _key: Float
  _value: String
}

type ATKEquityImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKEquityImplementationUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type ATKEquityProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKEquityProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKEquityProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKFixedYieldProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKFixedYieldProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKFixedYieldProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKFixedYieldScheduleFactory {
  DEFAULT_ADMIN_ROLE: String
  allSchedulesLength: ATKFixedYieldScheduleFactoryAllSchedulesLengthOutput
  atkFixedYieldScheduleImplementation: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

type ATKFixedYieldScheduleFactoryAllSchedulesLengthOutput {
  count: String
}

input ATKFixedYieldScheduleFactoryCreateInput {
  endTime: String!
  interval: String!
  rate: String!
  startTime: String!
  token: String!
}

input ATKFixedYieldScheduleFactoryGrantRoleInput {
  account: String!
  role: String!
}

input ATKFixedYieldScheduleFactoryRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKFixedYieldScheduleFactoryRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKFixedYieldScheduleFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKFixedYieldScheduleFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFixedYieldScheduleFactoryUpdateImplementationInput {
  _newImplementation: String!
}

type ATKForwarder {
  eip712Domain: ATKForwarderEip712DomainOutput
  id: ID
  nonces(owner: String!): String
  verify(request: ATKForwarderVerifyRequestInput!): Boolean
}

input ATKForwarderATKForwarderExecuteBatchRequestsInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

input ATKForwarderATKForwarderExecuteRequestInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

type ATKForwarderEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ATKForwarderExecuteBatchInput {
  refundReceiver: String!
  requests: [ATKForwarderATKForwarderExecuteBatchRequestsInput!]!
}

input ATKForwarderExecuteInput {
  request: ATKForwarderATKForwarderExecuteRequestInput!
}

"""Returns the transaction hash"""
type ATKForwarderTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKForwarderTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKForwarderVerifyRequestInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

type ATKFundFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isFactoryAccessManager(accessManagerAddress: String!): ATKFundFactoryImplementationIsFactoryAccessManagerOutput
  isFactoryToken(tokenAddress: String!): ATKFundFactoryImplementationIsFactoryTokenOutput
  isTrustedForwarder(forwarder: String!): Boolean
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictFundAddress(decimals_: Int!, initialModulePairs_: [ATKFundFactoryImplementationPredictFundAddressInitialModulePairsInput!]!, managementFeeBps_: Int!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): ATKFundFactoryImplementationPredictFundAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
  trustedForwarder: String
}

input ATKFundFactoryImplementationATKFundFactoryImplementationCreateFundInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKFundFactoryImplementationCreateFundInput {
  decimals_: Int!
  initialModulePairs_: [ATKFundFactoryImplementationATKFundFactoryImplementationCreateFundInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input ATKFundFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKFundFactoryImplementationInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

type ATKFundFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKFundFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKFundFactoryImplementationPredictFundAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKFundFactoryImplementationPredictFundAddressOutput {
  predictedAddress: String
}

input ATKFundFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKFundFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKFundFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKFundFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFundFactoryImplementationUpdateTokenImplementationInput {
  newImplementation: String!
}

type ATKFundImplementation {
  CLOCK_MODE: String
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  checkpoints(account: String!, pos: Float!): ATKFundImplementationTuple0CheckpointsOutput
  clock: Float
  compliance: String
  complianceModules: [ATKFundImplementationTuple0ComplianceModulesOutput!]
  decimals: Int
  delegates(account: String!): String
  eip712Domain: ATKFundImplementationEip712DomainOutput
  getFrozenTokens(userAddress: String!): String
  getPastTotalSupply(timepoint: String!): String
  getPastVotes(account: String!, timepoint: String!): String
  getVotes(account: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: String
  isFrozen(userAddress: String!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  managementFeeBps: Int
  name: String
  nonces(owner: String!): String
  numCheckpoints(account: String!): Float
  onchainID: String
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  trustedForwarder: String
}

input ATKFundImplementationATKFundImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKFundImplementationAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input ATKFundImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKFundImplementationBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKFundImplementationBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input ATKFundImplementationBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKFundImplementationBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input ATKFundImplementationBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input ATKFundImplementationBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

input ATKFundImplementationBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKFundImplementationBurnInput {
  amount: String!
  userAddress: String!
}

input ATKFundImplementationDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input ATKFundImplementationDelegateInput {
  delegatee: String!
}

type ATKFundImplementationEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ATKFundImplementationForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input ATKFundImplementationForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input ATKFundImplementationFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input ATKFundImplementationInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKFundImplementationATKFundImplementationInitializeInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input ATKFundImplementationMintInput {
  _amount: String!
  _to: String!
}

input ATKFundImplementationRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input ATKFundImplementationRecoverTokensInput {
  lostWallet: String!
}

input ATKFundImplementationRemoveComplianceModuleInput {
  _module: String!
}

input ATKFundImplementationSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input ATKFundImplementationSetComplianceInput {
  _compliance: String!
}

input ATKFundImplementationSetIdentityRegistryInput {
  _identityRegistry: String!
}

input ATKFundImplementationSetOnchainIDInput {
  _onchainID: String!
}

input ATKFundImplementationSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type ATKFundImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKFundImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFundImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKFundImplementationTransferInput {
  _amount: String!
  _to: String!
}

type ATKFundImplementationTuple0CheckpointsOutput {
  _key: Float
  _value: String
}

type ATKFundImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKFundImplementationUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type ATKFundProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKFundProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKFundProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  TOKEN_METADATA_SALT_PREFIX: String
  TOKEN_SALT_PREFIX: String
  WALLET_SALT_PREFIX: String
  calculateTokenIdentityAddress(_decimals: Int!, _initialManager: String!, _name: String!, _symbol: String!): String
  calculateWalletIdentityAddress(_initialManager: String!, _walletAddress: String!): String
  getIdentity(_wallet: String!): String
  getRoleAdmin(role: String!): String
  getSystem: String
  getTokenIdentity(_token: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKIdentityFactoryImplementationCreateIdentityInput {
  _managementKeys: [String!]!
  _wallet: String!
}

input ATKIdentityFactoryImplementationCreateTokenIdentityInput {
  _accessManager: String!
  _token: String!
}

input ATKIdentityFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKIdentityFactoryImplementationInitializeInput {
  initialAdmin: String!
  systemAddress: String!
}

input ATKIdentityFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKIdentityFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKIdentityFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityFactoryProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKIdentityFactoryProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityFactoryProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityImplementation {
  ACTION_KEY_PURPOSE: String
  CLAIM_SIGNER_KEY_PURPOSE: String
  ENCRYPTION_KEY_PURPOSE: String
  MANAGEMENT_KEY_PURPOSE: String
  getClaim(_claimId: String!): ATKIdentityImplementationGetClaimOutput
  getClaimIdsByTopic(_topic: String!): ATKIdentityImplementationGetClaimIdsByTopicOutput
  getKey(_key: String!): ATKIdentityImplementationGetKeyOutput
  getKeyPurposes(_key: String!): ATKIdentityImplementationGetKeyPurposesOutput
  getKeysByPurpose(_purpose: String!): ATKIdentityImplementationGetKeysByPurposeOutput
  getRecoveredAddress(dataHash: String!, sig: String!): ATKIdentityImplementationGetRecoveredAddressOutput
  id: ID
  isClaimRevoked(_sig: String!): Boolean
  isClaimValid(_identity: String!, claimTopic: String!, data: String!, sig: String!): ATKIdentityImplementationIsClaimValidOutput
  isTrustedForwarder(forwarder: String!): Boolean
  keyHasPurpose(_key: String!, _purpose: String!): ATKIdentityImplementationKeyHasPurposeOutput
  revokedClaims(bytes320: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKIdentityImplementationAddClaimInput {
  _data: String!
  _issuer: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
}

input ATKIdentityImplementationAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input ATKIdentityImplementationApproveInput {
  _id: String!
  _toApprove: Boolean!
}

input ATKIdentityImplementationExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type ATKIdentityImplementationGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type ATKIdentityImplementationGetClaimOutput {
  address2: String
  bytes3: String
  bytes4: String
  string5: String
  uint2560: String
  uint2561: String
}

type ATKIdentityImplementationGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type ATKIdentityImplementationGetKeyPurposesOutput {
  purposes: [String!]
}

type ATKIdentityImplementationGetKeysByPurposeOutput {
  keys: [String!]
}

type ATKIdentityImplementationGetRecoveredAddressOutput {
  addr: String
}

input ATKIdentityImplementationInitializeInput {
  initialManagementKey: String!
}

type ATKIdentityImplementationIsClaimValidOutput {
  claimValid: Boolean
}

type ATKIdentityImplementationKeyHasPurposeOutput {
  exists: Boolean
}

input ATKIdentityImplementationRemoveClaimInput {
  _claimId: String!
}

input ATKIdentityImplementationRemoveKeyInput {
  _key: String!
  _purpose: String!
}

input ATKIdentityImplementationRevokeClaimBySignatureInput {
  signature: String!
}

input ATKIdentityImplementationRevokeClaimInput {
  _claimId: String!
}

"""Returns the transaction hash"""
type ATKIdentityImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKIdentityProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityRegistryImplementation {
  DEFAULT_ADMIN_ROLE: String
  contains(_userAddress: String!): Boolean
  getRecoveredWallet(lostWallet: String!): String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identity(_userAddress: String!): String
  identityStorage: String
  investorCountry(_userAddress: String!): Int
  isTrustedForwarder(forwarder: String!): Boolean
  isVerified(_userAddress: String!, requiredClaimTopics: [String!]!): Boolean
  isWalletLost(userWallet: String!): Boolean
  issuersRegistry: String
  supportsInterface(interfaceId: String!): Boolean
  topicSchemeRegistry: String
  trustedForwarder: String
}

input ATKIdentityRegistryImplementationBatchRegisterIdentityInput {
  _countries: [Int!]!
  _identities: [String!]!
  _userAddresses: [String!]!
}

input ATKIdentityRegistryImplementationDeleteIdentityInput {
  _userAddress: String!
}

input ATKIdentityRegistryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKIdentityRegistryImplementationInitializeInput {
  identityStorage_: String!
  initialAdmin: String!
  topicSchemeRegistry_: String!
  trustedIssuersRegistry_: String!
}

input ATKIdentityRegistryImplementationRecoverIdentityInput {
  lostWallet: String!
  newOnchainId: String!
  newWallet: String!
}

input ATKIdentityRegistryImplementationRegisterIdentityInput {
  _country: Int!
  _identity: String!
  _userAddress: String!
}

input ATKIdentityRegistryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKIdentityRegistryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

input ATKIdentityRegistryImplementationSetIdentityRegistryStorageInput {
  identityStorage_: String!
}

input ATKIdentityRegistryImplementationSetTopicSchemeRegistryInput {
  topicSchemeRegistry_: String!
}

input ATKIdentityRegistryImplementationSetTrustedIssuersRegistryInput {
  trustedIssuersRegistry_: String!
}

"""Returns the transaction hash"""
type ATKIdentityRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityRegistryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKIdentityRegistryImplementationUpdateCountryInput {
  _country: Int!
  _userAddress: String!
}

input ATKIdentityRegistryImplementationUpdateIdentityInput {
  _identity: String!
  _userAddress: String!
}

type ATKIdentityRegistryProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKIdentityRegistryProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityRegistryProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityRegistryStorageImplementation {
  DEFAULT_ADMIN_ROLE: String
  getIdentityWallets: [String!]
  getRecoveredWalletFromStorage(lostWallet: String!): String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  isWalletMarkedAsLost(userWallet: String!): Boolean
  linkedIdentityRegistries: [String!]
  storedIdentity(_userAddress: String!): String
  storedInvestorCountry(_userAddress: String!): Int
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKIdentityRegistryStorageImplementationAddIdentityToStorageInput {
  _country: Int!
  _identity: String!
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationBindIdentityRegistryInput {
  _identityRegistry: String!
}

input ATKIdentityRegistryStorageImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKIdentityRegistryStorageImplementationInitializeInput {
  initialAdmin: String!
  system: String!
}

input ATKIdentityRegistryStorageImplementationLinkWalletRecoveryInput {
  lostWallet: String!
  newWallet: String!
}

input ATKIdentityRegistryStorageImplementationMarkWalletAsLostInput {
  identityContract: String!
  userWallet: String!
}

input ATKIdentityRegistryStorageImplementationModifyStoredIdentityInput {
  _identity: String!
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountryInput {
  _country: Int!
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorageInput {
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKIdentityRegistryStorageImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKIdentityRegistryStorageImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityRegistryStorageImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKIdentityRegistryStorageImplementationUnbindIdentityRegistryInput {
  _identityRegistry: String!
}

type ATKIdentityRegistryStorageProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKIdentityRegistryStorageProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKIdentityRegistryStorageProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKRoles {
  CUSTODIAN_ROLE: String
  DEFAULT_ADMIN_ROLE: String
  EMERGENCY_ROLE: String
  SUPPLY_MANAGEMENT_ROLE: String
  TOKEN_GOVERNANCE_ROLE: String
  id: ID
}

"""Returns the transaction hash"""
type ATKRolesTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKRolesTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKStableCoinFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isFactoryAccessManager(accessManagerAddress: String!): ATKStableCoinFactoryImplementationIsFactoryAccessManagerOutput
  isFactoryToken(tokenAddress: String!): ATKStableCoinFactoryImplementationIsFactoryTokenOutput
  isTrustedForwarder(forwarder: String!): Boolean
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictStableCoinAddress(decimals_: Int!, initialModulePairs_: [ATKStableCoinFactoryImplementationPredictStableCoinAddressInitialModulePairsInput!]!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): ATKStableCoinFactoryImplementationPredictStableCoinAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
  trustedForwarder: String
}

input ATKStableCoinFactoryImplementationATKStableCoinFactoryImplementationCreateStableCoinInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKStableCoinFactoryImplementationCreateStableCoinInput {
  decimals_: Int!
  initialModulePairs_: [ATKStableCoinFactoryImplementationATKStableCoinFactoryImplementationCreateStableCoinInitialModulePairsInput!]!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input ATKStableCoinFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKStableCoinFactoryImplementationInitializeInput {
  identityVerificationModule_: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

type ATKStableCoinFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKStableCoinFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKStableCoinFactoryImplementationPredictStableCoinAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKStableCoinFactoryImplementationPredictStableCoinAddressOutput {
  predictedAddress: String
}

input ATKStableCoinFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKStableCoinFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKStableCoinFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKStableCoinFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKStableCoinFactoryImplementationUpdateTokenImplementationInput {
  newImplementation: String!
}

type ATKStableCoinImplementation {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: String
  complianceModules: [ATKStableCoinImplementationTuple0ComplianceModulesOutput!]
  decimals: Int
  findValidCollateralClaim: ATKStableCoinImplementationFindValidCollateralClaimOutput
  getFrozenTokens(userAddress: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: String
  isFrozen(userAddress: String!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  onchainID: String
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  trustedForwarder: String
}

input ATKStableCoinImplementationATKStableCoinImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKStableCoinImplementationAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input ATKStableCoinImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKStableCoinImplementationBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input ATKStableCoinImplementationBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input ATKStableCoinImplementationBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

input ATKStableCoinImplementationBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBurnInput {
  amount: String!
  userAddress: String!
}

type ATKStableCoinImplementationFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

input ATKStableCoinImplementationForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input ATKStableCoinImplementationForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input ATKStableCoinImplementationFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input ATKStableCoinImplementationInitializeInput {
  accessManager_: String!
  collateralTopicId_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKStableCoinImplementationATKStableCoinImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input ATKStableCoinImplementationMintInput {
  _amount: String!
  _to: String!
}

input ATKStableCoinImplementationRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input ATKStableCoinImplementationRecoverTokensInput {
  lostWallet: String!
}

input ATKStableCoinImplementationRemoveComplianceModuleInput {
  _module: String!
}

input ATKStableCoinImplementationSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input ATKStableCoinImplementationSetComplianceInput {
  _compliance: String!
}

input ATKStableCoinImplementationSetIdentityRegistryInput {
  _identityRegistry: String!
}

input ATKStableCoinImplementationSetOnchainIDInput {
  _onchainID: String!
}

input ATKStableCoinImplementationSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type ATKStableCoinImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKStableCoinImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKStableCoinImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKStableCoinImplementationTransferInput {
  _amount: String!
  _to: String!
}

type ATKStableCoinImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKStableCoinImplementationUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type ATKStableCoinProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKStableCoinProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKStableCoinProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKSystem {
  DEFAULT_ADMIN_ROLE: String
  complianceImplementation: String
  complianceProxy: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityFactoryImplementation: String
  identityFactoryProxy: String
  identityImplementation: String
  identityRegistryImplementation: String
  identityRegistryProxy: String
  identityRegistryStorageImplementation: String
  identityRegistryStorageProxy: String
  identityVerificationModule: String
  isTrustedForwarder(forwarder: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  tokenAccessManagerImplementation: String
  tokenFactoryImplementation(factoryTypeHash: String!): String
  tokenFactoryProxy(factoryTypeHash: String!): String
  tokenIdentityImplementation: String
  topicSchemeRegistryImplementation: String
  topicSchemeRegistryProxy: String
  trustedForwarder: String
  trustedIssuersRegistryImplementation: String
  trustedIssuersRegistryProxy: String
}

input ATKSystemCreateTokenFactoryInput {
  _factoryImplementation: String!
  _tokenImplementation: String!
  _typeName: String!
}

type ATKSystemFactory {
  atkSystems(uint2560: String!): String
  defaultComplianceImplementation: String
  defaultIdentityFactoryImplementation: String
  defaultIdentityImplementation: String
  defaultIdentityRegistryImplementation: String
  defaultIdentityRegistryStorageImplementation: String
  defaultIdentityVerificationModule: String
  defaultTokenAccessManagerImplementation: String
  defaultTokenIdentityImplementation: String
  defaultTopicSchemeRegistryImplementation: String
  defaultTrustedIssuersRegistryImplementation: String
  factoryForwarder: String
  getSystemAtIndex(index: String!): String
  getSystemCount: String
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  trustedForwarder: String
}

"""Returns the transaction hash"""
type ATKSystemFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKSystemFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKSystemGrantRoleInput {
  account: String!
  role: String!
}

type ATKSystemProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKSystemProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKSystemProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKSystemRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKSystemRevokeRoleInput {
  account: String!
  role: String!
}

type ATKSystemRoles {
  ALLOW_LIST_MANAGER_ROLE: String
  CLAIM_MANAGER_ROLE: String
  DEFAULT_ADMIN_ROLE: String
  DEPLOYER_ROLE: String
  IDENTITY_ISSUER_ROLE: String
  IMPLEMENTATION_MANAGER_ROLE: String
  MANAGE_REGISTRIES_ROLE: String
  REGISTRAR_ROLE: String
  STORAGE_MODIFIER_ROLE: String
  TOKEN_IDENTITY_ISSUER_ADMIN_ROLE: String
  TOKEN_IDENTITY_ISSUER_ROLE: String
  id: ID
}

"""Returns the transaction hash"""
type ATKSystemRolesTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKSystemRolesTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKSystemSetComplianceImplementationInput {
  implementation: String!
}

input ATKSystemSetIdentityFactoryImplementationInput {
  implementation: String!
}

input ATKSystemSetIdentityImplementationInput {
  implementation: String!
}

input ATKSystemSetIdentityRegistryImplementationInput {
  implementation: String!
}

input ATKSystemSetIdentityRegistryStorageImplementationInput {
  implementation: String!
}

input ATKSystemSetTokenAccessManagerImplementationInput {
  implementation: String!
}

input ATKSystemSetTokenIdentityImplementationInput {
  implementation: String!
}

input ATKSystemSetTopicSchemeRegistryImplementationInput {
  implementation: String!
}

input ATKSystemSetTrustedIssuersRegistryImplementationInput {
  implementation: String!
}

"""Returns the transaction hash"""
type ATKSystemTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKSystemTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenAccessManagerImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKTokenAccessManagerImplementationBatchGrantRoleInput {
  accounts: [String!]!
  role: String!
}

input ATKTokenAccessManagerImplementationBatchRevokeRoleInput {
  accounts: [String!]!
  role: String!
}

input ATKTokenAccessManagerImplementationGrantMultipleRolesInput {
  account: String!
  roles: [String!]!
}

input ATKTokenAccessManagerImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKTokenAccessManagerImplementationInitializeInput {
  initialAdmin: String!
}

input ATKTokenAccessManagerImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKTokenAccessManagerImplementationRevokeMultipleRolesInput {
  account: String!
  roles: [String!]!
}

input ATKTokenAccessManagerImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKTokenAccessManagerImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTokenAccessManagerImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenAccessManagerProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKTokenAccessManagerProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTokenAccessManagerProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenFactoryProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKTokenFactoryProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTokenFactoryProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenIdentityImplementation {
  accessManager: String
  getClaim(_claimId: String!): ATKTokenIdentityImplementationGetClaimOutput
  getClaimIdsByTopic(_topic: String!): ATKTokenIdentityImplementationGetClaimIdsByTopicOutput
  getKey(bytes320: String!): ATKTokenIdentityImplementationGetKeyOutput
  getKeyPurposes(bytes320: String!): [String!]
  getKeysByPurpose(uint2560: String!): [String!]
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isClaimValid(address0: String!, bytes2: String!, bytes3: String!, uint2561: String!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  keyHasPurpose(bytes320: String!, uint2561: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKTokenIdentityImplementationAddClaimInput {
  _data: String!
  _issuer: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
}

input ATKTokenIdentityImplementationAddKeyInput {
  bytes320: String!
  uint2561: String!
  uint2562: String!
}

input ATKTokenIdentityImplementationApproveInput {
  bool1: Boolean!
  uint2560: String!
}

input ATKTokenIdentityImplementationExecuteInput {
  address0: String!
  bytes2: String!
  uint2561: String!
}

type ATKTokenIdentityImplementationGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type ATKTokenIdentityImplementationGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type ATKTokenIdentityImplementationGetKeyOutput {
  bytes322: String
  uint256__0: [String!]
  uint2561: String
}

input ATKTokenIdentityImplementationInitializeInput {
  accessManagerAddress: String!
}

input ATKTokenIdentityImplementationRemoveClaimInput {
  _claimId: String!
}

input ATKTokenIdentityImplementationRemoveKeyInput {
  bytes320: String!
  uint2561: String!
}

"""Returns the transaction hash"""
type ATKTokenIdentityImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTokenIdentityImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenIdentityProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKTokenIdentityProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTokenIdentityProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTopicSchemeRegistryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getAllTopicIds: ATKTopicSchemeRegistryImplementationGetAllTopicIdsOutput
  getRoleAdmin(role: String!): String
  getTopicId(name: String!): ATKTopicSchemeRegistryImplementationGetTopicIdOutput
  getTopicSchemeCount: ATKTopicSchemeRegistryImplementationGetTopicSchemeCountOutput
  getTopicSchemeSignature(topicId: String!): ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureOutput
  getTopicSchemeSignatureByName(name: String!): ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureByNameOutput
  hasRole(account: String!, role: String!): Boolean
  hasTopicScheme(topicId: String!): ATKTopicSchemeRegistryImplementationHasTopicSchemeOutput
  hasTopicSchemeByName(name: String!): ATKTopicSchemeRegistryImplementationHasTopicSchemeByNameOutput
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemesInput {
  names: [String!]!
  signatures: [String!]!
}

type ATKTopicSchemeRegistryImplementationGetAllTopicIdsOutput {
  topicIds: [String!]
}

type ATKTopicSchemeRegistryImplementationGetTopicIdOutput {
  topicId: String
}

type ATKTopicSchemeRegistryImplementationGetTopicSchemeCountOutput {
  count: String
}

type ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureByNameOutput {
  signature: String
}

type ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureOutput {
  signature: String
}

input ATKTopicSchemeRegistryImplementationGrantRoleInput {
  account: String!
  role: String!
}

type ATKTopicSchemeRegistryImplementationHasTopicSchemeByNameOutput {
  exists: Boolean
}

type ATKTopicSchemeRegistryImplementationHasTopicSchemeOutput {
  exists: Boolean
}

input ATKTopicSchemeRegistryImplementationInitializeInput {
  initialAdmin: String!
  initialRegistrars: [String!]!
}

input ATKTopicSchemeRegistryImplementationRegisterTopicSchemeInput {
  name: String!
  signature: String!
}

input ATKTopicSchemeRegistryImplementationRemoveTopicSchemeInput {
  name: String!
}

input ATKTopicSchemeRegistryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKTopicSchemeRegistryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKTopicSchemeRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTopicSchemeRegistryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTopicSchemeRegistryImplementationUpdateTopicSchemeInput {
  name: String!
  newSignature: String!
}

type ATKTopicSchemeRegistryProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKTopicSchemeRegistryProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTopicSchemeRegistryProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTopics {
  TOPIC_AML: String
  TOPIC_ASSET_CLASSIFICATION: String
  TOPIC_COLLATERAL: String
  TOPIC_ISIN: String
  TOPIC_KYC: String
  id: ID
}

"""Returns the transaction hash"""
type ATKTopicsTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTopicsTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTrustedIssuersRegistryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  getTrustedIssuerClaimTopics(_trustedIssuer: String!): [String!]
  getTrustedIssuers: [String!]
  getTrustedIssuersForClaimTopic(claimTopic: String!): [String!]
  hasClaimTopic(_claimTopic: String!, _issuer: String!): Boolean
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  isTrustedIssuer(_issuer: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input ATKTrustedIssuersRegistryImplementationAddTrustedIssuerInput {
  _claimTopics: [String!]!
  _trustedIssuer: String!
}

input ATKTrustedIssuersRegistryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKTrustedIssuersRegistryImplementationInitializeInput {
  initialAdmin: String!
}

input ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuerInput {
  _trustedIssuer: String!
}

input ATKTrustedIssuersRegistryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKTrustedIssuersRegistryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ATKTrustedIssuersRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopicsInput {
  _newClaimTopics: [String!]!
  _trustedIssuer: String!
}

type ATKTrustedIssuersRegistryProxy {
  id: ID
}

"""Returns the transaction hash"""
type ATKTrustedIssuersRegistryProxyTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ATKTrustedIssuersRegistryProxyTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type AbstractATKTokenFactoryImplementation {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isFactoryAccessManager(accessManagerAddress: String!): AbstractATKTokenFactoryImplementationIsFactoryAccessManagerOutput
  isFactoryToken(tokenAddress: String!): AbstractATKTokenFactoryImplementationIsFactoryTokenOutput
  isTrustedForwarder(forwarder: String!): Boolean
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
  trustedForwarder: String
}

input AbstractATKTokenFactoryImplementationGrantRoleInput {
  account: String!
  role: String!
}

input AbstractATKTokenFactoryImplementationInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

type AbstractATKTokenFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type AbstractATKTokenFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input AbstractATKTokenFactoryImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input AbstractATKTokenFactoryImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type AbstractATKTokenFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type AbstractATKTokenFactoryImplementationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractATKTokenFactoryImplementationUpdateTokenImplementationInput {
  newImplementation: String!
}

type AbstractComplianceModule {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input AbstractComplianceModuleCreatedInput {
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input AbstractComplianceModuleDestroyedInput {
  _from: String!
  _params: String!
  _token: String!
  _value: String!
}

input AbstractComplianceModuleGrantRoleInput {
  account: String!
  role: String!
}

input AbstractComplianceModuleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input AbstractComplianceModuleRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type AbstractComplianceModuleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type AbstractComplianceModuleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractComplianceModuleTransferredInput {
  _from: String!
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

type AbstractCountryComplianceModule {
  DEFAULT_ADMIN_ROLE: String
  GLOBAL_LIST_MANAGER_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input AbstractCountryComplianceModuleCreatedInput {
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input AbstractCountryComplianceModuleDestroyedInput {
  _from: String!
  _params: String!
  _token: String!
  _value: String!
}

input AbstractCountryComplianceModuleGrantRoleInput {
  account: String!
  role: String!
}

input AbstractCountryComplianceModuleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input AbstractCountryComplianceModuleRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type AbstractCountryComplianceModuleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type AbstractCountryComplianceModuleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractCountryComplianceModuleTransferredInput {
  _from: String!
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar ConstructorArguments

type Contract {
  abiName: String
  address: String

  """Created at"""
  createdAt: String
  transaction: TransactionOutput
  transactionHash: String
}

type ContractDeployStatus {
  abiName: String
  address: String

  """Created at"""
  createdAt: String

  """Deployed at"""
  deployedAt: String

  """Reverted at"""
  revertedAt: String
  transaction: TransactionOutput
  transactionHash: String
}

"""Returns the transaction hash"""
type ContractDeploymentTransactionOutput {
  transactionHash: String
}

"""ContractsDeployStatus paginated output"""
type ContractsDeployStatusPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [ContractDeployStatus!]!
}

"""Contracts paginated output"""
type ContractsPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [Contract!]!
}

type CountryAllowListComplianceModule {
  DEFAULT_ADMIN_ROLE: String
  GLOBAL_LIST_MANAGER_ROLE: String
  getGlobalAllowedCountries: [Int!]
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isGloballyAllowed(_country: Int!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input CountryAllowListComplianceModuleCreatedInput {
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input CountryAllowListComplianceModuleDestroyedInput {
  _from: String!
  _params: String!
  _token: String!
  _value: String!
}

input CountryAllowListComplianceModuleGrantRoleInput {
  account: String!
  role: String!
}

input CountryAllowListComplianceModuleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input CountryAllowListComplianceModuleRevokeRoleInput {
  account: String!
  role: String!
}

input CountryAllowListComplianceModuleSetGlobalAllowedCountriesInput {
  _allow: Boolean!
  _countries: [Int!]!
}

"""Returns the transaction hash"""
type CountryAllowListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type CountryAllowListComplianceModuleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input CountryAllowListComplianceModuleTransferredInput {
  _from: String!
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

type CountryBlockListComplianceModule {
  DEFAULT_ADMIN_ROLE: String
  GLOBAL_LIST_MANAGER_ROLE: String
  getGlobalBlockedCountries: [Int!]
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isGloballyBlocked(_country: Int!): Boolean
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input CountryBlockListComplianceModuleCreatedInput {
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input CountryBlockListComplianceModuleDestroyedInput {
  _from: String!
  _params: String!
  _token: String!
  _value: String!
}

input CountryBlockListComplianceModuleGrantRoleInput {
  account: String!
  role: String!
}

input CountryBlockListComplianceModuleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input CountryBlockListComplianceModuleRevokeRoleInput {
  account: String!
  role: String!
}

input CountryBlockListComplianceModuleSetGlobalBlockedCountriesInput {
  _block: Boolean!
  _countries: [Int!]!
}

"""Returns the transaction hash"""
type CountryBlockListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type CountryBlockListComplianceModuleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input CountryBlockListComplianceModuleTransferredInput {
  _from: String!
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input CreateWalletInfoInput {
  """The name of the wallet"""
  name: String!
}

"""Details of the created wallet"""
type CreateWalletOutput {
  """The Ethereum address of the created wallet"""
  address: String

  """The derivation path used to generate the wallet"""
  derivationPath: String

  """The unique identifier of the created wallet"""
  id: String

  """The name of the created wallet"""
  name: String
}

input CreateWalletVerificationInput {
  """OTP verification settings. Provide this for OTP verification."""
  otp: OTPSettingsInput

  """PINCODE verification settings. Provide this for PINCODE verification."""
  pincode: PincodeSettingsInput

  """
  Secret codes verification settings. Provide this for secret codes verification.
  """
  secretCodes: SecretCodesSettingsInput
}

"""Output for creating a wallet verification"""
type CreateWalletVerificationOutput {
  """Unique identifier of the created wallet verification"""
  id: String

  """Name of the created wallet verification"""
  name: String

  """Additional parameters of the created wallet verification"""
  parameters: JSON

  """Type of the created wallet verification"""
  verificationType: WalletVerificationType
}

"""Output for deleting a wallet verification"""
type DeleteWalletVerificationOutput {
  """Indicates whether the wallet verification was successfully deleted"""
  success: Boolean
}

type ERC734 {
  ACTION_KEY_PURPOSE: String
  CLAIM_SIGNER_KEY_PURPOSE: String
  ENCRYPTION_KEY_PURPOSE: String
  MANAGEMENT_KEY_PURPOSE: String
  getKey(_key: String!): ERC734GetKeyOutput
  getKeyPurposes(_key: String!): ERC734GetKeyPurposesOutput
  getKeysByPurpose(_purpose: String!): ERC734GetKeysByPurposeOutput
  id: ID
  keyHasPurpose(_key: String!, _purpose: String!): ERC734KeyHasPurposeOutput
}

input ERC734AddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input ERC734ApproveInput {
  _approve: Boolean!
  _id: String!
}

input ERC734ExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type ERC734GetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type ERC734GetKeyPurposesOutput {
  purposes: [String!]
}

type ERC734GetKeysByPurposeOutput {
  keys: [String!]
}

type ERC734KeyHasPurposeOutput {
  exists: Boolean
}

input ERC734RemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""Returns the transaction hash"""
type ERC734TransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ERC734TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ERC735 {
  getClaim(_claimId: String!): ERC735GetClaimOutput
  getClaimIdsByTopic(_topic: String!): ERC735GetClaimIdsByTopicOutput
  id: ID
}

input ERC735AddClaimInput {
  _data: String!
  _issuer: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
}

type ERC735GetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type ERC735GetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

input ERC735RemoveClaimInput {
  _claimId: String!
}

"""Returns the transaction hash"""
type ERC735TransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ERC735TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKBond {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  balanceOfAt(account: String!, timepoint: String!): String
  cap: String
  compliance: IATKBondComplianceOutput
  complianceModules: IATKBondComplianceModulesOutput
  decimals: Int
  faceValue: String
  getFrozenTokens(userAddress: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: IATKBondIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  isMatured: Boolean
  maturityDate: String
  missingUnderlyingAmount: String
  name: String
  onchainID: IATKBondOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  totalSupplyAt(timepoint: String!): String
  totalUnderlyingNeeded: String
  underlyingAsset: String
  underlyingAssetBalance: String
  withdrawableUnderlyingAmount: String
  yieldBasisPerUnit(holder: String!): IATKBondYieldBasisPerUnitOutput
  yieldSchedule: IATKBondYieldScheduleOutput
  yieldToken: IATKBondYieldTokenOutput
}

input IATKBondAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input IATKBondApproveInput {
  spender: String!
  value: String!
}

input IATKBondBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKBondBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input IATKBondBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKBondBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKBondBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input IATKBondBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKBondBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKBondBurnInput {
  amount: String!
  userAddress: String!
}

type IATKBondComplianceModulesOutput {
  modulesList: [IATKBondModulesListComplianceModulesOutput!]
}

type IATKBondComplianceOutput {
  complianceContract: String
}

type IATKBondFactory {
  id: ID
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictBondAddress(cap_: String!, decimals_: Int!, faceValue_: String!, initialModulePairs_: [IATKBondFactoryPredictBondAddressInitialModulePairsInput!]!, maturityDate_: String!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!, underlyingAsset_: String!): IATKBondFactoryPredictBondAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
}

input IATKBondFactoryCreateBondInput {
  cap_: String!
  decimals_: Int!
  faceValue_: String!
  initialModulePairs_: [IATKBondFactoryIATKBondFactoryCreateBondInitialModulePairsInput!]!
  maturityDate_: String!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
  underlyingAsset_: String!
}

input IATKBondFactoryIATKBondFactoryCreateBondInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKBondFactoryInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

input IATKBondFactoryPredictBondAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKBondFactoryPredictBondAddressOutput {
  predictedAddress: String
}

"""Returns the transaction hash"""
type IATKBondFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKBondFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKBondForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input IATKBondForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input IATKBondFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input IATKBondIATKBondInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKBondIdentityRegistryOutput {
  registryContract: String
}

input IATKBondInitializeInput {
  accessManager_: String!
  cap_: String!
  compliance_: String!
  decimals_: Int!
  faceValue_: String!
  identityRegistry_: String!
  initialModulePairs_: [IATKBondIATKBondInitializeInitialModulePairsInput!]!
  maturityDate_: String!
  name_: String!
  onchainID_: String!
  symbol_: String!
  underlyingAsset_: String!
}

input IATKBondMintInput {
  _amount: String!
  _to: String!
}

type IATKBondModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKBondOnchainIDOutput {
  idAddress: String
}

input IATKBondRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input IATKBondRecoverTokensInput {
  _lostWallet: String!
}

input IATKBondRedeemInput {
  amount: String!
}

input IATKBondRemoveComplianceModuleInput {
  _module: String!
}

input IATKBondSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input IATKBondSetCapInput {
  newCap: String!
}

input IATKBondSetComplianceInput {
  _compliance: String!
}

input IATKBondSetIdentityRegistryInput {
  _identityRegistry: String!
}

input IATKBondSetOnchainIDInput {
  _onchainID: String!
}

input IATKBondSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

input IATKBondSetYieldScheduleInput {
  schedule: String!
}

"""Returns the transaction hash"""
type IATKBondTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKBondTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKBondTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKBondTransferInput {
  to: String!
  value: String!
}

input IATKBondUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type IATKBondYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type IATKBondYieldScheduleOutput {
  schedule: String
}

type IATKBondYieldTokenOutput {
  paymentToken: String
}

type IATKComplianceAllowList {
  id: ID
  isAllowListed(account: String!): Boolean
}

input IATKComplianceAllowListAddMultipleToAllowListInput {
  accounts: [String!]!
}

input IATKComplianceAllowListAddToAllowListInput {
  account: String!
}

input IATKComplianceAllowListRemoveFromAllowListInput {
  account: String!
}

input IATKComplianceAllowListRemoveMultipleFromAllowListInput {
  accounts: [String!]!
}

"""Returns the transaction hash"""
type IATKComplianceAllowListTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKComplianceAllowListTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKDeposit {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: IATKDepositComplianceOutput
  complianceModules: IATKDepositComplianceModulesOutput
  decimals: Int
  findValidCollateralClaim: IATKDepositFindValidCollateralClaimOutput
  getFrozenTokens(userAddress: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: IATKDepositIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  name: String
  onchainID: IATKDepositOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input IATKDepositAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input IATKDepositApproveInput {
  spender: String!
  value: String!
}

input IATKDepositBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKDepositBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input IATKDepositBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKDepositBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKDepositBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input IATKDepositBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKDepositBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKDepositBurnInput {
  amount: String!
  userAddress: String!
}

type IATKDepositComplianceModulesOutput {
  modulesList: [IATKDepositModulesListComplianceModulesOutput!]
}

type IATKDepositComplianceOutput {
  complianceContract: String
}

type IATKDepositFactory {
  id: ID
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictDepositAddress(decimals_: Int!, initialModulePairs_: [IATKDepositFactoryPredictDepositAddressInitialModulePairsInput!]!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): IATKDepositFactoryPredictDepositAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
}

input IATKDepositFactoryCreateDepositInput {
  decimals_: Int!
  initialModulePairs_: [IATKDepositFactoryIATKDepositFactoryCreateDepositInitialModulePairsInput!]!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input IATKDepositFactoryIATKDepositFactoryCreateDepositInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKDepositFactoryInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

input IATKDepositFactoryPredictDepositAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKDepositFactoryPredictDepositAddressOutput {
  predictedAddress: String
}

"""Returns the transaction hash"""
type IATKDepositFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKDepositFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKDepositFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

input IATKDepositForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input IATKDepositForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input IATKDepositFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input IATKDepositIATKDepositInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKDepositIdentityRegistryOutput {
  registryContract: String
}

input IATKDepositInitializeInput {
  accessManager_: String!
  collateralTopicId_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKDepositIATKDepositInitializeInitialModulePairsInput!]!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input IATKDepositMintInput {
  _amount: String!
  _to: String!
}

type IATKDepositModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKDepositOnchainIDOutput {
  idAddress: String
}

input IATKDepositRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input IATKDepositRecoverTokensInput {
  _lostWallet: String!
}

input IATKDepositRemoveComplianceModuleInput {
  _module: String!
}

input IATKDepositSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input IATKDepositSetComplianceInput {
  _compliance: String!
}

input IATKDepositSetIdentityRegistryInput {
  _identityRegistry: String!
}

input IATKDepositSetOnchainIDInput {
  _onchainID: String!
}

input IATKDepositSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type IATKDepositTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKDepositTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKDepositTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKDepositTransferInput {
  to: String!
  value: String!
}

input IATKDepositUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type IATKEquity {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: IATKEquityComplianceOutput
  complianceModules: IATKEquityComplianceModulesOutput
  decimals: Int
  delegates(account: String!): String
  getFrozenTokens(userAddress: String!): String
  getPastTotalSupply(timepoint: String!): String
  getPastVotes(account: String!, timepoint: String!): String
  getVotes(account: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: IATKEquityIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  name: String
  onchainID: IATKEquityOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input IATKEquityAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input IATKEquityApproveInput {
  spender: String!
  value: String!
}

input IATKEquityBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKEquityBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input IATKEquityBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKEquityBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKEquityBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input IATKEquityBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKEquityBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKEquityBurnInput {
  amount: String!
  userAddress: String!
}

type IATKEquityComplianceModulesOutput {
  modulesList: [IATKEquityModulesListComplianceModulesOutput!]
}

type IATKEquityComplianceOutput {
  complianceContract: String
}

input IATKEquityDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input IATKEquityDelegateInput {
  delegatee: String!
}

type IATKEquityFactory {
  id: ID
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictEquityAddress(decimals_: Int!, initialModulePairs_: [IATKEquityFactoryPredictEquityAddressInitialModulePairsInput!]!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): IATKEquityFactoryPredictEquityAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
}

input IATKEquityFactoryCreateEquityInput {
  decimals_: Int!
  initialModulePairs_: [IATKEquityFactoryIATKEquityFactoryCreateEquityInitialModulePairsInput!]!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input IATKEquityFactoryIATKEquityFactoryCreateEquityInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKEquityFactoryInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

input IATKEquityFactoryPredictEquityAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKEquityFactoryPredictEquityAddressOutput {
  predictedAddress: String
}

"""Returns the transaction hash"""
type IATKEquityFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKEquityFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKEquityForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input IATKEquityForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input IATKEquityFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input IATKEquityIATKEquityInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKEquityIdentityRegistryOutput {
  registryContract: String
}

input IATKEquityInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKEquityIATKEquityInitializeInitialModulePairsInput!]!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input IATKEquityMintInput {
  _amount: String!
  _to: String!
}

type IATKEquityModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKEquityOnchainIDOutput {
  idAddress: String
}

input IATKEquityRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input IATKEquityRecoverTokensInput {
  _lostWallet: String!
}

input IATKEquityRemoveComplianceModuleInput {
  _module: String!
}

input IATKEquitySetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input IATKEquitySetComplianceInput {
  _compliance: String!
}

input IATKEquitySetIdentityRegistryInput {
  _identityRegistry: String!
}

input IATKEquitySetOnchainIDInput {
  _onchainID: String!
}

input IATKEquitySetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type IATKEquityTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKEquityTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKEquityTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKEquityTransferInput {
  to: String!
  value: String!
}

input IATKEquityUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type IATKFixedYieldScheduleFactory {
  atkFixedYieldScheduleImplementation: String
  id: ID
}

input IATKFixedYieldScheduleFactoryCreateInput {
  endTime: String!
  interval: String!
  rate: String!
  startTime: String!
  token: String!
}

"""Returns the transaction hash"""
type IATKFixedYieldScheduleFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKFixedYieldScheduleFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKFund {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: IATKFundComplianceOutput
  complianceModules: IATKFundComplianceModulesOutput
  decimals: Int
  delegates(account: String!): String
  getFrozenTokens(userAddress: String!): String
  getPastTotalSupply(timepoint: String!): String
  getPastVotes(account: String!, timepoint: String!): String
  getVotes(account: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: IATKFundIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  managementFeeBps: Int
  name: String
  onchainID: IATKFundOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input IATKFundAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input IATKFundApproveInput {
  spender: String!
  value: String!
}

input IATKFundBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKFundBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input IATKFundBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKFundBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKFundBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input IATKFundBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKFundBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKFundBurnInput {
  amount: String!
  userAddress: String!
}

type IATKFundComplianceModulesOutput {
  modulesList: [IATKFundModulesListComplianceModulesOutput!]
}

type IATKFundComplianceOutput {
  complianceContract: String
}

input IATKFundDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input IATKFundDelegateInput {
  delegatee: String!
}

type IATKFundFactory {
  id: ID
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictFundAddress(decimals_: Int!, initialModulePairs_: [IATKFundFactoryPredictFundAddressInitialModulePairsInput!]!, managementFeeBps_: Int!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): IATKFundFactoryPredictFundAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
}

input IATKFundFactoryCreateFundInput {
  decimals_: Int!
  initialModulePairs_: [IATKFundFactoryIATKFundFactoryCreateFundInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input IATKFundFactoryIATKFundFactoryCreateFundInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKFundFactoryInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

input IATKFundFactoryPredictFundAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKFundFactoryPredictFundAddressOutput {
  predictedAddress: String
}

"""Returns the transaction hash"""
type IATKFundFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKFundFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKFundForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input IATKFundForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input IATKFundFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input IATKFundIATKFundInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKFundIdentityRegistryOutput {
  registryContract: String
}

input IATKFundInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKFundIATKFundInitializeInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input IATKFundMintInput {
  _amount: String!
  _to: String!
}

type IATKFundModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKFundOnchainIDOutput {
  idAddress: String
}

input IATKFundRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input IATKFundRecoverTokensInput {
  _lostWallet: String!
}

input IATKFundRemoveComplianceModuleInput {
  _module: String!
}

input IATKFundSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input IATKFundSetComplianceInput {
  _compliance: String!
}

input IATKFundSetIdentityRegistryInput {
  _identityRegistry: String!
}

input IATKFundSetOnchainIDInput {
  _onchainID: String!
}

input IATKFundSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type IATKFundTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKFundTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKFundTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKFundTransferInput {
  to: String!
  value: String!
}

input IATKFundUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type IATKIdentity {
  getClaim(_claimId: String!): IATKIdentityGetClaimOutput
  getClaimIdsByTopic(_topic: String!): IATKIdentityGetClaimIdsByTopicOutput
  getKey(_key: String!): IATKIdentityGetKeyOutput
  getKeyPurposes(_key: String!): IATKIdentityGetKeyPurposesOutput
  getKeysByPurpose(_purpose: String!): IATKIdentityGetKeysByPurposeOutput
  id: ID
  isClaimValid(_identity: String!, claimTopic: String!, data: String!, sig: String!): Boolean
  keyHasPurpose(_key: String!, _purpose: String!): IATKIdentityKeyHasPurposeOutput
}

input IATKIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input IATKIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input IATKIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input IATKIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type IATKIdentityFactory {
  calculateTokenIdentityAddress(_decimals: Int!, _initialManager: String!, _name: String!, _symbol: String!): IATKIdentityFactoryCalculateTokenIdentityAddressOutput
  calculateWalletIdentityAddress(_initialManager: String!, _walletAddress: String!): IATKIdentityFactoryCalculateWalletIdentityAddressOutput
  getIdentity(_wallet: String!): IATKIdentityFactoryGetIdentityOutput
  getTokenIdentity(_token: String!): IATKIdentityFactoryGetTokenIdentityOutput
  id: ID
  supportsInterface(interfaceId: String!): Boolean
}

type IATKIdentityFactoryCalculateTokenIdentityAddressOutput {
  predictedAddress: String
}

type IATKIdentityFactoryCalculateWalletIdentityAddressOutput {
  predictedAddress: String
}

input IATKIdentityFactoryCreateIdentityInput {
  _managementKeys: [String!]!
  _wallet: String!
}

input IATKIdentityFactoryCreateTokenIdentityInput {
  _accessManager: String!
  _token: String!
}

type IATKIdentityFactoryGetIdentityOutput {
  identityContract: String
}

type IATKIdentityFactoryGetTokenIdentityOutput {
  tokenIdentityContract: String
}

"""Returns the transaction hash"""
type IATKIdentityFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKIdentityFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type IATKIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type IATKIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type IATKIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type IATKIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

input IATKIdentityInitializeInput {
  initialManagementKey: String!
}

type IATKIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input IATKIdentityRemoveClaimInput {
  _claimId: String!
}

input IATKIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""Returns the transaction hash"""
type IATKIdentityTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKIdentityTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKStableCoin {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: IATKStableCoinComplianceOutput
  complianceModules: IATKStableCoinComplianceModulesOutput
  decimals: Int
  findValidCollateralClaim: IATKStableCoinFindValidCollateralClaimOutput
  getFrozenTokens(userAddress: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: IATKStableCoinIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  name: String
  onchainID: IATKStableCoinOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input IATKStableCoinAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input IATKStableCoinApproveInput {
  spender: String!
  value: String!
}

input IATKStableCoinBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKStableCoinBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input IATKStableCoinBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKStableCoinBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKStableCoinBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input IATKStableCoinBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IATKStableCoinBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input IATKStableCoinBurnInput {
  amount: String!
  userAddress: String!
}

type IATKStableCoinComplianceModulesOutput {
  modulesList: [IATKStableCoinModulesListComplianceModulesOutput!]
}

type IATKStableCoinComplianceOutput {
  complianceContract: String
}

type IATKStableCoinFactory {
  id: ID
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictStableCoinAddress(decimals_: Int!, initialModulePairs_: [IATKStableCoinFactoryPredictStableCoinAddressInitialModulePairsInput!]!, name_: String!, requiredClaimTopics_: [String!]!, symbol_: String!): IATKStableCoinFactoryPredictStableCoinAddressOutput
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
}

input IATKStableCoinFactoryCreateStableCoinInput {
  decimals_: Int!
  initialModulePairs_: [IATKStableCoinFactoryIATKStableCoinFactoryCreateStableCoinInitialModulePairsInput!]!
  name_: String!
  requiredClaimTopics_: [String!]!
  symbol_: String!
}

input IATKStableCoinFactoryIATKStableCoinFactoryCreateStableCoinInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKStableCoinFactoryInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

input IATKStableCoinFactoryPredictStableCoinAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKStableCoinFactoryPredictStableCoinAddressOutput {
  predictedAddress: String
}

"""Returns the transaction hash"""
type IATKStableCoinFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKStableCoinFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKStableCoinFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

input IATKStableCoinForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input IATKStableCoinForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input IATKStableCoinFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input IATKStableCoinIATKStableCoinInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKStableCoinIdentityRegistryOutput {
  registryContract: String
}

input IATKStableCoinInitializeInput {
  accessManager_: String!
  collateralTopicId_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKStableCoinIATKStableCoinInitializeInitialModulePairsInput!]!
  name_: String!
  onchainID_: String!
  symbol_: String!
}

input IATKStableCoinMintInput {
  _amount: String!
  _to: String!
}

type IATKStableCoinModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKStableCoinOnchainIDOutput {
  idAddress: String
}

input IATKStableCoinRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input IATKStableCoinRecoverTokensInput {
  _lostWallet: String!
}

input IATKStableCoinRemoveComplianceModuleInput {
  _module: String!
}

input IATKStableCoinSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input IATKStableCoinSetComplianceInput {
  _compliance: String!
}

input IATKStableCoinSetIdentityRegistryInput {
  _identityRegistry: String!
}

input IATKStableCoinSetOnchainIDInput {
  _onchainID: String!
}

input IATKStableCoinSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type IATKStableCoinTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKStableCoinTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKStableCoinTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKStableCoinTransferInput {
  to: String!
  value: String!
}

input IATKStableCoinUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type IATKSystem {
  complianceImplementation: IATKSystemComplianceImplementationOutput
  complianceProxy: IATKSystemComplianceProxyOutput
  id: ID
  identityFactoryImplementation: IATKSystemIdentityFactoryImplementationOutput
  identityFactoryProxy: IATKSystemIdentityFactoryProxyOutput
  identityImplementation: IATKSystemIdentityImplementationOutput
  identityRegistryImplementation: IATKSystemIdentityRegistryImplementationOutput
  identityRegistryProxy: IATKSystemIdentityRegistryProxyOutput
  identityRegistryStorageImplementation: IATKSystemIdentityRegistryStorageImplementationOutput
  identityRegistryStorageProxy: IATKSystemIdentityRegistryStorageProxyOutput
  identityVerificationModule: IATKSystemIdentityVerificationModuleOutput
  tokenAccessManagerImplementation: IATKSystemTokenAccessManagerImplementationOutput
  tokenFactoryImplementation(factoryTypeHash: String!): String
  tokenFactoryProxy(factoryTypeHash: String!): String
  tokenIdentityImplementation: IATKSystemTokenIdentityImplementationOutput
  topicSchemeRegistryImplementation: IATKSystemTopicSchemeRegistryImplementationOutput
  topicSchemeRegistryProxy: IATKSystemTopicSchemeRegistryProxyOutput
  trustedIssuersRegistryImplementation: IATKSystemTrustedIssuersRegistryImplementationOutput
  trustedIssuersRegistryProxy: IATKSystemTrustedIssuersRegistryProxyOutput
}

type IATKSystemComplianceImplementationOutput {
  complianceImplementationAddress: String
}

type IATKSystemComplianceProxyOutput {
  complianceProxyAddress: String
}

input IATKSystemCreateTokenFactoryInput {
  _factoryImplementation: String!
  _tokenImplementation: String!
  _typeName: String!
}

type IATKSystemFactory {
  atkSystems(index: String!): String
  defaultComplianceImplementation: String
  defaultIdentityFactoryImplementation: String
  defaultIdentityImplementation: String
  defaultIdentityRegistryImplementation: String
  defaultIdentityRegistryStorageImplementation: String
  defaultTokenAccessManagerImplementation: String
  defaultTokenIdentityImplementation: String
  defaultTopicSchemeRegistryImplementation: String
  defaultTrustedIssuersRegistryImplementation: String
  factoryForwarder: String
  getSystemAtIndex(index: String!): String
  getSystemCount: String
  id: ID
}

"""Returns the transaction hash"""
type IATKSystemFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKSystemFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemIdentityFactoryImplementationOutput {
  identityFactoryImplementationAddress: String
}

type IATKSystemIdentityFactoryProxyOutput {
  identityFactoryProxyAddress: String
}

type IATKSystemIdentityImplementationOutput {
  identityImplementationAddress: String
}

type IATKSystemIdentityRegistryImplementationOutput {
  identityRegistryImplementationAddress: String
}

type IATKSystemIdentityRegistryProxyOutput {
  identityRegistryProxyAddress: String
}

type IATKSystemIdentityRegistryStorageImplementationOutput {
  identityRegistryStorageImplementationAddress: String
}

type IATKSystemIdentityRegistryStorageProxyOutput {
  identityRegistryStorageProxyAddress: String
}

type IATKSystemIdentityVerificationModuleOutput {
  identityVerificationModuleAddress: String
}

type IATKSystemTokenAccessManagerImplementationOutput {
  tokenAccessManagerImplementationAddress: String
}

type IATKSystemTokenIdentityImplementationOutput {
  tokenIdentityImplementationAddress: String
}

type IATKSystemTopicSchemeRegistryImplementationOutput {
  topicSchemeRegistryImplementationAddress: String
}

type IATKSystemTopicSchemeRegistryProxyOutput {
  topicSchemeRegistryProxyAddress: String
}

"""Returns the transaction hash"""
type IATKSystemTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKSystemTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemTrustedIssuersRegistryImplementationOutput {
  trustedIssuersRegistryImplementationAddress: String
}

type IATKSystemTrustedIssuersRegistryProxyOutput {
  trustedIssuersRegistryProxyAddress: String
}

type IATKTokenFactory {
  id: ID
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
  tokenImplementation: String
}

input IATKTokenFactoryInitializeInput {
  identityVerificationModule: String!
  initialAdmin: String!
  systemAddress: String!
  tokenImplementation_: String!
}

"""Returns the transaction hash"""
type IATKTokenFactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKTokenFactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKTokenIdentity {
  getClaim(_claimId: String!): IATKTokenIdentityGetClaimOutput
  getClaimIdsByTopic(_topic: String!): IATKTokenIdentityGetClaimIdsByTopicOutput
  getKey(_key: String!): IATKTokenIdentityGetKeyOutput
  getKeyPurposes(_key: String!): IATKTokenIdentityGetKeyPurposesOutput
  getKeysByPurpose(_purpose: String!): IATKTokenIdentityGetKeysByPurposeOutput
  id: ID
  isClaimValid(_identity: String!, claimTopic: String!, data: String!, sig: String!): Boolean
  keyHasPurpose(_key: String!, _purpose: String!): IATKTokenIdentityKeyHasPurposeOutput
}

input IATKTokenIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input IATKTokenIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input IATKTokenIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input IATKTokenIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type IATKTokenIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type IATKTokenIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type IATKTokenIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type IATKTokenIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type IATKTokenIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

input IATKTokenIdentityInitializeInput {
  accessManager: String!
}

type IATKTokenIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input IATKTokenIdentityRemoveClaimInput {
  _claimId: String!
}

input IATKTokenIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""Returns the transaction hash"""
type IATKTokenIdentityTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IATKTokenIdentityTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IERC3643 {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: String
  decimals: Int
  getFrozenTokens(_userAddress: String!): String
  id: ID
  identityRegistry: String
  isFrozen(_userAddress: String!): Boolean
  name: String
  onchainID: String
  paused: Boolean
  symbol: String
  totalSupply: String
  version: String
}

input IERC3643ApproveInput {
  spender: String!
  value: String!
}

input IERC3643BatchBurnInput {
  _amounts: [String!]!
  _userAddresses: [String!]!
}

input IERC3643BatchForcedTransferInput {
  _amounts: [String!]!
  _fromList: [String!]!
  _toList: [String!]!
}

input IERC3643BatchFreezePartialTokensInput {
  _amounts: [String!]!
  _userAddresses: [String!]!
}

input IERC3643BatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IERC3643BatchSetAddressFrozenInput {
  _freeze: [Boolean!]!
  _userAddresses: [String!]!
}

input IERC3643BatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input IERC3643BatchUnfreezePartialTokensInput {
  _amounts: [String!]!
  _userAddresses: [String!]!
}

input IERC3643BurnInput {
  _amount: String!
  _userAddress: String!
}

type IERC3643ClaimTopicsRegistry {
  getClaimTopics: [String!]
  id: ID
}

input IERC3643ClaimTopicsRegistryAddClaimTopicInput {
  _claimTopic: String!
}

input IERC3643ClaimTopicsRegistryRemoveClaimTopicInput {
  _claimTopic: String!
}

"""Returns the transaction hash"""
type IERC3643ClaimTopicsRegistryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IERC3643ClaimTopicsRegistryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type IERC3643Compliance {
  canTransfer(_amount: String!, _from: String!, _to: String!): Boolean
  getTokenBound: String
  id: ID
  isTokenBound(_token: String!): Boolean
}

input IERC3643ComplianceBindTokenInput {
  _token: String!
}

input IERC3643ComplianceCreatedInput {
  _amount: String!
  _to: String!
}

input IERC3643ComplianceDestroyedInput {
  _amount: String!
  _from: String!
}

"""Returns the transaction hash"""
type IERC3643ComplianceTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IERC3643ComplianceTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643ComplianceTransferredInput {
  _amount: String!
  _from: String!
  _to: String!
}

input IERC3643ComplianceUnbindTokenInput {
  _token: String!
}

input IERC3643ForcedTransferInput {
  _amount: String!
  _from: String!
  _to: String!
}

input IERC3643FreezePartialTokensInput {
  _amount: String!
  _userAddress: String!
}

type IERC3643IdentityRegistry {
  contains(_userAddress: String!): Boolean
  id: ID
  identity(_userAddress: String!): String
  identityStorage: String
  investorCountry(_userAddress: String!): Int
  isVerified(_userAddress: String!): Boolean
  issuersRegistry: String
  topicsRegistry: String
}

input IERC3643IdentityRegistryBatchRegisterIdentityInput {
  _countries: [Int!]!
  _identities: [String!]!
  _userAddresses: [String!]!
}

input IERC3643IdentityRegistryDeleteIdentityInput {
  _userAddress: String!
}

input IERC3643IdentityRegistryRegisterIdentityInput {
  _country: Int!
  _identity: String!
  _userAddress: String!
}

input IERC3643IdentityRegistrySetClaimTopicsRegistryInput {
  _claimTopicsRegistry: String!
}

input IERC3643IdentityRegistrySetIdentityRegistryStorageInput {
  _identityRegistryStorage: String!
}

input IERC3643IdentityRegistrySetTrustedIssuersRegistryInput {
  _trustedIssuersRegistry: String!
}

type IERC3643IdentityRegistryStorage {
  id: ID
  linkedIdentityRegistries: [String!]
  storedIdentity(_userAddress: String!): String
  storedInvestorCountry(_userAddress: String!): Int
  supportsInterface(interfaceId: String!): Boolean
}

input IERC3643IdentityRegistryStorageAddIdentityToStorageInput {
  _country: Int!
  _identity: String!
  _userAddress: String!
}

input IERC3643IdentityRegistryStorageBindIdentityRegistryInput {
  _identityRegistry: String!
}

input IERC3643IdentityRegistryStorageModifyStoredIdentityInput {
  _identity: String!
  _userAddress: String!
}

input IERC3643IdentityRegistryStorageModifyStoredInvestorCountryInput {
  _country: Int!
  _userAddress: String!
}

input IERC3643IdentityRegistryStorageRemoveIdentityFromStorageInput {
  _userAddress: String!
}

"""Returns the transaction hash"""
type IERC3643IdentityRegistryStorageTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IERC3643IdentityRegistryStorageTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643IdentityRegistryStorageUnbindIdentityRegistryInput {
  _identityRegistry: String!
}

"""Returns the transaction hash"""
type IERC3643IdentityRegistryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IERC3643IdentityRegistryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643IdentityRegistryUpdateCountryInput {
  _country: Int!
  _userAddress: String!
}

input IERC3643IdentityRegistryUpdateIdentityInput {
  _identity: String!
  _userAddress: String!
}

input IERC3643MintInput {
  _amount: String!
  _to: String!
}

input IERC3643RecoveryAddressInput {
  _investorOnchainID: String!
  _lostWallet: String!
  _newWallet: String!
}

input IERC3643SetAddressFrozenInput {
  _freeze: Boolean!
  _userAddress: String!
}

input IERC3643SetComplianceInput {
  _compliance: String!
}

input IERC3643SetIdentityRegistryInput {
  _identityRegistry: String!
}

input IERC3643SetNameInput {
  _name: String!
}

input IERC3643SetOnchainIDInput {
  _onchainID: String!
}

input IERC3643SetSymbolInput {
  _symbol: String!
}

"""Returns the transaction hash"""
type IERC3643TransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IERC3643TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643TransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IERC3643TransferInput {
  to: String!
  value: String!
}

type IERC3643TrustedIssuersRegistry {
  getTrustedIssuerClaimTopics(_trustedIssuer: String!): [String!]
  getTrustedIssuers: [String!]
  getTrustedIssuersForClaimTopic(claimTopic: String!): [String!]
  hasClaimTopic(_claimTopic: String!, _issuer: String!): Boolean
  id: ID
  isTrustedIssuer(_issuer: String!): Boolean
  supportsInterface(interfaceId: String!): Boolean
}

input IERC3643TrustedIssuersRegistryAddTrustedIssuerInput {
  _claimTopics: [String!]!
  _trustedIssuer: String!
}

input IERC3643TrustedIssuersRegistryRemoveTrustedIssuerInput {
  _trustedIssuer: String!
}

"""Returns the transaction hash"""
type IERC3643TrustedIssuersRegistryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type IERC3643TrustedIssuersRegistryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopicsInput {
  _claimTopics: [String!]!
  _trustedIssuer: String!
}

input IERC3643UnfreezePartialTokensInput {
  _amount: String!
  _userAddress: String!
}

type ISMART {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: ISMARTComplianceOutput
  complianceModules: ISMARTComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: ISMARTIdentityRegistryOutput
  name: String
  onchainID: ISMARTOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input ISMARTAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input ISMARTApproveInput {
  spender: String!
  value: String!
}

input ISMARTBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input ISMARTBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type ISMARTBurnable {
  id: ID
}

input ISMARTBurnableBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ISMARTBurnableBurnInput {
  amount: String!
  userAddress: String!
}

"""Returns the transaction hash"""
type ISMARTBurnableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTBurnableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTCapped {
  cap: String
  id: ID
}

input ISMARTCappedSetCapInput {
  newCap: String!
}

"""Returns the transaction hash"""
type ISMARTCappedTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTCappedTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTCollateral {
  findValidCollateralClaim: ISMARTCollateralFindValidCollateralClaimOutput
  id: ID
}

type ISMARTCollateralFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

"""Returns the transaction hash"""
type ISMARTCollateralTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTCollateralTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTCompliance {
  canTransfer(_amount: String!, _from: String!, _to: String!, _token: String!): ISMARTComplianceCanTransferOutput
  id: ID
  supportsInterface(interfaceId: String!): Boolean
}

type ISMARTComplianceCanTransferOutput {
  isCompliant: Boolean
}

input ISMARTComplianceCreatedInput {
  _amount: String!
  _to: String!
  _token: String!
}

input ISMARTComplianceDestroyedInput {
  _amount: String!
  _from: String!
  _token: String!
}

type ISMARTComplianceModule {
  id: ID
  name: String
  supportsInterface(interfaceId: String!): Boolean
}

input ISMARTComplianceModuleCreatedInput {
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input ISMARTComplianceModuleDestroyedInput {
  _from: String!
  _params: String!
  _token: String!
  _value: String!
}

"""Returns the transaction hash"""
type ISMARTComplianceModuleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTComplianceModuleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTComplianceModuleTransferredInput {
  _from: String!
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

type ISMARTComplianceModulesOutput {
  modulesList: [ISMARTModulesListComplianceModulesOutput!]
}

type ISMARTComplianceOutput {
  complianceContract: String
}

"""Returns the transaction hash"""
type ISMARTComplianceTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTComplianceTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTComplianceTransferredInput {
  _amount: String!
  _from: String!
  _to: String!
  _token: String!
}

type ISMARTCustodian {
  getFrozenTokens(userAddress: String!): String
  id: ID
  isFrozen(userAddress: String!): Boolean
}

input ISMARTCustodianBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input ISMARTCustodianBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ISMARTCustodianBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input ISMARTCustodianBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input ISMARTCustodianForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input ISMARTCustodianForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input ISMARTCustodianFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

input ISMARTCustodianSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

"""Returns the transaction hash"""
type ISMARTCustodianTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTCustodianTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTCustodianUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type ISMARTFixedYieldSchedule {
  allPeriods: ISMARTFixedYieldScheduleAllPeriodsOutput
  calculateAccruedYield(holder: String!): ISMARTFixedYieldScheduleCalculateAccruedYieldOutput
  currentPeriod: ISMARTFixedYieldScheduleCurrentPeriodOutput
  endDate: ISMARTFixedYieldScheduleEndDateOutput
  id: ID
  interval: ISMARTFixedYieldScheduleIntervalOutput
  lastClaimedPeriod(holder: String!): ISMARTFixedYieldScheduleLastClaimedPeriodOutput
  lastCompletedPeriod: ISMARTFixedYieldScheduleLastCompletedPeriodOutput
  periodEnd(period: String!): ISMARTFixedYieldSchedulePeriodEndOutput
  rate: ISMARTFixedYieldScheduleRateOutput
  startDate: ISMARTFixedYieldScheduleStartDateOutput
  supportsInterface(interfaceId: String!): Boolean
  timeUntilNextPeriod: ISMARTFixedYieldScheduleTimeUntilNextPeriodOutput
  token: ISMARTFixedYieldScheduleTokenOutput
  totalUnclaimedYield: ISMARTFixedYieldScheduleTotalUnclaimedYieldOutput
  totalYieldForNextPeriod: ISMARTFixedYieldScheduleTotalYieldForNextPeriodOutput
  underlyingAsset: ISMARTFixedYieldScheduleUnderlyingAssetOutput
}

type ISMARTFixedYieldScheduleAllPeriodsOutput {
  timestamps: [String!]
}

type ISMARTFixedYieldScheduleCalculateAccruedYieldOutput {
  totalAmount: String
}

type ISMARTFixedYieldScheduleCurrentPeriodOutput {
  periodNumber: String
}

type ISMARTFixedYieldScheduleEndDateOutput {
  timestamp: String
}

type ISMARTFixedYieldScheduleIntervalOutput {
  durationSeconds: String
}

type ISMARTFixedYieldScheduleLastClaimedPeriodOutput {
  periodNumber: String
}

type ISMARTFixedYieldScheduleLastCompletedPeriodOutput {
  periodNumber: String
}

type ISMARTFixedYieldSchedulePeriodEndOutput {
  timestamp: String
}

type ISMARTFixedYieldScheduleRateOutput {
  yieldRate: String
}

type ISMARTFixedYieldScheduleStartDateOutput {
  startDateTimestamp: String
}

type ISMARTFixedYieldScheduleTimeUntilNextPeriodOutput {
  timeRemaining: String
}

type ISMARTFixedYieldScheduleTokenOutput {
  tokenContract: String
}

input ISMARTFixedYieldScheduleTopUpUnderlyingAssetInput {
  amount: String!
}

type ISMARTFixedYieldScheduleTotalUnclaimedYieldOutput {
  totalAmount: String
}

type ISMARTFixedYieldScheduleTotalYieldForNextPeriodOutput {
  totalAmount: String
}

"""Returns the transaction hash"""
type ISMARTFixedYieldScheduleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTFixedYieldScheduleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTFixedYieldScheduleUnderlyingAssetOutput {
  assetToken: String
}

input ISMARTFixedYieldScheduleWithdrawAllUnderlyingAssetInput {
  to: String!
}

input ISMARTFixedYieldScheduleWithdrawUnderlyingAssetInput {
  amount: String!
  to: String!
}

type ISMARTHistoricalBalances {
  balanceOfAt(account: String!, timepoint: String!): String
  id: ID
  totalSupplyAt(timepoint: String!): String
}

"""Returns the transaction hash"""
type ISMARTHistoricalBalancesTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTHistoricalBalancesTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTIdentityRegistry {
  contains(_userAddress: String!): Boolean
  getRecoveredWallet(lostWallet: String!): String
  id: ID
  identity(_userAddress: String!): String
  identityStorage: String
  investorCountry(_userAddress: String!): Int
  isVerified(_userAddress: String!, requiredClaimTopics: [String!]!): Boolean
  isWalletLost(userWallet: String!): Boolean
  issuersRegistry: String
  supportsInterface(interfaceId: String!): Boolean
  topicSchemeRegistry: String
}

input ISMARTIdentityRegistryBatchRegisterIdentityInput {
  _countries: [Int!]!
  _identities: [String!]!
  _userAddresses: [String!]!
}

input ISMARTIdentityRegistryDeleteIdentityInput {
  _userAddress: String!
}

type ISMARTIdentityRegistryOutput {
  registryContract: String
}

input ISMARTIdentityRegistryRecoverIdentityInput {
  lostWallet: String!
  newOnchainId: String!
  newWallet: String!
}

input ISMARTIdentityRegistryRegisterIdentityInput {
  _country: Int!
  _identity: String!
  _userAddress: String!
}

input ISMARTIdentityRegistrySetIdentityRegistryStorageInput {
  _identityRegistryStorage: String!
}

input ISMARTIdentityRegistrySetTopicSchemeRegistryInput {
  _topicSchemeRegistry: String!
}

input ISMARTIdentityRegistrySetTrustedIssuersRegistryInput {
  _trustedIssuersRegistry: String!
}

type ISMARTIdentityRegistryStorage {
  getRecoveredWalletFromStorage(lostWallet: String!): String
  id: ID
  isWalletMarkedAsLost(userWallet: String!): Boolean
  linkedIdentityRegistries: [String!]
  storedIdentity(_userAddress: String!): String
  storedInvestorCountry(_userAddress: String!): Int
  supportsInterface(interfaceId: String!): Boolean
}

input ISMARTIdentityRegistryStorageAddIdentityToStorageInput {
  _country: Int!
  _identity: String!
  _userAddress: String!
}

input ISMARTIdentityRegistryStorageBindIdentityRegistryInput {
  _identityRegistry: String!
}

input ISMARTIdentityRegistryStorageLinkWalletRecoveryInput {
  lostWallet: String!
  newWallet: String!
}

input ISMARTIdentityRegistryStorageMarkWalletAsLostInput {
  identityContract: String!
  userWallet: String!
}

input ISMARTIdentityRegistryStorageModifyStoredIdentityInput {
  _identity: String!
  _userAddress: String!
}

input ISMARTIdentityRegistryStorageModifyStoredInvestorCountryInput {
  _country: Int!
  _userAddress: String!
}

input ISMARTIdentityRegistryStorageRemoveIdentityFromStorageInput {
  _userAddress: String!
}

"""Returns the transaction hash"""
type ISMARTIdentityRegistryStorageTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTIdentityRegistryStorageTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTIdentityRegistryStorageUnbindIdentityRegistryInput {
  _identityRegistry: String!
}

"""Returns the transaction hash"""
type ISMARTIdentityRegistryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTIdentityRegistryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTIdentityRegistryUpdateCountryInput {
  _country: Int!
  _userAddress: String!
}

input ISMARTIdentityRegistryUpdateIdentityInput {
  _identity: String!
  _userAddress: String!
}

input ISMARTMintInput {
  _amount: String!
  _to: String!
}

type ISMARTModulesListComplianceModulesOutput {
  module: String
  params: String
}

type ISMARTOnchainIDOutput {
  idAddress: String
}

type ISMARTPausable {
  id: ID
  paused: Boolean
}

"""Returns the transaction hash"""
type ISMARTPausableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTPausableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input ISMARTRecoverTokensInput {
  _lostWallet: String!
}

type ISMARTRedeemable {
  id: ID
}

input ISMARTRedeemableRedeemInput {
  amount: String!
}

"""Returns the transaction hash"""
type ISMARTRedeemableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTRedeemableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTRemoveComplianceModuleInput {
  _module: String!
}

input ISMARTSetComplianceInput {
  _compliance: String!
}

input ISMARTSetIdentityRegistryInput {
  _identityRegistry: String!
}

input ISMARTSetOnchainIDInput {
  _onchainID: String!
}

input ISMARTSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

type ISMARTTokenAccessManaged {
  accessManager: String
  hasRole(account: String!, role: String!): Boolean
  id: ID
}

"""Returns the transaction hash"""
type ISMARTTokenAccessManagedTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTTokenAccessManagedTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTTokenAccessManager {
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
}

input ISMARTTokenAccessManagerBatchGrantRoleInput {
  accounts: [String!]!
  role: String!
}

input ISMARTTokenAccessManagerBatchRevokeRoleInput {
  accounts: [String!]!
  role: String!
}

input ISMARTTokenAccessManagerGrantMultipleRolesInput {
  account: String!
  roles: [String!]!
}

input ISMARTTokenAccessManagerGrantRoleInput {
  account: String!
  role: String!
}

input ISMARTTokenAccessManagerRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ISMARTTokenAccessManagerRevokeMultipleRolesInput {
  account: String!
  roles: [String!]!
}

input ISMARTTokenAccessManagerRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type ISMARTTokenAccessManagerTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTTokenAccessManagerTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTTopicSchemeRegistry {
  getAllTopicIds: ISMARTTopicSchemeRegistryGetAllTopicIdsOutput
  getTopicId(name: String!): ISMARTTopicSchemeRegistryGetTopicIdOutput
  getTopicSchemeCount: ISMARTTopicSchemeRegistryGetTopicSchemeCountOutput
  getTopicSchemeSignature(topicId: String!): ISMARTTopicSchemeRegistryGetTopicSchemeSignatureOutput
  getTopicSchemeSignatureByName(name: String!): ISMARTTopicSchemeRegistryGetTopicSchemeSignatureByNameOutput
  hasTopicScheme(topicId: String!): ISMARTTopicSchemeRegistryHasTopicSchemeOutput
  hasTopicSchemeByName(name: String!): ISMARTTopicSchemeRegistryHasTopicSchemeByNameOutput
  id: ID
  supportsInterface(interfaceId: String!): Boolean
}

input ISMARTTopicSchemeRegistryBatchRegisterTopicSchemesInput {
  names: [String!]!
  signatures: [String!]!
}

type ISMARTTopicSchemeRegistryGetAllTopicIdsOutput {
  topicIds: [String!]
}

type ISMARTTopicSchemeRegistryGetTopicIdOutput {
  topicId: String
}

type ISMARTTopicSchemeRegistryGetTopicSchemeCountOutput {
  count: String
}

type ISMARTTopicSchemeRegistryGetTopicSchemeSignatureByNameOutput {
  signature: String
}

type ISMARTTopicSchemeRegistryGetTopicSchemeSignatureOutput {
  signature: String
}

type ISMARTTopicSchemeRegistryHasTopicSchemeByNameOutput {
  exists: Boolean
}

type ISMARTTopicSchemeRegistryHasTopicSchemeOutput {
  exists: Boolean
}

input ISMARTTopicSchemeRegistryRegisterTopicSchemeInput {
  name: String!
  signature: String!
}

input ISMARTTopicSchemeRegistryRemoveTopicSchemeInput {
  name: String!
}

"""Returns the transaction hash"""
type ISMARTTopicSchemeRegistryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTTopicSchemeRegistryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTTopicSchemeRegistryUpdateTopicSchemeInput {
  name: String!
  newSignature: String!
}

"""Returns the transaction hash"""
type ISMARTTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ISMARTTransferInput {
  to: String!
  value: String!
}

type ISMARTYield {
  balanceOfAt(account: String!, timepoint: String!): String
  id: ID
  totalSupplyAt(timepoint: String!): String
  yieldBasisPerUnit(holder: String!): ISMARTYieldYieldBasisPerUnitOutput
  yieldSchedule: ISMARTYieldYieldScheduleOutput
  yieldToken: ISMARTYieldYieldTokenOutput
}

type ISMARTYieldSchedule {
  id: ID
  startDate: ISMARTYieldScheduleStartDateOutput
}

type ISMARTYieldScheduleStartDateOutput {
  startDateTimestamp: String
}

"""Returns the transaction hash"""
type ISMARTYieldScheduleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTYieldScheduleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTYieldSetYieldScheduleInput {
  schedule: String!
}

"""Returns the transaction hash"""
type ISMARTYieldTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type ISMARTYieldTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTYieldYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type ISMARTYieldYieldScheduleOutput {
  schedule: String
}

type ISMARTYieldYieldTokenOutput {
  paymentToken: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  ATKBondFactoryImplementationCreateBond(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondFactoryImplementationCreateBondInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondFactoryImplementationTransactionOutput
  ATKBondFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondFactoryImplementationTransactionOutput
  ATKBondFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondFactoryImplementationTransactionOutput
  ATKBondFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondFactoryImplementationTransactionOutput
  ATKBondFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondFactoryImplementationTransactionOutput
  ATKBondFactoryImplementationUpdateTokenImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondFactoryImplementationUpdateTokenImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondFactoryImplementationTransactionOutput
  ATKBondImplementationAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationMature(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationRedeem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationRedeemInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationRedeemAll(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetCap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetCapInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationSetYieldSchedule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationSetYieldScheduleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKBondImplementationUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKBondImplementationTransactionOutput
  ATKComplianceImplementationAddMultipleToAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationAddMultipleToAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationAddToAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationAddToAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationRemoveFromAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationRemoveFromAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationRemoveMultipleFromAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationRemoveMultipleFromAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKComplianceImplementationTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKComplianceImplementationTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKComplianceImplementationTransactionOutput
  ATKDepositFactoryImplementationCreateDeposit(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositFactoryImplementationCreateDepositInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositFactoryImplementationTransactionOutput
  ATKDepositFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositFactoryImplementationTransactionOutput
  ATKDepositFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositFactoryImplementationTransactionOutput
  ATKDepositFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositFactoryImplementationTransactionOutput
  ATKDepositFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositFactoryImplementationTransactionOutput
  ATKDepositFactoryImplementationUpdateTokenImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositFactoryImplementationUpdateTokenImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositFactoryImplementationTransactionOutput
  ATKDepositImplementationAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKDepositImplementationUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKDepositImplementationTransactionOutput
  ATKEquityFactoryImplementationCreateEquity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityFactoryImplementationCreateEquityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityFactoryImplementationTransactionOutput
  ATKEquityFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityFactoryImplementationTransactionOutput
  ATKEquityFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityFactoryImplementationTransactionOutput
  ATKEquityFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityFactoryImplementationTransactionOutput
  ATKEquityFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityFactoryImplementationTransactionOutput
  ATKEquityFactoryImplementationUpdateTokenImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityFactoryImplementationUpdateTokenImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityFactoryImplementationTransactionOutput
  ATKEquityImplementationAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationDelegate(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationDelegateInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationDelegateBySig(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationDelegateBySigInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKEquityImplementationUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKEquityImplementationTransactionOutput
  ATKFixedYieldScheduleFactoryCreate(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryCreateInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFixedYieldScheduleFactoryTransactionOutput
  ATKFixedYieldScheduleFactoryGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFixedYieldScheduleFactoryTransactionOutput
  ATKFixedYieldScheduleFactoryRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFixedYieldScheduleFactoryTransactionOutput
  ATKFixedYieldScheduleFactoryRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFixedYieldScheduleFactoryTransactionOutput
  ATKFixedYieldScheduleFactoryUpdateImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryUpdateImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFixedYieldScheduleFactoryTransactionOutput
  ATKForwarderExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKForwarderExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKForwarderTransactionOutput
  ATKForwarderExecuteBatch(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKForwarderExecuteBatchInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKForwarderTransactionOutput
  ATKFundFactoryImplementationCreateFund(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundFactoryImplementationCreateFundInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundFactoryImplementationTransactionOutput
  ATKFundFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundFactoryImplementationTransactionOutput
  ATKFundFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundFactoryImplementationTransactionOutput
  ATKFundFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundFactoryImplementationTransactionOutput
  ATKFundFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundFactoryImplementationTransactionOutput
  ATKFundFactoryImplementationUpdateTokenImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundFactoryImplementationUpdateTokenImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundFactoryImplementationTransactionOutput
  ATKFundImplementationAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationCollectManagementFee(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationDelegate(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationDelegateInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationDelegateBySig(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationDelegateBySigInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKFundImplementationUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKFundImplementationTransactionOutput
  ATKIdentityFactoryImplementationCreateIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityFactoryImplementationCreateIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityFactoryImplementationTransactionOutput
  ATKIdentityFactoryImplementationCreateTokenIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityFactoryImplementationCreateTokenIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityFactoryImplementationTransactionOutput
  ATKIdentityFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityFactoryImplementationTransactionOutput
  ATKIdentityFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityFactoryImplementationTransactionOutput
  ATKIdentityFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityFactoryImplementationTransactionOutput
  ATKIdentityFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityFactoryImplementationTransactionOutput
  ATKIdentityImplementationAddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationAddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationAddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationAddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationRemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationRemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationRemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationRemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationRevokeClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationRevokeClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityImplementationRevokeClaimBySignature(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityImplementationRevokeClaimBySignatureInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityImplementationTransactionOutput
  ATKIdentityRegistryImplementationBatchRegisterIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationBatchRegisterIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationDeleteIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationDeleteIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationRecoverIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationRecoverIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationRegisterIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationRegisterIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationSetIdentityRegistryStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationSetIdentityRegistryStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationSetTopicSchemeRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationSetTopicSchemeRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationSetTrustedIssuersRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationSetTrustedIssuersRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationUpdateCountry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationUpdateCountryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryImplementationUpdateIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryImplementationUpdateIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationAddIdentityToStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationAddIdentityToStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationBindIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationBindIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationLinkWalletRecovery(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationLinkWalletRecoveryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationMarkWalletAsLost(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationMarkWalletAsLostInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationModifyStoredIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationModifyStoredIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKIdentityRegistryStorageImplementationUnbindIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationUnbindIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKIdentityRegistryStorageImplementationTransactionOutput
  ATKStableCoinFactoryImplementationCreateStableCoin(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinFactoryImplementationCreateStableCoinInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinFactoryImplementationTransactionOutput
  ATKStableCoinFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinFactoryImplementationTransactionOutput
  ATKStableCoinFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinFactoryImplementationTransactionOutput
  ATKStableCoinFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinFactoryImplementationTransactionOutput
  ATKStableCoinFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinFactoryImplementationTransactionOutput
  ATKStableCoinFactoryImplementationUpdateTokenImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinFactoryImplementationUpdateTokenImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinFactoryImplementationTransactionOutput
  ATKStableCoinImplementationAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKStableCoinImplementationUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKStableCoinImplementationTransactionOutput
  ATKSystemBootstrap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemCreateTokenFactory(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemCreateTokenFactoryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemFactoryCreateSystem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemFactoryTransactionOutput
  ATKSystemGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetComplianceImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetComplianceImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetIdentityFactoryImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetIdentityFactoryImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetIdentityImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetIdentityImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetIdentityRegistryImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetIdentityRegistryImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetIdentityRegistryStorageImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetIdentityRegistryStorageImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetTokenAccessManagerImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetTokenAccessManagerImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetTokenIdentityImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetTokenIdentityImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetTopicSchemeRegistryImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetTopicSchemeRegistryImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKSystemSetTrustedIssuersRegistryImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKSystemSetTrustedIssuersRegistryImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKSystemTransactionOutput
  ATKTokenAccessManagerImplementationBatchGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationBatchGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationBatchRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationBatchRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationGrantMultipleRoles(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationGrantMultipleRolesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationRevokeMultipleRoles(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRevokeMultipleRolesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenAccessManagerImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenAccessManagerImplementationTransactionOutput
  ATKTokenIdentityImplementationAddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationAddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTokenIdentityImplementationAddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationAddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTokenIdentityImplementationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTokenIdentityImplementationExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTokenIdentityImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTokenIdentityImplementationRemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationRemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTokenIdentityImplementationRemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTokenIdentityImplementationRemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTokenIdentityImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemes(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationRegisterTopicScheme(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationRegisterTopicSchemeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationRemoveTopicScheme(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationRemoveTopicSchemeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTopicSchemeRegistryImplementationUpdateTopicScheme(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationUpdateTopicSchemeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTopicSchemeRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationAddTrustedIssuer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationAddTrustedIssuerInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuerInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopics(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopicsInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput
  AbstractATKTokenFactoryImplementationGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractATKTokenFactoryImplementationTransactionOutput
  AbstractATKTokenFactoryImplementationInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractATKTokenFactoryImplementationTransactionOutput
  AbstractATKTokenFactoryImplementationRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractATKTokenFactoryImplementationTransactionOutput
  AbstractATKTokenFactoryImplementationRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractATKTokenFactoryImplementationTransactionOutput
  AbstractATKTokenFactoryImplementationUpdateTokenImplementation(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationUpdateTokenImplementationInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractATKTokenFactoryImplementationTransactionOutput
  AbstractComplianceModuleCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractComplianceModuleCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractComplianceModuleTransactionOutput
  AbstractComplianceModuleDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractComplianceModuleDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractComplianceModuleTransactionOutput
  AbstractComplianceModuleGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractComplianceModuleGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractComplianceModuleTransactionOutput
  AbstractComplianceModuleRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractComplianceModuleRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractComplianceModuleTransactionOutput
  AbstractComplianceModuleRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractComplianceModuleRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractComplianceModuleTransactionOutput
  AbstractComplianceModuleTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractComplianceModuleTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractComplianceModuleTransactionOutput
  AbstractCountryComplianceModuleCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractCountryComplianceModuleCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractCountryComplianceModuleTransactionOutput
  AbstractCountryComplianceModuleDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractCountryComplianceModuleDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractCountryComplianceModuleTransactionOutput
  AbstractCountryComplianceModuleGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractCountryComplianceModuleGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractCountryComplianceModuleTransactionOutput
  AbstractCountryComplianceModuleRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractCountryComplianceModuleRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractCountryComplianceModuleTransactionOutput
  AbstractCountryComplianceModuleRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractCountryComplianceModuleRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractCountryComplianceModuleTransactionOutput
  AbstractCountryComplianceModuleTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: AbstractCountryComplianceModuleTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): AbstractCountryComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleSetGlobalAllowedCountries(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleSetGlobalAllowedCountriesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryAllowListComplianceModuleTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryAllowListComplianceModuleTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryAllowListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleSetGlobalBlockedCountries(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleSetGlobalBlockedCountriesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput
  CountryBlockListComplianceModuleTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: CountryBlockListComplianceModuleTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CountryBlockListComplianceModuleTransactionOutput

  """Deploy a contract"""
  DeployContract(
    """The ABI of the contract"""
    abi: JSON!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The constructor arguments (must be an array)"""
    constructorArguments: ConstructorArguments

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """The name of the contract"""
    name: String!

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput
  ERC734AddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ERC734AddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ERC734TransactionOutput
  ERC734Approve(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ERC734ApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ERC734TransactionOutput
  ERC734Execute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ERC734ExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ERC734TransactionOutput
  ERC734RemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ERC734RemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ERC734TransactionOutput
  ERC735AddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ERC735AddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ERC735TransactionOutput
  ERC735RemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ERC735RemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ERC735TransactionOutput
  IATKBondAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondFactoryCreateBond(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondFactoryCreateBondInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondFactoryTransactionOutput
  IATKBondFactoryInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondFactoryInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondFactoryTransactionOutput
  IATKBondForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondMature(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondRedeem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondRedeemInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondRedeemAll(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetCap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetCapInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondSetYieldSchedule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondSetYieldScheduleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKBondUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKBondUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKBondTransactionOutput
  IATKComplianceAllowListAddMultipleToAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKComplianceAllowListAddMultipleToAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKComplianceAllowListTransactionOutput
  IATKComplianceAllowListAddToAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKComplianceAllowListAddToAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKComplianceAllowListTransactionOutput
  IATKComplianceAllowListRemoveFromAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKComplianceAllowListRemoveFromAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKComplianceAllowListTransactionOutput
  IATKComplianceAllowListRemoveMultipleFromAllowList(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKComplianceAllowListRemoveMultipleFromAllowListInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKComplianceAllowListTransactionOutput
  IATKDepositAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositFactoryCreateDeposit(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositFactoryCreateDepositInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositFactoryTransactionOutput
  IATKDepositFactoryInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositFactoryInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositFactoryTransactionOutput
  IATKDepositForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKDepositUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKDepositUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKDepositTransactionOutput
  IATKEquityAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityDelegate(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityDelegateInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityDelegateBySig(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityDelegateBySigInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityFactoryCreateEquity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityFactoryCreateEquityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityFactoryTransactionOutput
  IATKEquityFactoryInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityFactoryInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityFactoryTransactionOutput
  IATKEquityForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquitySetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquitySetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquitySetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquitySetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquitySetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquitySetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquitySetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquitySetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquitySetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquitySetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKEquityUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKEquityUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKEquityTransactionOutput
  IATKFixedYieldScheduleFactoryCreate(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFixedYieldScheduleFactoryCreateInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFixedYieldScheduleFactoryTransactionOutput
  IATKFundAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundCollectManagementFee(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundDelegate(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundDelegateInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundDelegateBySig(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundDelegateBySigInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundFactoryCreateFund(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundFactoryCreateFundInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundFactoryTransactionOutput
  IATKFundFactoryInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundFactoryInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundFactoryTransactionOutput
  IATKFundForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKFundUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKFundUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKFundTransactionOutput
  IATKIdentityAddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityAddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKIdentityAddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityAddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKIdentityApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKIdentityExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKIdentityFactoryCreateIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityFactoryCreateIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityFactoryTransactionOutput
  IATKIdentityFactoryCreateTokenIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityFactoryCreateTokenIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityFactoryTransactionOutput
  IATKIdentityInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKIdentityRemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityRemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKIdentityRemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKIdentityRemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKIdentityTransactionOutput
  IATKStableCoinAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinFactoryCreateStableCoin(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinFactoryCreateStableCoinInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinFactoryTransactionOutput
  IATKStableCoinFactoryInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinFactoryInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinFactoryTransactionOutput
  IATKStableCoinForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinPause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKStableCoinUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKStableCoinUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKStableCoinTransactionOutput
  IATKSystemBootstrap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKSystemTransactionOutput
  IATKSystemCreateTokenFactory(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKSystemCreateTokenFactoryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKSystemTransactionOutput
  IATKSystemFactoryCreateSystem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKSystemFactoryTransactionOutput
  IATKTokenFactoryInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenFactoryInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenFactoryTransactionOutput
  IATKTokenIdentityAddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityAddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IATKTokenIdentityAddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityAddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IATKTokenIdentityApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IATKTokenIdentityExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IATKTokenIdentityInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IATKTokenIdentityRemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityRemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IATKTokenIdentityRemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IATKTokenIdentityRemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IATKTokenIdentityTransactionOutput
  IERC3643Approve(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643BatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643Burn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643BurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643ClaimTopicsRegistryAddClaimTopic(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ClaimTopicsRegistryAddClaimTopicInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ClaimTopicsRegistryTransactionOutput
  IERC3643ClaimTopicsRegistryRemoveClaimTopic(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ClaimTopicsRegistryRemoveClaimTopicInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ClaimTopicsRegistryTransactionOutput
  IERC3643ComplianceBindToken(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ComplianceBindTokenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ComplianceTransactionOutput
  IERC3643ComplianceCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ComplianceCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ComplianceTransactionOutput
  IERC3643ComplianceDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ComplianceDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ComplianceTransactionOutput
  IERC3643ComplianceTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ComplianceTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ComplianceTransactionOutput
  IERC3643ComplianceUnbindToken(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ComplianceUnbindTokenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643ComplianceTransactionOutput
  IERC3643ForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643ForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643FreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643FreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643IdentityRegistryBatchRegisterIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryBatchRegisterIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistryDeleteIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryDeleteIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistryRegisterIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryRegisterIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistrySetClaimTopicsRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistrySetClaimTopicsRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistrySetIdentityRegistryStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistrySetIdentityRegistryStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistrySetTrustedIssuersRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistrySetTrustedIssuersRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistryStorageAddIdentityToStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryStorageAddIdentityToStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryStorageTransactionOutput
  IERC3643IdentityRegistryStorageBindIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryStorageBindIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryStorageTransactionOutput
  IERC3643IdentityRegistryStorageModifyStoredIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryStorageModifyStoredIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryStorageTransactionOutput
  IERC3643IdentityRegistryStorageModifyStoredInvestorCountry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryStorageModifyStoredInvestorCountryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryStorageTransactionOutput
  IERC3643IdentityRegistryStorageRemoveIdentityFromStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryStorageRemoveIdentityFromStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryStorageTransactionOutput
  IERC3643IdentityRegistryStorageUnbindIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryStorageUnbindIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryStorageTransactionOutput
  IERC3643IdentityRegistryUpdateCountry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryUpdateCountryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643IdentityRegistryUpdateIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643IdentityRegistryUpdateIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643IdentityRegistryTransactionOutput
  IERC3643Mint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643MintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643Pause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643RecoveryAddress(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643RecoveryAddressInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643SetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643SetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643SetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643SetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643SetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643SetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643SetName(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643SetNameInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643SetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643SetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643SetSymbol(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643SetSymbolInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643Transfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643TransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643TransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643TransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643TrustedIssuersRegistryAddTrustedIssuer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643TrustedIssuersRegistryAddTrustedIssuerInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TrustedIssuersRegistryTransactionOutput
  IERC3643TrustedIssuersRegistryRemoveTrustedIssuer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643TrustedIssuersRegistryRemoveTrustedIssuerInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TrustedIssuersRegistryTransactionOutput
  IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopics(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopicsInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TrustedIssuersRegistryTransactionOutput
  IERC3643UnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: IERC3643UnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  IERC3643Unpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): IERC3643TransactionOutput
  ISMARTAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTBurnableBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTBurnableBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTBurnableTransactionOutput
  ISMARTBurnableBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTBurnableBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTBurnableTransactionOutput
  ISMARTCappedSetCap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCappedSetCapInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCappedTransactionOutput
  ISMARTComplianceCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTComplianceCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTComplianceTransactionOutput
  ISMARTComplianceDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTComplianceDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTComplianceTransactionOutput
  ISMARTComplianceModuleCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTComplianceModuleCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTComplianceModuleTransactionOutput
  ISMARTComplianceModuleDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTComplianceModuleDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTComplianceModuleTransactionOutput
  ISMARTComplianceModuleTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTComplianceModuleTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTComplianceModuleTransactionOutput
  ISMARTComplianceTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTComplianceTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTComplianceTransactionOutput
  ISMARTCustodianBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTCustodianUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTCustodianUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTCustodianTransactionOutput
  ISMARTFixedYieldScheduleClaimYield(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTFixedYieldScheduleTransactionOutput
  ISMARTFixedYieldScheduleTopUpUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTFixedYieldScheduleTopUpUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTFixedYieldScheduleTransactionOutput
  ISMARTFixedYieldScheduleWithdrawAllUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTFixedYieldScheduleWithdrawAllUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTFixedYieldScheduleTransactionOutput
  ISMARTFixedYieldScheduleWithdrawUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTFixedYieldScheduleWithdrawUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTFixedYieldScheduleTransactionOutput
  ISMARTIdentityRegistryBatchRegisterIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryBatchRegisterIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistryDeleteIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryDeleteIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistryRecoverIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryRecoverIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistryRegisterIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryRegisterIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistrySetIdentityRegistryStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistrySetIdentityRegistryStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistrySetTopicSchemeRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistrySetTopicSchemeRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistrySetTrustedIssuersRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistrySetTrustedIssuersRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistryStorageAddIdentityToStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageAddIdentityToStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageBindIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageBindIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageLinkWalletRecovery(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageLinkWalletRecoveryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageMarkWalletAsLost(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageMarkWalletAsLostInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageModifyStoredIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageModifyStoredIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageModifyStoredInvestorCountry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageModifyStoredInvestorCountryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageRemoveIdentityFromStorage(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageRemoveIdentityFromStorageInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryStorageUnbindIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryStorageUnbindIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryStorageTransactionOutput
  ISMARTIdentityRegistryUpdateCountry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryUpdateCountryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTIdentityRegistryUpdateIdentity(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTIdentityRegistryUpdateIdentityInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTIdentityRegistryTransactionOutput
  ISMARTMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTPausablePause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTPausableTransactionOutput
  ISMARTPausableUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTPausableTransactionOutput
  ISMARTRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTRedeemableRedeem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTRedeemableRedeemInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTRedeemableTransactionOutput
  ISMARTRedeemableRedeemAll(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTRedeemableTransactionOutput
  ISMARTRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTTokenAccessManagerBatchGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerBatchGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTokenAccessManagerBatchRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerBatchRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTokenAccessManagerGrantMultipleRoles(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerGrantMultipleRolesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTokenAccessManagerGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTokenAccessManagerRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTokenAccessManagerRevokeMultipleRoles(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerRevokeMultipleRolesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTokenAccessManagerRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTokenAccessManagerRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTokenAccessManagerTransactionOutput
  ISMARTTopicSchemeRegistryBatchRegisterTopicSchemes(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTopicSchemeRegistryBatchRegisterTopicSchemesInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTopicSchemeRegistryTransactionOutput
  ISMARTTopicSchemeRegistryRegisterTopicScheme(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTopicSchemeRegistryRegisterTopicSchemeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTopicSchemeRegistryTransactionOutput
  ISMARTTopicSchemeRegistryRemoveTopicScheme(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTopicSchemeRegistryRemoveTopicSchemeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTopicSchemeRegistryTransactionOutput
  ISMARTTopicSchemeRegistryUpdateTopicScheme(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTopicSchemeRegistryUpdateTopicSchemeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTopicSchemeRegistryTransactionOutput
  ISMARTTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTTransactionOutput
  ISMARTYieldSetYieldSchedule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: ISMARTYieldSetYieldScheduleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ISMARTYieldTransactionOutput
  OnChainIdentityAddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityAddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityTransactionOutput
  OnChainIdentityAddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityAddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityTransactionOutput
  OnChainIdentityApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityTransactionOutput
  OnChainIdentityExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityTransactionOutput
  OnChainIdentityRemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityRemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityTransactionOutput
  OnChainIdentityRemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityRemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityTransactionOutput
  OnChainIdentityWithRevocationAddClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationAddClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationAddKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationAddKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationExecute(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationExecuteInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationRemoveClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationRemoveClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationRemoveKey(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationRemoveKeyInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationRevokeClaim(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationRevokeClaimInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  OnChainIdentityWithRevocationRevokeClaimBySignature(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: OnChainIdentityWithRevocationRevokeClaimBySignatureInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): OnChainIdentityWithRevocationTransactionOutput
  SMARTAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTBurnableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableTransactionOutput
  SMARTBurnableUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableBatchBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableBatchBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableBurn(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableBurnInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTBurnableUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTBurnableUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTBurnableUpgradeableTransactionOutput
  SMARTCappedAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedSetCap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedSetCapInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedTransactionOutput
  SMARTCappedUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableSetCap(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableSetCapInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCappedUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCappedUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCappedUpgradeableTransactionOutput
  SMARTCollateralAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralTransactionOutput
  SMARTCollateralUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCollateralUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCollateralUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCollateralUpgradeableTransactionOutput
  SMARTCustodianAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianTransactionOutput
  SMARTCustodianUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableBatchForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableBatchFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableBatchSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableBatchUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableForcedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableForcedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableForcedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableForcedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableFreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableFreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableSetAddressFrozen(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableSetAddressFrozenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTCustodianUpgradeableUnfreezePartialTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTCustodianUpgradeableUnfreezePartialTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTCustodianUpgradeableTransactionOutput
  SMARTExtensionAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionTransactionOutput
  SMARTExtensionUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTExtensionUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTExtensionUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTExtensionUpgradeableTransactionOutput
  SMARTFixedYieldScheduleClaimYield(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleLogicClaimYield(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleLogicTransactionOutput
  SMARTFixedYieldScheduleLogicTopUpUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleLogicTopUpUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleLogicTransactionOutput
  SMARTFixedYieldScheduleLogicWithdrawAllUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleLogicWithdrawAllUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleLogicTransactionOutput
  SMARTFixedYieldScheduleLogicWithdrawUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleLogicWithdrawUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleLogicTransactionOutput
  SMARTFixedYieldSchedulePause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleTopUpUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleTopUpUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleUpgradeableClaimYield(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableInitialize(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableInitializeInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeablePause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableTopUpUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableTopUpUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableWithdrawAllUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableWithdrawAllUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleUpgradeableWithdrawUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableWithdrawUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput
  SMARTFixedYieldScheduleWithdrawAllUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleWithdrawAllUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTFixedYieldScheduleWithdrawUnderlyingAsset(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTFixedYieldScheduleWithdrawUnderlyingAssetInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTFixedYieldScheduleTransactionOutput
  SMARTHistoricalBalancesAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesTransactionOutput
  SMARTHistoricalBalancesUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTHistoricalBalancesUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput
  SMARTIdentityVerificationModuleCreated(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTIdentityVerificationModuleCreatedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTIdentityVerificationModuleTransactionOutput
  SMARTIdentityVerificationModuleDestroyed(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTIdentityVerificationModuleDestroyedInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTIdentityVerificationModuleTransactionOutput
  SMARTIdentityVerificationModuleGrantRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTIdentityVerificationModuleGrantRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTIdentityVerificationModuleTransactionOutput
  SMARTIdentityVerificationModuleRenounceRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTIdentityVerificationModuleRenounceRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTIdentityVerificationModuleTransactionOutput
  SMARTIdentityVerificationModuleRevokeRole(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTIdentityVerificationModuleRevokeRoleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTIdentityVerificationModuleTransactionOutput
  SMARTIdentityVerificationModuleTransferred(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTIdentityVerificationModuleTransferredInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTIdentityVerificationModuleTransactionOutput
  SMARTMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTPausableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausablePause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableTransactionOutput
  SMARTPausableUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeablePause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTPausableUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTPausableUpgradeableUnpause(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTPausableUpgradeableTransactionOutput
  SMARTRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTRedeemableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableRedeem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableRedeemInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableRedeemAll(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableTransactionOutput
  SMARTRedeemableUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableRedeem(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableRedeemInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableRedeemAll(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRedeemableUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRedeemableUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTRedeemableUpgradeableTransactionOutput
  SMARTRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTTokenAccessManagedAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedTransactionOutput
  SMARTTokenAccessManagedUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTokenAccessManagedUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput
  SMARTTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTTransactionOutput
  SMARTUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTUpgradeableTransactionOutput
  SMARTYieldAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldSetYieldSchedule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldSetYieldScheduleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldTransactionOutput
  SMARTYieldUpgradeableAddComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableAddComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableApprove(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableBatchMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableBatchMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableBatchTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableBatchTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableMint(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableMintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableRecoverERC20(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableRecoverERC20Input!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableRecoverTokens(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableRecoverTokensInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableRemoveComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableRemoveComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableSetCompliance(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableSetComplianceInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableSetIdentityRegistry(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableSetIdentityRegistryInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableSetOnchainID(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableSetOnchainIDInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableSetParametersForComplianceModule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableSetParametersForComplianceModuleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableSetYieldSchedule(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableSetYieldScheduleInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableTransfer(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableTransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  SMARTYieldUpgradeableTransferFrom(
    """The address of the contract"""
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: SMARTYieldUpgradeableTransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): SMARTYieldUpgradeableTransactionOutput
  createWallet(
    """The ID of the key vault where the wallet will be created"""
    keyVaultId: String!

    """Information about the wallet to be created"""
    walletInfo: CreateWalletInfoInput!
  ): CreateWalletOutput

  """Create a new verification for a specific user wallet"""
  createWalletVerification(
    """The Ethereum address of the user wallet"""
    userWalletAddress: String!
    verificationInfo: CreateWalletVerificationInput!
  ): CreateWalletVerificationOutput

  """
  Generates and returns challenges for all or specific verification methods of a user's wallet
  """
  createWalletVerificationChallenges(
    """Ethereum address of the user's wallet"""
    userWalletAddress: String!

    """
    Optional unique identifier of the verification to create challenges for
    """
    verificationId: String
  ): [WalletVerificationChallenge!]

  """Removes a specific verification method from a user's wallet"""
  deleteWalletVerification(
    """Ethereum address of the user's wallet"""
    userWalletAddress: String!

    """Unique identifier of the verification to delete"""
    verificationId: String!
  ): DeleteWalletVerificationOutput

  """Verifies the response to a wallet verification challenge"""
  verifyWalletVerificationChallenge(
    """The response to the verification challenge"""
    challengeResponse: String!

    """Ethereum address of the user's wallet"""
    userWalletAddress: String!

    """Optional unique identifier of the specific verification to verify"""
    verificationId: String
  ): VerifyWalletVerificationChallengeOutput
}

"""Algorithm used for OTP verification"""
enum OTPAlgorithm {
  SHA1
  SHA3_224
  SHA3_256
  SHA3_384
  SHA3_512
  SHA224
  SHA256
  SHA384
  SHA512
}

input OTPSettingsInput {
  """The algorithm for OTP verification"""
  algorithm: OTPAlgorithm

  """The number of digits for OTP verification"""
  digits: Int

  """The issuer for OTP verification"""
  issuer: String

  """The name of the OTP verification"""
  name: String!

  """The period (in seconds) for OTP verification"""
  period: Int
}

type OnChainIdentity {
  getClaim(_claimId: String!): OnChainIdentityGetClaimOutput
  getClaimIdsByTopic(_topic: String!): OnChainIdentityGetClaimIdsByTopicOutput
  getKey(_key: String!): OnChainIdentityGetKeyOutput
  getKeyPurposes(_key: String!): OnChainIdentityGetKeyPurposesOutput
  getKeysByPurpose(_purpose: String!): OnChainIdentityGetKeysByPurposeOutput
  getRecoveredAddress(dataHash: String!, sig: String!): OnChainIdentityGetRecoveredAddressOutput
  id: ID
  isClaimValid(_identity: String!, claimTopic: String!, data: String!, sig: String!): OnChainIdentityIsClaimValidOutput
  keyHasPurpose(_key: String!, _purpose: String!): OnChainIdentityKeyHasPurposeOutput
}

input OnChainIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input OnChainIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input OnChainIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input OnChainIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type OnChainIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type OnChainIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type OnChainIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type OnChainIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type OnChainIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

type OnChainIdentityGetRecoveredAddressOutput {
  addr: String
}

type OnChainIdentityIsClaimValidOutput {
  claimValid: Boolean
}

type OnChainIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input OnChainIdentityRemoveClaimInput {
  _claimId: String!
}

input OnChainIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""Returns the transaction hash"""
type OnChainIdentityTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type OnChainIdentityTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type OnChainIdentityWithRevocation {
  getClaim(_claimId: String!): OnChainIdentityWithRevocationGetClaimOutput
  getClaimIdsByTopic(_topic: String!): OnChainIdentityWithRevocationGetClaimIdsByTopicOutput
  getKey(_key: String!): OnChainIdentityWithRevocationGetKeyOutput
  getKeyPurposes(_key: String!): OnChainIdentityWithRevocationGetKeyPurposesOutput
  getKeysByPurpose(_purpose: String!): OnChainIdentityWithRevocationGetKeysByPurposeOutput
  getRecoveredAddress(dataHash: String!, sig: String!): OnChainIdentityWithRevocationGetRecoveredAddressOutput
  id: ID
  isClaimRevoked(_sig: String!): Boolean
  isClaimValid(_identity: String!, claimTopic: String!, data: String!, sig: String!): OnChainIdentityWithRevocationIsClaimValidOutput
  keyHasPurpose(_key: String!, _purpose: String!): OnChainIdentityWithRevocationKeyHasPurposeOutput
  revokedClaims(bytes320: String!): Boolean
}

input OnChainIdentityWithRevocationAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input OnChainIdentityWithRevocationAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input OnChainIdentityWithRevocationApproveInput {
  _approve: Boolean!
  _id: String!
}

input OnChainIdentityWithRevocationExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type OnChainIdentityWithRevocationGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type OnChainIdentityWithRevocationGetClaimOutput {
  address2: String
  bytes3: String
  bytes4: String
  string5: String
  uint2560: String
  uint2561: String
}

type OnChainIdentityWithRevocationGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type OnChainIdentityWithRevocationGetKeyPurposesOutput {
  _purposes: [String!]
}

type OnChainIdentityWithRevocationGetKeysByPurposeOutput {
  keys: [String!]
}

type OnChainIdentityWithRevocationGetRecoveredAddressOutput {
  addr: String
}

type OnChainIdentityWithRevocationIsClaimValidOutput {
  claimValid: Boolean
}

type OnChainIdentityWithRevocationKeyHasPurposeOutput {
  exists: Boolean
}

input OnChainIdentityWithRevocationRemoveClaimInput {
  _claimId: String!
}

input OnChainIdentityWithRevocationRemoveKeyInput {
  _key: String!
  _purpose: String!
}

input OnChainIdentityWithRevocationRevokeClaimBySignatureInput {
  signature: String!
}

input OnChainIdentityWithRevocationRevokeClaimInput {
  _claimId: String!
}

"""Returns the transaction hash"""
type OnChainIdentityWithRevocationTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type OnChainIdentityWithRevocationTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input PincodeSettingsInput {
  """The name of the PINCODE verification"""
  name: String!

  """The pincode for PINCODE verification"""
  pincode: String!
}

type Query {
  ATKAssetProxy(
    """The address of the contract"""
    address: String!
  ): ATKAssetProxy
  ATKBondFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKBondFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKBondFactoryImplementationCreateBondReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondFactoryImplementationUpdateTokenImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput
  ATKBondImplementation(
    """The address of the contract"""
    address: String!
  ): ATKBondImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationMatureReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationRedeemAllReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationRedeemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetCapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationSetYieldScheduleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKBondImplementationUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput
  ATKBondProxy(
    """The address of the contract"""
    address: String!
  ): ATKBondProxy
  ATKComplianceImplementation(
    """The address of the contract"""
    address: String!
  ): ATKComplianceImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationAddMultipleToAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationAddToAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationRemoveFromAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationRemoveMultipleFromAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKComplianceImplementationTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput
  ATKComplianceProxy(
    """The address of the contract"""
    address: String!
  ): ATKComplianceProxy
  ATKDepositFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKDepositFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKDepositFactoryImplementationCreateDepositReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositFactoryImplementationUpdateTokenImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput
  ATKDepositImplementation(
    """The address of the contract"""
    address: String!
  ): ATKDepositImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKDepositImplementationUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput
  ATKDepositProxy(
    """The address of the contract"""
    address: String!
  ): ATKDepositProxy
  ATKEquityFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKEquityFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKEquityFactoryImplementationCreateEquityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityFactoryImplementationUpdateTokenImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput
  ATKEquityImplementation(
    """The address of the contract"""
    address: String!
  ): ATKEquityImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationDelegateBySigReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationDelegateReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKEquityImplementationUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput
  ATKEquityProxy(
    """The address of the contract"""
    address: String!
  ): ATKEquityProxy
  ATKFixedYieldProxy(
    """The address of the contract"""
    address: String!
  ): ATKFixedYieldProxy
  ATKFixedYieldScheduleFactory(
    """The address of the contract"""
    address: String!
  ): ATKFixedYieldScheduleFactory

  """Fetches the receipt for the given transaction hash"""
  ATKFixedYieldScheduleFactoryCreateReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFixedYieldScheduleFactoryGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFixedYieldScheduleFactoryRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFixedYieldScheduleFactoryRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFixedYieldScheduleFactoryUpdateImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryTransactionReceiptOutput
  ATKForwarder(
    """The address of the contract"""
    address: String!
  ): ATKForwarder

  """Fetches the receipt for the given transaction hash"""
  ATKForwarderExecuteBatchReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKForwarderTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKForwarderExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKForwarderTransactionReceiptOutput
  ATKFundFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKFundFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKFundFactoryImplementationCreateFundReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundFactoryImplementationUpdateTokenImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput
  ATKFundImplementation(
    """The address of the contract"""
    address: String!
  ): ATKFundImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationCollectManagementFeeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationDelegateBySigReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationDelegateReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKFundImplementationUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput
  ATKFundProxy(
    """The address of the contract"""
    address: String!
  ): ATKFundProxy
  ATKIdentityFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKIdentityFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityFactoryImplementationCreateIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityFactoryImplementationCreateTokenIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput
  ATKIdentityFactoryProxy(
    """The address of the contract"""
    address: String!
  ): ATKIdentityFactoryProxy
  ATKIdentityImplementation(
    """The address of the contract"""
    address: String!
  ): ATKIdentityImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationAddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationAddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationRemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationRemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationRevokeClaimBySignatureReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityImplementationRevokeClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput
  ATKIdentityProxy(
    """The address of the contract"""
    address: String!
  ): ATKIdentityProxy
  ATKIdentityRegistryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKIdentityRegistryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationBatchRegisterIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationDeleteIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationRecoverIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationRegisterIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationSetIdentityRegistryStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationSetTopicSchemeRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationSetTrustedIssuersRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationUpdateCountryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryImplementationUpdateIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput
  ATKIdentityRegistryProxy(
    """The address of the contract"""
    address: String!
  ): ATKIdentityRegistryProxy
  ATKIdentityRegistryStorageImplementation(
    """The address of the contract"""
    address: String!
  ): ATKIdentityRegistryStorageImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationAddIdentityToStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationBindIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationLinkWalletRecoveryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationMarkWalletAsLostReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationModifyStoredIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKIdentityRegistryStorageImplementationUnbindIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput
  ATKIdentityRegistryStorageProxy(
    """The address of the contract"""
    address: String!
  ): ATKIdentityRegistryStorageProxy
  ATKRoles(
    """The address of the contract"""
    address: String!
  ): ATKRoles
  ATKStableCoinFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKStableCoinFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinFactoryImplementationCreateStableCoinReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinFactoryImplementationUpdateTokenImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput
  ATKStableCoinImplementation(
    """The address of the contract"""
    address: String!
  ): ATKStableCoinImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKStableCoinImplementationUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput
  ATKStableCoinProxy(
    """The address of the contract"""
    address: String!
  ): ATKStableCoinProxy
  ATKSystem(
    """The address of the contract"""
    address: String!
  ): ATKSystem

  """Fetches the receipt for the given transaction hash"""
  ATKSystemBootstrapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemCreateTokenFactoryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput
  ATKSystemFactory(
    """The address of the contract"""
    address: String!
  ): ATKSystemFactory

  """Fetches the receipt for the given transaction hash"""
  ATKSystemFactoryCreateSystemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput
  ATKSystemProxy(
    """The address of the contract"""
    address: String!
  ): ATKSystemProxy

  """Fetches the receipt for the given transaction hash"""
  ATKSystemRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput
  ATKSystemRoles(
    """The address of the contract"""
    address: String!
  ): ATKSystemRoles

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetComplianceImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetIdentityFactoryImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetIdentityImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetIdentityRegistryImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetIdentityRegistryStorageImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetTokenAccessManagerImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetTokenIdentityImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetTopicSchemeRegistryImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKSystemSetTrustedIssuersRegistryImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKSystemTransactionReceiptOutput
  ATKTokenAccessManagerImplementation(
    """The address of the contract"""
    address: String!
  ): ATKTokenAccessManagerImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationBatchGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationBatchRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationGrantMultipleRolesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationRevokeMultipleRolesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenAccessManagerImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput
  ATKTokenAccessManagerProxy(
    """The address of the contract"""
    address: String!
  ): ATKTokenAccessManagerProxy
  ATKTokenFactoryProxy(
    """The address of the contract"""
    address: String!
  ): ATKTokenFactoryProxy
  ATKTokenIdentityImplementation(
    """The address of the contract"""
    address: String!
  ): ATKTokenIdentityImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationAddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationAddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationRemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTokenIdentityImplementationRemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTokenIdentityImplementationTransactionReceiptOutput
  ATKTokenIdentityProxy(
    """The address of the contract"""
    address: String!
  ): ATKTokenIdentityProxy
  ATKTopicSchemeRegistryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKTopicSchemeRegistryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationRegisterTopicSchemeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationRemoveTopicSchemeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTopicSchemeRegistryImplementationUpdateTopicSchemeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput
  ATKTopicSchemeRegistryProxy(
    """The address of the contract"""
    address: String!
  ): ATKTopicSchemeRegistryProxy
  ATKTopics(
    """The address of the contract"""
    address: String!
  ): ATKTopics
  ATKTrustedIssuersRegistryImplementation(
    """The address of the contract"""
    address: String!
  ): ATKTrustedIssuersRegistryImplementation

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationAddTrustedIssuerReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuerReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopicsReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput
  ATKTrustedIssuersRegistryProxy(
    """The address of the contract"""
    address: String!
  ): ATKTrustedIssuersRegistryProxy
  AbstractATKTokenFactoryImplementation(
    """The address of the contract"""
    address: String!
  ): AbstractATKTokenFactoryImplementation

  """Fetches the receipt for the given transaction hash"""
  AbstractATKTokenFactoryImplementationGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractATKTokenFactoryImplementationInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractATKTokenFactoryImplementationRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractATKTokenFactoryImplementationRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractATKTokenFactoryImplementationUpdateTokenImplementationReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput
  AbstractComplianceModule(
    """The address of the contract"""
    address: String!
  ): AbstractComplianceModule

  """Fetches the receipt for the given transaction hash"""
  AbstractComplianceModuleCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractComplianceModuleDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractComplianceModuleGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractComplianceModuleRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractComplianceModuleRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractComplianceModuleTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput
  AbstractCountryComplianceModule(
    """The address of the contract"""
    address: String!
  ): AbstractCountryComplianceModule

  """Fetches the receipt for the given transaction hash"""
  AbstractCountryComplianceModuleCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractCountryComplianceModuleDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractCountryComplianceModuleGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractCountryComplianceModuleRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractCountryComplianceModuleRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  AbstractCountryComplianceModuleTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput
  CountryAllowListComplianceModule(
    """The address of the contract"""
    address: String!
  ): CountryAllowListComplianceModule

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleSetGlobalAllowedCountriesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryAllowListComplianceModuleTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput
  CountryBlockListComplianceModule(
    """The address of the contract"""
    address: String!
  ): CountryBlockListComplianceModule

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleSetGlobalBlockedCountriesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  CountryBlockListComplianceModuleTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput
  ERC734(
    """The address of the contract"""
    address: String!
  ): ERC734

  """Fetches the receipt for the given transaction hash"""
  ERC734AddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ERC734TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ERC734ApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ERC734TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ERC734ExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ERC734TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ERC734RemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ERC734TransactionReceiptOutput
  ERC735(
    """The address of the contract"""
    address: String!
  ): ERC735

  """Fetches the receipt for the given transaction hash"""
  ERC735AddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ERC735TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ERC735RemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ERC735TransactionReceiptOutput
  IATKBond(
    """The address of the contract"""
    address: String!
  ): IATKBond

  """Fetches the receipt for the given transaction hash"""
  IATKBondAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput
  IATKBondFactory(
    """The address of the contract"""
    address: String!
  ): IATKBondFactory

  """Fetches the receipt for the given transaction hash"""
  IATKBondFactoryCreateBondReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondFactoryInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondMatureReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondRedeemAllReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondRedeemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetCapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondSetYieldScheduleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKBondUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput
  IATKComplianceAllowList(
    """The address of the contract"""
    address: String!
  ): IATKComplianceAllowList

  """Fetches the receipt for the given transaction hash"""
  IATKComplianceAllowListAddMultipleToAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKComplianceAllowListTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKComplianceAllowListAddToAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKComplianceAllowListTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKComplianceAllowListRemoveFromAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKComplianceAllowListTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKComplianceAllowListRemoveMultipleFromAllowListReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKComplianceAllowListTransactionReceiptOutput
  IATKDeposit(
    """The address of the contract"""
    address: String!
  ): IATKDeposit

  """Fetches the receipt for the given transaction hash"""
  IATKDepositAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput
  IATKDepositFactory(
    """The address of the contract"""
    address: String!
  ): IATKDepositFactory

  """Fetches the receipt for the given transaction hash"""
  IATKDepositFactoryCreateDepositReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositFactoryInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKDepositUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput
  IATKEquity(
    """The address of the contract"""
    address: String!
  ): IATKEquity

  """Fetches the receipt for the given transaction hash"""
  IATKEquityAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityDelegateBySigReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityDelegateReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput
  IATKEquityFactory(
    """The address of the contract"""
    address: String!
  ): IATKEquityFactory

  """Fetches the receipt for the given transaction hash"""
  IATKEquityFactoryCreateEquityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityFactoryInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquitySetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquitySetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquitySetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquitySetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquitySetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKEquityUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput
  IATKFixedYieldScheduleFactory(
    """The address of the contract"""
    address: String!
  ): IATKFixedYieldScheduleFactory

  """Fetches the receipt for the given transaction hash"""
  IATKFixedYieldScheduleFactoryCreateReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFixedYieldScheduleFactoryTransactionReceiptOutput
  IATKFund(
    """The address of the contract"""
    address: String!
  ): IATKFund

  """Fetches the receipt for the given transaction hash"""
  IATKFundAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundCollectManagementFeeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundDelegateBySigReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundDelegateReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput
  IATKFundFactory(
    """The address of the contract"""
    address: String!
  ): IATKFundFactory

  """Fetches the receipt for the given transaction hash"""
  IATKFundFactoryCreateFundReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundFactoryInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKFundUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput
  IATKIdentity(
    """The address of the contract"""
    address: String!
  ): IATKIdentity

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityAddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityAddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput
  IATKIdentityFactory(
    """The address of the contract"""
    address: String!
  ): IATKIdentityFactory

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityFactoryCreateIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityFactoryCreateTokenIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityRemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKIdentityRemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput
  IATKStableCoin(
    """The address of the contract"""
    address: String!
  ): IATKStableCoin

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput
  IATKStableCoinFactory(
    """The address of the contract"""
    address: String!
  ): IATKStableCoinFactory

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinFactoryCreateStableCoinReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinFactoryInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinFactoryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinPauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKStableCoinUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput
  IATKSystem(
    """The address of the contract"""
    address: String!
  ): IATKSystem

  """Fetches the receipt for the given transaction hash"""
  IATKSystemBootstrapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKSystemTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKSystemCreateTokenFactoryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKSystemTransactionReceiptOutput
  IATKSystemFactory(
    """The address of the contract"""
    address: String!
  ): IATKSystemFactory

  """Fetches the receipt for the given transaction hash"""
  IATKSystemFactoryCreateSystemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKSystemFactoryTransactionReceiptOutput
  IATKTokenFactory(
    """The address of the contract"""
    address: String!
  ): IATKTokenFactory

  """Fetches the receipt for the given transaction hash"""
  IATKTokenFactoryInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenFactoryTransactionReceiptOutput
  IATKTokenIdentity(
    """The address of the contract"""
    address: String!
  ): IATKTokenIdentity

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityAddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityAddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityRemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IATKTokenIdentityRemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IATKTokenIdentityTransactionReceiptOutput
  IERC3643(
    """The address of the contract"""
    address: String!
  ): IERC3643

  """Fetches the receipt for the given transaction hash"""
  IERC3643ApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643BurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  IERC3643ClaimTopicsRegistry(
    """The address of the contract"""
    address: String!
  ): IERC3643ClaimTopicsRegistry

  """Fetches the receipt for the given transaction hash"""
  IERC3643ClaimTopicsRegistryAddClaimTopicReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ClaimTopicsRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643ClaimTopicsRegistryRemoveClaimTopicReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ClaimTopicsRegistryTransactionReceiptOutput
  IERC3643Compliance(
    """The address of the contract"""
    address: String!
  ): IERC3643Compliance

  """Fetches the receipt for the given transaction hash"""
  IERC3643ComplianceBindTokenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643ComplianceCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643ComplianceDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643ComplianceTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643ComplianceUnbindTokenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643ForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643FreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  IERC3643IdentityRegistry(
    """The address of the contract"""
    address: String!
  ): IERC3643IdentityRegistry

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryBatchRegisterIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryDeleteIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryRegisterIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistrySetClaimTopicsRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistrySetIdentityRegistryStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistrySetTrustedIssuersRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput
  IERC3643IdentityRegistryStorage(
    """The address of the contract"""
    address: String!
  ): IERC3643IdentityRegistryStorage

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryStorageAddIdentityToStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryStorageBindIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryStorageModifyStoredIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryStorageModifyStoredInvestorCountryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryStorageRemoveIdentityFromStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryStorageUnbindIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryUpdateCountryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643IdentityRegistryUpdateIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643MintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643PauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643RecoveryAddressReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643SetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643SetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643SetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643SetNameReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643SetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643SetSymbolReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643TransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643TransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  IERC3643TrustedIssuersRegistry(
    """The address of the contract"""
    address: String!
  ): IERC3643TrustedIssuersRegistry

  """Fetches the receipt for the given transaction hash"""
  IERC3643TrustedIssuersRegistryAddTrustedIssuerReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TrustedIssuersRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643TrustedIssuersRegistryRemoveTrustedIssuerReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TrustedIssuersRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopicsReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TrustedIssuersRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643UnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  IERC3643UnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  ISMART(
    """The address of the contract"""
    address: String!
  ): ISMART

  """Fetches the receipt for the given transaction hash"""
  ISMARTAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTBurnable(
    """The address of the contract"""
    address: String!
  ): ISMARTBurnable

  """Fetches the receipt for the given transaction hash"""
  ISMARTBurnableBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTBurnableBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTBurnableTransactionReceiptOutput
  ISMARTCapped(
    """The address of the contract"""
    address: String!
  ): ISMARTCapped

  """Fetches the receipt for the given transaction hash"""
  ISMARTCappedSetCapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCappedTransactionReceiptOutput
  ISMARTCollateral(
    """The address of the contract"""
    address: String!
  ): ISMARTCollateral
  ISMARTCompliance(
    """The address of the contract"""
    address: String!
  ): ISMARTCompliance

  """Fetches the receipt for the given transaction hash"""
  ISMARTComplianceCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTComplianceTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTComplianceDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTComplianceTransactionReceiptOutput
  ISMARTComplianceModule(
    """The address of the contract"""
    address: String!
  ): ISMARTComplianceModule

  """Fetches the receipt for the given transaction hash"""
  ISMARTComplianceModuleCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTComplianceModuleDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTComplianceModuleTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTComplianceModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTComplianceTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTComplianceTransactionReceiptOutput
  ISMARTCustodian(
    """The address of the contract"""
    address: String!
  ): ISMARTCustodian

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTCustodianUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput
  ISMARTFixedYieldSchedule(
    """The address of the contract"""
    address: String!
  ): ISMARTFixedYieldSchedule

  """Fetches the receipt for the given transaction hash"""
  ISMARTFixedYieldScheduleClaimYieldReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTFixedYieldScheduleTopUpUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTFixedYieldScheduleWithdrawAllUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTFixedYieldScheduleWithdrawUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput
  ISMARTHistoricalBalances(
    """The address of the contract"""
    address: String!
  ): ISMARTHistoricalBalances
  ISMARTIdentityRegistry(
    """The address of the contract"""
    address: String!
  ): ISMARTIdentityRegistry

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryBatchRegisterIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryDeleteIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryRecoverIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryRegisterIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistrySetIdentityRegistryStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistrySetTopicSchemeRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistrySetTrustedIssuersRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput
  ISMARTIdentityRegistryStorage(
    """The address of the contract"""
    address: String!
  ): ISMARTIdentityRegistryStorage

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageAddIdentityToStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageBindIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageLinkWalletRecoveryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageMarkWalletAsLostReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageModifyStoredIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageModifyStoredInvestorCountryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageRemoveIdentityFromStorageReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryStorageUnbindIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryUpdateCountryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTIdentityRegistryUpdateIdentityReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTPausable(
    """The address of the contract"""
    address: String!
  ): ISMARTPausable

  """Fetches the receipt for the given transaction hash"""
  ISMARTPausablePauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTPausableUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTRedeemable(
    """The address of the contract"""
    address: String!
  ): ISMARTRedeemable

  """Fetches the receipt for the given transaction hash"""
  ISMARTRedeemableRedeemAllReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTRedeemableRedeemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTTokenAccessManaged(
    """The address of the contract"""
    address: String!
  ): ISMARTTokenAccessManaged
  ISMARTTokenAccessManager(
    """The address of the contract"""
    address: String!
  ): ISMARTTokenAccessManager

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerBatchGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerBatchRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerGrantMultipleRolesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerRevokeMultipleRolesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTokenAccessManagerRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput
  ISMARTTopicSchemeRegistry(
    """The address of the contract"""
    address: String!
  ): ISMARTTopicSchemeRegistry

  """Fetches the receipt for the given transaction hash"""
  ISMARTTopicSchemeRegistryBatchRegisterTopicSchemesReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTopicSchemeRegistryRegisterTopicSchemeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTopicSchemeRegistryRemoveTopicSchemeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTopicSchemeRegistryUpdateTopicSchemeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  ISMARTTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTYield(
    """The address of the contract"""
    address: String!
  ): ISMARTYield
  ISMARTYieldSchedule(
    """The address of the contract"""
    address: String!
  ): ISMARTYieldSchedule

  """Fetches the receipt for the given transaction hash"""
  ISMARTYieldSetYieldScheduleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): ISMARTYieldTransactionReceiptOutput
  OnChainIdentity(
    """The address of the contract"""
    address: String!
  ): OnChainIdentity

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityAddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityAddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityRemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityRemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput
  OnChainIdentityWithRevocation(
    """The address of the contract"""
    address: String!
  ): OnChainIdentityWithRevocation

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationAddClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationAddKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationExecuteReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationRemoveClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationRemoveKeyReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationRevokeClaimBySignatureReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  OnChainIdentityWithRevocationRevokeClaimReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput
  SMART(
    """The address of the contract"""
    address: String!
  ): SMART

  """Fetches the receipt for the given transaction hash"""
  SMARTAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTBurnable(
    """The address of the contract"""
    address: String!
  ): SMARTBurnable

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput
  SMARTBurnableUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTBurnableUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableBatchBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableBurnReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTBurnableUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput
  SMARTCapped(
    """The address of the contract"""
    address: String!
  ): SMARTCapped

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedSetCapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput
  SMARTCappedUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTCappedUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableSetCapReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCappedUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput
  SMARTCollateral(
    """The address of the contract"""
    address: String!
  ): SMARTCollateral

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput
  SMARTCollateralUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTCollateralUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCollateralUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput
  SMARTContext(
    """The address of the contract"""
    address: String!
  ): SMARTContext
  SMARTCustodian(
    """The address of the contract"""
    address: String!
  ): SMARTCustodian

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput
  SMARTCustodianUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTCustodianUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableBatchForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableBatchFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableBatchSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableBatchUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableForcedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableForcedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableFreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableSetAddressFrozenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTCustodianUpgradeableUnfreezePartialTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput
  SMARTExtension(
    """The address of the contract"""
    address: String!
  ): SMARTExtension

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput
  SMARTExtensionUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTExtensionUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTExtensionUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput
  SMARTFixedYieldSchedule(
    """The address of the contract"""
    address: String!
  ): SMARTFixedYieldSchedule

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleClaimYieldReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput
  SMARTFixedYieldScheduleLogic(
    """The address of the contract"""
    address: String!
  ): SMARTFixedYieldScheduleLogic

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleLogicClaimYieldReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleLogicTopUpUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleLogicWithdrawAllUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleLogicWithdrawUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldSchedulePauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleTopUpUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput
  SMARTFixedYieldScheduleUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTFixedYieldScheduleUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableClaimYieldReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableInitializeReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeablePauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableTopUpUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableWithdrawAllUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleUpgradeableWithdrawUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleWithdrawAllUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTFixedYieldScheduleWithdrawUnderlyingAssetReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput
  SMARTHistoricalBalances(
    """The address of the contract"""
    address: String!
  ): SMARTHistoricalBalances

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput
  SMARTHistoricalBalancesUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTHistoricalBalancesUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTHistoricalBalancesUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput
  SMARTHooks(
    """The address of the contract"""
    address: String!
  ): SMARTHooks
  SMARTIdentityVerificationModule(
    """The address of the contract"""
    address: String!
  ): SMARTIdentityVerificationModule

  """Fetches the receipt for the given transaction hash"""
  SMARTIdentityVerificationModuleCreatedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTIdentityVerificationModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTIdentityVerificationModuleDestroyedReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTIdentityVerificationModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTIdentityVerificationModuleGrantRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTIdentityVerificationModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTIdentityVerificationModuleRenounceRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTIdentityVerificationModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTIdentityVerificationModuleRevokeRoleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTIdentityVerificationModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTIdentityVerificationModuleTransferredReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTIdentityVerificationModuleTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTPausable(
    """The address of the contract"""
    address: String!
  ): SMARTPausable

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausablePauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput
  SMARTPausableUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTPausableUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeablePauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTPausableUpgradeableUnpauseReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTRedeemable(
    """The address of the contract"""
    address: String!
  ): SMARTRedeemable

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableRedeemAllReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableRedeemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput
  SMARTRedeemableUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTRedeemableUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableRedeemAllReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableRedeemReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRedeemableUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTTokenAccessManaged(
    """The address of the contract"""
    address: String!
  ): SMARTTokenAccessManaged

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput
  SMARTTokenAccessManagedUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTTokenAccessManagedUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTokenAccessManagedUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput
  SMARTYield(
    """The address of the contract"""
    address: String!
  ): SMARTYield

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldSetYieldScheduleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput
  SMARTYieldUpgradeable(
    """The address of the contract"""
    address: String!
  ): SMARTYieldUpgradeable

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableAddComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableBatchMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableBatchTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableMintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableRecoverERC20Receipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableRecoverTokensReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableRemoveComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableSetComplianceReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableSetIdentityRegistryReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableSetOnchainIDReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableSetParametersForComplianceModuleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableSetYieldScheduleReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableTransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Fetches the receipt for the given transaction hash"""
  SMARTYieldUpgradeableTransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """Get all contracts"""
  getContracts(
    """The name of the ABIs to filter by"""
    abiNames: [String!]

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the AbstractATKTokenFactoryImplementation ABI"""
  getContractsAbstractAtkTokenFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the AbstractComplianceModule ABI"""
  getContractsAbstractComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the AbstractCountryComplianceModule ABI"""
  getContractsAbstractCountryComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKAssetProxy ABI"""
  getContractsAtkAssetProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKBondFactoryImplementation ABI"""
  getContractsAtkBondFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKBondImplementation ABI"""
  getContractsAtkBondImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKBondProxy ABI"""
  getContractsAtkBondProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKComplianceImplementation ABI"""
  getContractsAtkComplianceImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKComplianceProxy ABI"""
  getContractsAtkComplianceProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKDepositFactoryImplementation ABI"""
  getContractsAtkDepositFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKDepositImplementation ABI"""
  getContractsAtkDepositImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKDepositProxy ABI"""
  getContractsAtkDepositProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKEquityFactoryImplementation ABI"""
  getContractsAtkEquityFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKEquityImplementation ABI"""
  getContractsAtkEquityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKEquityProxy ABI"""
  getContractsAtkEquityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKFixedYieldProxy ABI"""
  getContractsAtkFixedYieldProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKFixedYieldScheduleFactory ABI"""
  getContractsAtkFixedYieldScheduleFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKForwarder ABI"""
  getContractsAtkForwarder(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKFundFactoryImplementation ABI"""
  getContractsAtkFundFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKFundImplementation ABI"""
  getContractsAtkFundImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKFundProxy ABI"""
  getContractsAtkFundProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityFactoryImplementation ABI"""
  getContractsAtkIdentityFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityFactoryProxy ABI"""
  getContractsAtkIdentityFactoryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityImplementation ABI"""
  getContractsAtkIdentityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityProxy ABI"""
  getContractsAtkIdentityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityRegistryImplementation ABI"""
  getContractsAtkIdentityRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityRegistryProxy ABI"""
  getContractsAtkIdentityRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityRegistryStorageImplementation ABI"""
  getContractsAtkIdentityRegistryStorageImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKIdentityRegistryStorageProxy ABI"""
  getContractsAtkIdentityRegistryStorageProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKRoles ABI"""
  getContractsAtkRoles(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKStableCoinFactoryImplementation ABI"""
  getContractsAtkStableCoinFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKStableCoinImplementation ABI"""
  getContractsAtkStableCoinImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKStableCoinProxy ABI"""
  getContractsAtkStableCoinProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKSystem ABI"""
  getContractsAtkSystem(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKSystemFactory ABI"""
  getContractsAtkSystemFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKSystemProxy ABI"""
  getContractsAtkSystemProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKSystemRoles ABI"""
  getContractsAtkSystemRoles(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTokenAccessManagerImplementation ABI"""
  getContractsAtkTokenAccessManagerImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTokenAccessManagerProxy ABI"""
  getContractsAtkTokenAccessManagerProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTokenFactoryProxy ABI"""
  getContractsAtkTokenFactoryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTokenIdentityImplementation ABI"""
  getContractsAtkTokenIdentityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTokenIdentityProxy ABI"""
  getContractsAtkTokenIdentityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTopicSchemeRegistryImplementation ABI"""
  getContractsAtkTopicSchemeRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTopicSchemeRegistryProxy ABI"""
  getContractsAtkTopicSchemeRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTopics ABI"""
  getContractsAtkTopics(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTrustedIssuersRegistryImplementation ABI"""
  getContractsAtkTrustedIssuersRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ATKTrustedIssuersRegistryProxy ABI"""
  getContractsAtkTrustedIssuersRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the CountryAllowListComplianceModule ABI"""
  getContractsCountryAllowListComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the CountryBlockListComplianceModule ABI"""
  getContractsCountryBlockListComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts with their deployment status"""
  getContractsDeployStatus(
    """The name of the ABIs to filter by"""
    abiNames: [String!]

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKTokenFactoryImplementation ABI
  """
  getContractsDeployStatusAbstractAtkTokenFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractComplianceModule ABI
  """
  getContractsDeployStatusAbstractComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractCountryComplianceModule ABI
  """
  getContractsDeployStatusAbstractCountryComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAssetProxy ABI
  """
  getContractsDeployStatusAtkAssetProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondFactoryImplementation ABI
  """
  getContractsDeployStatusAtkBondFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondImplementation ABI
  """
  getContractsDeployStatusAtkBondImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondProxy ABI
  """
  getContractsDeployStatusAtkBondProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceImplementation ABI
  """
  getContractsDeployStatusAtkComplianceImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceProxy ABI
  """
  getContractsDeployStatusAtkComplianceProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositFactoryImplementation ABI
  """
  getContractsDeployStatusAtkDepositFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositImplementation ABI
  """
  getContractsDeployStatusAtkDepositImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositProxy ABI
  """
  getContractsDeployStatusAtkDepositProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkEquityFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityImplementation ABI
  """
  getContractsDeployStatusAtkEquityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityProxy ABI
  """
  getContractsDeployStatusAtkEquityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldProxy ABI
  """
  getContractsDeployStatusAtkFixedYieldProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldScheduleFactory ABI
  """
  getContractsDeployStatusAtkFixedYieldScheduleFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKForwarder ABI
  """
  getContractsDeployStatusAtkForwarder(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundFactoryImplementation ABI
  """
  getContractsDeployStatusAtkFundFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundImplementation ABI
  """
  getContractsDeployStatusAtkFundImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundProxy ABI
  """
  getContractsDeployStatusAtkFundProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityFactoryProxy ABI
  """
  getContractsDeployStatusAtkIdentityFactoryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityImplementation ABI
  """
  getContractsDeployStatusAtkIdentityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityProxy ABI
  """
  getContractsDeployStatusAtkIdentityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryProxy ABI
  """
  getContractsDeployStatusAtkIdentityRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryStorageImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryStorageImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryStorageProxy ABI
  """
  getContractsDeployStatusAtkIdentityRegistryStorageProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ATKRoles ABI"""
  getContractsDeployStatusAtkRoles(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinFactoryImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinProxy ABI
  """
  getContractsDeployStatusAtkStableCoinProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ATKSystem ABI"""
  getContractsDeployStatusAtkSystem(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemFactory ABI
  """
  getContractsDeployStatusAtkSystemFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemProxy ABI
  """
  getContractsDeployStatusAtkSystemProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemRoles ABI
  """
  getContractsDeployStatusAtkSystemRoles(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerImplementation ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerProxy ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenFactoryProxy ABI
  """
  getContractsDeployStatusAtkTokenFactoryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenIdentityImplementation ABI
  """
  getContractsDeployStatusAtkTokenIdentityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenIdentityProxy ABI
  """
  getContractsDeployStatusAtkTokenIdentityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopicSchemeRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTopicSchemeRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopicSchemeRegistryProxy ABI
  """
  getContractsDeployStatusAtkTopicSchemeRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ATKTopics ABI"""
  getContractsDeployStatusAtkTopics(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTrustedIssuersRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTrustedIssuersRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTrustedIssuersRegistryProxy ABI
  """
  getContractsDeployStatusAtkTrustedIssuersRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryAllowListComplianceModule ABI
  """
  getContractsDeployStatusCountryAllowListComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryBlockListComplianceModule ABI
  """
  getContractsDeployStatusCountryBlockListComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ERC734 ABI"""
  getContractsDeployStatusErc734(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ERC735 ABI"""
  getContractsDeployStatusErc735(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKBond ABI"""
  getContractsDeployStatusIatkBond(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKBondFactory ABI
  """
  getContractsDeployStatusIatkBondFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKComplianceAllowList ABI
  """
  getContractsDeployStatusIatkComplianceAllowList(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKDeposit ABI"""
  getContractsDeployStatusIatkDeposit(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKDepositFactory ABI
  """
  getContractsDeployStatusIatkDepositFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKEquity ABI"""
  getContractsDeployStatusIatkEquity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKEquityFactory ABI
  """
  getContractsDeployStatusIatkEquityFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFixedYieldScheduleFactory ABI
  """
  getContractsDeployStatusIatkFixedYieldScheduleFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKFund ABI"""
  getContractsDeployStatusIatkFund(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFundFactory ABI
  """
  getContractsDeployStatusIatkFundFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentity ABI
  """
  getContractsDeployStatusIatkIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityFactory ABI
  """
  getContractsDeployStatusIatkIdentityFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoin ABI
  """
  getContractsDeployStatusIatkStableCoin(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoinFactory ABI
  """
  getContractsDeployStatusIatkStableCoinFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKSystem ABI"""
  getContractsDeployStatusIatkSystem(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemFactory ABI
  """
  getContractsDeployStatusIatkSystemFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenFactory ABI
  """
  getContractsDeployStatusIatkTokenFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenIdentity ABI
  """
  getContractsDeployStatusIatkTokenIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IERC3643 ABI"""
  getContractsDeployStatusIerc3643(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643ClaimTopicsRegistry ABI
  """
  getContractsDeployStatusIerc3643ClaimTopicsRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643Compliance ABI
  """
  getContractsDeployStatusIerc3643Compliance(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistry ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistryStorage ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistryStorage(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643TrustedIssuersRegistry ABI
  """
  getContractsDeployStatusIerc3643TrustedIssuersRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ISMART ABI"""
  getContractsDeployStatusIsmart(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTBurnable ABI
  """
  getContractsDeployStatusIsmartBurnable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCapped ABI
  """
  getContractsDeployStatusIsmartCapped(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCollateral ABI
  """
  getContractsDeployStatusIsmartCollateral(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCompliance ABI
  """
  getContractsDeployStatusIsmartCompliance(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTComplianceModule ABI
  """
  getContractsDeployStatusIsmartComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCustodian ABI
  """
  getContractsDeployStatusIsmartCustodian(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusIsmartFixedYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTHistoricalBalances ABI
  """
  getContractsDeployStatusIsmartHistoricalBalances(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistry ABI
  """
  getContractsDeployStatusIsmartIdentityRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistryStorage ABI
  """
  getContractsDeployStatusIsmartIdentityRegistryStorage(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTPausable ABI
  """
  getContractsDeployStatusIsmartPausable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTRedeemable ABI
  """
  getContractsDeployStatusIsmartRedeemable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusIsmartTokenAccessManaged(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManager ABI
  """
  getContractsDeployStatusIsmartTokenAccessManager(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTopicSchemeRegistry ABI
  """
  getContractsDeployStatusIsmartTopicSchemeRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ISMARTYield ABI"""
  getContractsDeployStatusIsmartYield(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTYieldSchedule ABI
  """
  getContractsDeployStatusIsmartYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentity ABI
  """
  getContractsDeployStatusOnChainIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentityWithRevocation ABI
  """
  getContractsDeployStatusOnChainIdentityWithRevocation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMART ABI"""
  getContractsDeployStatusSmart(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnable ABI
  """
  getContractsDeployStatusSmartBurnable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnableUpgradeable ABI
  """
  getContractsDeployStatusSmartBurnableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMARTCapped ABI"""
  getContractsDeployStatusSmartCapped(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCappedUpgradeable ABI
  """
  getContractsDeployStatusSmartCappedUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateral ABI
  """
  getContractsDeployStatusSmartCollateral(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateralUpgradeable ABI
  """
  getContractsDeployStatusSmartCollateralUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTContext ABI
  """
  getContractsDeployStatusSmartContext(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodian ABI
  """
  getContractsDeployStatusSmartCustodian(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodianUpgradeable ABI
  """
  getContractsDeployStatusSmartCustodianUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtension ABI
  """
  getContractsDeployStatusSmartExtension(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtensionUpgradeable ABI
  """
  getContractsDeployStatusSmartExtensionUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusSmartFixedYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleLogic ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleLogic(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleUpgradeable ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalances ABI
  """
  getContractsDeployStatusSmartHistoricalBalances(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalancesUpgradeable ABI
  """
  getContractsDeployStatusSmartHistoricalBalancesUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMARTHooks ABI"""
  getContractsDeployStatusSmartHooks(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTIdentityVerificationModule ABI
  """
  getContractsDeployStatusSmartIdentityVerificationModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausable ABI
  """
  getContractsDeployStatusSmartPausable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausableUpgradeable ABI
  """
  getContractsDeployStatusSmartPausableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemable ABI
  """
  getContractsDeployStatusSmartRedeemable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemableUpgradeable ABI
  """
  getContractsDeployStatusSmartRedeemableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusSmartTokenAccessManaged(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManagedUpgradeable ABI
  """
  getContractsDeployStatusSmartTokenAccessManagedUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTUpgradeable ABI
  """
  getContractsDeployStatusSmartUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMARTYield ABI"""
  getContractsDeployStatusSmartYield(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTYieldUpgradeable ABI
  """
  getContractsDeployStatusSmartYieldUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts for the ERC734 ABI"""
  getContractsErc734(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ERC735 ABI"""
  getContractsErc735(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKBond ABI"""
  getContractsIatkBond(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKBondFactory ABI"""
  getContractsIatkBondFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKComplianceAllowList ABI"""
  getContractsIatkComplianceAllowList(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKDeposit ABI"""
  getContractsIatkDeposit(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKDepositFactory ABI"""
  getContractsIatkDepositFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKEquity ABI"""
  getContractsIatkEquity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKEquityFactory ABI"""
  getContractsIatkEquityFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKFixedYieldScheduleFactory ABI"""
  getContractsIatkFixedYieldScheduleFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKFund ABI"""
  getContractsIatkFund(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKFundFactory ABI"""
  getContractsIatkFundFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKIdentity ABI"""
  getContractsIatkIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKIdentityFactory ABI"""
  getContractsIatkIdentityFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKStableCoin ABI"""
  getContractsIatkStableCoin(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKStableCoinFactory ABI"""
  getContractsIatkStableCoinFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKSystem ABI"""
  getContractsIatkSystem(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKSystemFactory ABI"""
  getContractsIatkSystemFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKTokenFactory ABI"""
  getContractsIatkTokenFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IATKTokenIdentity ABI"""
  getContractsIatkTokenIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IERC3643 ABI"""
  getContractsIerc3643(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IERC3643ClaimTopicsRegistry ABI"""
  getContractsIerc3643ClaimTopicsRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IERC3643Compliance ABI"""
  getContractsIerc3643Compliance(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IERC3643IdentityRegistry ABI"""
  getContractsIerc3643IdentityRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IERC3643IdentityRegistryStorage ABI"""
  getContractsIerc3643IdentityRegistryStorage(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the IERC3643TrustedIssuersRegistry ABI"""
  getContractsIerc3643TrustedIssuersRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMART ABI"""
  getContractsIsmart(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTBurnable ABI"""
  getContractsIsmartBurnable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTCapped ABI"""
  getContractsIsmartCapped(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTCollateral ABI"""
  getContractsIsmartCollateral(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTCompliance ABI"""
  getContractsIsmartCompliance(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTComplianceModule ABI"""
  getContractsIsmartComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTCustodian ABI"""
  getContractsIsmartCustodian(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTFixedYieldSchedule ABI"""
  getContractsIsmartFixedYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTHistoricalBalances ABI"""
  getContractsIsmartHistoricalBalances(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTIdentityRegistry ABI"""
  getContractsIsmartIdentityRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTIdentityRegistryStorage ABI"""
  getContractsIsmartIdentityRegistryStorage(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTPausable ABI"""
  getContractsIsmartPausable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTRedeemable ABI"""
  getContractsIsmartRedeemable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTTokenAccessManaged ABI"""
  getContractsIsmartTokenAccessManaged(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTTokenAccessManager ABI"""
  getContractsIsmartTokenAccessManager(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTTopicSchemeRegistry ABI"""
  getContractsIsmartTopicSchemeRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTYield ABI"""
  getContractsIsmartYield(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the ISMARTYieldSchedule ABI"""
  getContractsIsmartYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the OnChainIdentity ABI"""
  getContractsOnChainIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the OnChainIdentityWithRevocation ABI"""
  getContractsOnChainIdentityWithRevocation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMART ABI"""
  getContractsSmart(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTBurnable ABI"""
  getContractsSmartBurnable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTBurnableUpgradeable ABI"""
  getContractsSmartBurnableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTCapped ABI"""
  getContractsSmartCapped(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTCappedUpgradeable ABI"""
  getContractsSmartCappedUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTCollateral ABI"""
  getContractsSmartCollateral(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTCollateralUpgradeable ABI"""
  getContractsSmartCollateralUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTContext ABI"""
  getContractsSmartContext(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTCustodian ABI"""
  getContractsSmartCustodian(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTCustodianUpgradeable ABI"""
  getContractsSmartCustodianUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTExtension ABI"""
  getContractsSmartExtension(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTExtensionUpgradeable ABI"""
  getContractsSmartExtensionUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTFixedYieldSchedule ABI"""
  getContractsSmartFixedYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTFixedYieldScheduleLogic ABI"""
  getContractsSmartFixedYieldScheduleLogic(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTFixedYieldScheduleUpgradeable ABI"""
  getContractsSmartFixedYieldScheduleUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTHistoricalBalances ABI"""
  getContractsSmartHistoricalBalances(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTHistoricalBalancesUpgradeable ABI"""
  getContractsSmartHistoricalBalancesUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTHooks ABI"""
  getContractsSmartHooks(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTIdentityVerificationModule ABI"""
  getContractsSmartIdentityVerificationModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTPausable ABI"""
  getContractsSmartPausable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTPausableUpgradeable ABI"""
  getContractsSmartPausableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTRedeemable ABI"""
  getContractsSmartRedeemable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTRedeemableUpgradeable ABI"""
  getContractsSmartRedeemableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTTokenAccessManaged ABI"""
  getContractsSmartTokenAccessManaged(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTTokenAccessManagedUpgradeable ABI"""
  getContractsSmartTokenAccessManagedUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTUpgradeable ABI"""
  getContractsSmartUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTYield ABI"""
  getContractsSmartYield(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts for the SMARTYieldUpgradeable ABI"""
  getContractsSmartYieldUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get the list of pending and recently processed transactions"""
  getPendingAndRecentlyProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T16:25:09.962Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get the list of pending transactions"""
  getPendingTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """Get the list of processed transactions"""
  getProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T16:25:09.962Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get a transaction"""
  getTransaction(
    """Transaction hash"""
    transactionHash: String!
  ): TransactionOutput

  """Get transaction counts over time"""
  getTransactionsTimeline(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Granularity of the timeline"""
    granularity: TransactionTimelineGranularity!

    """
    Processed after date, use json like date format (eg 2025-06-11T16:25:09.962Z)
    """
    processedAfter: String

    """
    Timeline end date, use json like date format(eg 2025-06-11T16:25:09.962Z) (for month and year interval the last day of the month or year is used). Defaults to the current date.
    """
    timelineEndDate: String

    """
    Timeline start date, use json like date format (eg 2025-06-11T16:25:09.962Z) (for month and year interval the first day of the month or year is used)
    """
    timelineStartDate: String!
  ): [TransactionTimelineOutput!]

  """Retrieves all active verification methods for a user's wallet"""
  getWalletVerifications(
    """Ethereum address of the user's wallet"""
    userWalletAddress: String!
  ): [WalletVerification!]
}

type SMART {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: String
  complianceModules: [SMARTTuple0ComplianceModulesOutput!]
  decimals: Int
  id: ID
  identityRegistry: String
  name: String
  onchainID: String
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTApproveInput {
  spender: String!
  value: String!
}

input SMARTBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

type SMARTBurnable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTBurnableComplianceOutput
  complianceModules: SMARTBurnableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTBurnableIdentityRegistryOutput
  name: String
  onchainID: SMARTBurnableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTBurnableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTBurnableApproveInput {
  spender: String!
  value: String!
}

input SMARTBurnableBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input SMARTBurnableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTBurnableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTBurnableBurnInput {
  amount: String!
  userAddress: String!
}

type SMARTBurnableComplianceModulesOutput {
  modulesList: [SMARTBurnableModulesListComplianceModulesOutput!]
}

type SMARTBurnableComplianceOutput {
  complianceContract: String
}

type SMARTBurnableIdentityRegistryOutput {
  registryContract: String
}

input SMARTBurnableMintInput {
  _amount: String!
  _to: String!
}

type SMARTBurnableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTBurnableOnchainIDOutput {
  idAddress: String
}

input SMARTBurnableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTBurnableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTBurnableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTBurnableSetComplianceInput {
  _compliance: String!
}

input SMARTBurnableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTBurnableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTBurnableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTBurnableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTBurnableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTBurnableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTBurnableTransferInput {
  to: String!
  value: String!
}

type SMARTBurnableUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTBurnableUpgradeableComplianceOutput
  complianceModules: SMARTBurnableUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTBurnableUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTBurnableUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTBurnableUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTBurnableUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTBurnableUpgradeableBatchBurnInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input SMARTBurnableUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTBurnableUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTBurnableUpgradeableBurnInput {
  amount: String!
  userAddress: String!
}

type SMARTBurnableUpgradeableComplianceModulesOutput {
  modulesList: [SMARTBurnableUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTBurnableUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTBurnableUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTBurnableUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTBurnableUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTBurnableUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTBurnableUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTBurnableUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTBurnableUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTBurnableUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTBurnableUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTBurnableUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTBurnableUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTBurnableUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTBurnableUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTBurnableUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTBurnableUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTCapped {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  cap: String
  compliance: SMARTCappedComplianceOutput
  complianceModules: SMARTCappedComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTCappedIdentityRegistryOutput
  name: String
  onchainID: SMARTCappedOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTCappedAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTCappedApproveInput {
  spender: String!
  value: String!
}

input SMARTCappedBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCappedBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTCappedComplianceModulesOutput {
  modulesList: [SMARTCappedModulesListComplianceModulesOutput!]
}

type SMARTCappedComplianceOutput {
  complianceContract: String
}

type SMARTCappedIdentityRegistryOutput {
  registryContract: String
}

input SMARTCappedMintInput {
  _amount: String!
  _to: String!
}

type SMARTCappedModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCappedOnchainIDOutput {
  idAddress: String
}

input SMARTCappedRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTCappedRecoverTokensInput {
  _lostWallet: String!
}

input SMARTCappedRemoveComplianceModuleInput {
  _module: String!
}

input SMARTCappedSetCapInput {
  newCap: String!
}

input SMARTCappedSetComplianceInput {
  _compliance: String!
}

input SMARTCappedSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTCappedSetOnchainIDInput {
  _onchainID: String!
}

input SMARTCappedSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTCappedTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTCappedTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCappedTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCappedTransferInput {
  to: String!
  value: String!
}

type SMARTCappedUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  cap: String
  compliance: SMARTCappedUpgradeableComplianceOutput
  complianceModules: SMARTCappedUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTCappedUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTCappedUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTCappedUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTCappedUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTCappedUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCappedUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTCappedUpgradeableComplianceModulesOutput {
  modulesList: [SMARTCappedUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTCappedUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTCappedUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTCappedUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTCappedUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCappedUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTCappedUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTCappedUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTCappedUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTCappedUpgradeableSetCapInput {
  newCap: String!
}

input SMARTCappedUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTCappedUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTCappedUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTCappedUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTCappedUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTCappedUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCappedUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCappedUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTCollateral {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTCollateralComplianceOutput
  complianceModules: SMARTCollateralComplianceModulesOutput
  decimals: Int
  findValidCollateralClaim: SMARTCollateralFindValidCollateralClaimOutput
  id: ID
  identityRegistry: SMARTCollateralIdentityRegistryOutput
  name: String
  onchainID: SMARTCollateralOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTCollateralAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTCollateralApproveInput {
  spender: String!
  value: String!
}

input SMARTCollateralBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCollateralBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTCollateralComplianceModulesOutput {
  modulesList: [SMARTCollateralModulesListComplianceModulesOutput!]
}

type SMARTCollateralComplianceOutput {
  complianceContract: String
}

type SMARTCollateralFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

type SMARTCollateralIdentityRegistryOutput {
  registryContract: String
}

input SMARTCollateralMintInput {
  _amount: String!
  _to: String!
}

type SMARTCollateralModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCollateralOnchainIDOutput {
  idAddress: String
}

input SMARTCollateralRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTCollateralRecoverTokensInput {
  _lostWallet: String!
}

input SMARTCollateralRemoveComplianceModuleInput {
  _module: String!
}

input SMARTCollateralSetComplianceInput {
  _compliance: String!
}

input SMARTCollateralSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTCollateralSetOnchainIDInput {
  _onchainID: String!
}

input SMARTCollateralSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTCollateralTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTCollateralTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCollateralTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCollateralTransferInput {
  to: String!
  value: String!
}

type SMARTCollateralUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTCollateralUpgradeableComplianceOutput
  complianceModules: SMARTCollateralUpgradeableComplianceModulesOutput
  decimals: Int
  findValidCollateralClaim: SMARTCollateralUpgradeableFindValidCollateralClaimOutput
  id: ID
  identityRegistry: SMARTCollateralUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTCollateralUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTCollateralUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTCollateralUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTCollateralUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCollateralUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTCollateralUpgradeableComplianceModulesOutput {
  modulesList: [SMARTCollateralUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTCollateralUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTCollateralUpgradeableFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

type SMARTCollateralUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTCollateralUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTCollateralUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCollateralUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTCollateralUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTCollateralUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTCollateralUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTCollateralUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTCollateralUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTCollateralUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTCollateralUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTCollateralUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTCollateralUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCollateralUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCollateralUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTContext {
  id: ID
}

"""Returns the transaction hash"""
type SMARTContextTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTContextTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type SMARTCustodian {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTCustodianComplianceOutput
  complianceModules: SMARTCustodianComplianceModulesOutput
  decimals: Int
  getFrozenTokens(userAddress: String!): String
  id: ID
  identityRegistry: SMARTCustodianIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  name: String
  onchainID: SMARTCustodianOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTCustodianAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTCustodianApproveInput {
  spender: String!
  value: String!
}

input SMARTCustodianBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input SMARTCustodianBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input SMARTCustodianBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCustodianBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input SMARTCustodianBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCustodianBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

type SMARTCustodianComplianceModulesOutput {
  modulesList: [SMARTCustodianModulesListComplianceModulesOutput!]
}

type SMARTCustodianComplianceOutput {
  complianceContract: String
}

input SMARTCustodianForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input SMARTCustodianForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input SMARTCustodianFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type SMARTCustodianIdentityRegistryOutput {
  registryContract: String
}

input SMARTCustodianMintInput {
  _amount: String!
  _to: String!
}

type SMARTCustodianModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCustodianOnchainIDOutput {
  idAddress: String
}

input SMARTCustodianRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTCustodianRecoverTokensInput {
  _lostWallet: String!
}

input SMARTCustodianRemoveComplianceModuleInput {
  _module: String!
}

input SMARTCustodianSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input SMARTCustodianSetComplianceInput {
  _compliance: String!
}

input SMARTCustodianSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTCustodianSetOnchainIDInput {
  _onchainID: String!
}

input SMARTCustodianSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTCustodianTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTCustodianTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCustodianTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCustodianTransferInput {
  to: String!
  value: String!
}

input SMARTCustodianUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type SMARTCustodianUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTCustodianUpgradeableComplianceOutput
  complianceModules: SMARTCustodianUpgradeableComplianceModulesOutput
  decimals: Int
  getFrozenTokens(userAddress: String!): String
  id: ID
  identityRegistry: SMARTCustodianUpgradeableIdentityRegistryOutput
  isFrozen(userAddress: String!): Boolean
  name: String
  onchainID: SMARTCustodianUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTCustodianUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTCustodianUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTCustodianUpgradeableBatchForcedTransferInput {
  amounts: [String!]!
  fromList: [String!]!
  toList: [String!]!
}

input SMARTCustodianUpgradeableBatchFreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

input SMARTCustodianUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCustodianUpgradeableBatchSetAddressFrozenInput {
  freeze: [Boolean!]!
  userAddresses: [String!]!
}

input SMARTCustodianUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTCustodianUpgradeableBatchUnfreezePartialTokensInput {
  amounts: [String!]!
  userAddresses: [String!]!
}

type SMARTCustodianUpgradeableComplianceModulesOutput {
  modulesList: [SMARTCustodianUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTCustodianUpgradeableComplianceOutput {
  complianceContract: String
}

input SMARTCustodianUpgradeableForcedRecoverTokensInput {
  lostWallet: String!
  newWallet: String!
}

input SMARTCustodianUpgradeableForcedTransferInput {
  amount: String!
  from: String!
  to: String!
}

input SMARTCustodianUpgradeableFreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type SMARTCustodianUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTCustodianUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTCustodianUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCustodianUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTCustodianUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTCustodianUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTCustodianUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTCustodianUpgradeableSetAddressFrozenInput {
  freeze: Boolean!
  userAddress: String!
}

input SMARTCustodianUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTCustodianUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTCustodianUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTCustodianUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTCustodianUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTCustodianUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCustodianUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCustodianUpgradeableTransferInput {
  to: String!
  value: String!
}

input SMARTCustodianUpgradeableUnfreezePartialTokensInput {
  amount: String!
  userAddress: String!
}

type SMARTExtension {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTExtensionComplianceOutput
  complianceModules: SMARTExtensionComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTExtensionIdentityRegistryOutput
  name: String
  onchainID: SMARTExtensionOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTExtensionAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTExtensionApproveInput {
  spender: String!
  value: String!
}

input SMARTExtensionBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTExtensionBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTExtensionComplianceModulesOutput {
  modulesList: [SMARTExtensionModulesListComplianceModulesOutput!]
}

type SMARTExtensionComplianceOutput {
  complianceContract: String
}

type SMARTExtensionIdentityRegistryOutput {
  registryContract: String
}

input SMARTExtensionMintInput {
  _amount: String!
  _to: String!
}

type SMARTExtensionModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTExtensionOnchainIDOutput {
  idAddress: String
}

input SMARTExtensionRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTExtensionRecoverTokensInput {
  _lostWallet: String!
}

input SMARTExtensionRemoveComplianceModuleInput {
  _module: String!
}

input SMARTExtensionSetComplianceInput {
  _compliance: String!
}

input SMARTExtensionSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTExtensionSetOnchainIDInput {
  _onchainID: String!
}

input SMARTExtensionSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTExtensionTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTExtensionTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTExtensionTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTExtensionTransferInput {
  to: String!
  value: String!
}

type SMARTExtensionUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTExtensionUpgradeableComplianceOutput
  complianceModules: SMARTExtensionUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTExtensionUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTExtensionUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTExtensionUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTExtensionUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTExtensionUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTExtensionUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTExtensionUpgradeableComplianceModulesOutput {
  modulesList: [SMARTExtensionUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTExtensionUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTExtensionUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTExtensionUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTExtensionUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTExtensionUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTExtensionUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTExtensionUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTExtensionUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTExtensionUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTExtensionUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTExtensionUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTExtensionUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTExtensionUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTExtensionUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTExtensionUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTExtensionUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTFixedYieldSchedule {
  DEFAULT_ADMIN_ROLE: String
  RATE_BASIS_POINTS: String
  allPeriods: [String!]
  calculateAccruedYield: String
  calculateAccruedYield1(holder: String!): String
  currentPeriod: String
  endDate: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  interval: String
  isTrustedForwarder(forwarder: String!): Boolean
  lastClaimedPeriod(holder: String!): String
  lastClaimedPeriod2: String
  lastCompletedPeriod: String
  paused: Boolean
  periodEnd(period: String!): String
  rate: String
  startDate: String
  supportsInterface(interfaceId: String!): Boolean
  timeUntilNextPeriod: String
  token: String
  totalUnclaimedYield: String
  totalYieldForNextPeriod: String
  trustedForwarder: String
  underlyingAsset: String
}

input SMARTFixedYieldScheduleGrantRoleInput {
  account: String!
  role: String!
}

type SMARTFixedYieldScheduleLogic {
  RATE_BASIS_POINTS: String
  allPeriods: [String!]
  calculateAccruedYield: String
  calculateAccruedYield1(holder: String!): String
  currentPeriod: String
  endDate: String
  id: ID
  interval: String
  lastClaimedPeriod(holder: String!): String
  lastClaimedPeriod2: String
  lastCompletedPeriod: String
  periodEnd(period: String!): String
  rate: String
  startDate: String
  supportsInterface(interfaceId: String!): Boolean
  timeUntilNextPeriod: String
  token: String
  totalUnclaimedYield: String
  totalYieldForNextPeriod: String
  underlyingAsset: String
}

input SMARTFixedYieldScheduleLogicTopUpUnderlyingAssetInput {
  amount: String!
}

"""Returns the transaction hash"""
type SMARTFixedYieldScheduleLogicTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTFixedYieldScheduleLogicTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTFixedYieldScheduleLogicWithdrawAllUnderlyingAssetInput {
  to: String!
}

input SMARTFixedYieldScheduleLogicWithdrawUnderlyingAssetInput {
  amount: String!
  to: String!
}

input SMARTFixedYieldScheduleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input SMARTFixedYieldScheduleRevokeRoleInput {
  account: String!
  role: String!
}

input SMARTFixedYieldScheduleTopUpUnderlyingAssetInput {
  amount: String!
}

"""Returns the transaction hash"""
type SMARTFixedYieldScheduleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTFixedYieldScheduleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type SMARTFixedYieldScheduleUpgradeable {
  DEFAULT_ADMIN_ROLE: String
  RATE_BASIS_POINTS: String
  allPeriods: [String!]
  calculateAccruedYield: String
  calculateAccruedYield1(holder: String!): String
  currentPeriod: String
  endDate: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  interval: String
  isTrustedForwarder(forwarder: String!): Boolean
  lastClaimedPeriod(holder: String!): String
  lastClaimedPeriod2: String
  lastCompletedPeriod: String
  paused: Boolean
  periodEnd(period: String!): String
  rate: String
  startDate: String
  supportsInterface(interfaceId: String!): Boolean
  timeUntilNextPeriod: String
  token: String
  totalUnclaimedYield: String
  totalYieldForNextPeriod: String
  trustedForwarder: String
  underlyingAsset: String
}

input SMARTFixedYieldScheduleUpgradeableGrantRoleInput {
  account: String!
  role: String!
}

input SMARTFixedYieldScheduleUpgradeableInitializeInput {
  endDate_: String!
  initialOwner_: String!
  interval_: String!
  rate_: String!
  startDate_: String!
  tokenAddress_: String!
}

input SMARTFixedYieldScheduleUpgradeableRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input SMARTFixedYieldScheduleUpgradeableRevokeRoleInput {
  account: String!
  role: String!
}

input SMARTFixedYieldScheduleUpgradeableTopUpUnderlyingAssetInput {
  amount: String!
}

"""Returns the transaction hash"""
type SMARTFixedYieldScheduleUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTFixedYieldScheduleUpgradeableWithdrawAllUnderlyingAssetInput {
  to: String!
}

input SMARTFixedYieldScheduleUpgradeableWithdrawUnderlyingAssetInput {
  amount: String!
  to: String!
}

input SMARTFixedYieldScheduleWithdrawAllUnderlyingAssetInput {
  to: String!
}

input SMARTFixedYieldScheduleWithdrawUnderlyingAssetInput {
  amount: String!
  to: String!
}

type SMARTHistoricalBalances {
  CLOCK_MODE: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  balanceOfAt(account: String!, timepoint: String!): String
  clock: Float
  compliance: SMARTHistoricalBalancesComplianceOutput
  complianceModules: SMARTHistoricalBalancesComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTHistoricalBalancesIdentityRegistryOutput
  name: String
  onchainID: SMARTHistoricalBalancesOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  totalSupplyAt(timepoint: String!): String
}

input SMARTHistoricalBalancesAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTHistoricalBalancesApproveInput {
  spender: String!
  value: String!
}

input SMARTHistoricalBalancesBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTHistoricalBalancesBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTHistoricalBalancesComplianceModulesOutput {
  modulesList: [SMARTHistoricalBalancesModulesListComplianceModulesOutput!]
}

type SMARTHistoricalBalancesComplianceOutput {
  complianceContract: String
}

type SMARTHistoricalBalancesIdentityRegistryOutput {
  registryContract: String
}

input SMARTHistoricalBalancesMintInput {
  _amount: String!
  _to: String!
}

type SMARTHistoricalBalancesModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTHistoricalBalancesOnchainIDOutput {
  idAddress: String
}

input SMARTHistoricalBalancesRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTHistoricalBalancesRecoverTokensInput {
  _lostWallet: String!
}

input SMARTHistoricalBalancesRemoveComplianceModuleInput {
  _module: String!
}

input SMARTHistoricalBalancesSetComplianceInput {
  _compliance: String!
}

input SMARTHistoricalBalancesSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTHistoricalBalancesSetOnchainIDInput {
  _onchainID: String!
}

input SMARTHistoricalBalancesSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTHistoricalBalancesTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTHistoricalBalancesTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTHistoricalBalancesTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTHistoricalBalancesTransferInput {
  to: String!
  value: String!
}

type SMARTHistoricalBalancesUpgradeable {
  CLOCK_MODE: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  balanceOfAt(account: String!, timepoint: String!): String
  clock: Float
  compliance: SMARTHistoricalBalancesUpgradeableComplianceOutput
  complianceModules: SMARTHistoricalBalancesUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTHistoricalBalancesUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTHistoricalBalancesUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  totalSupplyAt(timepoint: String!): String
}

input SMARTHistoricalBalancesUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTHistoricalBalancesUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTHistoricalBalancesUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTHistoricalBalancesUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTHistoricalBalancesUpgradeableComplianceModulesOutput {
  modulesList: [SMARTHistoricalBalancesUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTHistoricalBalancesUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTHistoricalBalancesUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTHistoricalBalancesUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTHistoricalBalancesUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTHistoricalBalancesUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTHistoricalBalancesUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTHistoricalBalancesUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTHistoricalBalancesUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTHistoricalBalancesUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTHistoricalBalancesUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTHistoricalBalancesUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTHistoricalBalancesUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTHistoricalBalancesUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTHistoricalBalancesUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTHooks {
  id: ID
}

"""Returns the transaction hash"""
type SMARTHooksTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTHooksTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

type SMARTIdentityVerificationModule {
  DEFAULT_ADMIN_ROLE: String
  getRoleAdmin(role: String!): String
  hasRole(account: String!, role: String!): Boolean
  id: ID
  isTrustedForwarder(forwarder: String!): Boolean
  name: String
  supportsInterface(interfaceId: String!): Boolean
  trustedForwarder: String
}

input SMARTIdentityVerificationModuleCreatedInput {
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input SMARTIdentityVerificationModuleDestroyedInput {
  _from: String!
  _params: String!
  _token: String!
  _value: String!
}

input SMARTIdentityVerificationModuleGrantRoleInput {
  account: String!
  role: String!
}

input SMARTIdentityVerificationModuleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input SMARTIdentityVerificationModuleRevokeRoleInput {
  account: String!
  role: String!
}

"""Returns the transaction hash"""
type SMARTIdentityVerificationModuleTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTIdentityVerificationModuleTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTIdentityVerificationModuleTransferredInput {
  _from: String!
  _params: String!
  _to: String!
  _token: String!
  _value: String!
}

input SMARTMintInput {
  _amount: String!
  _to: String!
}

type SMARTPausable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTPausableComplianceOutput
  complianceModules: SMARTPausableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTPausableIdentityRegistryOutput
  name: String
  onchainID: SMARTPausableOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTPausableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTPausableApproveInput {
  spender: String!
  value: String!
}

input SMARTPausableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTPausableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTPausableComplianceModulesOutput {
  modulesList: [SMARTPausableModulesListComplianceModulesOutput!]
}

type SMARTPausableComplianceOutput {
  complianceContract: String
}

type SMARTPausableIdentityRegistryOutput {
  registryContract: String
}

input SMARTPausableMintInput {
  _amount: String!
  _to: String!
}

type SMARTPausableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTPausableOnchainIDOutput {
  idAddress: String
}

input SMARTPausableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTPausableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTPausableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTPausableSetComplianceInput {
  _compliance: String!
}

input SMARTPausableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTPausableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTPausableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTPausableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTPausableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTPausableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTPausableTransferInput {
  to: String!
  value: String!
}

type SMARTPausableUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTPausableUpgradeableComplianceOutput
  complianceModules: SMARTPausableUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTPausableUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTPausableUpgradeableOnchainIDOutput
  paused: Boolean
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTPausableUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTPausableUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTPausableUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTPausableUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTPausableUpgradeableComplianceModulesOutput {
  modulesList: [SMARTPausableUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTPausableUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTPausableUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTPausableUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTPausableUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTPausableUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTPausableUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTPausableUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTPausableUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTPausableUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTPausableUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTPausableUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTPausableUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTPausableUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTPausableUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTPausableUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTPausableUpgradeableTransferInput {
  to: String!
  value: String!
}

input SMARTRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTRecoverTokensInput {
  lostWallet: String!
}

type SMARTRedeemable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTRedeemableComplianceOutput
  complianceModules: SMARTRedeemableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTRedeemableIdentityRegistryOutput
  name: String
  onchainID: SMARTRedeemableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTRedeemableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTRedeemableApproveInput {
  spender: String!
  value: String!
}

input SMARTRedeemableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTRedeemableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTRedeemableComplianceModulesOutput {
  modulesList: [SMARTRedeemableModulesListComplianceModulesOutput!]
}

type SMARTRedeemableComplianceOutput {
  complianceContract: String
}

type SMARTRedeemableIdentityRegistryOutput {
  registryContract: String
}

input SMARTRedeemableMintInput {
  _amount: String!
  _to: String!
}

type SMARTRedeemableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTRedeemableOnchainIDOutput {
  idAddress: String
}

input SMARTRedeemableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTRedeemableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTRedeemableRedeemInput {
  amount: String!
}

input SMARTRedeemableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTRedeemableSetComplianceInput {
  _compliance: String!
}

input SMARTRedeemableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTRedeemableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTRedeemableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTRedeemableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTRedeemableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTRedeemableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTRedeemableTransferInput {
  to: String!
  value: String!
}

type SMARTRedeemableUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTRedeemableUpgradeableComplianceOutput
  complianceModules: SMARTRedeemableUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTRedeemableUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTRedeemableUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTRedeemableUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTRedeemableUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTRedeemableUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTRedeemableUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTRedeemableUpgradeableComplianceModulesOutput {
  modulesList: [SMARTRedeemableUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTRedeemableUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTRedeemableUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTRedeemableUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTRedeemableUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTRedeemableUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTRedeemableUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTRedeemableUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTRedeemableUpgradeableRedeemInput {
  amount: String!
}

input SMARTRedeemableUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTRedeemableUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTRedeemableUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTRedeemableUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTRedeemableUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTRedeemableUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTRedeemableUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTRedeemableUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTRedeemableUpgradeableTransferInput {
  to: String!
  value: String!
}

input SMARTRemoveComplianceModuleInput {
  _module: String!
}

input SMARTSetComplianceInput {
  _compliance: String!
}

input SMARTSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTSetOnchainIDInput {
  _onchainID: String!
}

input SMARTSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

type SMARTTokenAccessManaged {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTTokenAccessManagedComplianceOutput
  complianceModules: SMARTTokenAccessManagedComplianceModulesOutput
  decimals: Int
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: SMARTTokenAccessManagedIdentityRegistryOutput
  name: String
  onchainID: SMARTTokenAccessManagedOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTTokenAccessManagedAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTTokenAccessManagedApproveInput {
  spender: String!
  value: String!
}

input SMARTTokenAccessManagedBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTTokenAccessManagedBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTTokenAccessManagedComplianceModulesOutput {
  modulesList: [SMARTTokenAccessManagedModulesListComplianceModulesOutput!]
}

type SMARTTokenAccessManagedComplianceOutput {
  complianceContract: String
}

type SMARTTokenAccessManagedIdentityRegistryOutput {
  registryContract: String
}

input SMARTTokenAccessManagedMintInput {
  _amount: String!
  _to: String!
}

type SMARTTokenAccessManagedModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTTokenAccessManagedOnchainIDOutput {
  idAddress: String
}

input SMARTTokenAccessManagedRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTTokenAccessManagedRecoverTokensInput {
  _lostWallet: String!
}

input SMARTTokenAccessManagedRemoveComplianceModuleInput {
  _module: String!
}

input SMARTTokenAccessManagedSetComplianceInput {
  _compliance: String!
}

input SMARTTokenAccessManagedSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTTokenAccessManagedSetOnchainIDInput {
  _onchainID: String!
}

input SMARTTokenAccessManagedSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTTokenAccessManagedTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTTokenAccessManagedTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTTokenAccessManagedTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTTokenAccessManagedTransferInput {
  to: String!
  value: String!
}

type SMARTTokenAccessManagedUpgradeable {
  accessManager: String
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: SMARTTokenAccessManagedUpgradeableComplianceOutput
  complianceModules: SMARTTokenAccessManagedUpgradeableComplianceModulesOutput
  decimals: Int
  hasRole(account: String!, role: String!): Boolean
  id: ID
  identityRegistry: SMARTTokenAccessManagedUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTTokenAccessManagedUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTTokenAccessManagedUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTTokenAccessManagedUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTTokenAccessManagedUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTTokenAccessManagedUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTTokenAccessManagedUpgradeableComplianceModulesOutput {
  modulesList: [SMARTTokenAccessManagedUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTTokenAccessManagedUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTTokenAccessManagedUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTTokenAccessManagedUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTTokenAccessManagedUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTTokenAccessManagedUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTTokenAccessManagedUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTTokenAccessManagedUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTTokenAccessManagedUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTTokenAccessManagedUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTTokenAccessManagedUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTTokenAccessManagedUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTTokenAccessManagedUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTTokenAccessManagedUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTTokenAccessManagedUpgradeableTransferInput {
  to: String!
  value: String!
}

"""Returns the transaction hash"""
type SMARTTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTTransferInput {
  amount: String!
  to: String!
}

type SMARTTuple0ComplianceModulesOutput {
  module: String
  params: String
}

type SMARTUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  compliance: String
  complianceModules: [SMARTUpgradeableTuple0ComplianceModulesOutput!]
  decimals: Int
  id: ID
  identityRegistry: String
  name: String
  onchainID: String
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
}

input SMARTUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTUpgradeableBatchTransferInput {
  amounts: [String!]!
  toList: [String!]!
}

input SMARTUpgradeableMintInput {
  _amount: String!
  _to: String!
}

input SMARTUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTUpgradeableRecoverTokensInput {
  lostWallet: String!
}

input SMARTUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

"""Returns the transaction hash"""
type SMARTUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTUpgradeableTransferInput {
  amount: String!
  to: String!
}

type SMARTUpgradeableTuple0ComplianceModulesOutput {
  module: String
  params: String
}

type SMARTYield {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  balanceOfAt(account: String!, timepoint: String!): String
  compliance: SMARTYieldComplianceOutput
  complianceModules: SMARTYieldComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTYieldIdentityRegistryOutput
  name: String
  onchainID: SMARTYieldOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  totalSupplyAt(timepoint: String!): String
  yieldBasisPerUnit(holder: String!): SMARTYieldYieldBasisPerUnitOutput
  yieldSchedule: String
  yieldToken: SMARTYieldYieldTokenOutput
}

input SMARTYieldAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTYieldApproveInput {
  spender: String!
  value: String!
}

input SMARTYieldBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTYieldBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTYieldComplianceModulesOutput {
  modulesList: [SMARTYieldModulesListComplianceModulesOutput!]
}

type SMARTYieldComplianceOutput {
  complianceContract: String
}

type SMARTYieldIdentityRegistryOutput {
  registryContract: String
}

input SMARTYieldMintInput {
  _amount: String!
  _to: String!
}

type SMARTYieldModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTYieldOnchainIDOutput {
  idAddress: String
}

input SMARTYieldRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTYieldRecoverTokensInput {
  _lostWallet: String!
}

input SMARTYieldRemoveComplianceModuleInput {
  _module: String!
}

input SMARTYieldSetComplianceInput {
  _compliance: String!
}

input SMARTYieldSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTYieldSetOnchainIDInput {
  _onchainID: String!
}

input SMARTYieldSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTYieldSetYieldScheduleInput {
  schedule: String!
}

"""Returns the transaction hash"""
type SMARTYieldTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTYieldTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTYieldTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTYieldTransferInput {
  to: String!
  value: String!
}

type SMARTYieldUpgradeable {
  allowance(owner: String!, spender: String!): String
  balanceOf(account: String!): String
  balanceOfAt(account: String!, timepoint: String!): String
  compliance: SMARTYieldUpgradeableComplianceOutput
  complianceModules: SMARTYieldUpgradeableComplianceModulesOutput
  decimals: Int
  id: ID
  identityRegistry: SMARTYieldUpgradeableIdentityRegistryOutput
  name: String
  onchainID: SMARTYieldUpgradeableOnchainIDOutput
  supportsInterface(interfaceId: String!): Boolean
  symbol: String
  totalSupply: String
  totalSupplyAt(timepoint: String!): String
  yieldBasisPerUnit(holder: String!): SMARTYieldUpgradeableYieldBasisPerUnitOutput
  yieldSchedule: String
  yieldToken: SMARTYieldUpgradeableYieldTokenOutput
}

input SMARTYieldUpgradeableAddComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTYieldUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTYieldUpgradeableBatchMintInput {
  _amounts: [String!]!
  _toList: [String!]!
}

input SMARTYieldUpgradeableBatchTransferInput {
  _amounts: [String!]!
  _toList: [String!]!
}

type SMARTYieldUpgradeableComplianceModulesOutput {
  modulesList: [SMARTYieldUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTYieldUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTYieldUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTYieldUpgradeableMintInput {
  _amount: String!
  _to: String!
}

type SMARTYieldUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTYieldUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTYieldUpgradeableRecoverERC20Input {
  amount: String!
  to: String!
  token: String!
}

input SMARTYieldUpgradeableRecoverTokensInput {
  _lostWallet: String!
}

input SMARTYieldUpgradeableRemoveComplianceModuleInput {
  _module: String!
}

input SMARTYieldUpgradeableSetComplianceInput {
  _compliance: String!
}

input SMARTYieldUpgradeableSetIdentityRegistryInput {
  _identityRegistry: String!
}

input SMARTYieldUpgradeableSetOnchainIDInput {
  _onchainID: String!
}

input SMARTYieldUpgradeableSetParametersForComplianceModuleInput {
  _module: String!
  _params: String!
}

input SMARTYieldUpgradeableSetYieldScheduleInput {
  schedule: String!
}

"""Returns the transaction hash"""
type SMARTYieldUpgradeableTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type SMARTYieldUpgradeableTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTYieldUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTYieldUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTYieldUpgradeableYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type SMARTYieldUpgradeableYieldTokenOutput {
  paymentToken: String
}

type SMARTYieldYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type SMARTYieldYieldTokenOutput {
  paymentToken: String
}

input SecretCodesSettingsInput {
  """The name of the secret codes verification"""
  name: String!
}

type Subscription {
  """Get all contracts with their deployment status"""
  getContractsDeployStatus(
    """The name of the ABIs to filter by"""
    abiNames: [String!]

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKTokenFactoryImplementation ABI
  """
  getContractsDeployStatusAbstractAtkTokenFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractComplianceModule ABI
  """
  getContractsDeployStatusAbstractComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractCountryComplianceModule ABI
  """
  getContractsDeployStatusAbstractCountryComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAssetProxy ABI
  """
  getContractsDeployStatusAtkAssetProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondFactoryImplementation ABI
  """
  getContractsDeployStatusAtkBondFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondImplementation ABI
  """
  getContractsDeployStatusAtkBondImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondProxy ABI
  """
  getContractsDeployStatusAtkBondProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceImplementation ABI
  """
  getContractsDeployStatusAtkComplianceImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceProxy ABI
  """
  getContractsDeployStatusAtkComplianceProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositFactoryImplementation ABI
  """
  getContractsDeployStatusAtkDepositFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositImplementation ABI
  """
  getContractsDeployStatusAtkDepositImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositProxy ABI
  """
  getContractsDeployStatusAtkDepositProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkEquityFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityImplementation ABI
  """
  getContractsDeployStatusAtkEquityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityProxy ABI
  """
  getContractsDeployStatusAtkEquityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldProxy ABI
  """
  getContractsDeployStatusAtkFixedYieldProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldScheduleFactory ABI
  """
  getContractsDeployStatusAtkFixedYieldScheduleFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKForwarder ABI
  """
  getContractsDeployStatusAtkForwarder(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundFactoryImplementation ABI
  """
  getContractsDeployStatusAtkFundFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundImplementation ABI
  """
  getContractsDeployStatusAtkFundImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundProxy ABI
  """
  getContractsDeployStatusAtkFundProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityFactoryProxy ABI
  """
  getContractsDeployStatusAtkIdentityFactoryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityImplementation ABI
  """
  getContractsDeployStatusAtkIdentityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityProxy ABI
  """
  getContractsDeployStatusAtkIdentityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryProxy ABI
  """
  getContractsDeployStatusAtkIdentityRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryStorageImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryStorageImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryStorageProxy ABI
  """
  getContractsDeployStatusAtkIdentityRegistryStorageProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ATKRoles ABI"""
  getContractsDeployStatusAtkRoles(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinFactoryImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinFactoryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinProxy ABI
  """
  getContractsDeployStatusAtkStableCoinProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ATKSystem ABI"""
  getContractsDeployStatusAtkSystem(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemFactory ABI
  """
  getContractsDeployStatusAtkSystemFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemProxy ABI
  """
  getContractsDeployStatusAtkSystemProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemRoles ABI
  """
  getContractsDeployStatusAtkSystemRoles(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerImplementation ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerProxy ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenFactoryProxy ABI
  """
  getContractsDeployStatusAtkTokenFactoryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenIdentityImplementation ABI
  """
  getContractsDeployStatusAtkTokenIdentityImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenIdentityProxy ABI
  """
  getContractsDeployStatusAtkTokenIdentityProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopicSchemeRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTopicSchemeRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopicSchemeRegistryProxy ABI
  """
  getContractsDeployStatusAtkTopicSchemeRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ATKTopics ABI"""
  getContractsDeployStatusAtkTopics(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTrustedIssuersRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTrustedIssuersRegistryImplementation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTrustedIssuersRegistryProxy ABI
  """
  getContractsDeployStatusAtkTrustedIssuersRegistryProxy(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryAllowListComplianceModule ABI
  """
  getContractsDeployStatusCountryAllowListComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryBlockListComplianceModule ABI
  """
  getContractsDeployStatusCountryBlockListComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ERC734 ABI"""
  getContractsDeployStatusErc734(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ERC735 ABI"""
  getContractsDeployStatusErc735(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKBond ABI"""
  getContractsDeployStatusIatkBond(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKBondFactory ABI
  """
  getContractsDeployStatusIatkBondFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKComplianceAllowList ABI
  """
  getContractsDeployStatusIatkComplianceAllowList(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKDeposit ABI"""
  getContractsDeployStatusIatkDeposit(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKDepositFactory ABI
  """
  getContractsDeployStatusIatkDepositFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKEquity ABI"""
  getContractsDeployStatusIatkEquity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKEquityFactory ABI
  """
  getContractsDeployStatusIatkEquityFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFixedYieldScheduleFactory ABI
  """
  getContractsDeployStatusIatkFixedYieldScheduleFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKFund ABI"""
  getContractsDeployStatusIatkFund(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFundFactory ABI
  """
  getContractsDeployStatusIatkFundFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentity ABI
  """
  getContractsDeployStatusIatkIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityFactory ABI
  """
  getContractsDeployStatusIatkIdentityFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoin ABI
  """
  getContractsDeployStatusIatkStableCoin(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoinFactory ABI
  """
  getContractsDeployStatusIatkStableCoinFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IATKSystem ABI"""
  getContractsDeployStatusIatkSystem(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemFactory ABI
  """
  getContractsDeployStatusIatkSystemFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenFactory ABI
  """
  getContractsDeployStatusIatkTokenFactory(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenIdentity ABI
  """
  getContractsDeployStatusIatkTokenIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the IERC3643 ABI"""
  getContractsDeployStatusIerc3643(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643ClaimTopicsRegistry ABI
  """
  getContractsDeployStatusIerc3643ClaimTopicsRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643Compliance ABI
  """
  getContractsDeployStatusIerc3643Compliance(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistry ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistryStorage ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistryStorage(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643TrustedIssuersRegistry ABI
  """
  getContractsDeployStatusIerc3643TrustedIssuersRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ISMART ABI"""
  getContractsDeployStatusIsmart(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTBurnable ABI
  """
  getContractsDeployStatusIsmartBurnable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCapped ABI
  """
  getContractsDeployStatusIsmartCapped(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCollateral ABI
  """
  getContractsDeployStatusIsmartCollateral(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCompliance ABI
  """
  getContractsDeployStatusIsmartCompliance(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTComplianceModule ABI
  """
  getContractsDeployStatusIsmartComplianceModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCustodian ABI
  """
  getContractsDeployStatusIsmartCustodian(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusIsmartFixedYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTHistoricalBalances ABI
  """
  getContractsDeployStatusIsmartHistoricalBalances(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistry ABI
  """
  getContractsDeployStatusIsmartIdentityRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistryStorage ABI
  """
  getContractsDeployStatusIsmartIdentityRegistryStorage(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTPausable ABI
  """
  getContractsDeployStatusIsmartPausable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTRedeemable ABI
  """
  getContractsDeployStatusIsmartRedeemable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusIsmartTokenAccessManaged(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManager ABI
  """
  getContractsDeployStatusIsmartTokenAccessManager(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTopicSchemeRegistry ABI
  """
  getContractsDeployStatusIsmartTopicSchemeRegistry(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the ISMARTYield ABI"""
  getContractsDeployStatusIsmartYield(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTYieldSchedule ABI
  """
  getContractsDeployStatusIsmartYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentity ABI
  """
  getContractsDeployStatusOnChainIdentity(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentityWithRevocation ABI
  """
  getContractsDeployStatusOnChainIdentityWithRevocation(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMART ABI"""
  getContractsDeployStatusSmart(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnable ABI
  """
  getContractsDeployStatusSmartBurnable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnableUpgradeable ABI
  """
  getContractsDeployStatusSmartBurnableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMARTCapped ABI"""
  getContractsDeployStatusSmartCapped(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCappedUpgradeable ABI
  """
  getContractsDeployStatusSmartCappedUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateral ABI
  """
  getContractsDeployStatusSmartCollateral(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateralUpgradeable ABI
  """
  getContractsDeployStatusSmartCollateralUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTContext ABI
  """
  getContractsDeployStatusSmartContext(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodian ABI
  """
  getContractsDeployStatusSmartCustodian(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodianUpgradeable ABI
  """
  getContractsDeployStatusSmartCustodianUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtension ABI
  """
  getContractsDeployStatusSmartExtension(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtensionUpgradeable ABI
  """
  getContractsDeployStatusSmartExtensionUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusSmartFixedYieldSchedule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleLogic ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleLogic(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleUpgradeable ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalances ABI
  """
  getContractsDeployStatusSmartHistoricalBalances(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalancesUpgradeable ABI
  """
  getContractsDeployStatusSmartHistoricalBalancesUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMARTHooks ABI"""
  getContractsDeployStatusSmartHooks(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTIdentityVerificationModule ABI
  """
  getContractsDeployStatusSmartIdentityVerificationModule(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausable ABI
  """
  getContractsDeployStatusSmartPausable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausableUpgradeable ABI
  """
  getContractsDeployStatusSmartPausableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemable ABI
  """
  getContractsDeployStatusSmartRedeemable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemableUpgradeable ABI
  """
  getContractsDeployStatusSmartRedeemableUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusSmartTokenAccessManaged(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManagedUpgradeable ABI
  """
  getContractsDeployStatusSmartTokenAccessManagedUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTUpgradeable ABI
  """
  getContractsDeployStatusSmartUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get all contracts with their deployment status for the SMARTYield ABI"""
  getContractsDeployStatusSmartYield(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTYieldUpgradeable ABI
  """
  getContractsDeployStatusSmartYieldUpgradeable(
    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get the list of pending and recently processed transactions"""
  getPendingAndRecentlyProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T16:25:09.962Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get the list of pending transactions"""
  getPendingTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """Get the list of processed transactions"""
  getProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T16:25:09.962Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get a transaction"""
  getTransaction(
    """Transaction hash"""
    transactionHash: String!
  ): TransactionOutput
}

"""Returns the transaction"""
type TransactionOutput {
  """Contract address"""
  address: String!

  """Created at"""
  createdAt: String

  """From address"""
  from: String!

  """Function name"""
  functionName: String!

  """Whether the transaction is a smart contract deployment"""
  isContract: Boolean!

  """Metadata"""
  metadata: JSON

  """Receipt"""
  receipt: TransactionReceiptOutput

  """Transaction Hash"""
  transactionHash: String!

  """Created at"""
  updatedAt: String
}

"""The transaction receipt"""
type TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

enum TransactionReceiptStatus {
  Reverted
  Success
}

"""Granularity"""
enum TransactionTimelineGranularity {
  DAY
  HOUR
  MONTH
  YEAR
}

type TransactionTimelineOutput {
  """Count of transactions"""
  count: Int

  """End date"""
  end: String

  """Start date"""
  start: String
}

"""Transactions paginated output"""
type TransactionsPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [TransactionOutput!]!
}

"""User operation receipt"""
type UserOperationReceipt {
  """Actual gas cost"""
  actualGasCost: String

  """Actual gas used"""
  actualGasUsed: String

  """Entry point address"""
  entryPoint: String

  """Operation logs"""
  logs: [String!]

  """Nonce"""
  nonce: String

  """Sender address"""
  sender: String

  """Whether the operation was successful"""
  success: Boolean

  """User operation hash"""
  userOpHash: String
}

"""Result of verifying a wallet verification challenge"""
type VerifyWalletVerificationChallengeOutput {
  """Indicates whether the verification challenge was successful"""
  verified: Boolean
}

"""Wallet verification details"""
type WalletVerification {
  """Unique identifier of the verification"""
  id: String

  """Name of the verification"""
  name: String

  """Type of the created wallet verification"""
  verificationType: WalletVerificationType
}

"""Wallet verification challenge"""
type WalletVerificationChallenge {
  """Challenge object"""
  challenge: JSON

  """Unique identifier of the verification"""
  id: String

  """Name of the verification"""
  name: String

  """Type of the created wallet verification"""
  verificationType: WalletVerificationType
}

"""Verification type"""
enum WalletVerificationType {
  OTP
  PINCODE
  SECRET_CODES
}