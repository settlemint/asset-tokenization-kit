"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar ConstructorArguments

type Contract {
  abiName: String
  address: String

  """Created at"""
  createdAt: String
  transaction: TransactionOutput
  transactionHash: String
}

type ContractDeployStatus {
  abiName: String
  address: String

  """Created at"""
  createdAt: String

  """Deployed at"""
  deployedAt: String

  """Reverted at"""
  revertedAt: String
  transaction: TransactionOutput
  transactionHash: String
}

"""Returns the transaction hash"""
type ContractDeploymentTransactionOutput {
  transactionHash: String
}

"""ContractsDeployStatus paginated output"""
type ContractsDeployStatusPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [ContractDeployStatus!]!
}

"""Contracts paginated output"""
type ContractsPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [Contract!]!
}

input CreateWalletInfoInput {
  """The name of the wallet"""
  name: String!
}

"""Details of the created wallet"""
type CreateWalletOutput {
  """The Ethereum address of the created wallet"""
  address: String

  """The derivation path used to generate the wallet"""
  derivationPath: String

  """The unique identifier of the created wallet"""
  id: String

  """The name of the created wallet"""
  name: String
}

input CreateWalletVerificationInput {
  """OTP verification settings. Provide this for OTP verification."""
  otp: OTPSettingsInput

  """PINCODE verification settings. Provide this for PINCODE verification."""
  pincode: PincodeSettingsInput

  """
  Secret codes verification settings. Provide this for secret codes verification.
  """
  secretCodes: SecretCodesSettingsInput
}

"""Output for creating a wallet verification"""
type CreateWalletVerificationOutput {
  """Unique identifier of the created wallet verification"""
  id: String

  """Name of the created wallet verification"""
  name: String

  """Additional parameters of the created wallet verification"""
  parameters: JSON

  """Type of the created wallet verification"""
  verificationType: WalletVerificationType
}

"""Output for deleting a wallet verification"""
type DeleteWalletVerificationOutput {
  """Indicates whether the wallet verification was successfully deleted"""
  success: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """Deploy a contract"""
  DeployContract(
    """The ABI of the contract"""
    abi: JSON!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """The constructor arguments (must be an array)"""
    constructorArguments: ConstructorArguments

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """The name of the contract"""
    name: String!

    """Payable value (wei)"""
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput
  createWallet(
    """The ID of the key vault where the wallet will be created"""
    keyVaultId: String!

    """Information about the wallet to be created"""
    walletInfo: CreateWalletInfoInput!
  ): CreateWalletOutput

  """Create a new verification for a specific user wallet"""
  createWalletVerification(
    """The Ethereum address of the user wallet"""
    userWalletAddress: String!
    verificationInfo: CreateWalletVerificationInput!
  ): CreateWalletVerificationOutput

  """
  Generates and returns challenges for all or specific verification methods of a user's wallet
  """
  createWalletVerificationChallenges(
    """Ethereum address of the user's wallet"""
    userWalletAddress: String!

    """
    Optional unique identifier of the verification to create challenges for
    """
    verificationId: String
  ): [WalletVerificationChallenge!]

  """Removes a specific verification method from a user's wallet"""
  deleteWalletVerification(
    """Ethereum address of the user's wallet"""
    userWalletAddress: String!

    """Unique identifier of the verification to delete"""
    verificationId: String!
  ): DeleteWalletVerificationOutput

  """Verifies the response to a wallet verification challenge"""
  verifyWalletVerificationChallenge(
    """The response to the verification challenge"""
    challengeResponse: String!

    """Ethereum address of the user's wallet"""
    userWalletAddress: String!

    """Optional unique identifier of the specific verification to verify"""
    verificationId: String
  ): VerifyWalletVerificationChallengeOutput
}

"""Algorithm used for OTP verification"""
enum OTPAlgorithm {
  SHA1
  SHA3_224
  SHA3_256
  SHA3_384
  SHA3_512
  SHA224
  SHA256
  SHA384
  SHA512
}

input OTPSettingsInput {
  """The algorithm for OTP verification"""
  algorithm: OTPAlgorithm

  """The number of digits for OTP verification"""
  digits: Int

  """The issuer for OTP verification"""
  issuer: String

  """The name of the OTP verification"""
  name: String!

  """The period (in seconds) for OTP verification"""
  period: Int
}

input PincodeSettingsInput {
  """The name of the PINCODE verification"""
  name: String!

  """The pincode for PINCODE verification"""
  pincode: String!
}

type Query {
  """Get all contracts"""
  getContracts(
    """The name of the ABIs to filter by"""
    abiNames: [String!]

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsPaginatedOutput

  """Get all contracts with their deployment status"""
  getContractsDeployStatus(
    """The name of the ABIs to filter by"""
    abiNames: [String!]

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get the list of pending and recently processed transactions"""
  getPendingAndRecentlyProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T15:09:18.078Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get the list of pending transactions"""
  getPendingTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """Get the list of processed transactions"""
  getProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T15:09:18.079Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get a transaction"""
  getTransaction(
    """Transaction hash"""
    transactionHash: String!
  ): TransactionOutput

  """Get transaction counts over time"""
  getTransactionsTimeline(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Granularity of the timeline"""
    granularity: TransactionTimelineGranularity!

    """
    Processed after date, use json like date format (eg 2025-06-11T15:09:18.079Z)
    """
    processedAfter: String

    """
    Timeline end date, use json like date format(eg 2025-06-11T15:09:18.079Z) (for month and year interval the last day of the month or year is used). Defaults to the current date.
    """
    timelineEndDate: String

    """
    Timeline start date, use json like date format (eg 2025-06-11T15:09:18.079Z) (for month and year interval the first day of the month or year is used)
    """
    timelineStartDate: String!
  ): [TransactionTimelineOutput!]

  """Retrieves all active verification methods for a user's wallet"""
  getWalletVerifications(
    """Ethereum address of the user's wallet"""
    userWalletAddress: String!
  ): [WalletVerification!]
}

input SecretCodesSettingsInput {
  """The name of the secret codes verification"""
  name: String!
}

type Subscription {
  """Get all contracts with their deployment status"""
  getContractsDeployStatus(
    """The name of the ABIs to filter by"""
    abiNames: [String!]

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """Transaction hash filter"""
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """Get the list of pending and recently processed transactions"""
  getPendingAndRecentlyProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T15:09:18.078Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get the list of pending transactions"""
  getPendingTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """Get the list of processed transactions"""
  getProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-06-11T15:09:18.079Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get a transaction"""
  getTransaction(
    """Transaction hash"""
    transactionHash: String!
  ): TransactionOutput
}

"""Returns the transaction"""
type TransactionOutput {
  """Contract address"""
  address: String!

  """Created at"""
  createdAt: String

  """From address"""
  from: String!

  """Function name"""
  functionName: String!

  """Whether the transaction is a smart contract deployment"""
  isContract: Boolean!

  """Metadata"""
  metadata: JSON

  """Receipt"""
  receipt: TransactionReceiptOutput

  """Transaction Hash"""
  transactionHash: String!

  """Created at"""
  updatedAt: String
}

"""The transaction receipt"""
type TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """Events (decoded from the logs)"""
  events: JSON!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: JSON!

  """Logs Bloom"""
  logsBloom: String!

  """ABI-encoded string containing the revert reason"""
  revertReason: String

  """Decoded revert reason"""
  revertReasonDecoded: String

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!

  """List of user operation receipts associated with this transaction"""
  userOperationReceipts: [UserOperationReceipt!]
}

enum TransactionReceiptStatus {
  Reverted
  Success
}

"""Granularity"""
enum TransactionTimelineGranularity {
  DAY
  HOUR
  MONTH
  YEAR
}

type TransactionTimelineOutput {
  """Count of transactions"""
  count: Int

  """End date"""
  end: String

  """Start date"""
  start: String
}

"""Transactions paginated output"""
type TransactionsPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [TransactionOutput!]!
}

"""User operation receipt"""
type UserOperationReceipt {
  """Actual gas cost"""
  actualGasCost: String

  """Actual gas used"""
  actualGasUsed: String

  """Entry point address"""
  entryPoint: String

  """Operation logs"""
  logs: [String!]

  """Nonce"""
  nonce: String

  """Sender address"""
  sender: String

  """Whether the operation was successful"""
  success: Boolean

  """User operation hash"""
  userOpHash: String
}

"""Result of verifying a wallet verification challenge"""
type VerifyWalletVerificationChallengeOutput {
  """Indicates whether the verification challenge was successful"""
  verified: Boolean
}

"""Wallet verification details"""
type WalletVerification {
  """Unique identifier of the verification"""
  id: String

  """Name of the verification"""
  name: String

  """Type of the created wallet verification"""
  verificationType: WalletVerificationType
}

"""Wallet verification challenge"""
type WalletVerificationChallenge {
  """Challenge object"""
  challenge: JSON

  """Unique identifier of the verification"""
  id: String

  """Name of the verification"""
  name: String

  """Type of the created wallet verification"""
  verificationType: WalletVerificationType
}

"""Verification type"""
enum WalletVerificationType {
  OTP
  PINCODE
  SECRET_CODES
}