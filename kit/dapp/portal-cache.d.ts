/* eslint-disable */
/* prettier-ignore */
import type { TadaDocumentNode, $tada } from 'gql.tada';

declare module 'gql.tada' {
 interface setupCache {
    "\n  mutation SetPinCode($address: String!, $pincode: String!) {\n    createWalletVerification(\n      userWalletAddress: $address\n      verificationInfo: {pincode: {name: \"PINCODE\", pincode: $pincode}}\n    ) {\n      id\n      name\n      parameters\n      verificationType\n    }\n  }\n":
      TadaDocumentNode<{ createWalletVerification: { id: string | null; name: string | null; parameters: unknown; verificationType: "PINCODE" | "OTP" | "SECRET_CODES" | null; } | null; }, { pincode: string; address: string; }, void>;
    "\n  mutation RemovePinCode($address: String!, $verificationId: String!) {\n    deleteWalletVerification(\n      userWalletAddress: $address\n      verificationId: $verificationId\n    ) {\n      success\n    }\n  }\n":
      TadaDocumentNode<{ deleteWalletVerification: { success: boolean | null; } | null; }, { verificationId: string; address: string; }, void>;
    "\n  mutation GenerateSecretCodes($address: String!) {\n    createWalletVerification(\n      userWalletAddress: $address\n      verificationInfo: { secretCodes: { name: \"SECRET_CODES\" } }\n    ) {\n      id\n      name\n      parameters\n      verificationType\n    }\n  }\n":
      TadaDocumentNode<{ createWalletVerification: { id: string | null; name: string | null; parameters: unknown; verificationType: "PINCODE" | "OTP" | "SECRET_CODES" | null; } | null; }, { address: string; }, void>;
    "\n  mutation RemoveSecretCodes($address: String!, $verificationId: String!) {\n    deleteWalletVerification(\n      userWalletAddress: $address\n      verificationId: $verificationId\n    ) {\n      success\n    }\n  }\n":
      TadaDocumentNode<{ deleteWalletVerification: { success: boolean | null; } | null; }, { verificationId: string; address: string; }, void>;
    "\n  mutation DisableTwoFactor($address: String!, $verificationId: String!) {\n    deleteWalletVerification(\n      userWalletAddress: $address\n      verificationId: $verificationId\n    ) {\n      success\n    }\n  }\n":
      TadaDocumentNode<{ deleteWalletVerification: { success: boolean | null; } | null; }, { verificationId: string; address: string; }, void>;
    "\n  mutation VerifyTwoFactorOTP($address: String!, $verificationId: String!, $otp: String!) {\n    verifyWalletVerificationChallenge(\n      userWalletAddress: $address\n      verificationId: $verificationId\n      challengeResponse: $otp\n    ) {\n      verified\n    }\n  }\n":
      TadaDocumentNode<{ verifyWalletVerificationChallenge: { verified: boolean | null; } | null; }, { otp: string; verificationId: string; address: string; }, void>;
    "\n  mutation EnableTwoFactor(\n    $address: String!,\n    $algorithm: OTPAlgorithm!,\n    $digits: Int!,\n    $period: Int!,\n    $issuer: String!\n  ) {\n    createWalletVerification(\n      userWalletAddress: $address\n      verificationInfo: {\n        otp: {\n          name: \"OTP\",\n          algorithm: $algorithm,\n          digits: $digits,\n          period: $period,\n          issuer: $issuer\n        }\n      }\n    ) {\n      id\n      name\n      parameters\n      verificationType\n      parameters\n    }\n  }\n":
      TadaDocumentNode<{ createWalletVerification: { id: string | null; name: string | null; parameters: unknown; verificationType: "PINCODE" | "OTP" | "SECRET_CODES" | null; } | null; }, { issuer: string; period: number; digits: number; algorithm: "SHA1" | "SHA3_224" | "SHA3_256" | "SHA3_384" | "SHA3_512" | "SHA224" | "SHA256" | "SHA384" | "SHA512"; address: string; }, void>;
    "\n  mutation CreateAccountMutation($keyVaultId: String!, $userId: String!) {\n    createWallet(keyVaultId: $keyVaultId, walletInfo: {name: $userId}) {\n      address\n    }\n  }\n":
      TadaDocumentNode<{ createWallet: { address: string | null; } | null; }, { userId: string; keyVaultId: string; }, void>;
    "\n        query GetTransaction($transactionHash: String!) {\n          getTransaction(transactionHash: $transactionHash) {\n            receipt {\n              status\n              revertReasonDecoded\n              revertReason\n              blockNumber\n            }\n          }\n        }\n      ":
      TadaDocumentNode<{ getTransaction: { receipt: { status: "Reverted" | "Success"; revertReasonDecoded: string | null; revertReason: string | null; blockNumber: string; } | null; } | null; }, { transactionHash: string; }, void>;
    "\n  mutation CreateTokenMutation($address: String!, $from: String!, $input: ATKBondFactoryImplementationCreateBondInput!) {\n    CreateToken: ATKBondFactoryImplementationCreateBond(\n      address: $address\n      from: $from\n      input: $input\n    ) {\n      transactionHash\n    }\n  }\n":
      TadaDocumentNode<{ CreateToken: { transactionHash: string | null; } | null; }, { input: { underlyingAsset_: string; symbol_: string; requiredClaimTopics_: string[]; name_: string; maturityDate_: string; initialModulePairs_: { params: string; module: string; }[]; faceValue_: string; decimals_: number; cap_: string; }; from: string; address: string; }, void>;
    "\n  mutation CreateTokenFactory(\n    $verificationId: String\n    $challengeResponse: String!\n    $address: String!\n    $from: String!\n    $factoryImplementation: String!\n    $tokenImplementation: String!\n    $name: String!\n  ) {\n    IATKTokenFactoryRegistryRegisterTokenFactory(\n      verificationId: $verificationId\n      challengeResponse: $challengeResponse\n      address: $address\n      from: $from\n      input: {\n        factoryImplementation: $factoryImplementation\n        name: $name\n        tokenImplementation: $tokenImplementation\n      }\n    ) {\n      transactionHash\n    }\n  }\n":
      TadaDocumentNode<{ IATKTokenFactoryRegistryRegisterTokenFactory: { transactionHash: string | null; } | null; }, { name: string; tokenImplementation: string; factoryImplementation: string; from: string; address: string; challengeResponse: string; verificationId?: string | null | undefined; }, void>;
    "\n  mutation MintToken(\n    $verificationId: String\n    $challengeResponse: String\n    $address: String!\n    $from: String!\n    $to: String!\n    $amount: String!\n  ) {\n    mint: IATKBondMint(\n      address: $address\n      from: $from\n      verificationId: $verificationId\n      challengeResponse: $challengeResponse\n      input: { _amount: $amount, _to: $to }\n    ) {\n      transactionHash\n    }\n  }\n":
      TadaDocumentNode<{ mint: { transactionHash: string | null; } | null; }, { amount: string; to: string; from: string; address: string; challengeResponse?: string | null | undefined; verificationId?: string | null | undefined; }, void>;
    "\n  mutation CreateSystemMutation(\n    $verificationId: String\n    $challengeResponse: String!\n    $address: String!\n    $from: String!\n  ) {\n    ATKSystemFactoryCreateSystem(\n      verificationId: $verificationId\n      challengeResponse: $challengeResponse\n      address: $address\n      from: $from\n    ) {\n      transactionHash\n    }\n  }\n":
      TadaDocumentNode<{ ATKSystemFactoryCreateSystem: { transactionHash: string | null; } | null; }, { from: string; address: string; challengeResponse: string; verificationId?: string | null | undefined; }, void>;
    "\n  mutation BootstrapSystemMutation(\n    $verificationId: String\n    $challengeResponse: String!\n    $address: String!\n    $from: String!\n  ) {\n    IATKSystemBootstrap(\n      verificationId: $verificationId\n      challengeResponse: $challengeResponse\n      address: $address\n      from: $from\n    ) {\n      transactionHash\n    }\n  }\n":
      TadaDocumentNode<{ IATKSystemBootstrap: { transactionHash: string | null; } | null; }, { from: string; address: string; challengeResponse: string; verificationId?: string | null | undefined; }, void>;
  }
}
