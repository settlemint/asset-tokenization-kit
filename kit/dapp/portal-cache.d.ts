/* eslint-disable */
/* prettier-ignore */
import type { TadaDocumentNode, $tada } from 'gql.tada';

declare module 'gql.tada' {
 interface setupCache {
    "\n  mutation createUserWallet($keyVaultId: String!, $name: String!) {\n    createWallet(keyVaultId: $keyVaultId, walletInfo: { name: $name }) {\n      address\n    }\n  }\n":
      TadaDocumentNode<{ createWallet: { address: string | null; } | null; }, { name: string; keyVaultId: string; }, void>;
    "\n  fragment ReceiptFragment on TransactionReceiptOutput {\n      revertReasonDecoded\n      gasUsed\n      blobGasPrice\n      blobGasUsed\n      blockHash\n      blockNumber\n      contractAddress\n      cumulativeGasUsed\n      effectiveGasPrice\n      from\n      logs\n      logsBloom\n      revertReason\n      root\n      status\n      to\n      transactionHash\n      transactionIndex\n      type\n  }\n":
      TadaDocumentNode<{ revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; }, {}, { fragment: "ReceiptFragment"; on: "TransactionReceiptOutput"; masked: false; }>;
    "\n  fragment TransactionFragment on TransactionOutput {\n    address\n    createdAt\n    from\n    functionName\n    metadata\n    transactionHash\n    updatedAt\n    receipt {\n      ...ReceiptFragment\n    }\n  }\n":
      TadaDocumentNode<{ address: string; createdAt: string | null; from: string; functionName: string; metadata: unknown; transactionHash: string; updatedAt: string | null; receipt: { revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; } | null; }, {}, { fragment: "TransactionFragment"; on: "TransactionOutput"; masked: false; }>;
    "\n  query GetTransaction($transactionHash: String!) {\n    getTransaction(transactionHash: $transactionHash) {\n      receipt {\n        ...ReceiptFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ getTransaction: { receipt: { revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; } | null; } | null; }, { transactionHash: string; }, void>;
    "\n  query CreateStandardAirdropPredictAddress($address: String!, $deployer: String!, $tokenAddress: String!, $merkleRoot: String!, $owner: String!, $startTime: String!, $endTime: String!) {\n    AirdropFactory(address: $address) {\n      predictStandardAirdropAddress(\n        deployer: $deployer\n        tokenAddress: $tokenAddress\n        merkleRoot: $merkleRoot\n        owner: $owner\n        startTime: $startTime\n        endTime: $endTime\n      ) {\n        predictedAddress\n      }\n    }\n  }\n":
      TadaDocumentNode<{ AirdropFactory: unknown; }, { endTime: string; startTime: string; owner: string; merkleRoot: string; tokenAddress: string; deployer: string; address: string; }, void>;
    "\n  query CreateVestingAirdropPredictAddress($address: String!, $deployer: String!, $tokenAddress: String!, $merkleRoot: String!, $owner: String!, $claimPeriodEnd: String!, $cliffDuration: String!, $vestingDuration: String!) {\n    AirdropFactory(address: $address) {\n      predictLinearVestingAirdropAddress(\n        deployer: $deployer\n        tokenAddress: $tokenAddress\n        merkleRoot: $merkleRoot\n        owner: $owner\n        claimPeriodEnd: $claimPeriodEnd\n        cliffDuration: $cliffDuration\n        vestingDuration: $vestingDuration\n      ) {\n        predictedAirdropAddress\n      }\n    }\n  }\n":
      TadaDocumentNode<{ AirdropFactory: unknown; }, { vestingDuration: string; cliffDuration: string; claimPeriodEnd: string; owner: string; merkleRoot: string; tokenAddress: string; deployer: string; address: string; }, void>;
    "\n  query CreatePushAirdropPredictAddress($address: String!, $deployer: String!, $tokenAddress: String!, $merkleRoot: String!, $owner: String!, $distributionCap: String!) {\n    AirdropFactory(address: $address) {\n      predictPushAirdropAddress(\n        deployer: $deployer\n        tokenAddress: $tokenAddress\n        merkleRoot: $merkleRoot\n        owner: $owner\n        distributionCap: $distributionCap\n      ) {\n        predictedAddress\n      }\n    }\n  }\n":
      TadaDocumentNode<{ AirdropFactory: unknown; }, { distributionCap: string; owner: string; merkleRoot: string; tokenAddress: string; deployer: string; address: string; }, void>;
    "\n  query CreateBondPredictAddress($address: String!, $sender: String!, $decimals: Int!, $name: String!, $symbol: String!, $cap: String!, $faceValue: String!, $maturityDate: String!, $underlyingAsset: String!) {\n    BondFactory(address: $address) {\n      predictAddress(\n        sender: $sender\n        decimals: $decimals\n        name: $name\n        symbol: $symbol\n        cap: $cap\n        faceValue: $faceValue\n        maturityDate: $maturityDate\n        underlyingAsset: $underlyingAsset\n      ) {\n        predicted\n      }\n    }\n  }\n":
      TadaDocumentNode<{ BondFactory: unknown; }, { underlyingAsset: string; maturityDate: string; faceValue: string; cap: string; symbol: string; name: string; decimals: number; sender: string; address: string; }, void>;
    "\n  query CreateCryptoCurrencyPredictAddress($address: String!, $sender: String!, $decimals: Int!, $name: String!, $symbol: String!, $initialSupply: String!) {\n    CryptoCurrencyFactory(address: $address) {\n      predictAddress(\n        sender: $sender\n        decimals: $decimals\n        name: $name\n        symbol: $symbol\n        initialSupply: $initialSupply\n      ) {\n        predicted\n      }\n    }\n  }\n":
      TadaDocumentNode<{ CryptoCurrencyFactory: unknown; }, { initialSupply: string; symbol: string; name: string; decimals: number; sender: string; address: string; }, void>;
    "\n  query CreateDepositPredictAddress($address: String!, $sender: String!, $decimals: Int!, $name: String!, $symbol: String!, $collateralLivenessSeconds: Float!) {\n    DepositFactory(address: $address) {\n      predictAddress(\n        sender: $sender\n        decimals: $decimals\n        name: $name\n        symbol: $symbol\n        collateralLivenessSeconds: $collateralLivenessSeconds\n      ) {\n        predicted\n      }\n    }\n  }\n":
      TadaDocumentNode<{ DepositFactory: unknown; }, { collateralLivenessSeconds: number; symbol: string; name: string; decimals: number; sender: string; address: string; }, void>;
    "\n  query CreateEquityPredictAddress($address: String!, $sender: String!, $decimals: Int!, $name: String!, $symbol: String!, $equityCategory: String!, $equityClass: String!) {\n    EquityFactory(address: $address) {\n      predictAddress(\n        sender: $sender\n        decimals: $decimals\n        name: $name\n        symbol: $symbol\n        equityCategory: $equityCategory\n        equityClass: $equityClass\n      ) {\n        predicted\n      }\n    }\n  }\n":
      TadaDocumentNode<{ EquityFactory: unknown; }, { equityClass: string; equityCategory: string; symbol: string; name: string; decimals: number; sender: string; address: string; }, void>;
    "\n  query CreateFundPredictAddress($address: String!, $sender: String!, $decimals: Int!, $name: String!, $symbol: String!, $fundCategory: String!, $fundClass: String!, $managementFeeBps: Int!) {\n    FundFactory(address: $address) {\n      predictAddress(\n        sender: $sender\n        decimals: $decimals\n        name: $name\n        symbol: $symbol\n        fundCategory: $fundCategory\n        fundClass: $fundClass\n        managementFeeBps: $managementFeeBps\n      ) {\n        predicted\n      }\n    }\n  }\n":
      TadaDocumentNode<{ FundFactory: unknown; }, { managementFeeBps: number; fundClass: string; fundCategory: string; symbol: string; name: string; decimals: number; sender: string; address: string; }, void>;
    "\n  query CreateStablecoinPredictAddress($address: String!, $sender: String!, $decimals: Int!, $name: String!, $symbol: String!, $collateralLivenessSeconds: Float!) {\n    StableCoinFactory(address: $address) {\n      predictAddress(\n        sender: $sender\n        decimals: $decimals\n        collateralLivenessSeconds: $collateralLivenessSeconds\n        name: $name\n        symbol: $symbol\n      ) {\n        predicted\n      }\n    }\n  }\n":
      TadaDocumentNode<{ StableCoinFactory: unknown; }, { collateralLivenessSeconds: number; symbol: string; name: string; decimals: number; sender: string; address: string; }, void>;
    "\n  query TransactionDetail($transactionHash: String!) {\n    getTransaction(transactionHash: $transactionHash) {\n      ...TransactionFragment\n    }\n  }\n":
      TadaDocumentNode<{ getTransaction: { address: string; createdAt: string | null; from: string; functionName: string; metadata: unknown; transactionHash: string; updatedAt: string | null; receipt: { revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; } | null; } | null; }, { transactionHash: string; }, void>;
    "\n  query TransactionList($pageSize: Int, $page: Int) {\n    getProcessedTransactions(pageSize: $pageSize, page: $page) {\n      count\n      records {\n        ...TransactionFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ getProcessedTransactions: { count: number; records: { address: string; createdAt: string | null; from: string; functionName: string; metadata: unknown; transactionHash: string; updatedAt: string | null; receipt: { revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; } | null; }[]; } | null; }, { page?: number | null | undefined; pageSize?: number | null | undefined; }, void>;
    "\n  query TransactionListByAddress($from: String, $pageSize: Int, $page: Int) {\n    getProcessedTransactions(from: $from, pageSize: $pageSize, page: $page) {\n      count\n      records {\n        ...TransactionFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ getProcessedTransactions: { count: number; records: { address: string; createdAt: string | null; from: string; functionName: string; metadata: unknown; transactionHash: string; updatedAt: string | null; receipt: { revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; } | null; }[]; } | null; }, { page?: number | null | undefined; pageSize?: number | null | undefined; from?: string | null | undefined; }, void>;
    "\n  query ProcessedTransactionsHistory($processedAfter: String, $from: String) {\n    recent: getProcessedTransactions(processedAfter: $processedAfter, from: $from) {\n      count\n    }\n    total: getProcessedTransactions {\n      count\n    }\n  }\n":
      TadaDocumentNode<{ recent: { count: number; } | null; total: { count: number; } | null; }, { from?: string | null | undefined; processedAfter?: string | null | undefined; }, void>;
    "\n  query RecentTransactionsHistory($processedAfter: String, $from: String, $pageSize: Int, $page: Int) {\n    getPendingAndRecentlyProcessedTransactions(processedAfter: $processedAfter, from: $from, pageSize: $pageSize, page: $page) {\n      count\n      records {\n        ...TransactionFragment\n      }\n    }\n  }\n":
      TadaDocumentNode<{ getPendingAndRecentlyProcessedTransactions: { count: number; records: { address: string; createdAt: string | null; from: string; functionName: string; metadata: unknown; transactionHash: string; updatedAt: string | null; receipt: { revertReasonDecoded: string | null; gasUsed: string; blobGasPrice: string | null; blobGasUsed: string | null; blockHash: string; blockNumber: string; contractAddress: string | null; cumulativeGasUsed: string; effectiveGasPrice: string; from: string; logs: unknown; logsBloom: string; revertReason: string | null; root: string | null; status: "Success" | "Reverted"; to: string | null; transactionHash: string; transactionIndex: number; type: string; } | null; }[]; } | null; }, { page?: number | null | undefined; pageSize?: number | null | undefined; from?: string | null | undefined; processedAfter?: string | null | undefined; }, void>;
    "query ProcessedTransactionsTimeline($granularity: TransactionTimelineGranularity!, $timelineStartDate: String!, $from: String) {\n    getTransactionsTimeline(granularity: $granularity, timelineStartDate: $timelineStartDate, from: $from) {\n      count\n      start\n      end\n    }\n  }":
      TadaDocumentNode<{ getTransactionsTimeline: { count: number | null; start: string | null; end: string | null; }[] | null; }, { from?: string | null | undefined; timelineStartDate: string; granularity: "DAY" | "HOUR" | "MONTH" | "YEAR"; }, void>;
  }
}
