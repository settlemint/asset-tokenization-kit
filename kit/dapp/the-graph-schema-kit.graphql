"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AccessControl {
  id: Bytes!
  admin(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  registrar(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  claimManager(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  identityIssuer(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  tokenIdentityIssuer(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  tokenIdentityIssuerAdmin(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  deployer(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  storageModifier(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  manageRegistries(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  tokenGovernance(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  supplyManagement(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  custodian(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  emergency(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  implementationManager(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  allowListManager(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
}

input AccessControl_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  admin: [String!]
  admin_not: [String!]
  admin_contains: [String!]
  admin_contains_nocase: [String!]
  admin_not_contains: [String!]
  admin_not_contains_nocase: [String!]
  admin_: Account_filter
  registrar: [String!]
  registrar_not: [String!]
  registrar_contains: [String!]
  registrar_contains_nocase: [String!]
  registrar_not_contains: [String!]
  registrar_not_contains_nocase: [String!]
  registrar_: Account_filter
  claimManager: [String!]
  claimManager_not: [String!]
  claimManager_contains: [String!]
  claimManager_contains_nocase: [String!]
  claimManager_not_contains: [String!]
  claimManager_not_contains_nocase: [String!]
  claimManager_: Account_filter
  identityIssuer: [String!]
  identityIssuer_not: [String!]
  identityIssuer_contains: [String!]
  identityIssuer_contains_nocase: [String!]
  identityIssuer_not_contains: [String!]
  identityIssuer_not_contains_nocase: [String!]
  identityIssuer_: Account_filter
  tokenIdentityIssuer: [String!]
  tokenIdentityIssuer_not: [String!]
  tokenIdentityIssuer_contains: [String!]
  tokenIdentityIssuer_contains_nocase: [String!]
  tokenIdentityIssuer_not_contains: [String!]
  tokenIdentityIssuer_not_contains_nocase: [String!]
  tokenIdentityIssuer_: Account_filter
  tokenIdentityIssuerAdmin: [String!]
  tokenIdentityIssuerAdmin_not: [String!]
  tokenIdentityIssuerAdmin_contains: [String!]
  tokenIdentityIssuerAdmin_contains_nocase: [String!]
  tokenIdentityIssuerAdmin_not_contains: [String!]
  tokenIdentityIssuerAdmin_not_contains_nocase: [String!]
  tokenIdentityIssuerAdmin_: Account_filter
  deployer: [String!]
  deployer_not: [String!]
  deployer_contains: [String!]
  deployer_contains_nocase: [String!]
  deployer_not_contains: [String!]
  deployer_not_contains_nocase: [String!]
  deployer_: Account_filter
  storageModifier: [String!]
  storageModifier_not: [String!]
  storageModifier_contains: [String!]
  storageModifier_contains_nocase: [String!]
  storageModifier_not_contains: [String!]
  storageModifier_not_contains_nocase: [String!]
  storageModifier_: Account_filter
  manageRegistries: [String!]
  manageRegistries_not: [String!]
  manageRegistries_contains: [String!]
  manageRegistries_contains_nocase: [String!]
  manageRegistries_not_contains: [String!]
  manageRegistries_not_contains_nocase: [String!]
  manageRegistries_: Account_filter
  tokenGovernance: [String!]
  tokenGovernance_not: [String!]
  tokenGovernance_contains: [String!]
  tokenGovernance_contains_nocase: [String!]
  tokenGovernance_not_contains: [String!]
  tokenGovernance_not_contains_nocase: [String!]
  tokenGovernance_: Account_filter
  supplyManagement: [String!]
  supplyManagement_not: [String!]
  supplyManagement_contains: [String!]
  supplyManagement_contains_nocase: [String!]
  supplyManagement_not_contains: [String!]
  supplyManagement_not_contains_nocase: [String!]
  supplyManagement_: Account_filter
  custodian: [String!]
  custodian_not: [String!]
  custodian_contains: [String!]
  custodian_contains_nocase: [String!]
  custodian_not_contains: [String!]
  custodian_not_contains_nocase: [String!]
  custodian_: Account_filter
  emergency: [String!]
  emergency_not: [String!]
  emergency_contains: [String!]
  emergency_contains_nocase: [String!]
  emergency_not_contains: [String!]
  emergency_not_contains_nocase: [String!]
  emergency_: Account_filter
  implementationManager: [String!]
  implementationManager_not: [String!]
  implementationManager_contains: [String!]
  implementationManager_contains_nocase: [String!]
  implementationManager_not_contains: [String!]
  implementationManager_not_contains_nocase: [String!]
  implementationManager_: Account_filter
  allowListManager: [String!]
  allowListManager_not: [String!]
  allowListManager_contains: [String!]
  allowListManager_contains_nocase: [String!]
  allowListManager_not_contains: [String!]
  allowListManager_not_contains_nocase: [String!]
  allowListManager_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AccessControl_filter]
  or: [AccessControl_filter]
}

enum AccessControl_orderBy {
  id
  admin
  registrar
  claimManager
  identityIssuer
  tokenIdentityIssuer
  tokenIdentityIssuerAdmin
  deployer
  storageModifier
  manageRegistries
  tokenGovernance
  supplyManagement
  custodian
  emergency
  implementationManager
  allowListManager
}

type Account {
  id: Bytes!
  isContract: Boolean!
  identity: Identity
  country: Int
  balances(skip: Int = 0, first: Int = 100, orderBy: TokenBalance_orderBy, orderDirection: OrderDirection, where: TokenBalance_filter): [TokenBalance!]!
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  isContract: Boolean
  isContract_not: Boolean
  isContract_in: [Boolean!]
  isContract_not_in: [Boolean!]
  identity: String
  identity_not: String
  identity_gt: String
  identity_lt: String
  identity_gte: String
  identity_lte: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_contains: String
  identity_contains_nocase: String
  identity_not_contains: String
  identity_not_contains_nocase: String
  identity_starts_with: String
  identity_starts_with_nocase: String
  identity_not_starts_with: String
  identity_not_starts_with_nocase: String
  identity_ends_with: String
  identity_ends_with_nocase: String
  identity_not_ends_with: String
  identity_not_ends_with_nocase: String
  identity_: Identity_filter
  country: Int
  country_not: Int
  country_gt: Int
  country_lt: Int
  country_gte: Int
  country_lte: Int
  country_in: [Int!]
  country_not_in: [Int!]
  balances_: TokenBalance_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  isContract
  identity
  identity__id
  country
  balances
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Compliance {
  id: Bytes!
  account: Account!
}

input Compliance_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Compliance_filter]
  or: [Compliance_filter]
}

enum Compliance_orderBy {
  id
  account
  account__id
  account__isContract
  account__country
}

type Event {
  id: Bytes!
  eventName: String!
  txIndex: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  emitter: Account!
  sender: Account!
  involved(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  values(skip: Int = 0, first: Int = 100, orderBy: EventValue_orderBy, orderDirection: OrderDirection, where: EventValue_filter): [EventValue!]!
}

type EventValue {
  id: Bytes!
  name: String!
  value: String!
  entry: Event!
}

input EventValue_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String
  entry: String
  entry_not: String
  entry_gt: String
  entry_lt: String
  entry_gte: String
  entry_lte: String
  entry_in: [String!]
  entry_not_in: [String!]
  entry_contains: String
  entry_contains_nocase: String
  entry_not_contains: String
  entry_not_contains_nocase: String
  entry_starts_with: String
  entry_starts_with_nocase: String
  entry_not_starts_with: String
  entry_not_starts_with_nocase: String
  entry_ends_with: String
  entry_ends_with_nocase: String
  entry_not_ends_with: String
  entry_not_ends_with_nocase: String
  entry_: Event_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EventValue_filter]
  or: [EventValue_filter]
}

enum EventValue_orderBy {
  id
  name
  value
  entry
  entry__id
  entry__eventName
  entry__txIndex
  entry__blockNumber
  entry__blockTimestamp
  entry__transactionHash
}

input Event_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  eventName: String
  eventName_not: String
  eventName_gt: String
  eventName_lt: String
  eventName_gte: String
  eventName_lte: String
  eventName_in: [String!]
  eventName_not_in: [String!]
  eventName_contains: String
  eventName_contains_nocase: String
  eventName_not_contains: String
  eventName_not_contains_nocase: String
  eventName_starts_with: String
  eventName_starts_with_nocase: String
  eventName_not_starts_with: String
  eventName_not_starts_with_nocase: String
  eventName_ends_with: String
  eventName_ends_with_nocase: String
  eventName_not_ends_with: String
  eventName_not_ends_with_nocase: String
  txIndex: BigInt
  txIndex_not: BigInt
  txIndex_gt: BigInt
  txIndex_lt: BigInt
  txIndex_gte: BigInt
  txIndex_lte: BigInt
  txIndex_in: [BigInt!]
  txIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  emitter: String
  emitter_not: String
  emitter_gt: String
  emitter_lt: String
  emitter_gte: String
  emitter_lte: String
  emitter_in: [String!]
  emitter_not_in: [String!]
  emitter_contains: String
  emitter_contains_nocase: String
  emitter_not_contains: String
  emitter_not_contains_nocase: String
  emitter_starts_with: String
  emitter_starts_with_nocase: String
  emitter_not_starts_with: String
  emitter_not_starts_with_nocase: String
  emitter_ends_with: String
  emitter_ends_with_nocase: String
  emitter_not_ends_with: String
  emitter_not_ends_with_nocase: String
  emitter_: Account_filter
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Account_filter
  involved: [String!]
  involved_not: [String!]
  involved_contains: [String!]
  involved_contains_nocase: [String!]
  involved_not_contains: [String!]
  involved_not_contains_nocase: [String!]
  involved_: Account_filter
  values_: EventValue_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Event_filter]
  or: [Event_filter]
}

enum Event_orderBy {
  id
  eventName
  txIndex
  blockNumber
  blockTimestamp
  transactionHash
  emitter
  emitter__id
  emitter__isContract
  emitter__country
  sender
  sender__id
  sender__isContract
  sender__country
  involved
  values
}

type Identity {
  id: Bytes!
  registry: IdentityRegistry
  claims(skip: Int = 0, first: Int = 100, orderBy: IdentityClaim_orderBy, orderDirection: OrderDirection, where: IdentityClaim_filter): [IdentityClaim!]!
  account: Account
  token: Token
}

type IdentityClaim {
  id: Bytes!
  identity: Identity!
  name: String!
  issuer: Identity!
  uri: String
  revoked: Boolean!
  values(skip: Int = 0, first: Int = 100, orderBy: IdentityClaimValue_orderBy, orderDirection: OrderDirection, where: IdentityClaimValue_filter): [IdentityClaimValue!]!
}

type IdentityClaimValue {
  id: Bytes!
  claim: IdentityClaim!
  key: String!
  value: String!
}

input IdentityClaimValue_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  claim: String
  claim_not: String
  claim_gt: String
  claim_lt: String
  claim_gte: String
  claim_lte: String
  claim_in: [String!]
  claim_not_in: [String!]
  claim_contains: String
  claim_contains_nocase: String
  claim_not_contains: String
  claim_not_contains_nocase: String
  claim_starts_with: String
  claim_starts_with_nocase: String
  claim_not_starts_with: String
  claim_not_starts_with_nocase: String
  claim_ends_with: String
  claim_ends_with_nocase: String
  claim_not_ends_with: String
  claim_not_ends_with_nocase: String
  claim_: IdentityClaim_filter
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityClaimValue_filter]
  or: [IdentityClaimValue_filter]
}

enum IdentityClaimValue_orderBy {
  id
  claim
  claim__id
  claim__name
  claim__uri
  claim__revoked
  key
  value
}

input IdentityClaim_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  identity: String
  identity_not: String
  identity_gt: String
  identity_lt: String
  identity_gte: String
  identity_lte: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_contains: String
  identity_contains_nocase: String
  identity_not_contains: String
  identity_not_contains_nocase: String
  identity_starts_with: String
  identity_starts_with_nocase: String
  identity_not_starts_with: String
  identity_not_starts_with_nocase: String
  identity_ends_with: String
  identity_ends_with_nocase: String
  identity_not_ends_with: String
  identity_not_ends_with_nocase: String
  identity_: Identity_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  issuer: String
  issuer_not: String
  issuer_gt: String
  issuer_lt: String
  issuer_gte: String
  issuer_lte: String
  issuer_in: [String!]
  issuer_not_in: [String!]
  issuer_contains: String
  issuer_contains_nocase: String
  issuer_not_contains: String
  issuer_not_contains_nocase: String
  issuer_starts_with: String
  issuer_starts_with_nocase: String
  issuer_not_starts_with: String
  issuer_not_starts_with_nocase: String
  issuer_ends_with: String
  issuer_ends_with_nocase: String
  issuer_not_ends_with: String
  issuer_not_ends_with_nocase: String
  issuer_: Identity_filter
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  revoked: Boolean
  revoked_not: Boolean
  revoked_in: [Boolean!]
  revoked_not_in: [Boolean!]
  values_: IdentityClaimValue_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityClaim_filter]
  or: [IdentityClaim_filter]
}

enum IdentityClaim_orderBy {
  id
  identity
  identity__id
  name
  issuer
  issuer__id
  uri
  revoked
  values
}

type IdentityFactory {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
}

input IdentityFactory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityFactory_filter]
  or: [IdentityFactory_filter]
}

enum IdentityFactory_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
}

type IdentityRegistry {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  identities(skip: Int = 0, first: Int = 100, orderBy: Identity_orderBy, orderDirection: OrderDirection, where: Identity_filter): [Identity!]!
  trustedIssuersRegistry: TrustedIssuersRegistry
  topicSchemeRegistry: TopicSchemeRegistry
  identityRegistryStorage: IdentityRegistryStorage
}

type IdentityRegistryStorage {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
}

input IdentityRegistryStorage_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityRegistryStorage_filter]
  or: [IdentityRegistryStorage_filter]
}

enum IdentityRegistryStorage_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
}

input IdentityRegistry_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  identities_: Identity_filter
  trustedIssuersRegistry: String
  trustedIssuersRegistry_not: String
  trustedIssuersRegistry_gt: String
  trustedIssuersRegistry_lt: String
  trustedIssuersRegistry_gte: String
  trustedIssuersRegistry_lte: String
  trustedIssuersRegistry_in: [String!]
  trustedIssuersRegistry_not_in: [String!]
  trustedIssuersRegistry_contains: String
  trustedIssuersRegistry_contains_nocase: String
  trustedIssuersRegistry_not_contains: String
  trustedIssuersRegistry_not_contains_nocase: String
  trustedIssuersRegistry_starts_with: String
  trustedIssuersRegistry_starts_with_nocase: String
  trustedIssuersRegistry_not_starts_with: String
  trustedIssuersRegistry_not_starts_with_nocase: String
  trustedIssuersRegistry_ends_with: String
  trustedIssuersRegistry_ends_with_nocase: String
  trustedIssuersRegistry_not_ends_with: String
  trustedIssuersRegistry_not_ends_with_nocase: String
  trustedIssuersRegistry_: TrustedIssuersRegistry_filter
  topicSchemeRegistry: String
  topicSchemeRegistry_not: String
  topicSchemeRegistry_gt: String
  topicSchemeRegistry_lt: String
  topicSchemeRegistry_gte: String
  topicSchemeRegistry_lte: String
  topicSchemeRegistry_in: [String!]
  topicSchemeRegistry_not_in: [String!]
  topicSchemeRegistry_contains: String
  topicSchemeRegistry_contains_nocase: String
  topicSchemeRegistry_not_contains: String
  topicSchemeRegistry_not_contains_nocase: String
  topicSchemeRegistry_starts_with: String
  topicSchemeRegistry_starts_with_nocase: String
  topicSchemeRegistry_not_starts_with: String
  topicSchemeRegistry_not_starts_with_nocase: String
  topicSchemeRegistry_ends_with: String
  topicSchemeRegistry_ends_with_nocase: String
  topicSchemeRegistry_not_ends_with: String
  topicSchemeRegistry_not_ends_with_nocase: String
  topicSchemeRegistry_: TopicSchemeRegistry_filter
  identityRegistryStorage: String
  identityRegistryStorage_not: String
  identityRegistryStorage_gt: String
  identityRegistryStorage_lt: String
  identityRegistryStorage_gte: String
  identityRegistryStorage_lte: String
  identityRegistryStorage_in: [String!]
  identityRegistryStorage_not_in: [String!]
  identityRegistryStorage_contains: String
  identityRegistryStorage_contains_nocase: String
  identityRegistryStorage_not_contains: String
  identityRegistryStorage_not_contains_nocase: String
  identityRegistryStorage_starts_with: String
  identityRegistryStorage_starts_with_nocase: String
  identityRegistryStorage_not_starts_with: String
  identityRegistryStorage_not_starts_with_nocase: String
  identityRegistryStorage_ends_with: String
  identityRegistryStorage_ends_with_nocase: String
  identityRegistryStorage_not_ends_with: String
  identityRegistryStorage_not_ends_with_nocase: String
  identityRegistryStorage_: IdentityRegistryStorage_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityRegistry_filter]
  or: [IdentityRegistry_filter]
}

enum IdentityRegistry_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  identities
  trustedIssuersRegistry
  trustedIssuersRegistry__id
  topicSchemeRegistry
  topicSchemeRegistry__id
  identityRegistryStorage
  identityRegistryStorage__id
}

input Identity_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  registry: String
  registry_not: String
  registry_gt: String
  registry_lt: String
  registry_gte: String
  registry_lte: String
  registry_in: [String!]
  registry_not_in: [String!]
  registry_contains: String
  registry_contains_nocase: String
  registry_not_contains: String
  registry_not_contains_nocase: String
  registry_starts_with: String
  registry_starts_with_nocase: String
  registry_not_starts_with: String
  registry_not_starts_with_nocase: String
  registry_ends_with: String
  registry_ends_with_nocase: String
  registry_not_ends_with: String
  registry_not_ends_with_nocase: String
  registry_: IdentityRegistry_filter
  claims_: IdentityClaim_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Identity_filter]
  or: [Identity_filter]
}

enum Identity_orderBy {
  id
  registry
  registry__id
  claims
  account
  account__id
  account__isContract
  account__country
  token
  token__id
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
}

"8 bytes signed integer\n"
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  event(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  eventValue(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EventValue
  eventValues(
    skip: Int = 0
    first: Int = 100
    orderBy: EventValue_orderBy
    orderDirection: OrderDirection
    where: EventValue_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EventValue!]!
  accessControl(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccessControl
  accessControls(
    skip: Int = 0
    first: Int = 100
    orderBy: AccessControl_orderBy
    orderDirection: OrderDirection
    where: AccessControl_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccessControl!]!
  system(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): System
  systems(
    skip: Int = 0
    first: Int = 100
    orderBy: System_orderBy
    orderDirection: OrderDirection
    where: System_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [System!]!
  compliance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Compliance
  compliances(
    skip: Int = 0
    first: Int = 100
    orderBy: Compliance_orderBy
    orderDirection: OrderDirection
    where: Compliance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Compliance!]!
  identityRegistryStorage(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityRegistryStorage
  identityRegistryStorages(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityRegistryStorage_orderBy
    orderDirection: OrderDirection
    where: IdentityRegistryStorage_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityRegistryStorage!]!
  identityFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityFactory
  identityFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityFactory_orderBy
    orderDirection: OrderDirection
    where: IdentityFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityFactory!]!
  identityRegistry(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityRegistry
  identityRegistries(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityRegistry_orderBy
    orderDirection: OrderDirection
    where: IdentityRegistry_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityRegistry!]!
  trustedIssuersRegistry(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TrustedIssuersRegistry
  trustedIssuersRegistries(
    skip: Int = 0
    first: Int = 100
    orderBy: TrustedIssuersRegistry_orderBy
    orderDirection: OrderDirection
    where: TrustedIssuersRegistry_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TrustedIssuersRegistry!]!
  topicSchemeRegistry(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TopicSchemeRegistry
  topicSchemeRegistries(
    skip: Int = 0
    first: Int = 100
    orderBy: TopicSchemeRegistry_orderBy
    orderDirection: OrderDirection
    where: TopicSchemeRegistry_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TopicSchemeRegistry!]!
  topicScheme(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TopicScheme
  topicSchemes(
    skip: Int = 0
    first: Int = 100
    orderBy: TopicScheme_orderBy
    orderDirection: OrderDirection
    where: TopicScheme_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TopicScheme!]!
  tokenFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFactory
  tokenFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFactory_orderBy
    orderDirection: OrderDirection
    where: TokenFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFactory!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenBalance
  tokenBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenBalance_orderBy
    orderDirection: OrderDirection
    where: TokenBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenBalance!]!
  tokenPausable(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPausable
  tokenPausables(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPausable_orderBy
    orderDirection: OrderDirection
    where: TokenPausable_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPausable!]!
  tokenCollateral(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCollateral
  tokenCollaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCollateral_orderBy
    orderDirection: OrderDirection
    where: TokenCollateral_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCollateral!]!
  tokenCapped(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCapped
  tokenCappeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCapped_orderBy
    orderDirection: OrderDirection
    where: TokenCapped_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCapped!]!
  tokenYield(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenYield
  tokenYields(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenYield_orderBy
    orderDirection: OrderDirection
    where: TokenYield_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenYield!]!
  tokenRedeemable(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenRedeemable
  tokenRedeemables(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenRedeemable_orderBy
    orderDirection: OrderDirection
    where: TokenRedeemable_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenRedeemable!]!
  tokenBond(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenBond
  tokenBonds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenBond_orderBy
    orderDirection: OrderDirection
    where: TokenBond_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenBond!]!
  tokenFixedYieldSchedule(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFixedYieldSchedule
  tokenFixedYieldSchedules(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFixedYieldSchedule_orderBy
    orderDirection: OrderDirection
    where: TokenFixedYieldSchedule_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFixedYieldSchedule!]!
  tokenFixedYieldSchedulePeriod(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFixedYieldSchedulePeriod
  tokenFixedYieldSchedulePeriods(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFixedYieldSchedulePeriod_orderBy
    orderDirection: OrderDirection
    where: TokenFixedYieldSchedulePeriod_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFixedYieldSchedulePeriod!]!
  identity(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Identity
  identities(
    skip: Int = 0
    first: Int = 100
    orderBy: Identity_orderBy
    orderDirection: OrderDirection
    where: Identity_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Identity!]!
  identityClaim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityClaim
  identityClaims(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityClaim_orderBy
    orderDirection: OrderDirection
    where: IdentityClaim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityClaim!]!
  identityClaimValue(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityClaimValue
  identityClaimValues(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityClaimValue_orderBy
    orderDirection: OrderDirection
    where: IdentityClaimValue_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityClaimValue!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type System {
  id: Bytes!
  accessControl: AccessControl!
  account: Account
  compliance: Compliance
  identityRegistryStorage: IdentityRegistryStorage
  identityFactory: IdentityFactory
  identityRegistry: IdentityRegistry
  trustedIssuersRegistry: TrustedIssuersRegistry
  topicSchemeRegistry: TopicSchemeRegistry
  tokenFactories(skip: Int = 0, first: Int = 100, orderBy: TokenFactory_orderBy, orderDirection: OrderDirection, where: TokenFactory_filter): [TokenFactory!]!
}

input System_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  compliance: String
  compliance_not: String
  compliance_gt: String
  compliance_lt: String
  compliance_gte: String
  compliance_lte: String
  compliance_in: [String!]
  compliance_not_in: [String!]
  compliance_contains: String
  compliance_contains_nocase: String
  compliance_not_contains: String
  compliance_not_contains_nocase: String
  compliance_starts_with: String
  compliance_starts_with_nocase: String
  compliance_not_starts_with: String
  compliance_not_starts_with_nocase: String
  compliance_ends_with: String
  compliance_ends_with_nocase: String
  compliance_not_ends_with: String
  compliance_not_ends_with_nocase: String
  compliance_: Compliance_filter
  identityRegistryStorage: String
  identityRegistryStorage_not: String
  identityRegistryStorage_gt: String
  identityRegistryStorage_lt: String
  identityRegistryStorage_gte: String
  identityRegistryStorage_lte: String
  identityRegistryStorage_in: [String!]
  identityRegistryStorage_not_in: [String!]
  identityRegistryStorage_contains: String
  identityRegistryStorage_contains_nocase: String
  identityRegistryStorage_not_contains: String
  identityRegistryStorage_not_contains_nocase: String
  identityRegistryStorage_starts_with: String
  identityRegistryStorage_starts_with_nocase: String
  identityRegistryStorage_not_starts_with: String
  identityRegistryStorage_not_starts_with_nocase: String
  identityRegistryStorage_ends_with: String
  identityRegistryStorage_ends_with_nocase: String
  identityRegistryStorage_not_ends_with: String
  identityRegistryStorage_not_ends_with_nocase: String
  identityRegistryStorage_: IdentityRegistryStorage_filter
  identityFactory: String
  identityFactory_not: String
  identityFactory_gt: String
  identityFactory_lt: String
  identityFactory_gte: String
  identityFactory_lte: String
  identityFactory_in: [String!]
  identityFactory_not_in: [String!]
  identityFactory_contains: String
  identityFactory_contains_nocase: String
  identityFactory_not_contains: String
  identityFactory_not_contains_nocase: String
  identityFactory_starts_with: String
  identityFactory_starts_with_nocase: String
  identityFactory_not_starts_with: String
  identityFactory_not_starts_with_nocase: String
  identityFactory_ends_with: String
  identityFactory_ends_with_nocase: String
  identityFactory_not_ends_with: String
  identityFactory_not_ends_with_nocase: String
  identityFactory_: IdentityFactory_filter
  identityRegistry: String
  identityRegistry_not: String
  identityRegistry_gt: String
  identityRegistry_lt: String
  identityRegistry_gte: String
  identityRegistry_lte: String
  identityRegistry_in: [String!]
  identityRegistry_not_in: [String!]
  identityRegistry_contains: String
  identityRegistry_contains_nocase: String
  identityRegistry_not_contains: String
  identityRegistry_not_contains_nocase: String
  identityRegistry_starts_with: String
  identityRegistry_starts_with_nocase: String
  identityRegistry_not_starts_with: String
  identityRegistry_not_starts_with_nocase: String
  identityRegistry_ends_with: String
  identityRegistry_ends_with_nocase: String
  identityRegistry_not_ends_with: String
  identityRegistry_not_ends_with_nocase: String
  identityRegistry_: IdentityRegistry_filter
  trustedIssuersRegistry: String
  trustedIssuersRegistry_not: String
  trustedIssuersRegistry_gt: String
  trustedIssuersRegistry_lt: String
  trustedIssuersRegistry_gte: String
  trustedIssuersRegistry_lte: String
  trustedIssuersRegistry_in: [String!]
  trustedIssuersRegistry_not_in: [String!]
  trustedIssuersRegistry_contains: String
  trustedIssuersRegistry_contains_nocase: String
  trustedIssuersRegistry_not_contains: String
  trustedIssuersRegistry_not_contains_nocase: String
  trustedIssuersRegistry_starts_with: String
  trustedIssuersRegistry_starts_with_nocase: String
  trustedIssuersRegistry_not_starts_with: String
  trustedIssuersRegistry_not_starts_with_nocase: String
  trustedIssuersRegistry_ends_with: String
  trustedIssuersRegistry_ends_with_nocase: String
  trustedIssuersRegistry_not_ends_with: String
  trustedIssuersRegistry_not_ends_with_nocase: String
  trustedIssuersRegistry_: TrustedIssuersRegistry_filter
  topicSchemeRegistry: String
  topicSchemeRegistry_not: String
  topicSchemeRegistry_gt: String
  topicSchemeRegistry_lt: String
  topicSchemeRegistry_gte: String
  topicSchemeRegistry_lte: String
  topicSchemeRegistry_in: [String!]
  topicSchemeRegistry_not_in: [String!]
  topicSchemeRegistry_contains: String
  topicSchemeRegistry_contains_nocase: String
  topicSchemeRegistry_not_contains: String
  topicSchemeRegistry_not_contains_nocase: String
  topicSchemeRegistry_starts_with: String
  topicSchemeRegistry_starts_with_nocase: String
  topicSchemeRegistry_not_starts_with: String
  topicSchemeRegistry_not_starts_with_nocase: String
  topicSchemeRegistry_ends_with: String
  topicSchemeRegistry_ends_with_nocase: String
  topicSchemeRegistry_not_ends_with: String
  topicSchemeRegistry_not_ends_with_nocase: String
  topicSchemeRegistry_: TopicSchemeRegistry_filter
  tokenFactories_: TokenFactory_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [System_filter]
  or: [System_filter]
}

enum System_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  compliance
  compliance__id
  identityRegistryStorage
  identityRegistryStorage__id
  identityFactory
  identityFactory__id
  identityRegistry
  identityRegistry__id
  trustedIssuersRegistry
  trustedIssuersRegistry__id
  topicSchemeRegistry
  topicSchemeRegistry__id
  tokenFactories
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type Token {
  id: Bytes!
  account: Account!
  accessControl: AccessControl
  identity: Identity
  balances(skip: Int = 0, first: Int = 100, orderBy: TokenBalance_orderBy, orderDirection: OrderDirection, where: TokenBalance_filter): [TokenBalance!]!
  type: String!
  tokenFactory: TokenFactory
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  pausable: TokenPausable
  collateral: TokenCollateral
  capped: TokenCapped
  yield_: TokenYield
  redeemable: TokenRedeemable
  bond: TokenBond
}

type TokenBalance {
  id: Bytes!
  token: Token!
  account: Account!
  value: BigDecimal!
  valueExact: BigInt!
  isFrozen: Boolean!
  frozen: BigDecimal!
  frozenExact: BigInt!
  available: BigDecimal!
  availableExact: BigInt!
}

input TokenBalance_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  value: BigDecimal
  value_not: BigDecimal
  value_gt: BigDecimal
  value_lt: BigDecimal
  value_gte: BigDecimal
  value_lte: BigDecimal
  value_in: [BigDecimal!]
  value_not_in: [BigDecimal!]
  valueExact: BigInt
  valueExact_not: BigInt
  valueExact_gt: BigInt
  valueExact_lt: BigInt
  valueExact_gte: BigInt
  valueExact_lte: BigInt
  valueExact_in: [BigInt!]
  valueExact_not_in: [BigInt!]
  isFrozen: Boolean
  isFrozen_not: Boolean
  isFrozen_in: [Boolean!]
  isFrozen_not_in: [Boolean!]
  frozen: BigDecimal
  frozen_not: BigDecimal
  frozen_gt: BigDecimal
  frozen_lt: BigDecimal
  frozen_gte: BigDecimal
  frozen_lte: BigDecimal
  frozen_in: [BigDecimal!]
  frozen_not_in: [BigDecimal!]
  frozenExact: BigInt
  frozenExact_not: BigInt
  frozenExact_gt: BigInt
  frozenExact_lt: BigInt
  frozenExact_gte: BigInt
  frozenExact_lte: BigInt
  frozenExact_in: [BigInt!]
  frozenExact_not_in: [BigInt!]
  available: BigDecimal
  available_not: BigDecimal
  available_gt: BigDecimal
  available_lt: BigDecimal
  available_gte: BigDecimal
  available_lte: BigDecimal
  available_in: [BigDecimal!]
  available_not_in: [BigDecimal!]
  availableExact: BigInt
  availableExact_not: BigInt
  availableExact_gt: BigInt
  availableExact_lt: BigInt
  availableExact_gte: BigInt
  availableExact_lte: BigInt
  availableExact_in: [BigInt!]
  availableExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenBalance_filter]
  or: [TokenBalance_filter]
}

enum TokenBalance_orderBy {
  id
  token
  token__id
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  account
  account__id
  account__isContract
  account__country
  value
  valueExact
  isFrozen
  frozen
  frozenExact
  available
  availableExact
}

type TokenBond {
  id: Bytes!
  faceValue: BigDecimal!
  faceValueExact: BigInt!
  maturityDate: BigInt!
  isMatured: Boolean!
}

input TokenBond_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  faceValue: BigDecimal
  faceValue_not: BigDecimal
  faceValue_gt: BigDecimal
  faceValue_lt: BigDecimal
  faceValue_gte: BigDecimal
  faceValue_lte: BigDecimal
  faceValue_in: [BigDecimal!]
  faceValue_not_in: [BigDecimal!]
  faceValueExact: BigInt
  faceValueExact_not: BigInt
  faceValueExact_gt: BigInt
  faceValueExact_lt: BigInt
  faceValueExact_gte: BigInt
  faceValueExact_lte: BigInt
  faceValueExact_in: [BigInt!]
  faceValueExact_not_in: [BigInt!]
  maturityDate: BigInt
  maturityDate_not: BigInt
  maturityDate_gt: BigInt
  maturityDate_lt: BigInt
  maturityDate_gte: BigInt
  maturityDate_lte: BigInt
  maturityDate_in: [BigInt!]
  maturityDate_not_in: [BigInt!]
  isMatured: Boolean
  isMatured_not: Boolean
  isMatured_in: [Boolean!]
  isMatured_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenBond_filter]
  or: [TokenBond_filter]
}

enum TokenBond_orderBy {
  id
  faceValue
  faceValueExact
  maturityDate
  isMatured
}

type TokenCapped {
  id: Bytes!
  cap: BigDecimal!
  capExact: BigInt!
}

input TokenCapped_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  cap: BigDecimal
  cap_not: BigDecimal
  cap_gt: BigDecimal
  cap_lt: BigDecimal
  cap_gte: BigDecimal
  cap_lte: BigDecimal
  cap_in: [BigDecimal!]
  cap_not_in: [BigDecimal!]
  capExact: BigInt
  capExact_not: BigInt
  capExact_gt: BigInt
  capExact_lt: BigInt
  capExact_gte: BigInt
  capExact_lte: BigInt
  capExact_in: [BigInt!]
  capExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCapped_filter]
  or: [TokenCapped_filter]
}

enum TokenCapped_orderBy {
  id
  cap
  capExact
}

type TokenCollateral {
  id: Bytes!
  identityClaim: IdentityClaim
}

input TokenCollateral_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  identityClaim: String
  identityClaim_not: String
  identityClaim_gt: String
  identityClaim_lt: String
  identityClaim_gte: String
  identityClaim_lte: String
  identityClaim_in: [String!]
  identityClaim_not_in: [String!]
  identityClaim_contains: String
  identityClaim_contains_nocase: String
  identityClaim_not_contains: String
  identityClaim_not_contains_nocase: String
  identityClaim_starts_with: String
  identityClaim_starts_with_nocase: String
  identityClaim_not_starts_with: String
  identityClaim_not_starts_with_nocase: String
  identityClaim_ends_with: String
  identityClaim_ends_with_nocase: String
  identityClaim_not_ends_with: String
  identityClaim_not_ends_with_nocase: String
  identityClaim_: IdentityClaim_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCollateral_filter]
  or: [TokenCollateral_filter]
}

enum TokenCollateral_orderBy {
  id
  identityClaim
  identityClaim__id
  identityClaim__name
  identityClaim__uri
  identityClaim__revoked
}

type TokenFactory {
  id: Bytes!
  accessControl: AccessControl!
  type: String!
  system: System
  account: Account!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
}

input TokenFactory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  system: String
  system_not: String
  system_gt: String
  system_lt: String
  system_gte: String
  system_lte: String
  system_in: [String!]
  system_not_in: [String!]
  system_contains: String
  system_contains_nocase: String
  system_not_contains: String
  system_not_contains_nocase: String
  system_starts_with: String
  system_starts_with_nocase: String
  system_not_starts_with: String
  system_not_starts_with_nocase: String
  system_ends_with: String
  system_ends_with_nocase: String
  system_not_ends_with: String
  system_not_ends_with_nocase: String
  system_: System_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  tokens_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFactory_filter]
  or: [TokenFactory_filter]
}

enum TokenFactory_orderBy {
  id
  accessControl
  accessControl__id
  type
  system
  system__id
  account
  account__id
  account__isContract
  account__country
  tokens
}

type TokenFixedYieldSchedule {
  id: Bytes!
  account: Account!
  token: Token!
  startDate: BigInt!
  endDate: BigInt!
  rate: BigInt!
  interval: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalUnclaimedYield: BigDecimal!
  totalUnclaimedYieldExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
  underlyingAsset: Token!
  underlyingAssetBalanceAvailable: BigDecimal!
  underlyingAssetBalanceAvailableExact: BigInt!
  currentPeriod: TokenFixedYieldSchedulePeriod
  nextPeriod: TokenFixedYieldSchedulePeriod
  periods(skip: Int = 0, first: Int = 100, orderBy: TokenFixedYieldSchedulePeriod_orderBy, orderDirection: OrderDirection, where: TokenFixedYieldSchedulePeriod_filter): [TokenFixedYieldSchedulePeriod!]!
}

type TokenFixedYieldSchedulePeriod {
  id: Bytes!
  schedule: TokenFixedYieldSchedule!
  startDate: BigInt!
  endDate: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalUnclaimedYield: BigDecimal!
  totalUnclaimedYieldExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
}

input TokenFixedYieldSchedulePeriod_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  schedule: String
  schedule_not: String
  schedule_gt: String
  schedule_lt: String
  schedule_gte: String
  schedule_lte: String
  schedule_in: [String!]
  schedule_not_in: [String!]
  schedule_contains: String
  schedule_contains_nocase: String
  schedule_not_contains: String
  schedule_not_contains_nocase: String
  schedule_starts_with: String
  schedule_starts_with_nocase: String
  schedule_not_starts_with: String
  schedule_not_starts_with_nocase: String
  schedule_ends_with: String
  schedule_ends_with_nocase: String
  schedule_not_ends_with: String
  schedule_not_ends_with_nocase: String
  schedule_: TokenFixedYieldSchedule_filter
  startDate: BigInt
  startDate_not: BigInt
  startDate_gt: BigInt
  startDate_lt: BigInt
  startDate_gte: BigInt
  startDate_lte: BigInt
  startDate_in: [BigInt!]
  startDate_not_in: [BigInt!]
  endDate: BigInt
  endDate_not: BigInt
  endDate_gt: BigInt
  endDate_lt: BigInt
  endDate_gte: BigInt
  endDate_lte: BigInt
  endDate_in: [BigInt!]
  endDate_not_in: [BigInt!]
  totalClaimed: BigDecimal
  totalClaimed_not: BigDecimal
  totalClaimed_gt: BigDecimal
  totalClaimed_lt: BigDecimal
  totalClaimed_gte: BigDecimal
  totalClaimed_lte: BigDecimal
  totalClaimed_in: [BigDecimal!]
  totalClaimed_not_in: [BigDecimal!]
  totalClaimedExact: BigInt
  totalClaimedExact_not: BigInt
  totalClaimedExact_gt: BigInt
  totalClaimedExact_lt: BigInt
  totalClaimedExact_gte: BigInt
  totalClaimedExact_lte: BigInt
  totalClaimedExact_in: [BigInt!]
  totalClaimedExact_not_in: [BigInt!]
  totalUnclaimedYield: BigDecimal
  totalUnclaimedYield_not: BigDecimal
  totalUnclaimedYield_gt: BigDecimal
  totalUnclaimedYield_lt: BigDecimal
  totalUnclaimedYield_gte: BigDecimal
  totalUnclaimedYield_lte: BigDecimal
  totalUnclaimedYield_in: [BigDecimal!]
  totalUnclaimedYield_not_in: [BigDecimal!]
  totalUnclaimedYieldExact: BigInt
  totalUnclaimedYieldExact_not: BigInt
  totalUnclaimedYieldExact_gt: BigInt
  totalUnclaimedYieldExact_lt: BigInt
  totalUnclaimedYieldExact_gte: BigInt
  totalUnclaimedYieldExact_lte: BigInt
  totalUnclaimedYieldExact_in: [BigInt!]
  totalUnclaimedYieldExact_not_in: [BigInt!]
  totalYield: BigDecimal
  totalYield_not: BigDecimal
  totalYield_gt: BigDecimal
  totalYield_lt: BigDecimal
  totalYield_gte: BigDecimal
  totalYield_lte: BigDecimal
  totalYield_in: [BigDecimal!]
  totalYield_not_in: [BigDecimal!]
  totalYieldExact: BigInt
  totalYieldExact_not: BigInt
  totalYieldExact_gt: BigInt
  totalYieldExact_lt: BigInt
  totalYieldExact_gte: BigInt
  totalYieldExact_lte: BigInt
  totalYieldExact_in: [BigInt!]
  totalYieldExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFixedYieldSchedulePeriod_filter]
  or: [TokenFixedYieldSchedulePeriod_filter]
}

enum TokenFixedYieldSchedulePeriod_orderBy {
  id
  schedule
  schedule__id
  schedule__startDate
  schedule__endDate
  schedule__rate
  schedule__interval
  schedule__totalClaimed
  schedule__totalClaimedExact
  schedule__totalUnclaimedYield
  schedule__totalUnclaimedYieldExact
  schedule__totalYield
  schedule__totalYieldExact
  schedule__underlyingAssetBalanceAvailable
  schedule__underlyingAssetBalanceAvailableExact
  startDate
  endDate
  totalClaimed
  totalClaimedExact
  totalUnclaimedYield
  totalUnclaimedYieldExact
  totalYield
  totalYieldExact
}

input TokenFixedYieldSchedule_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  startDate: BigInt
  startDate_not: BigInt
  startDate_gt: BigInt
  startDate_lt: BigInt
  startDate_gte: BigInt
  startDate_lte: BigInt
  startDate_in: [BigInt!]
  startDate_not_in: [BigInt!]
  endDate: BigInt
  endDate_not: BigInt
  endDate_gt: BigInt
  endDate_lt: BigInt
  endDate_gte: BigInt
  endDate_lte: BigInt
  endDate_in: [BigInt!]
  endDate_not_in: [BigInt!]
  rate: BigInt
  rate_not: BigInt
  rate_gt: BigInt
  rate_lt: BigInt
  rate_gte: BigInt
  rate_lte: BigInt
  rate_in: [BigInt!]
  rate_not_in: [BigInt!]
  interval: BigInt
  interval_not: BigInt
  interval_gt: BigInt
  interval_lt: BigInt
  interval_gte: BigInt
  interval_lte: BigInt
  interval_in: [BigInt!]
  interval_not_in: [BigInt!]
  totalClaimed: BigDecimal
  totalClaimed_not: BigDecimal
  totalClaimed_gt: BigDecimal
  totalClaimed_lt: BigDecimal
  totalClaimed_gte: BigDecimal
  totalClaimed_lte: BigDecimal
  totalClaimed_in: [BigDecimal!]
  totalClaimed_not_in: [BigDecimal!]
  totalClaimedExact: BigInt
  totalClaimedExact_not: BigInt
  totalClaimedExact_gt: BigInt
  totalClaimedExact_lt: BigInt
  totalClaimedExact_gte: BigInt
  totalClaimedExact_lte: BigInt
  totalClaimedExact_in: [BigInt!]
  totalClaimedExact_not_in: [BigInt!]
  totalUnclaimedYield: BigDecimal
  totalUnclaimedYield_not: BigDecimal
  totalUnclaimedYield_gt: BigDecimal
  totalUnclaimedYield_lt: BigDecimal
  totalUnclaimedYield_gte: BigDecimal
  totalUnclaimedYield_lte: BigDecimal
  totalUnclaimedYield_in: [BigDecimal!]
  totalUnclaimedYield_not_in: [BigDecimal!]
  totalUnclaimedYieldExact: BigInt
  totalUnclaimedYieldExact_not: BigInt
  totalUnclaimedYieldExact_gt: BigInt
  totalUnclaimedYieldExact_lt: BigInt
  totalUnclaimedYieldExact_gte: BigInt
  totalUnclaimedYieldExact_lte: BigInt
  totalUnclaimedYieldExact_in: [BigInt!]
  totalUnclaimedYieldExact_not_in: [BigInt!]
  totalYield: BigDecimal
  totalYield_not: BigDecimal
  totalYield_gt: BigDecimal
  totalYield_lt: BigDecimal
  totalYield_gte: BigDecimal
  totalYield_lte: BigDecimal
  totalYield_in: [BigDecimal!]
  totalYield_not_in: [BigDecimal!]
  totalYieldExact: BigInt
  totalYieldExact_not: BigInt
  totalYieldExact_gt: BigInt
  totalYieldExact_lt: BigInt
  totalYieldExact_gte: BigInt
  totalYieldExact_lte: BigInt
  totalYieldExact_in: [BigInt!]
  totalYieldExact_not_in: [BigInt!]
  underlyingAsset: String
  underlyingAsset_not: String
  underlyingAsset_gt: String
  underlyingAsset_lt: String
  underlyingAsset_gte: String
  underlyingAsset_lte: String
  underlyingAsset_in: [String!]
  underlyingAsset_not_in: [String!]
  underlyingAsset_contains: String
  underlyingAsset_contains_nocase: String
  underlyingAsset_not_contains: String
  underlyingAsset_not_contains_nocase: String
  underlyingAsset_starts_with: String
  underlyingAsset_starts_with_nocase: String
  underlyingAsset_not_starts_with: String
  underlyingAsset_not_starts_with_nocase: String
  underlyingAsset_ends_with: String
  underlyingAsset_ends_with_nocase: String
  underlyingAsset_not_ends_with: String
  underlyingAsset_not_ends_with_nocase: String
  underlyingAsset_: Token_filter
  underlyingAssetBalanceAvailable: BigDecimal
  underlyingAssetBalanceAvailable_not: BigDecimal
  underlyingAssetBalanceAvailable_gt: BigDecimal
  underlyingAssetBalanceAvailable_lt: BigDecimal
  underlyingAssetBalanceAvailable_gte: BigDecimal
  underlyingAssetBalanceAvailable_lte: BigDecimal
  underlyingAssetBalanceAvailable_in: [BigDecimal!]
  underlyingAssetBalanceAvailable_not_in: [BigDecimal!]
  underlyingAssetBalanceAvailableExact: BigInt
  underlyingAssetBalanceAvailableExact_not: BigInt
  underlyingAssetBalanceAvailableExact_gt: BigInt
  underlyingAssetBalanceAvailableExact_lt: BigInt
  underlyingAssetBalanceAvailableExact_gte: BigInt
  underlyingAssetBalanceAvailableExact_lte: BigInt
  underlyingAssetBalanceAvailableExact_in: [BigInt!]
  underlyingAssetBalanceAvailableExact_not_in: [BigInt!]
  currentPeriod: String
  currentPeriod_not: String
  currentPeriod_gt: String
  currentPeriod_lt: String
  currentPeriod_gte: String
  currentPeriod_lte: String
  currentPeriod_in: [String!]
  currentPeriod_not_in: [String!]
  currentPeriod_contains: String
  currentPeriod_contains_nocase: String
  currentPeriod_not_contains: String
  currentPeriod_not_contains_nocase: String
  currentPeriod_starts_with: String
  currentPeriod_starts_with_nocase: String
  currentPeriod_not_starts_with: String
  currentPeriod_not_starts_with_nocase: String
  currentPeriod_ends_with: String
  currentPeriod_ends_with_nocase: String
  currentPeriod_not_ends_with: String
  currentPeriod_not_ends_with_nocase: String
  currentPeriod_: TokenFixedYieldSchedulePeriod_filter
  nextPeriod: String
  nextPeriod_not: String
  nextPeriod_gt: String
  nextPeriod_lt: String
  nextPeriod_gte: String
  nextPeriod_lte: String
  nextPeriod_in: [String!]
  nextPeriod_not_in: [String!]
  nextPeriod_contains: String
  nextPeriod_contains_nocase: String
  nextPeriod_not_contains: String
  nextPeriod_not_contains_nocase: String
  nextPeriod_starts_with: String
  nextPeriod_starts_with_nocase: String
  nextPeriod_not_starts_with: String
  nextPeriod_not_starts_with_nocase: String
  nextPeriod_ends_with: String
  nextPeriod_ends_with_nocase: String
  nextPeriod_not_ends_with: String
  nextPeriod_not_ends_with_nocase: String
  nextPeriod_: TokenFixedYieldSchedulePeriod_filter
  periods_: TokenFixedYieldSchedulePeriod_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFixedYieldSchedule_filter]
  or: [TokenFixedYieldSchedule_filter]
}

enum TokenFixedYieldSchedule_orderBy {
  id
  account
  account__id
  account__isContract
  account__country
  token
  token__id
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  startDate
  endDate
  rate
  interval
  totalClaimed
  totalClaimedExact
  totalUnclaimedYield
  totalUnclaimedYieldExact
  totalYield
  totalYieldExact
  underlyingAsset
  underlyingAsset__id
  underlyingAsset__type
  underlyingAsset__name
  underlyingAsset__symbol
  underlyingAsset__decimals
  underlyingAsset__totalSupply
  underlyingAsset__totalSupplyExact
  underlyingAssetBalanceAvailable
  underlyingAssetBalanceAvailableExact
  currentPeriod
  currentPeriod__id
  currentPeriod__startDate
  currentPeriod__endDate
  currentPeriod__totalClaimed
  currentPeriod__totalClaimedExact
  currentPeriod__totalUnclaimedYield
  currentPeriod__totalUnclaimedYieldExact
  currentPeriod__totalYield
  currentPeriod__totalYieldExact
  nextPeriod
  nextPeriod__id
  nextPeriod__startDate
  nextPeriod__endDate
  nextPeriod__totalClaimed
  nextPeriod__totalClaimedExact
  nextPeriod__totalUnclaimedYield
  nextPeriod__totalUnclaimedYieldExact
  nextPeriod__totalYield
  nextPeriod__totalYieldExact
  periods
}

type TokenPausable {
  id: Bytes!
  paused: Boolean!
}

input TokenPausable_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenPausable_filter]
  or: [TokenPausable_filter]
}

enum TokenPausable_orderBy {
  id
  paused
}

type TokenRedeemable {
  id: Bytes!
  redeemedAmount: BigDecimal!
  redeemedAmountExact: BigInt!
}

input TokenRedeemable_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  redeemedAmount: BigDecimal
  redeemedAmount_not: BigDecimal
  redeemedAmount_gt: BigDecimal
  redeemedAmount_lt: BigDecimal
  redeemedAmount_gte: BigDecimal
  redeemedAmount_lte: BigDecimal
  redeemedAmount_in: [BigDecimal!]
  redeemedAmount_not_in: [BigDecimal!]
  redeemedAmountExact: BigInt
  redeemedAmountExact_not: BigInt
  redeemedAmountExact_gt: BigInt
  redeemedAmountExact_lt: BigInt
  redeemedAmountExact_gte: BigInt
  redeemedAmountExact_lte: BigInt
  redeemedAmountExact_in: [BigInt!]
  redeemedAmountExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenRedeemable_filter]
  or: [TokenRedeemable_filter]
}

enum TokenRedeemable_orderBy {
  id
  redeemedAmount
  redeemedAmountExact
}

type TokenYield {
  id: Bytes!
  schedule: TokenFixedYieldSchedule!
}

input TokenYield_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  schedule: String
  schedule_not: String
  schedule_gt: String
  schedule_lt: String
  schedule_gte: String
  schedule_lte: String
  schedule_in: [String!]
  schedule_not_in: [String!]
  schedule_contains: String
  schedule_contains_nocase: String
  schedule_not_contains: String
  schedule_not_contains_nocase: String
  schedule_starts_with: String
  schedule_starts_with_nocase: String
  schedule_not_starts_with: String
  schedule_not_starts_with_nocase: String
  schedule_ends_with: String
  schedule_ends_with_nocase: String
  schedule_not_ends_with: String
  schedule_not_ends_with_nocase: String
  schedule_: TokenFixedYieldSchedule_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenYield_filter]
  or: [TokenYield_filter]
}

enum TokenYield_orderBy {
  id
  schedule
  schedule__id
  schedule__startDate
  schedule__endDate
  schedule__rate
  schedule__interval
  schedule__totalClaimed
  schedule__totalClaimedExact
  schedule__totalUnclaimedYield
  schedule__totalUnclaimedYieldExact
  schedule__totalYield
  schedule__totalYieldExact
  schedule__underlyingAssetBalanceAvailable
  schedule__underlyingAssetBalanceAvailableExact
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  identity: String
  identity_not: String
  identity_gt: String
  identity_lt: String
  identity_gte: String
  identity_lte: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_contains: String
  identity_contains_nocase: String
  identity_not_contains: String
  identity_not_contains_nocase: String
  identity_starts_with: String
  identity_starts_with_nocase: String
  identity_not_starts_with: String
  identity_not_starts_with_nocase: String
  identity_ends_with: String
  identity_ends_with_nocase: String
  identity_not_ends_with: String
  identity_not_ends_with_nocase: String
  identity_: Identity_filter
  balances_: TokenBalance_filter
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  tokenFactory: String
  tokenFactory_not: String
  tokenFactory_gt: String
  tokenFactory_lt: String
  tokenFactory_gte: String
  tokenFactory_lte: String
  tokenFactory_in: [String!]
  tokenFactory_not_in: [String!]
  tokenFactory_contains: String
  tokenFactory_contains_nocase: String
  tokenFactory_not_contains: String
  tokenFactory_not_contains_nocase: String
  tokenFactory_starts_with: String
  tokenFactory_starts_with_nocase: String
  tokenFactory_not_starts_with: String
  tokenFactory_not_starts_with_nocase: String
  tokenFactory_ends_with: String
  tokenFactory_ends_with_nocase: String
  tokenFactory_not_ends_with: String
  tokenFactory_not_ends_with_nocase: String
  tokenFactory_: TokenFactory_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  totalSupplyExact: BigInt
  totalSupplyExact_not: BigInt
  totalSupplyExact_gt: BigInt
  totalSupplyExact_lt: BigInt
  totalSupplyExact_gte: BigInt
  totalSupplyExact_lte: BigInt
  totalSupplyExact_in: [BigInt!]
  totalSupplyExact_not_in: [BigInt!]
  pausable: String
  pausable_not: String
  pausable_gt: String
  pausable_lt: String
  pausable_gte: String
  pausable_lte: String
  pausable_in: [String!]
  pausable_not_in: [String!]
  pausable_contains: String
  pausable_contains_nocase: String
  pausable_not_contains: String
  pausable_not_contains_nocase: String
  pausable_starts_with: String
  pausable_starts_with_nocase: String
  pausable_not_starts_with: String
  pausable_not_starts_with_nocase: String
  pausable_ends_with: String
  pausable_ends_with_nocase: String
  pausable_not_ends_with: String
  pausable_not_ends_with_nocase: String
  pausable_: TokenPausable_filter
  collateral: String
  collateral_not: String
  collateral_gt: String
  collateral_lt: String
  collateral_gte: String
  collateral_lte: String
  collateral_in: [String!]
  collateral_not_in: [String!]
  collateral_contains: String
  collateral_contains_nocase: String
  collateral_not_contains: String
  collateral_not_contains_nocase: String
  collateral_starts_with: String
  collateral_starts_with_nocase: String
  collateral_not_starts_with: String
  collateral_not_starts_with_nocase: String
  collateral_ends_with: String
  collateral_ends_with_nocase: String
  collateral_not_ends_with: String
  collateral_not_ends_with_nocase: String
  collateral_: TokenCollateral_filter
  capped: String
  capped_not: String
  capped_gt: String
  capped_lt: String
  capped_gte: String
  capped_lte: String
  capped_in: [String!]
  capped_not_in: [String!]
  capped_contains: String
  capped_contains_nocase: String
  capped_not_contains: String
  capped_not_contains_nocase: String
  capped_starts_with: String
  capped_starts_with_nocase: String
  capped_not_starts_with: String
  capped_not_starts_with_nocase: String
  capped_ends_with: String
  capped_ends_with_nocase: String
  capped_not_ends_with: String
  capped_not_ends_with_nocase: String
  capped_: TokenCapped_filter
  yield_: String
  yield__not: String
  yield__gt: String
  yield__lt: String
  yield__gte: String
  yield__lte: String
  yield__in: [String!]
  yield__not_in: [String!]
  yield__contains: String
  yield__contains_nocase: String
  yield__not_contains: String
  yield__not_contains_nocase: String
  yield__starts_with: String
  yield__starts_with_nocase: String
  yield__not_starts_with: String
  yield__not_starts_with_nocase: String
  yield__ends_with: String
  yield__ends_with_nocase: String
  yield__not_ends_with: String
  yield__not_ends_with_nocase: String
  yield__: TokenYield_filter
  redeemable: String
  redeemable_not: String
  redeemable_gt: String
  redeemable_lt: String
  redeemable_gte: String
  redeemable_lte: String
  redeemable_in: [String!]
  redeemable_not_in: [String!]
  redeemable_contains: String
  redeemable_contains_nocase: String
  redeemable_not_contains: String
  redeemable_not_contains_nocase: String
  redeemable_starts_with: String
  redeemable_starts_with_nocase: String
  redeemable_not_starts_with: String
  redeemable_not_starts_with_nocase: String
  redeemable_ends_with: String
  redeemable_ends_with_nocase: String
  redeemable_not_ends_with: String
  redeemable_not_ends_with_nocase: String
  redeemable_: TokenRedeemable_filter
  bond: String
  bond_not: String
  bond_gt: String
  bond_lt: String
  bond_gte: String
  bond_lte: String
  bond_in: [String!]
  bond_not_in: [String!]
  bond_contains: String
  bond_contains_nocase: String
  bond_not_contains: String
  bond_not_contains_nocase: String
  bond_starts_with: String
  bond_starts_with_nocase: String
  bond_not_starts_with: String
  bond_not_starts_with_nocase: String
  bond_ends_with: String
  bond_ends_with_nocase: String
  bond_not_ends_with: String
  bond_not_ends_with_nocase: String
  bond_: TokenBond_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  account
  account__id
  account__isContract
  account__country
  accessControl
  accessControl__id
  identity
  identity__id
  balances
  type
  tokenFactory
  tokenFactory__id
  tokenFactory__type
  name
  symbol
  decimals
  totalSupply
  totalSupplyExact
  pausable
  pausable__id
  pausable__paused
  collateral
  collateral__id
  capped
  capped__id
  capped__cap
  capped__capExact
  yield_
  yield___id
  redeemable
  redeemable__id
  redeemable__redeemedAmount
  redeemable__redeemedAmountExact
  bond
  bond__id
  bond__faceValue
  bond__faceValueExact
  bond__maturityDate
  bond__isMatured
}

type TopicScheme {
  id: Bytes!
  registry: TopicSchemeRegistry!
  name: String!
  signature: String!
  enabled: Boolean!
}

type TopicSchemeRegistry {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  schemes(skip: Int = 0, first: Int = 100, orderBy: TopicScheme_orderBy, orderDirection: OrderDirection, where: TopicScheme_filter): [TopicScheme!]!
}

input TopicSchemeRegistry_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  schemes_: TopicScheme_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TopicSchemeRegistry_filter]
  or: [TopicSchemeRegistry_filter]
}

enum TopicSchemeRegistry_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  schemes
}

input TopicScheme_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  registry: String
  registry_not: String
  registry_gt: String
  registry_lt: String
  registry_gte: String
  registry_lte: String
  registry_in: [String!]
  registry_not_in: [String!]
  registry_contains: String
  registry_contains_nocase: String
  registry_not_contains: String
  registry_not_contains_nocase: String
  registry_starts_with: String
  registry_starts_with_nocase: String
  registry_not_starts_with: String
  registry_not_starts_with_nocase: String
  registry_ends_with: String
  registry_ends_with_nocase: String
  registry_not_ends_with: String
  registry_not_ends_with_nocase: String
  registry_: TopicSchemeRegistry_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  signature: String
  signature_not: String
  signature_gt: String
  signature_lt: String
  signature_gte: String
  signature_lte: String
  signature_in: [String!]
  signature_not_in: [String!]
  signature_contains: String
  signature_contains_nocase: String
  signature_not_contains: String
  signature_not_contains_nocase: String
  signature_starts_with: String
  signature_starts_with_nocase: String
  signature_not_starts_with: String
  signature_not_starts_with_nocase: String
  signature_ends_with: String
  signature_ends_with_nocase: String
  signature_not_ends_with: String
  signature_not_ends_with_nocase: String
  enabled: Boolean
  enabled_not: Boolean
  enabled_in: [Boolean!]
  enabled_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TopicScheme_filter]
  or: [TopicScheme_filter]
}

enum TopicScheme_orderBy {
  id
  registry
  registry__id
  name
  signature
  enabled
}

type TrustedIssuersRegistry {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
}

input TrustedIssuersRegistry_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TrustedIssuersRegistry_filter]
  or: [TrustedIssuersRegistry_filter]
}

enum TrustedIssuersRegistry_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}