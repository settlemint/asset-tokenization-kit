"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AccessControl {
  id: Bytes!
  admin(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  registrar(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  claimManager(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  identityIssuer(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  tokenIdentityIssuer(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  tokenIdentityIssuerAdmin(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  deployer(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  storageModifier(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  manageRegistries(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  tokenGovernance(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  supplyManagement(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  custodian(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  emergency(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  implementationManager(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  bypassListManager(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
}

input AccessControl_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  admin: [String!]
  admin_not: [String!]
  admin_contains: [String!]
  admin_contains_nocase: [String!]
  admin_not_contains: [String!]
  admin_not_contains_nocase: [String!]
  admin_: Account_filter
  registrar: [String!]
  registrar_not: [String!]
  registrar_contains: [String!]
  registrar_contains_nocase: [String!]
  registrar_not_contains: [String!]
  registrar_not_contains_nocase: [String!]
  registrar_: Account_filter
  claimManager: [String!]
  claimManager_not: [String!]
  claimManager_contains: [String!]
  claimManager_contains_nocase: [String!]
  claimManager_not_contains: [String!]
  claimManager_not_contains_nocase: [String!]
  claimManager_: Account_filter
  identityIssuer: [String!]
  identityIssuer_not: [String!]
  identityIssuer_contains: [String!]
  identityIssuer_contains_nocase: [String!]
  identityIssuer_not_contains: [String!]
  identityIssuer_not_contains_nocase: [String!]
  identityIssuer_: Account_filter
  tokenIdentityIssuer: [String!]
  tokenIdentityIssuer_not: [String!]
  tokenIdentityIssuer_contains: [String!]
  tokenIdentityIssuer_contains_nocase: [String!]
  tokenIdentityIssuer_not_contains: [String!]
  tokenIdentityIssuer_not_contains_nocase: [String!]
  tokenIdentityIssuer_: Account_filter
  tokenIdentityIssuerAdmin: [String!]
  tokenIdentityIssuerAdmin_not: [String!]
  tokenIdentityIssuerAdmin_contains: [String!]
  tokenIdentityIssuerAdmin_contains_nocase: [String!]
  tokenIdentityIssuerAdmin_not_contains: [String!]
  tokenIdentityIssuerAdmin_not_contains_nocase: [String!]
  tokenIdentityIssuerAdmin_: Account_filter
  deployer: [String!]
  deployer_not: [String!]
  deployer_contains: [String!]
  deployer_contains_nocase: [String!]
  deployer_not_contains: [String!]
  deployer_not_contains_nocase: [String!]
  deployer_: Account_filter
  storageModifier: [String!]
  storageModifier_not: [String!]
  storageModifier_contains: [String!]
  storageModifier_contains_nocase: [String!]
  storageModifier_not_contains: [String!]
  storageModifier_not_contains_nocase: [String!]
  storageModifier_: Account_filter
  manageRegistries: [String!]
  manageRegistries_not: [String!]
  manageRegistries_contains: [String!]
  manageRegistries_contains_nocase: [String!]
  manageRegistries_not_contains: [String!]
  manageRegistries_not_contains_nocase: [String!]
  manageRegistries_: Account_filter
  tokenGovernance: [String!]
  tokenGovernance_not: [String!]
  tokenGovernance_contains: [String!]
  tokenGovernance_contains_nocase: [String!]
  tokenGovernance_not_contains: [String!]
  tokenGovernance_not_contains_nocase: [String!]
  tokenGovernance_: Account_filter
  supplyManagement: [String!]
  supplyManagement_not: [String!]
  supplyManagement_contains: [String!]
  supplyManagement_contains_nocase: [String!]
  supplyManagement_not_contains: [String!]
  supplyManagement_not_contains_nocase: [String!]
  supplyManagement_: Account_filter
  custodian: [String!]
  custodian_not: [String!]
  custodian_contains: [String!]
  custodian_contains_nocase: [String!]
  custodian_not_contains: [String!]
  custodian_not_contains_nocase: [String!]
  custodian_: Account_filter
  emergency: [String!]
  emergency_not: [String!]
  emergency_contains: [String!]
  emergency_contains_nocase: [String!]
  emergency_not_contains: [String!]
  emergency_not_contains_nocase: [String!]
  emergency_: Account_filter
  implementationManager: [String!]
  implementationManager_not: [String!]
  implementationManager_contains: [String!]
  implementationManager_contains_nocase: [String!]
  implementationManager_not_contains: [String!]
  implementationManager_not_contains_nocase: [String!]
  implementationManager_: Account_filter
  bypassListManager: [String!]
  bypassListManager_not: [String!]
  bypassListManager_contains: [String!]
  bypassListManager_contains_nocase: [String!]
  bypassListManager_not_contains: [String!]
  bypassListManager_not_contains_nocase: [String!]
  bypassListManager_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AccessControl_filter]
  or: [AccessControl_filter]
}

enum AccessControl_orderBy {
  id
  admin
  registrar
  claimManager
  identityIssuer
  tokenIdentityIssuer
  tokenIdentityIssuerAdmin
  deployer
  storageModifier
  manageRegistries
  tokenGovernance
  supplyManagement
  custodian
  emergency
  implementationManager
  bypassListManager
}

type Account {
  id: Bytes!
  isContract: Boolean!
  identity: Identity
  country: Int
  balances(skip: Int = 0, first: Int = 100, orderBy: TokenBalance_orderBy, orderDirection: OrderDirection, where: TokenBalance_filter): [TokenBalance!]!
}

type AccountStats {
  id: Int8!
  timestamp: Timestamp!
  account: Account!
  totalValueInBaseCurrency: BigDecimal!
  balancesCount: Int!
}

type AccountStatsData {
  id: Int8!
  timestamp: Timestamp!
  account: Account!
  totalValueInBaseCurrency: BigDecimal!
  balancesCount: Int!
}

input AccountStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  totalValueInBaseCurrency: BigDecimal
  totalValueInBaseCurrency_not: BigDecimal
  totalValueInBaseCurrency_gt: BigDecimal
  totalValueInBaseCurrency_lt: BigDecimal
  totalValueInBaseCurrency_gte: BigDecimal
  totalValueInBaseCurrency_lte: BigDecimal
  totalValueInBaseCurrency_in: [BigDecimal!]
  totalValueInBaseCurrency_not_in: [BigDecimal!]
  balancesCount: Int
  balancesCount_not: Int
  balancesCount_gt: Int
  balancesCount_lt: Int
  balancesCount_gte: Int
  balancesCount_lte: Int
  balancesCount_in: [Int!]
  balancesCount_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AccountStatsData_filter]
  or: [AccountStatsData_filter]
}

enum AccountStatsData_orderBy {
  id
  timestamp
  account
  account__id
  account__isContract
  account__country
  totalValueInBaseCurrency
  balancesCount
}

input AccountStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  account: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AccountStats_filter]
  or: [AccountStats_filter]
}

enum AccountStats_orderBy {
  id
  timestamp
  account
  account__id
  account__isContract
  account__country
  totalValueInBaseCurrency
  balancesCount
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  isContract: Boolean
  isContract_not: Boolean
  isContract_in: [Boolean!]
  isContract_not_in: [Boolean!]
  identity: String
  identity_not: String
  identity_gt: String
  identity_lt: String
  identity_gte: String
  identity_lte: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_contains: String
  identity_contains_nocase: String
  identity_not_contains: String
  identity_not_contains_nocase: String
  identity_starts_with: String
  identity_starts_with_nocase: String
  identity_not_starts_with: String
  identity_not_starts_with_nocase: String
  identity_ends_with: String
  identity_ends_with_nocase: String
  identity_not_ends_with: String
  identity_not_ends_with_nocase: String
  identity_: Identity_filter
  country: Int
  country_not: Int
  country_gt: Int
  country_lt: Int
  country_gte: Int
  country_lte: Int
  country_in: [Int!]
  country_not_in: [Int!]
  balances_: TokenBalance_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  isContract
  identity
  identity__id
  identity__deployedInTransaction
  country
  balances
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Compliance {
  id: Bytes!
  account: Account!
}

input Compliance_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Compliance_filter]
  or: [Compliance_filter]
}

enum Compliance_orderBy {
  id
  account
  account__id
  account__isContract
  account__country
}

type Event {
  id: Bytes!
  eventName: String!
  txIndex: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  emitter: Account!
  sender: Account!
  involved(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  values(skip: Int = 0, first: Int = 100, orderBy: EventValue_orderBy, orderDirection: OrderDirection, where: EventValue_filter): [EventValue!]!
}

type EventStats {
  id: Int8!
  timestamp: Timestamp!
  account: Account!
  eventName: String!
  eventsCount: Int!
}

type EventStatsData {
  id: Int8!
  timestamp: Timestamp!
  account: Account!
  eventName: String!
}

input EventStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  eventName: String
  eventName_not: String
  eventName_gt: String
  eventName_lt: String
  eventName_gte: String
  eventName_lte: String
  eventName_in: [String!]
  eventName_not_in: [String!]
  eventName_contains: String
  eventName_contains_nocase: String
  eventName_not_contains: String
  eventName_not_contains_nocase: String
  eventName_starts_with: String
  eventName_starts_with_nocase: String
  eventName_not_starts_with: String
  eventName_not_starts_with_nocase: String
  eventName_ends_with: String
  eventName_ends_with_nocase: String
  eventName_not_ends_with: String
  eventName_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EventStatsData_filter]
  or: [EventStatsData_filter]
}

enum EventStatsData_orderBy {
  id
  timestamp
  account
  account__id
  account__isContract
  account__country
  eventName
}

input EventStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  account: String
  account_: Account_filter
  eventName: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EventStats_filter]
  or: [EventStats_filter]
}

enum EventStats_orderBy {
  id
  timestamp
  account
  account__id
  account__isContract
  account__country
  eventName
  eventsCount
}

type EventValue {
  id: Bytes!
  name: String!
  value: String!
  entry: Event!
}

input EventValue_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String
  entry: String
  entry_not: String
  entry_gt: String
  entry_lt: String
  entry_gte: String
  entry_lte: String
  entry_in: [String!]
  entry_not_in: [String!]
  entry_contains: String
  entry_contains_nocase: String
  entry_not_contains: String
  entry_not_contains_nocase: String
  entry_starts_with: String
  entry_starts_with_nocase: String
  entry_not_starts_with: String
  entry_not_starts_with_nocase: String
  entry_ends_with: String
  entry_ends_with_nocase: String
  entry_not_ends_with: String
  entry_not_ends_with_nocase: String
  entry_: Event_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EventValue_filter]
  or: [EventValue_filter]
}

enum EventValue_orderBy {
  id
  name
  value
  entry
  entry__id
  entry__eventName
  entry__txIndex
  entry__blockNumber
  entry__blockTimestamp
  entry__transactionHash
}

input Event_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  eventName: String
  eventName_not: String
  eventName_gt: String
  eventName_lt: String
  eventName_gte: String
  eventName_lte: String
  eventName_in: [String!]
  eventName_not_in: [String!]
  eventName_contains: String
  eventName_contains_nocase: String
  eventName_not_contains: String
  eventName_not_contains_nocase: String
  eventName_starts_with: String
  eventName_starts_with_nocase: String
  eventName_not_starts_with: String
  eventName_not_starts_with_nocase: String
  eventName_ends_with: String
  eventName_ends_with_nocase: String
  eventName_not_ends_with: String
  eventName_not_ends_with_nocase: String
  txIndex: BigInt
  txIndex_not: BigInt
  txIndex_gt: BigInt
  txIndex_lt: BigInt
  txIndex_gte: BigInt
  txIndex_lte: BigInt
  txIndex_in: [BigInt!]
  txIndex_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  emitter: String
  emitter_not: String
  emitter_gt: String
  emitter_lt: String
  emitter_gte: String
  emitter_lte: String
  emitter_in: [String!]
  emitter_not_in: [String!]
  emitter_contains: String
  emitter_contains_nocase: String
  emitter_not_contains: String
  emitter_not_contains_nocase: String
  emitter_starts_with: String
  emitter_starts_with_nocase: String
  emitter_not_starts_with: String
  emitter_not_starts_with_nocase: String
  emitter_ends_with: String
  emitter_ends_with_nocase: String
  emitter_not_ends_with: String
  emitter_not_ends_with_nocase: String
  emitter_: Account_filter
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Account_filter
  involved: [String!]
  involved_not: [String!]
  involved_contains: [String!]
  involved_contains_nocase: [String!]
  involved_not_contains: [String!]
  involved_not_contains_nocase: [String!]
  involved_: Account_filter
  values_: EventValue_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Event_filter]
  or: [Event_filter]
}

enum Event_orderBy {
  id
  eventName
  txIndex
  blockNumber
  blockTimestamp
  transactionHash
  emitter
  emitter__id
  emitter__isContract
  emitter__country
  sender
  sender__id
  sender__isContract
  sender__country
  involved
  values
}

type Identity {
  id: Bytes!
  registry: IdentityRegistry
  claims(skip: Int = 0, first: Int = 100, orderBy: IdentityClaim_orderBy, orderDirection: OrderDirection, where: IdentityClaim_filter): [IdentityClaim!]!
  account: Account
  token: Token
  deployedInTransaction: Bytes!
}

type IdentityClaim {
  id: Bytes!
  identity: Identity!
  name: String!
  issuer: Identity!
  uri: String
  revoked: Boolean!
  values(skip: Int = 0, first: Int = 100, orderBy: IdentityClaimValue_orderBy, orderDirection: OrderDirection, where: IdentityClaimValue_filter): [IdentityClaimValue!]!
  deployedInTransaction: Bytes!
}

type IdentityClaimValue {
  id: Bytes!
  claim: IdentityClaim!
  key: String!
  value: String!
}

input IdentityClaimValue_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  claim: String
  claim_not: String
  claim_gt: String
  claim_lt: String
  claim_gte: String
  claim_lte: String
  claim_in: [String!]
  claim_not_in: [String!]
  claim_contains: String
  claim_contains_nocase: String
  claim_not_contains: String
  claim_not_contains_nocase: String
  claim_starts_with: String
  claim_starts_with_nocase: String
  claim_not_starts_with: String
  claim_not_starts_with_nocase: String
  claim_ends_with: String
  claim_ends_with_nocase: String
  claim_not_ends_with: String
  claim_not_ends_with_nocase: String
  claim_: IdentityClaim_filter
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityClaimValue_filter]
  or: [IdentityClaimValue_filter]
}

enum IdentityClaimValue_orderBy {
  id
  claim
  claim__id
  claim__name
  claim__uri
  claim__revoked
  claim__deployedInTransaction
  key
  value
}

input IdentityClaim_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  identity: String
  identity_not: String
  identity_gt: String
  identity_lt: String
  identity_gte: String
  identity_lte: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_contains: String
  identity_contains_nocase: String
  identity_not_contains: String
  identity_not_contains_nocase: String
  identity_starts_with: String
  identity_starts_with_nocase: String
  identity_not_starts_with: String
  identity_not_starts_with_nocase: String
  identity_ends_with: String
  identity_ends_with_nocase: String
  identity_not_ends_with: String
  identity_not_ends_with_nocase: String
  identity_: Identity_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  issuer: String
  issuer_not: String
  issuer_gt: String
  issuer_lt: String
  issuer_gte: String
  issuer_lte: String
  issuer_in: [String!]
  issuer_not_in: [String!]
  issuer_contains: String
  issuer_contains_nocase: String
  issuer_not_contains: String
  issuer_not_contains_nocase: String
  issuer_starts_with: String
  issuer_starts_with_nocase: String
  issuer_not_starts_with: String
  issuer_not_starts_with_nocase: String
  issuer_ends_with: String
  issuer_ends_with_nocase: String
  issuer_not_ends_with: String
  issuer_not_ends_with_nocase: String
  issuer_: Identity_filter
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  revoked: Boolean
  revoked_not: Boolean
  revoked_in: [Boolean!]
  revoked_not_in: [Boolean!]
  values_: IdentityClaimValue_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityClaim_filter]
  or: [IdentityClaim_filter]
}

enum IdentityClaim_orderBy {
  id
  identity
  identity__id
  identity__deployedInTransaction
  name
  issuer
  issuer__id
  issuer__deployedInTransaction
  uri
  revoked
  values
  deployedInTransaction
}

type IdentityFactory {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

input IdentityFactory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityFactory_filter]
  or: [IdentityFactory_filter]
}

enum IdentityFactory_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  deployedInTransaction
}

type IdentityRegistry {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  identities(skip: Int = 0, first: Int = 100, orderBy: Identity_orderBy, orderDirection: OrderDirection, where: Identity_filter): [Identity!]!
  trustedIssuersRegistry: TrustedIssuersRegistry
  topicSchemeRegistry: TopicSchemeRegistry
  identityRegistryStorage: IdentityRegistryStorage
  deployedInTransaction: Bytes!
}

type IdentityRegistryStorage {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

input IdentityRegistryStorage_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityRegistryStorage_filter]
  or: [IdentityRegistryStorage_filter]
}

enum IdentityRegistryStorage_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  deployedInTransaction
}

input IdentityRegistry_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  identities_: Identity_filter
  trustedIssuersRegistry: String
  trustedIssuersRegistry_not: String
  trustedIssuersRegistry_gt: String
  trustedIssuersRegistry_lt: String
  trustedIssuersRegistry_gte: String
  trustedIssuersRegistry_lte: String
  trustedIssuersRegistry_in: [String!]
  trustedIssuersRegistry_not_in: [String!]
  trustedIssuersRegistry_contains: String
  trustedIssuersRegistry_contains_nocase: String
  trustedIssuersRegistry_not_contains: String
  trustedIssuersRegistry_not_contains_nocase: String
  trustedIssuersRegistry_starts_with: String
  trustedIssuersRegistry_starts_with_nocase: String
  trustedIssuersRegistry_not_starts_with: String
  trustedIssuersRegistry_not_starts_with_nocase: String
  trustedIssuersRegistry_ends_with: String
  trustedIssuersRegistry_ends_with_nocase: String
  trustedIssuersRegistry_not_ends_with: String
  trustedIssuersRegistry_not_ends_with_nocase: String
  trustedIssuersRegistry_: TrustedIssuersRegistry_filter
  topicSchemeRegistry: String
  topicSchemeRegistry_not: String
  topicSchemeRegistry_gt: String
  topicSchemeRegistry_lt: String
  topicSchemeRegistry_gte: String
  topicSchemeRegistry_lte: String
  topicSchemeRegistry_in: [String!]
  topicSchemeRegistry_not_in: [String!]
  topicSchemeRegistry_contains: String
  topicSchemeRegistry_contains_nocase: String
  topicSchemeRegistry_not_contains: String
  topicSchemeRegistry_not_contains_nocase: String
  topicSchemeRegistry_starts_with: String
  topicSchemeRegistry_starts_with_nocase: String
  topicSchemeRegistry_not_starts_with: String
  topicSchemeRegistry_not_starts_with_nocase: String
  topicSchemeRegistry_ends_with: String
  topicSchemeRegistry_ends_with_nocase: String
  topicSchemeRegistry_not_ends_with: String
  topicSchemeRegistry_not_ends_with_nocase: String
  topicSchemeRegistry_: TopicSchemeRegistry_filter
  identityRegistryStorage: String
  identityRegistryStorage_not: String
  identityRegistryStorage_gt: String
  identityRegistryStorage_lt: String
  identityRegistryStorage_gte: String
  identityRegistryStorage_lte: String
  identityRegistryStorage_in: [String!]
  identityRegistryStorage_not_in: [String!]
  identityRegistryStorage_contains: String
  identityRegistryStorage_contains_nocase: String
  identityRegistryStorage_not_contains: String
  identityRegistryStorage_not_contains_nocase: String
  identityRegistryStorage_starts_with: String
  identityRegistryStorage_starts_with_nocase: String
  identityRegistryStorage_not_starts_with: String
  identityRegistryStorage_not_starts_with_nocase: String
  identityRegistryStorage_ends_with: String
  identityRegistryStorage_ends_with_nocase: String
  identityRegistryStorage_not_ends_with: String
  identityRegistryStorage_not_ends_with_nocase: String
  identityRegistryStorage_: IdentityRegistryStorage_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IdentityRegistry_filter]
  or: [IdentityRegistry_filter]
}

enum IdentityRegistry_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  identities
  trustedIssuersRegistry
  trustedIssuersRegistry__id
  trustedIssuersRegistry__deployedInTransaction
  topicSchemeRegistry
  topicSchemeRegistry__id
  topicSchemeRegistry__deployedInTransaction
  identityRegistryStorage
  identityRegistryStorage__id
  identityRegistryStorage__deployedInTransaction
  deployedInTransaction
}

input Identity_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  registry: String
  registry_not: String
  registry_gt: String
  registry_lt: String
  registry_gte: String
  registry_lte: String
  registry_in: [String!]
  registry_not_in: [String!]
  registry_contains: String
  registry_contains_nocase: String
  registry_not_contains: String
  registry_not_contains_nocase: String
  registry_starts_with: String
  registry_starts_with_nocase: String
  registry_not_starts_with: String
  registry_not_starts_with_nocase: String
  registry_ends_with: String
  registry_ends_with_nocase: String
  registry_not_ends_with: String
  registry_not_ends_with_nocase: String
  registry_: IdentityRegistry_filter
  claims_: IdentityClaim_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Identity_filter]
  or: [Identity_filter]
}

enum Identity_orderBy {
  id
  registry
  registry__id
  registry__deployedInTransaction
  claims
  account
  account__id
  account__isContract
  account__country
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  deployedInTransaction
}

"8 bytes signed integer\n"
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  event(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  eventValue(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EventValue
  eventValues(
    skip: Int = 0
    first: Int = 100
    orderBy: EventValue_orderBy
    orderDirection: OrderDirection
    where: EventValue_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EventValue!]!
  accessControl(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccessControl
  accessControls(
    skip: Int = 0
    first: Int = 100
    orderBy: AccessControl_orderBy
    orderDirection: OrderDirection
    where: AccessControl_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccessControl!]!
  system(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): System
  systems(
    skip: Int = 0
    first: Int = 100
    orderBy: System_orderBy
    orderDirection: OrderDirection
    where: System_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [System!]!
  systemAddon(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SystemAddon
  systemAddons(
    skip: Int = 0
    first: Int = 100
    orderBy: SystemAddon_orderBy
    orderDirection: OrderDirection
    where: SystemAddon_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SystemAddon!]!
  vaultFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultFactory
  vaultFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultFactory_orderBy
    orderDirection: OrderDirection
    where: VaultFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultFactory!]!
  vault(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  vaultTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultTransaction
  vaultTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultTransaction_orderBy
    orderDirection: OrderDirection
    where: VaultTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultTransaction!]!
  vaultTransactionConfirmation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultTransactionConfirmation
  vaultTransactionConfirmations(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultTransactionConfirmation_orderBy
    orderDirection: OrderDirection
    where: VaultTransactionConfirmation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultTransactionConfirmation!]!
  vaultERC20Transfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultERC20Transfer
  vaultERC20Transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultERC20Transfer_orderBy
    orderDirection: OrderDirection
    where: VaultERC20Transfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultERC20Transfer!]!
  vaultContractCall(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultContractCall
  vaultContractCalls(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultContractCall_orderBy
    orderDirection: OrderDirection
    where: VaultContractCall_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultContractCall!]!
  compliance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Compliance
  compliances(
    skip: Int = 0
    first: Int = 100
    orderBy: Compliance_orderBy
    orderDirection: OrderDirection
    where: Compliance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Compliance!]!
  identityRegistryStorage(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityRegistryStorage
  identityRegistryStorages(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityRegistryStorage_orderBy
    orderDirection: OrderDirection
    where: IdentityRegistryStorage_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityRegistryStorage!]!
  identityFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityFactory
  identityFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityFactory_orderBy
    orderDirection: OrderDirection
    where: IdentityFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityFactory!]!
  identityRegistry(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityRegistry
  identityRegistries(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityRegistry_orderBy
    orderDirection: OrderDirection
    where: IdentityRegistry_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityRegistry!]!
  trustedIssuersRegistry(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TrustedIssuersRegistry
  trustedIssuersRegistries(
    skip: Int = 0
    first: Int = 100
    orderBy: TrustedIssuersRegistry_orderBy
    orderDirection: OrderDirection
    where: TrustedIssuersRegistry_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TrustedIssuersRegistry!]!
  topicSchemeRegistry(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TopicSchemeRegistry
  topicSchemeRegistries(
    skip: Int = 0
    first: Int = 100
    orderBy: TopicSchemeRegistry_orderBy
    orderDirection: OrderDirection
    where: TopicSchemeRegistry_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TopicSchemeRegistry!]!
  topicScheme(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TopicScheme
  topicSchemes(
    skip: Int = 0
    first: Int = 100
    orderBy: TopicScheme_orderBy
    orderDirection: OrderDirection
    where: TopicScheme_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TopicScheme!]!
  identity(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Identity
  identities(
    skip: Int = 0
    first: Int = 100
    orderBy: Identity_orderBy
    orderDirection: OrderDirection
    where: Identity_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Identity!]!
  identityClaim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityClaim
  identityClaims(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityClaim_orderBy
    orderDirection: OrderDirection
    where: IdentityClaim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityClaim!]!
  identityClaimValue(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IdentityClaimValue
  identityClaimValues(
    skip: Int = 0
    first: Int = 100
    orderBy: IdentityClaimValue_orderBy
    orderDirection: OrderDirection
    where: IdentityClaimValue_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IdentityClaimValue!]!
  tokenFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFactory
  tokenFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFactory_orderBy
    orderDirection: OrderDirection
    where: TokenFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFactory!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenBalance
  tokenBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenBalance_orderBy
    orderDirection: OrderDirection
    where: TokenBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenBalance!]!
  tokenPausable(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPausable
  tokenPausables(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPausable_orderBy
    orderDirection: OrderDirection
    where: TokenPausable_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPausable!]!
  tokenCollateral(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCollateral
  tokenCollaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCollateral_orderBy
    orderDirection: OrderDirection
    where: TokenCollateral_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCollateral!]!
  tokenCapped(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCapped
  tokenCappeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCapped_orderBy
    orderDirection: OrderDirection
    where: TokenCapped_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCapped!]!
  tokenYield(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenYield
  tokenYields(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenYield_orderBy
    orderDirection: OrderDirection
    where: TokenYield_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenYield!]!
  tokenRedeemable(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenRedeemable
  tokenRedeemables(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenRedeemable_orderBy
    orderDirection: OrderDirection
    where: TokenRedeemable_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenRedeemable!]!
  tokenBond(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenBond
  tokenBonds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenBond_orderBy
    orderDirection: OrderDirection
    where: TokenBond_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenBond!]!
  tokenFund(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFund
  tokenFunds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFund_orderBy
    orderDirection: OrderDirection
    where: TokenFund_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFund!]!
  xvPSettlement(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XvPSettlement
  xvPSettlements(
    skip: Int = 0
    first: Int = 100
    orderBy: XvPSettlement_orderBy
    orderDirection: OrderDirection
    where: XvPSettlement_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XvPSettlement!]!
  xvPSettlementFlow(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XvPSettlementFlow
  xvPSettlementFlows(
    skip: Int = 0
    first: Int = 100
    orderBy: XvPSettlementFlow_orderBy
    orderDirection: OrderDirection
    where: XvPSettlementFlow_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XvPSettlementFlow!]!
  xvPSettlementApproval(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XvPSettlementApproval
  xvPSettlementApprovals(
    skip: Int = 0
    first: Int = 100
    orderBy: XvPSettlementApproval_orderBy
    orderDirection: OrderDirection
    where: XvPSettlementApproval_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XvPSettlementApproval!]!
  tokenFixedYieldSchedule(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFixedYieldSchedule
  tokenFixedYieldSchedules(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFixedYieldSchedule_orderBy
    orderDirection: OrderDirection
    where: TokenFixedYieldSchedule_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFixedYieldSchedule!]!
  tokenFixedYieldSchedulePeriod(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenFixedYieldSchedulePeriod
  tokenFixedYieldSchedulePeriods(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenFixedYieldSchedulePeriod_orderBy
    orderDirection: OrderDirection
    where: TokenFixedYieldSchedulePeriod_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenFixedYieldSchedulePeriod!]!
  systemStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SystemStatsData
  systemStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SystemStatsData_orderBy
    orderDirection: OrderDirection
    where: SystemStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SystemStatsData!]!
  accountStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountStatsData
  accountStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountStatsData_orderBy
    orderDirection: OrderDirection
    where: AccountStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountStatsData!]!
  eventStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EventStatsData
  eventStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: EventStatsData_orderBy
    orderDirection: OrderDirection
    where: EventStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EventStatsData!]!
  tokenTypeStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenTypeStatsData
  tokenTypeStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenTypeStatsData_orderBy
    orderDirection: OrderDirection
    where: TokenTypeStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenTypeStatsData!]!
  tokenStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenStatsData
  tokenStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenStatsData_orderBy
    orderDirection: OrderDirection
    where: TokenStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenStatsData!]!
  tokenCollateralStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCollateralStatsData
  tokenCollateralStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCollateralStatsData_orderBy
    orderDirection: OrderDirection
    where: TokenCollateralStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCollateralStatsData!]!
  tokenBondStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenBondStatsData
  tokenBondStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenBondStatsData_orderBy
    orderDirection: OrderDirection
    where: TokenBondStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenBondStatsData!]!
  tokenDistributionStatsData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDistributionStatsData
  tokenDistributionStatsDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDistributionStatsData_orderBy
    orderDirection: OrderDirection
    where: TokenDistributionStatsData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDistributionStatsData!]!

  """Collection of aggregated `SystemStats` values"""
  systemStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: SystemStats_orderBy
    orderDirection: OrderDirection
    where: SystemStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SystemStats!]!

  """Collection of aggregated `AccountStats` values"""
  accountStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: AccountStats_orderBy
    orderDirection: OrderDirection
    where: AccountStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountStats!]!

  """Collection of aggregated `EventStats` values"""
  eventStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: EventStats_orderBy
    orderDirection: OrderDirection
    where: EventStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EventStats!]!

  """Collection of aggregated `TokenTypeStats` values"""
  tokenTypeStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: TokenTypeStats_orderBy
    orderDirection: OrderDirection
    where: TokenTypeStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenTypeStats!]!

  """Collection of aggregated `TokenStats` values"""
  tokenStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: TokenStats_orderBy
    orderDirection: OrderDirection
    where: TokenStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenStats!]!

  """Collection of aggregated `TokenCollateralStats` values"""
  tokenCollateralStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: TokenCollateralStats_orderBy
    orderDirection: OrderDirection
    where: TokenCollateralStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCollateralStats!]!

  """Collection of aggregated `TokenBondStats` values"""
  tokenBondStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: TokenBondStats_orderBy
    orderDirection: OrderDirection
    where: TokenBondStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenBondStats!]!

  """Collection of aggregated `TokenDistributionStats` values"""
  tokenDistributionStats_collection(
    skip: Int = 0
    first: Int = 100
    interval: Aggregation_interval!
    orderBy: TokenDistributionStats_orderBy
    orderDirection: OrderDirection
    where: TokenDistributionStats_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDistributionStats!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type System {
  id: Bytes!
  deployedInTransaction: Bytes!
  accessControl: AccessControl!
  account: Account
  compliance: Compliance
  identityRegistryStorage: IdentityRegistryStorage
  identityFactory: IdentityFactory
  identityRegistry: IdentityRegistry
  trustedIssuersRegistry: TrustedIssuersRegistry
  topicSchemeRegistry: TopicSchemeRegistry
  tokenFactories(skip: Int = 0, first: Int = 100, orderBy: TokenFactory_orderBy, orderDirection: OrderDirection, where: TokenFactory_filter): [TokenFactory!]!
}

type SystemAddon {
  id: Bytes!
  deployedInTransaction: Bytes!
  accessControl: AccessControl!
  name: String!
  typeId: Bytes!
  system: System
  account: Account!
}

input SystemAddon_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  typeId: Bytes
  typeId_not: Bytes
  typeId_gt: Bytes
  typeId_lt: Bytes
  typeId_gte: Bytes
  typeId_lte: Bytes
  typeId_in: [Bytes!]
  typeId_not_in: [Bytes!]
  typeId_contains: Bytes
  typeId_not_contains: Bytes
  system: String
  system_not: String
  system_gt: String
  system_lt: String
  system_gte: String
  system_lte: String
  system_in: [String!]
  system_not_in: [String!]
  system_contains: String
  system_contains_nocase: String
  system_not_contains: String
  system_not_contains_nocase: String
  system_starts_with: String
  system_starts_with_nocase: String
  system_not_starts_with: String
  system_not_starts_with_nocase: String
  system_ends_with: String
  system_ends_with_nocase: String
  system_not_ends_with: String
  system_not_ends_with_nocase: String
  system_: System_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SystemAddon_filter]
  or: [SystemAddon_filter]
}

enum SystemAddon_orderBy {
  id
  deployedInTransaction
  accessControl
  accessControl__id
  name
  typeId
  system
  system__id
  system__deployedInTransaction
  account
  account__id
  account__isContract
  account__country
}

type SystemStats {
  id: Int8!
  timestamp: Timestamp!
  system: System!
  totalValueInBaseCurrency: BigDecimal!
}

type SystemStatsData {
  id: Int8!
  timestamp: Timestamp!
  system: System!
  totalValueInBaseCurrency: BigDecimal!
}

input SystemStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  system: String
  system_not: String
  system_gt: String
  system_lt: String
  system_gte: String
  system_lte: String
  system_in: [String!]
  system_not_in: [String!]
  system_contains: String
  system_contains_nocase: String
  system_not_contains: String
  system_not_contains_nocase: String
  system_starts_with: String
  system_starts_with_nocase: String
  system_not_starts_with: String
  system_not_starts_with_nocase: String
  system_ends_with: String
  system_ends_with_nocase: String
  system_not_ends_with: String
  system_not_ends_with_nocase: String
  system_: System_filter
  totalValueInBaseCurrency: BigDecimal
  totalValueInBaseCurrency_not: BigDecimal
  totalValueInBaseCurrency_gt: BigDecimal
  totalValueInBaseCurrency_lt: BigDecimal
  totalValueInBaseCurrency_gte: BigDecimal
  totalValueInBaseCurrency_lte: BigDecimal
  totalValueInBaseCurrency_in: [BigDecimal!]
  totalValueInBaseCurrency_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SystemStatsData_filter]
  or: [SystemStatsData_filter]
}

enum SystemStatsData_orderBy {
  id
  timestamp
  system
  system__id
  system__deployedInTransaction
  totalValueInBaseCurrency
}

input SystemStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  system: String
  system_: System_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SystemStats_filter]
  or: [SystemStats_filter]
}

enum SystemStats_orderBy {
  id
  timestamp
  system
  system__id
  system__deployedInTransaction
  totalValueInBaseCurrency
}

input System_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  compliance: String
  compliance_not: String
  compliance_gt: String
  compliance_lt: String
  compliance_gte: String
  compliance_lte: String
  compliance_in: [String!]
  compliance_not_in: [String!]
  compliance_contains: String
  compliance_contains_nocase: String
  compliance_not_contains: String
  compliance_not_contains_nocase: String
  compliance_starts_with: String
  compliance_starts_with_nocase: String
  compliance_not_starts_with: String
  compliance_not_starts_with_nocase: String
  compliance_ends_with: String
  compliance_ends_with_nocase: String
  compliance_not_ends_with: String
  compliance_not_ends_with_nocase: String
  compliance_: Compliance_filter
  identityRegistryStorage: String
  identityRegistryStorage_not: String
  identityRegistryStorage_gt: String
  identityRegistryStorage_lt: String
  identityRegistryStorage_gte: String
  identityRegistryStorage_lte: String
  identityRegistryStorage_in: [String!]
  identityRegistryStorage_not_in: [String!]
  identityRegistryStorage_contains: String
  identityRegistryStorage_contains_nocase: String
  identityRegistryStorage_not_contains: String
  identityRegistryStorage_not_contains_nocase: String
  identityRegistryStorage_starts_with: String
  identityRegistryStorage_starts_with_nocase: String
  identityRegistryStorage_not_starts_with: String
  identityRegistryStorage_not_starts_with_nocase: String
  identityRegistryStorage_ends_with: String
  identityRegistryStorage_ends_with_nocase: String
  identityRegistryStorage_not_ends_with: String
  identityRegistryStorage_not_ends_with_nocase: String
  identityRegistryStorage_: IdentityRegistryStorage_filter
  identityFactory: String
  identityFactory_not: String
  identityFactory_gt: String
  identityFactory_lt: String
  identityFactory_gte: String
  identityFactory_lte: String
  identityFactory_in: [String!]
  identityFactory_not_in: [String!]
  identityFactory_contains: String
  identityFactory_contains_nocase: String
  identityFactory_not_contains: String
  identityFactory_not_contains_nocase: String
  identityFactory_starts_with: String
  identityFactory_starts_with_nocase: String
  identityFactory_not_starts_with: String
  identityFactory_not_starts_with_nocase: String
  identityFactory_ends_with: String
  identityFactory_ends_with_nocase: String
  identityFactory_not_ends_with: String
  identityFactory_not_ends_with_nocase: String
  identityFactory_: IdentityFactory_filter
  identityRegistry: String
  identityRegistry_not: String
  identityRegistry_gt: String
  identityRegistry_lt: String
  identityRegistry_gte: String
  identityRegistry_lte: String
  identityRegistry_in: [String!]
  identityRegistry_not_in: [String!]
  identityRegistry_contains: String
  identityRegistry_contains_nocase: String
  identityRegistry_not_contains: String
  identityRegistry_not_contains_nocase: String
  identityRegistry_starts_with: String
  identityRegistry_starts_with_nocase: String
  identityRegistry_not_starts_with: String
  identityRegistry_not_starts_with_nocase: String
  identityRegistry_ends_with: String
  identityRegistry_ends_with_nocase: String
  identityRegistry_not_ends_with: String
  identityRegistry_not_ends_with_nocase: String
  identityRegistry_: IdentityRegistry_filter
  trustedIssuersRegistry: String
  trustedIssuersRegistry_not: String
  trustedIssuersRegistry_gt: String
  trustedIssuersRegistry_lt: String
  trustedIssuersRegistry_gte: String
  trustedIssuersRegistry_lte: String
  trustedIssuersRegistry_in: [String!]
  trustedIssuersRegistry_not_in: [String!]
  trustedIssuersRegistry_contains: String
  trustedIssuersRegistry_contains_nocase: String
  trustedIssuersRegistry_not_contains: String
  trustedIssuersRegistry_not_contains_nocase: String
  trustedIssuersRegistry_starts_with: String
  trustedIssuersRegistry_starts_with_nocase: String
  trustedIssuersRegistry_not_starts_with: String
  trustedIssuersRegistry_not_starts_with_nocase: String
  trustedIssuersRegistry_ends_with: String
  trustedIssuersRegistry_ends_with_nocase: String
  trustedIssuersRegistry_not_ends_with: String
  trustedIssuersRegistry_not_ends_with_nocase: String
  trustedIssuersRegistry_: TrustedIssuersRegistry_filter
  topicSchemeRegistry: String
  topicSchemeRegistry_not: String
  topicSchemeRegistry_gt: String
  topicSchemeRegistry_lt: String
  topicSchemeRegistry_gte: String
  topicSchemeRegistry_lte: String
  topicSchemeRegistry_in: [String!]
  topicSchemeRegistry_not_in: [String!]
  topicSchemeRegistry_contains: String
  topicSchemeRegistry_contains_nocase: String
  topicSchemeRegistry_not_contains: String
  topicSchemeRegistry_not_contains_nocase: String
  topicSchemeRegistry_starts_with: String
  topicSchemeRegistry_starts_with_nocase: String
  topicSchemeRegistry_not_starts_with: String
  topicSchemeRegistry_not_starts_with_nocase: String
  topicSchemeRegistry_ends_with: String
  topicSchemeRegistry_ends_with_nocase: String
  topicSchemeRegistry_not_ends_with: String
  topicSchemeRegistry_not_ends_with_nocase: String
  topicSchemeRegistry_: TopicSchemeRegistry_filter
  tokenFactories_: TokenFactory_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [System_filter]
  or: [System_filter]
}

enum System_orderBy {
  id
  deployedInTransaction
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  compliance
  compliance__id
  identityRegistryStorage
  identityRegistryStorage__id
  identityRegistryStorage__deployedInTransaction
  identityFactory
  identityFactory__id
  identityFactory__deployedInTransaction
  identityRegistry
  identityRegistry__id
  identityRegistry__deployedInTransaction
  trustedIssuersRegistry
  trustedIssuersRegistry__id
  trustedIssuersRegistry__deployedInTransaction
  topicSchemeRegistry
  topicSchemeRegistry__id
  topicSchemeRegistry__deployedInTransaction
  tokenFactories
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type Token {
  id: Bytes!
  createdAt: BigInt!
  createdBy: Account!
  account: Account!
  accessControl: AccessControl
  identity: Identity
  balances(skip: Int = 0, first: Int = 100, orderBy: TokenBalance_orderBy, orderDirection: OrderDirection, where: TokenBalance_filter): [TokenBalance!]!
  type: String!
  tokenFactory: TokenFactory
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  pausable: TokenPausable
  collateral: TokenCollateral
  capped: TokenCapped
  yield_: TokenYield
  redeemable: TokenRedeemable
  bond: TokenBond
  fund: TokenFund
  basePriceClaim: IdentityClaim
  deployedInTransaction: Bytes!
}

type TokenBalance {
  id: Bytes!
  lastUpdatedAt: BigInt!
  token: Token!
  account: Account!
  value: BigDecimal!
  valueExact: BigInt!
  isFrozen: Boolean!
  frozen: BigDecimal!
  frozenExact: BigInt!
  available: BigDecimal!
  availableExact: BigInt!
}

input TokenBalance_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  lastUpdatedAt: BigInt
  lastUpdatedAt_not: BigInt
  lastUpdatedAt_gt: BigInt
  lastUpdatedAt_lt: BigInt
  lastUpdatedAt_gte: BigInt
  lastUpdatedAt_lte: BigInt
  lastUpdatedAt_in: [BigInt!]
  lastUpdatedAt_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  value: BigDecimal
  value_not: BigDecimal
  value_gt: BigDecimal
  value_lt: BigDecimal
  value_gte: BigDecimal
  value_lte: BigDecimal
  value_in: [BigDecimal!]
  value_not_in: [BigDecimal!]
  valueExact: BigInt
  valueExact_not: BigInt
  valueExact_gt: BigInt
  valueExact_lt: BigInt
  valueExact_gte: BigInt
  valueExact_lte: BigInt
  valueExact_in: [BigInt!]
  valueExact_not_in: [BigInt!]
  isFrozen: Boolean
  isFrozen_not: Boolean
  isFrozen_in: [Boolean!]
  isFrozen_not_in: [Boolean!]
  frozen: BigDecimal
  frozen_not: BigDecimal
  frozen_gt: BigDecimal
  frozen_lt: BigDecimal
  frozen_gte: BigDecimal
  frozen_lte: BigDecimal
  frozen_in: [BigDecimal!]
  frozen_not_in: [BigDecimal!]
  frozenExact: BigInt
  frozenExact_not: BigInt
  frozenExact_gt: BigInt
  frozenExact_lt: BigInt
  frozenExact_gte: BigInt
  frozenExact_lte: BigInt
  frozenExact_in: [BigInt!]
  frozenExact_not_in: [BigInt!]
  available: BigDecimal
  available_not: BigDecimal
  available_gt: BigDecimal
  available_lt: BigDecimal
  available_gte: BigDecimal
  available_lte: BigDecimal
  available_in: [BigDecimal!]
  available_not_in: [BigDecimal!]
  availableExact: BigInt
  availableExact_not: BigInt
  availableExact_gt: BigInt
  availableExact_lt: BigInt
  availableExact_gte: BigInt
  availableExact_lte: BigInt
  availableExact_in: [BigInt!]
  availableExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenBalance_filter]
  or: [TokenBalance_filter]
}

enum TokenBalance_orderBy {
  id
  lastUpdatedAt
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  account
  account__id
  account__isContract
  account__country
  value
  valueExact
  isFrozen
  frozen
  frozenExact
  available
  availableExact
}

type TokenBond {
  id: Bytes!
  faceValue: BigDecimal!
  faceValueExact: BigInt!
  maturityDate: BigInt!
  isMatured: Boolean!
  underlyingAsset: Token!
}

type TokenBondStats {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  underlyingAssetBalanceAvailable: BigDecimal!
  underlyingAssetBalanceAvailableExact: BigInt!
  underlyingAssetBalanceRequired: BigDecimal!
  underlyingAssetBalanceRequiredExact: BigInt!
  coveredPercentage: BigDecimal!
}

type TokenBondStatsData {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  underlyingAssetBalanceAvailable: BigDecimal!
  underlyingAssetBalanceAvailableExact: BigInt!
  underlyingAssetBalanceRequired: BigDecimal!
  underlyingAssetBalanceRequiredExact: BigInt!
}

input TokenBondStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  underlyingAssetBalanceAvailable: BigDecimal
  underlyingAssetBalanceAvailable_not: BigDecimal
  underlyingAssetBalanceAvailable_gt: BigDecimal
  underlyingAssetBalanceAvailable_lt: BigDecimal
  underlyingAssetBalanceAvailable_gte: BigDecimal
  underlyingAssetBalanceAvailable_lte: BigDecimal
  underlyingAssetBalanceAvailable_in: [BigDecimal!]
  underlyingAssetBalanceAvailable_not_in: [BigDecimal!]
  underlyingAssetBalanceAvailableExact: BigInt
  underlyingAssetBalanceAvailableExact_not: BigInt
  underlyingAssetBalanceAvailableExact_gt: BigInt
  underlyingAssetBalanceAvailableExact_lt: BigInt
  underlyingAssetBalanceAvailableExact_gte: BigInt
  underlyingAssetBalanceAvailableExact_lte: BigInt
  underlyingAssetBalanceAvailableExact_in: [BigInt!]
  underlyingAssetBalanceAvailableExact_not_in: [BigInt!]
  underlyingAssetBalanceRequired: BigDecimal
  underlyingAssetBalanceRequired_not: BigDecimal
  underlyingAssetBalanceRequired_gt: BigDecimal
  underlyingAssetBalanceRequired_lt: BigDecimal
  underlyingAssetBalanceRequired_gte: BigDecimal
  underlyingAssetBalanceRequired_lte: BigDecimal
  underlyingAssetBalanceRequired_in: [BigDecimal!]
  underlyingAssetBalanceRequired_not_in: [BigDecimal!]
  underlyingAssetBalanceRequiredExact: BigInt
  underlyingAssetBalanceRequiredExact_not: BigInt
  underlyingAssetBalanceRequiredExact_gt: BigInt
  underlyingAssetBalanceRequiredExact_lt: BigInt
  underlyingAssetBalanceRequiredExact_gte: BigInt
  underlyingAssetBalanceRequiredExact_lte: BigInt
  underlyingAssetBalanceRequiredExact_in: [BigInt!]
  underlyingAssetBalanceRequiredExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenBondStatsData_filter]
  or: [TokenBondStatsData_filter]
}

enum TokenBondStatsData_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  underlyingAssetBalanceAvailable
  underlyingAssetBalanceAvailableExact
  underlyingAssetBalanceRequired
  underlyingAssetBalanceRequiredExact
}

input TokenBondStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  token: String
  token_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenBondStats_filter]
  or: [TokenBondStats_filter]
}

enum TokenBondStats_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  underlyingAssetBalanceAvailable
  underlyingAssetBalanceAvailableExact
  underlyingAssetBalanceRequired
  underlyingAssetBalanceRequiredExact
  coveredPercentage
}

input TokenBond_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  faceValue: BigDecimal
  faceValue_not: BigDecimal
  faceValue_gt: BigDecimal
  faceValue_lt: BigDecimal
  faceValue_gte: BigDecimal
  faceValue_lte: BigDecimal
  faceValue_in: [BigDecimal!]
  faceValue_not_in: [BigDecimal!]
  faceValueExact: BigInt
  faceValueExact_not: BigInt
  faceValueExact_gt: BigInt
  faceValueExact_lt: BigInt
  faceValueExact_gte: BigInt
  faceValueExact_lte: BigInt
  faceValueExact_in: [BigInt!]
  faceValueExact_not_in: [BigInt!]
  maturityDate: BigInt
  maturityDate_not: BigInt
  maturityDate_gt: BigInt
  maturityDate_lt: BigInt
  maturityDate_gte: BigInt
  maturityDate_lte: BigInt
  maturityDate_in: [BigInt!]
  maturityDate_not_in: [BigInt!]
  isMatured: Boolean
  isMatured_not: Boolean
  isMatured_in: [Boolean!]
  isMatured_not_in: [Boolean!]
  underlyingAsset: String
  underlyingAsset_not: String
  underlyingAsset_gt: String
  underlyingAsset_lt: String
  underlyingAsset_gte: String
  underlyingAsset_lte: String
  underlyingAsset_in: [String!]
  underlyingAsset_not_in: [String!]
  underlyingAsset_contains: String
  underlyingAsset_contains_nocase: String
  underlyingAsset_not_contains: String
  underlyingAsset_not_contains_nocase: String
  underlyingAsset_starts_with: String
  underlyingAsset_starts_with_nocase: String
  underlyingAsset_not_starts_with: String
  underlyingAsset_not_starts_with_nocase: String
  underlyingAsset_ends_with: String
  underlyingAsset_ends_with_nocase: String
  underlyingAsset_not_ends_with: String
  underlyingAsset_not_ends_with_nocase: String
  underlyingAsset_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenBond_filter]
  or: [TokenBond_filter]
}

enum TokenBond_orderBy {
  id
  faceValue
  faceValueExact
  maturityDate
  isMatured
  underlyingAsset
  underlyingAsset__id
  underlyingAsset__createdAt
  underlyingAsset__type
  underlyingAsset__name
  underlyingAsset__symbol
  underlyingAsset__decimals
  underlyingAsset__totalSupply
  underlyingAsset__totalSupplyExact
  underlyingAsset__deployedInTransaction
}

type TokenCapped {
  id: Bytes!
  cap: BigDecimal!
  capExact: BigInt!
}

input TokenCapped_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  cap: BigDecimal
  cap_not: BigDecimal
  cap_gt: BigDecimal
  cap_lt: BigDecimal
  cap_gte: BigDecimal
  cap_lte: BigDecimal
  cap_in: [BigDecimal!]
  cap_not_in: [BigDecimal!]
  capExact: BigInt
  capExact_not: BigInt
  capExact_gt: BigInt
  capExact_lt: BigInt
  capExact_gte: BigInt
  capExact_lte: BigInt
  capExact_in: [BigInt!]
  capExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCapped_filter]
  or: [TokenCapped_filter]
}

enum TokenCapped_orderBy {
  id
  cap
  capExact
}

type TokenCollateral {
  id: Bytes!
  identityClaim: IdentityClaim
}

type TokenCollateralStats {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralAvailable: BigDecimal!
  collateralAvailableExact: BigInt!
  collateralUsed: BigDecimal!
  collateralUsedExact: BigInt!
}

type TokenCollateralStatsData {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralAvailable: BigDecimal!
  collateralAvailableExact: BigInt!
  collateralUsed: BigDecimal!
  collateralUsedExact: BigInt!
}

input TokenCollateralStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  collateral: BigDecimal
  collateral_not: BigDecimal
  collateral_gt: BigDecimal
  collateral_lt: BigDecimal
  collateral_gte: BigDecimal
  collateral_lte: BigDecimal
  collateral_in: [BigDecimal!]
  collateral_not_in: [BigDecimal!]
  collateralExact: BigInt
  collateralExact_not: BigInt
  collateralExact_gt: BigInt
  collateralExact_lt: BigInt
  collateralExact_gte: BigInt
  collateralExact_lte: BigInt
  collateralExact_in: [BigInt!]
  collateralExact_not_in: [BigInt!]
  collateralAvailable: BigDecimal
  collateralAvailable_not: BigDecimal
  collateralAvailable_gt: BigDecimal
  collateralAvailable_lt: BigDecimal
  collateralAvailable_gte: BigDecimal
  collateralAvailable_lte: BigDecimal
  collateralAvailable_in: [BigDecimal!]
  collateralAvailable_not_in: [BigDecimal!]
  collateralAvailableExact: BigInt
  collateralAvailableExact_not: BigInt
  collateralAvailableExact_gt: BigInt
  collateralAvailableExact_lt: BigInt
  collateralAvailableExact_gte: BigInt
  collateralAvailableExact_lte: BigInt
  collateralAvailableExact_in: [BigInt!]
  collateralAvailableExact_not_in: [BigInt!]
  collateralUsed: BigDecimal
  collateralUsed_not: BigDecimal
  collateralUsed_gt: BigDecimal
  collateralUsed_lt: BigDecimal
  collateralUsed_gte: BigDecimal
  collateralUsed_lte: BigDecimal
  collateralUsed_in: [BigDecimal!]
  collateralUsed_not_in: [BigDecimal!]
  collateralUsedExact: BigInt
  collateralUsedExact_not: BigInt
  collateralUsedExact_gt: BigInt
  collateralUsedExact_lt: BigInt
  collateralUsedExact_gte: BigInt
  collateralUsedExact_lte: BigInt
  collateralUsedExact_in: [BigInt!]
  collateralUsedExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCollateralStatsData_filter]
  or: [TokenCollateralStatsData_filter]
}

enum TokenCollateralStatsData_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  collateral
  collateralExact
  collateralAvailable
  collateralAvailableExact
  collateralUsed
  collateralUsedExact
}

input TokenCollateralStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  token: String
  token_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCollateralStats_filter]
  or: [TokenCollateralStats_filter]
}

enum TokenCollateralStats_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  collateral
  collateralExact
  collateralAvailable
  collateralAvailableExact
  collateralUsed
  collateralUsedExact
}

input TokenCollateral_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  identityClaim: String
  identityClaim_not: String
  identityClaim_gt: String
  identityClaim_lt: String
  identityClaim_gte: String
  identityClaim_lte: String
  identityClaim_in: [String!]
  identityClaim_not_in: [String!]
  identityClaim_contains: String
  identityClaim_contains_nocase: String
  identityClaim_not_contains: String
  identityClaim_not_contains_nocase: String
  identityClaim_starts_with: String
  identityClaim_starts_with_nocase: String
  identityClaim_not_starts_with: String
  identityClaim_not_starts_with_nocase: String
  identityClaim_ends_with: String
  identityClaim_ends_with_nocase: String
  identityClaim_not_ends_with: String
  identityClaim_not_ends_with_nocase: String
  identityClaim_: IdentityClaim_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCollateral_filter]
  or: [TokenCollateral_filter]
}

enum TokenCollateral_orderBy {
  id
  identityClaim
  identityClaim__id
  identityClaim__name
  identityClaim__uri
  identityClaim__revoked
  identityClaim__deployedInTransaction
}

type TokenDistributionStats {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  percentageOwnedByTop5Holders: BigDecimal!
  balancesCountSegment1: Int!
  totalValueSegment1: BigDecimal!
  totalValueSegment1Exact: BigInt!
  balancesCountSegment2: Int!
  totalValueSegment2: BigDecimal!
  totalValueSegment2Exact: BigInt!
  balancesCountSegment3: Int!
  totalValueSegment3: BigDecimal!
  totalValueSegment3Exact: BigInt!
  balancesCountSegment4: Int!
  totalValueSegment4: BigDecimal!
  totalValueSegment4Exact: BigInt!
  balancesCountSegment5: Int!
  totalValueSegment5: BigDecimal!
  totalValueSegment5Exact: BigInt!
}

type TokenDistributionStatsData {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  percentageOwnedByTop5Holders: BigDecimal!
  balancesCountSegment1: Int!
  totalValueSegment1: BigDecimal!
  totalValueSegment1Exact: BigInt!
  balancesCountSegment2: Int!
  totalValueSegment2: BigDecimal!
  totalValueSegment2Exact: BigInt!
  balancesCountSegment3: Int!
  totalValueSegment3: BigDecimal!
  totalValueSegment3Exact: BigInt!
  balancesCountSegment4: Int!
  totalValueSegment4: BigDecimal!
  totalValueSegment4Exact: BigInt!
  balancesCountSegment5: Int!
  totalValueSegment5: BigDecimal!
  totalValueSegment5Exact: BigInt!
}

input TokenDistributionStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  percentageOwnedByTop5Holders: BigDecimal
  percentageOwnedByTop5Holders_not: BigDecimal
  percentageOwnedByTop5Holders_gt: BigDecimal
  percentageOwnedByTop5Holders_lt: BigDecimal
  percentageOwnedByTop5Holders_gte: BigDecimal
  percentageOwnedByTop5Holders_lte: BigDecimal
  percentageOwnedByTop5Holders_in: [BigDecimal!]
  percentageOwnedByTop5Holders_not_in: [BigDecimal!]
  balancesCountSegment1: Int
  balancesCountSegment1_not: Int
  balancesCountSegment1_gt: Int
  balancesCountSegment1_lt: Int
  balancesCountSegment1_gte: Int
  balancesCountSegment1_lte: Int
  balancesCountSegment1_in: [Int!]
  balancesCountSegment1_not_in: [Int!]
  totalValueSegment1: BigDecimal
  totalValueSegment1_not: BigDecimal
  totalValueSegment1_gt: BigDecimal
  totalValueSegment1_lt: BigDecimal
  totalValueSegment1_gte: BigDecimal
  totalValueSegment1_lte: BigDecimal
  totalValueSegment1_in: [BigDecimal!]
  totalValueSegment1_not_in: [BigDecimal!]
  totalValueSegment1Exact: BigInt
  totalValueSegment1Exact_not: BigInt
  totalValueSegment1Exact_gt: BigInt
  totalValueSegment1Exact_lt: BigInt
  totalValueSegment1Exact_gte: BigInt
  totalValueSegment1Exact_lte: BigInt
  totalValueSegment1Exact_in: [BigInt!]
  totalValueSegment1Exact_not_in: [BigInt!]
  balancesCountSegment2: Int
  balancesCountSegment2_not: Int
  balancesCountSegment2_gt: Int
  balancesCountSegment2_lt: Int
  balancesCountSegment2_gte: Int
  balancesCountSegment2_lte: Int
  balancesCountSegment2_in: [Int!]
  balancesCountSegment2_not_in: [Int!]
  totalValueSegment2: BigDecimal
  totalValueSegment2_not: BigDecimal
  totalValueSegment2_gt: BigDecimal
  totalValueSegment2_lt: BigDecimal
  totalValueSegment2_gte: BigDecimal
  totalValueSegment2_lte: BigDecimal
  totalValueSegment2_in: [BigDecimal!]
  totalValueSegment2_not_in: [BigDecimal!]
  totalValueSegment2Exact: BigInt
  totalValueSegment2Exact_not: BigInt
  totalValueSegment2Exact_gt: BigInt
  totalValueSegment2Exact_lt: BigInt
  totalValueSegment2Exact_gte: BigInt
  totalValueSegment2Exact_lte: BigInt
  totalValueSegment2Exact_in: [BigInt!]
  totalValueSegment2Exact_not_in: [BigInt!]
  balancesCountSegment3: Int
  balancesCountSegment3_not: Int
  balancesCountSegment3_gt: Int
  balancesCountSegment3_lt: Int
  balancesCountSegment3_gte: Int
  balancesCountSegment3_lte: Int
  balancesCountSegment3_in: [Int!]
  balancesCountSegment3_not_in: [Int!]
  totalValueSegment3: BigDecimal
  totalValueSegment3_not: BigDecimal
  totalValueSegment3_gt: BigDecimal
  totalValueSegment3_lt: BigDecimal
  totalValueSegment3_gte: BigDecimal
  totalValueSegment3_lte: BigDecimal
  totalValueSegment3_in: [BigDecimal!]
  totalValueSegment3_not_in: [BigDecimal!]
  totalValueSegment3Exact: BigInt
  totalValueSegment3Exact_not: BigInt
  totalValueSegment3Exact_gt: BigInt
  totalValueSegment3Exact_lt: BigInt
  totalValueSegment3Exact_gte: BigInt
  totalValueSegment3Exact_lte: BigInt
  totalValueSegment3Exact_in: [BigInt!]
  totalValueSegment3Exact_not_in: [BigInt!]
  balancesCountSegment4: Int
  balancesCountSegment4_not: Int
  balancesCountSegment4_gt: Int
  balancesCountSegment4_lt: Int
  balancesCountSegment4_gte: Int
  balancesCountSegment4_lte: Int
  balancesCountSegment4_in: [Int!]
  balancesCountSegment4_not_in: [Int!]
  totalValueSegment4: BigDecimal
  totalValueSegment4_not: BigDecimal
  totalValueSegment4_gt: BigDecimal
  totalValueSegment4_lt: BigDecimal
  totalValueSegment4_gte: BigDecimal
  totalValueSegment4_lte: BigDecimal
  totalValueSegment4_in: [BigDecimal!]
  totalValueSegment4_not_in: [BigDecimal!]
  totalValueSegment4Exact: BigInt
  totalValueSegment4Exact_not: BigInt
  totalValueSegment4Exact_gt: BigInt
  totalValueSegment4Exact_lt: BigInt
  totalValueSegment4Exact_gte: BigInt
  totalValueSegment4Exact_lte: BigInt
  totalValueSegment4Exact_in: [BigInt!]
  totalValueSegment4Exact_not_in: [BigInt!]
  balancesCountSegment5: Int
  balancesCountSegment5_not: Int
  balancesCountSegment5_gt: Int
  balancesCountSegment5_lt: Int
  balancesCountSegment5_gte: Int
  balancesCountSegment5_lte: Int
  balancesCountSegment5_in: [Int!]
  balancesCountSegment5_not_in: [Int!]
  totalValueSegment5: BigDecimal
  totalValueSegment5_not: BigDecimal
  totalValueSegment5_gt: BigDecimal
  totalValueSegment5_lt: BigDecimal
  totalValueSegment5_gte: BigDecimal
  totalValueSegment5_lte: BigDecimal
  totalValueSegment5_in: [BigDecimal!]
  totalValueSegment5_not_in: [BigDecimal!]
  totalValueSegment5Exact: BigInt
  totalValueSegment5Exact_not: BigInt
  totalValueSegment5Exact_gt: BigInt
  totalValueSegment5Exact_lt: BigInt
  totalValueSegment5Exact_gte: BigInt
  totalValueSegment5Exact_lte: BigInt
  totalValueSegment5Exact_in: [BigInt!]
  totalValueSegment5Exact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenDistributionStatsData_filter]
  or: [TokenDistributionStatsData_filter]
}

enum TokenDistributionStatsData_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  percentageOwnedByTop5Holders
  balancesCountSegment1
  totalValueSegment1
  totalValueSegment1Exact
  balancesCountSegment2
  totalValueSegment2
  totalValueSegment2Exact
  balancesCountSegment3
  totalValueSegment3
  totalValueSegment3Exact
  balancesCountSegment4
  totalValueSegment4
  totalValueSegment4Exact
  balancesCountSegment5
  totalValueSegment5
  totalValueSegment5Exact
}

input TokenDistributionStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  token: String
  token_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenDistributionStats_filter]
  or: [TokenDistributionStats_filter]
}

enum TokenDistributionStats_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  percentageOwnedByTop5Holders
  balancesCountSegment1
  totalValueSegment1
  totalValueSegment1Exact
  balancesCountSegment2
  totalValueSegment2
  totalValueSegment2Exact
  balancesCountSegment3
  totalValueSegment3
  totalValueSegment3Exact
  balancesCountSegment4
  totalValueSegment4
  totalValueSegment4Exact
  balancesCountSegment5
  totalValueSegment5
  totalValueSegment5Exact
}

type TokenFactory {
  id: Bytes!
  accessControl: AccessControl!
  name: String!
  typeId: Bytes!
  system: System
  account: Account!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
}

input TokenFactory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  typeId: Bytes
  typeId_not: Bytes
  typeId_gt: Bytes
  typeId_lt: Bytes
  typeId_gte: Bytes
  typeId_lte: Bytes
  typeId_in: [Bytes!]
  typeId_not_in: [Bytes!]
  typeId_contains: Bytes
  typeId_not_contains: Bytes
  system: String
  system_not: String
  system_gt: String
  system_lt: String
  system_gte: String
  system_lte: String
  system_in: [String!]
  system_not_in: [String!]
  system_contains: String
  system_contains_nocase: String
  system_not_contains: String
  system_not_contains_nocase: String
  system_starts_with: String
  system_starts_with_nocase: String
  system_not_starts_with: String
  system_not_starts_with_nocase: String
  system_ends_with: String
  system_ends_with_nocase: String
  system_not_ends_with: String
  system_not_ends_with_nocase: String
  system_: System_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  tokens_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFactory_filter]
  or: [TokenFactory_filter]
}

enum TokenFactory_orderBy {
  id
  accessControl
  accessControl__id
  name
  typeId
  system
  system__id
  system__deployedInTransaction
  account
  account__id
  account__isContract
  account__country
  tokens
}

type TokenFixedYieldSchedule {
  id: Bytes!
  createdAt: BigInt!
  createdBy: Account!
  account: Account!
  token: Token!
  startDate: BigInt!
  endDate: BigInt!
  rate: BigInt!
  interval: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalUnclaimedYield: BigDecimal!
  totalUnclaimedYieldExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
  underlyingAsset: Token!
  currentPeriod: TokenFixedYieldSchedulePeriod
  nextPeriod: TokenFixedYieldSchedulePeriod
  periods(skip: Int = 0, first: Int = 100, orderBy: TokenFixedYieldSchedulePeriod_orderBy, orderDirection: OrderDirection, where: TokenFixedYieldSchedulePeriod_filter): [TokenFixedYieldSchedulePeriod!]!
  deployedInTransaction: Bytes!
}

type TokenFixedYieldSchedulePeriod {
  id: Bytes!
  schedule: TokenFixedYieldSchedule!
  startDate: BigInt!
  endDate: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalUnclaimedYield: BigDecimal!
  totalUnclaimedYieldExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
  deployedInTransaction: Bytes!
}

input TokenFixedYieldSchedulePeriod_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  schedule: String
  schedule_not: String
  schedule_gt: String
  schedule_lt: String
  schedule_gte: String
  schedule_lte: String
  schedule_in: [String!]
  schedule_not_in: [String!]
  schedule_contains: String
  schedule_contains_nocase: String
  schedule_not_contains: String
  schedule_not_contains_nocase: String
  schedule_starts_with: String
  schedule_starts_with_nocase: String
  schedule_not_starts_with: String
  schedule_not_starts_with_nocase: String
  schedule_ends_with: String
  schedule_ends_with_nocase: String
  schedule_not_ends_with: String
  schedule_not_ends_with_nocase: String
  schedule_: TokenFixedYieldSchedule_filter
  startDate: BigInt
  startDate_not: BigInt
  startDate_gt: BigInt
  startDate_lt: BigInt
  startDate_gte: BigInt
  startDate_lte: BigInt
  startDate_in: [BigInt!]
  startDate_not_in: [BigInt!]
  endDate: BigInt
  endDate_not: BigInt
  endDate_gt: BigInt
  endDate_lt: BigInt
  endDate_gte: BigInt
  endDate_lte: BigInt
  endDate_in: [BigInt!]
  endDate_not_in: [BigInt!]
  totalClaimed: BigDecimal
  totalClaimed_not: BigDecimal
  totalClaimed_gt: BigDecimal
  totalClaimed_lt: BigDecimal
  totalClaimed_gte: BigDecimal
  totalClaimed_lte: BigDecimal
  totalClaimed_in: [BigDecimal!]
  totalClaimed_not_in: [BigDecimal!]
  totalClaimedExact: BigInt
  totalClaimedExact_not: BigInt
  totalClaimedExact_gt: BigInt
  totalClaimedExact_lt: BigInt
  totalClaimedExact_gte: BigInt
  totalClaimedExact_lte: BigInt
  totalClaimedExact_in: [BigInt!]
  totalClaimedExact_not_in: [BigInt!]
  totalUnclaimedYield: BigDecimal
  totalUnclaimedYield_not: BigDecimal
  totalUnclaimedYield_gt: BigDecimal
  totalUnclaimedYield_lt: BigDecimal
  totalUnclaimedYield_gte: BigDecimal
  totalUnclaimedYield_lte: BigDecimal
  totalUnclaimedYield_in: [BigDecimal!]
  totalUnclaimedYield_not_in: [BigDecimal!]
  totalUnclaimedYieldExact: BigInt
  totalUnclaimedYieldExact_not: BigInt
  totalUnclaimedYieldExact_gt: BigInt
  totalUnclaimedYieldExact_lt: BigInt
  totalUnclaimedYieldExact_gte: BigInt
  totalUnclaimedYieldExact_lte: BigInt
  totalUnclaimedYieldExact_in: [BigInt!]
  totalUnclaimedYieldExact_not_in: [BigInt!]
  totalYield: BigDecimal
  totalYield_not: BigDecimal
  totalYield_gt: BigDecimal
  totalYield_lt: BigDecimal
  totalYield_gte: BigDecimal
  totalYield_lte: BigDecimal
  totalYield_in: [BigDecimal!]
  totalYield_not_in: [BigDecimal!]
  totalYieldExact: BigInt
  totalYieldExact_not: BigInt
  totalYieldExact_gt: BigInt
  totalYieldExact_lt: BigInt
  totalYieldExact_gte: BigInt
  totalYieldExact_lte: BigInt
  totalYieldExact_in: [BigInt!]
  totalYieldExact_not_in: [BigInt!]
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFixedYieldSchedulePeriod_filter]
  or: [TokenFixedYieldSchedulePeriod_filter]
}

enum TokenFixedYieldSchedulePeriod_orderBy {
  id
  schedule
  schedule__id
  schedule__createdAt
  schedule__startDate
  schedule__endDate
  schedule__rate
  schedule__interval
  schedule__totalClaimed
  schedule__totalClaimedExact
  schedule__totalUnclaimedYield
  schedule__totalUnclaimedYieldExact
  schedule__totalYield
  schedule__totalYieldExact
  schedule__deployedInTransaction
  startDate
  endDate
  totalClaimed
  totalClaimedExact
  totalUnclaimedYield
  totalUnclaimedYieldExact
  totalYield
  totalYieldExact
  deployedInTransaction
}

input TokenFixedYieldSchedule_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdBy: String
  createdBy_not: String
  createdBy_gt: String
  createdBy_lt: String
  createdBy_gte: String
  createdBy_lte: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_contains: String
  createdBy_contains_nocase: String
  createdBy_not_contains: String
  createdBy_not_contains_nocase: String
  createdBy_starts_with: String
  createdBy_starts_with_nocase: String
  createdBy_not_starts_with: String
  createdBy_not_starts_with_nocase: String
  createdBy_ends_with: String
  createdBy_ends_with_nocase: String
  createdBy_not_ends_with: String
  createdBy_not_ends_with_nocase: String
  createdBy_: Account_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  startDate: BigInt
  startDate_not: BigInt
  startDate_gt: BigInt
  startDate_lt: BigInt
  startDate_gte: BigInt
  startDate_lte: BigInt
  startDate_in: [BigInt!]
  startDate_not_in: [BigInt!]
  endDate: BigInt
  endDate_not: BigInt
  endDate_gt: BigInt
  endDate_lt: BigInt
  endDate_gte: BigInt
  endDate_lte: BigInt
  endDate_in: [BigInt!]
  endDate_not_in: [BigInt!]
  rate: BigInt
  rate_not: BigInt
  rate_gt: BigInt
  rate_lt: BigInt
  rate_gte: BigInt
  rate_lte: BigInt
  rate_in: [BigInt!]
  rate_not_in: [BigInt!]
  interval: BigInt
  interval_not: BigInt
  interval_gt: BigInt
  interval_lt: BigInt
  interval_gte: BigInt
  interval_lte: BigInt
  interval_in: [BigInt!]
  interval_not_in: [BigInt!]
  totalClaimed: BigDecimal
  totalClaimed_not: BigDecimal
  totalClaimed_gt: BigDecimal
  totalClaimed_lt: BigDecimal
  totalClaimed_gte: BigDecimal
  totalClaimed_lte: BigDecimal
  totalClaimed_in: [BigDecimal!]
  totalClaimed_not_in: [BigDecimal!]
  totalClaimedExact: BigInt
  totalClaimedExact_not: BigInt
  totalClaimedExact_gt: BigInt
  totalClaimedExact_lt: BigInt
  totalClaimedExact_gte: BigInt
  totalClaimedExact_lte: BigInt
  totalClaimedExact_in: [BigInt!]
  totalClaimedExact_not_in: [BigInt!]
  totalUnclaimedYield: BigDecimal
  totalUnclaimedYield_not: BigDecimal
  totalUnclaimedYield_gt: BigDecimal
  totalUnclaimedYield_lt: BigDecimal
  totalUnclaimedYield_gte: BigDecimal
  totalUnclaimedYield_lte: BigDecimal
  totalUnclaimedYield_in: [BigDecimal!]
  totalUnclaimedYield_not_in: [BigDecimal!]
  totalUnclaimedYieldExact: BigInt
  totalUnclaimedYieldExact_not: BigInt
  totalUnclaimedYieldExact_gt: BigInt
  totalUnclaimedYieldExact_lt: BigInt
  totalUnclaimedYieldExact_gte: BigInt
  totalUnclaimedYieldExact_lte: BigInt
  totalUnclaimedYieldExact_in: [BigInt!]
  totalUnclaimedYieldExact_not_in: [BigInt!]
  totalYield: BigDecimal
  totalYield_not: BigDecimal
  totalYield_gt: BigDecimal
  totalYield_lt: BigDecimal
  totalYield_gte: BigDecimal
  totalYield_lte: BigDecimal
  totalYield_in: [BigDecimal!]
  totalYield_not_in: [BigDecimal!]
  totalYieldExact: BigInt
  totalYieldExact_not: BigInt
  totalYieldExact_gt: BigInt
  totalYieldExact_lt: BigInt
  totalYieldExact_gte: BigInt
  totalYieldExact_lte: BigInt
  totalYieldExact_in: [BigInt!]
  totalYieldExact_not_in: [BigInt!]
  underlyingAsset: String
  underlyingAsset_not: String
  underlyingAsset_gt: String
  underlyingAsset_lt: String
  underlyingAsset_gte: String
  underlyingAsset_lte: String
  underlyingAsset_in: [String!]
  underlyingAsset_not_in: [String!]
  underlyingAsset_contains: String
  underlyingAsset_contains_nocase: String
  underlyingAsset_not_contains: String
  underlyingAsset_not_contains_nocase: String
  underlyingAsset_starts_with: String
  underlyingAsset_starts_with_nocase: String
  underlyingAsset_not_starts_with: String
  underlyingAsset_not_starts_with_nocase: String
  underlyingAsset_ends_with: String
  underlyingAsset_ends_with_nocase: String
  underlyingAsset_not_ends_with: String
  underlyingAsset_not_ends_with_nocase: String
  underlyingAsset_: Token_filter
  currentPeriod: String
  currentPeriod_not: String
  currentPeriod_gt: String
  currentPeriod_lt: String
  currentPeriod_gte: String
  currentPeriod_lte: String
  currentPeriod_in: [String!]
  currentPeriod_not_in: [String!]
  currentPeriod_contains: String
  currentPeriod_contains_nocase: String
  currentPeriod_not_contains: String
  currentPeriod_not_contains_nocase: String
  currentPeriod_starts_with: String
  currentPeriod_starts_with_nocase: String
  currentPeriod_not_starts_with: String
  currentPeriod_not_starts_with_nocase: String
  currentPeriod_ends_with: String
  currentPeriod_ends_with_nocase: String
  currentPeriod_not_ends_with: String
  currentPeriod_not_ends_with_nocase: String
  currentPeriod_: TokenFixedYieldSchedulePeriod_filter
  nextPeriod: String
  nextPeriod_not: String
  nextPeriod_gt: String
  nextPeriod_lt: String
  nextPeriod_gte: String
  nextPeriod_lte: String
  nextPeriod_in: [String!]
  nextPeriod_not_in: [String!]
  nextPeriod_contains: String
  nextPeriod_contains_nocase: String
  nextPeriod_not_contains: String
  nextPeriod_not_contains_nocase: String
  nextPeriod_starts_with: String
  nextPeriod_starts_with_nocase: String
  nextPeriod_not_starts_with: String
  nextPeriod_not_starts_with_nocase: String
  nextPeriod_ends_with: String
  nextPeriod_ends_with_nocase: String
  nextPeriod_not_ends_with: String
  nextPeriod_not_ends_with_nocase: String
  nextPeriod_: TokenFixedYieldSchedulePeriod_filter
  periods_: TokenFixedYieldSchedulePeriod_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFixedYieldSchedule_filter]
  or: [TokenFixedYieldSchedule_filter]
}

enum TokenFixedYieldSchedule_orderBy {
  id
  createdAt
  createdBy
  createdBy__id
  createdBy__isContract
  createdBy__country
  account
  account__id
  account__isContract
  account__country
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  startDate
  endDate
  rate
  interval
  totalClaimed
  totalClaimedExact
  totalUnclaimedYield
  totalUnclaimedYieldExact
  totalYield
  totalYieldExact
  underlyingAsset
  underlyingAsset__id
  underlyingAsset__createdAt
  underlyingAsset__type
  underlyingAsset__name
  underlyingAsset__symbol
  underlyingAsset__decimals
  underlyingAsset__totalSupply
  underlyingAsset__totalSupplyExact
  underlyingAsset__deployedInTransaction
  currentPeriod
  currentPeriod__id
  currentPeriod__startDate
  currentPeriod__endDate
  currentPeriod__totalClaimed
  currentPeriod__totalClaimedExact
  currentPeriod__totalUnclaimedYield
  currentPeriod__totalUnclaimedYieldExact
  currentPeriod__totalYield
  currentPeriod__totalYieldExact
  currentPeriod__deployedInTransaction
  nextPeriod
  nextPeriod__id
  nextPeriod__startDate
  nextPeriod__endDate
  nextPeriod__totalClaimed
  nextPeriod__totalClaimedExact
  nextPeriod__totalUnclaimedYield
  nextPeriod__totalUnclaimedYieldExact
  nextPeriod__totalYield
  nextPeriod__totalYieldExact
  nextPeriod__deployedInTransaction
  periods
  deployedInTransaction
}

type TokenFund {
  id: Bytes!
  managementFeeBps: Int!
}

input TokenFund_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  managementFeeBps: Int
  managementFeeBps_not: Int
  managementFeeBps_gt: Int
  managementFeeBps_lt: Int
  managementFeeBps_gte: Int
  managementFeeBps_lte: Int
  managementFeeBps_in: [Int!]
  managementFeeBps_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenFund_filter]
  or: [TokenFund_filter]
}

enum TokenFund_orderBy {
  id
  managementFeeBps
}

type TokenPausable {
  id: Bytes!
  paused: Boolean!
}

input TokenPausable_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenPausable_filter]
  or: [TokenPausable_filter]
}

enum TokenPausable_orderBy {
  id
  paused
}

type TokenRedeemable {
  id: Bytes!
  redeemedAmount: BigDecimal!
  redeemedAmountExact: BigInt!
}

input TokenRedeemable_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  redeemedAmount: BigDecimal
  redeemedAmount_not: BigDecimal
  redeemedAmount_gt: BigDecimal
  redeemedAmount_lt: BigDecimal
  redeemedAmount_gte: BigDecimal
  redeemedAmount_lte: BigDecimal
  redeemedAmount_in: [BigDecimal!]
  redeemedAmount_not_in: [BigDecimal!]
  redeemedAmountExact: BigInt
  redeemedAmountExact_not: BigInt
  redeemedAmountExact_gt: BigInt
  redeemedAmountExact_lt: BigInt
  redeemedAmountExact_gte: BigInt
  redeemedAmountExact_lte: BigInt
  redeemedAmountExact_in: [BigInt!]
  redeemedAmountExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenRedeemable_filter]
  or: [TokenRedeemable_filter]
}

enum TokenRedeemable_orderBy {
  id
  redeemedAmount
  redeemedAmountExact
}

type TokenStats {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  type: String!
  balancesCount: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransfered: BigDecimal!
  totalTransferedExact: BigInt!
}

type TokenStatsData {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  type: String!
  balancesCount: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  minted: BigDecimal!
  mintedExact: BigInt!
  burned: BigDecimal!
  burnedExact: BigInt!
  transfered: BigDecimal!
  transferedExact: BigInt!
}

input TokenStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  balancesCount: Int
  balancesCount_not: Int
  balancesCount_gt: Int
  balancesCount_lt: Int
  balancesCount_gte: Int
  balancesCount_lte: Int
  balancesCount_in: [Int!]
  balancesCount_not_in: [Int!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  totalSupplyExact: BigInt
  totalSupplyExact_not: BigInt
  totalSupplyExact_gt: BigInt
  totalSupplyExact_lt: BigInt
  totalSupplyExact_gte: BigInt
  totalSupplyExact_lte: BigInt
  totalSupplyExact_in: [BigInt!]
  totalSupplyExact_not_in: [BigInt!]
  minted: BigDecimal
  minted_not: BigDecimal
  minted_gt: BigDecimal
  minted_lt: BigDecimal
  minted_gte: BigDecimal
  minted_lte: BigDecimal
  minted_in: [BigDecimal!]
  minted_not_in: [BigDecimal!]
  mintedExact: BigInt
  mintedExact_not: BigInt
  mintedExact_gt: BigInt
  mintedExact_lt: BigInt
  mintedExact_gte: BigInt
  mintedExact_lte: BigInt
  mintedExact_in: [BigInt!]
  mintedExact_not_in: [BigInt!]
  burned: BigDecimal
  burned_not: BigDecimal
  burned_gt: BigDecimal
  burned_lt: BigDecimal
  burned_gte: BigDecimal
  burned_lte: BigDecimal
  burned_in: [BigDecimal!]
  burned_not_in: [BigDecimal!]
  burnedExact: BigInt
  burnedExact_not: BigInt
  burnedExact_gt: BigInt
  burnedExact_lt: BigInt
  burnedExact_gte: BigInt
  burnedExact_lte: BigInt
  burnedExact_in: [BigInt!]
  burnedExact_not_in: [BigInt!]
  transfered: BigDecimal
  transfered_not: BigDecimal
  transfered_gt: BigDecimal
  transfered_lt: BigDecimal
  transfered_gte: BigDecimal
  transfered_lte: BigDecimal
  transfered_in: [BigDecimal!]
  transfered_not_in: [BigDecimal!]
  transferedExact: BigInt
  transferedExact_not: BigInt
  transferedExact_gt: BigInt
  transferedExact_lt: BigInt
  transferedExact_gte: BigInt
  transferedExact_lte: BigInt
  transferedExact_in: [BigInt!]
  transferedExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenStatsData_filter]
  or: [TokenStatsData_filter]
}

enum TokenStatsData_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  type
  balancesCount
  totalSupply
  totalSupplyExact
  minted
  mintedExact
  burned
  burnedExact
  transfered
  transferedExact
}

input TokenStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  token: String
  token_: Token_filter
  type: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenStats_filter]
  or: [TokenStats_filter]
}

enum TokenStats_orderBy {
  id
  timestamp
  token
  token__id
  token__createdAt
  token__type
  token__name
  token__symbol
  token__decimals
  token__totalSupply
  token__totalSupplyExact
  token__deployedInTransaction
  type
  balancesCount
  totalSupply
  totalSupplyExact
  totalMinted
  totalMintedExact
  totalBurned
  totalBurnedExact
  totalTransfered
  totalTransferedExact
}

type TokenTypeStats {
  id: Int8!
  timestamp: Timestamp!
  type: String!
  count: Int!
  percentageOfTotalSupply: BigDecimal!
}

type TokenTypeStatsData {
  id: Int8!
  timestamp: Timestamp!
  type: String!
  count: Int!
  percentageOfTotalSupply: BigDecimal!
}

input TokenTypeStatsData_filter {
  id: Int8
  id_not: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  id_not_in: [Int8!]
  timestamp: Timestamp
  timestamp_not: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  timestamp_not_in: [Timestamp!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  count: Int
  count_not: Int
  count_gt: Int
  count_lt: Int
  count_gte: Int
  count_lte: Int
  count_in: [Int!]
  count_not_in: [Int!]
  percentageOfTotalSupply: BigDecimal
  percentageOfTotalSupply_not: BigDecimal
  percentageOfTotalSupply_gt: BigDecimal
  percentageOfTotalSupply_lt: BigDecimal
  percentageOfTotalSupply_gte: BigDecimal
  percentageOfTotalSupply_lte: BigDecimal
  percentageOfTotalSupply_in: [BigDecimal!]
  percentageOfTotalSupply_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenTypeStatsData_filter]
  or: [TokenTypeStatsData_filter]
}

enum TokenTypeStatsData_orderBy {
  id
  timestamp
  type
  count
  percentageOfTotalSupply
}

input TokenTypeStats_filter {
  id: Int8
  id_gt: Int8
  id_lt: Int8
  id_gte: Int8
  id_lte: Int8
  id_in: [Int8!]
  timestamp: Timestamp
  timestamp_gt: Timestamp
  timestamp_lt: Timestamp
  timestamp_gte: Timestamp
  timestamp_lte: Timestamp
  timestamp_in: [Timestamp!]
  type: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenTypeStats_filter]
  or: [TokenTypeStats_filter]
}

enum TokenTypeStats_orderBy {
  id
  timestamp
  type
  count
  percentageOfTotalSupply
}

type TokenYield {
  id: Bytes!
  schedule: TokenFixedYieldSchedule!
}

input TokenYield_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  schedule: String
  schedule_not: String
  schedule_gt: String
  schedule_lt: String
  schedule_gte: String
  schedule_lte: String
  schedule_in: [String!]
  schedule_not_in: [String!]
  schedule_contains: String
  schedule_contains_nocase: String
  schedule_not_contains: String
  schedule_not_contains_nocase: String
  schedule_starts_with: String
  schedule_starts_with_nocase: String
  schedule_not_starts_with: String
  schedule_not_starts_with_nocase: String
  schedule_ends_with: String
  schedule_ends_with_nocase: String
  schedule_not_ends_with: String
  schedule_not_ends_with_nocase: String
  schedule_: TokenFixedYieldSchedule_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenYield_filter]
  or: [TokenYield_filter]
}

enum TokenYield_orderBy {
  id
  schedule
  schedule__id
  schedule__createdAt
  schedule__startDate
  schedule__endDate
  schedule__rate
  schedule__interval
  schedule__totalClaimed
  schedule__totalClaimedExact
  schedule__totalUnclaimedYield
  schedule__totalUnclaimedYieldExact
  schedule__totalYield
  schedule__totalYieldExact
  schedule__deployedInTransaction
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdBy: String
  createdBy_not: String
  createdBy_gt: String
  createdBy_lt: String
  createdBy_gte: String
  createdBy_lte: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_contains: String
  createdBy_contains_nocase: String
  createdBy_not_contains: String
  createdBy_not_contains_nocase: String
  createdBy_starts_with: String
  createdBy_starts_with_nocase: String
  createdBy_not_starts_with: String
  createdBy_not_starts_with_nocase: String
  createdBy_ends_with: String
  createdBy_ends_with_nocase: String
  createdBy_not_ends_with: String
  createdBy_not_ends_with_nocase: String
  createdBy_: Account_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  identity: String
  identity_not: String
  identity_gt: String
  identity_lt: String
  identity_gte: String
  identity_lte: String
  identity_in: [String!]
  identity_not_in: [String!]
  identity_contains: String
  identity_contains_nocase: String
  identity_not_contains: String
  identity_not_contains_nocase: String
  identity_starts_with: String
  identity_starts_with_nocase: String
  identity_not_starts_with: String
  identity_not_starts_with_nocase: String
  identity_ends_with: String
  identity_ends_with_nocase: String
  identity_not_ends_with: String
  identity_not_ends_with_nocase: String
  identity_: Identity_filter
  balances_: TokenBalance_filter
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  tokenFactory: String
  tokenFactory_not: String
  tokenFactory_gt: String
  tokenFactory_lt: String
  tokenFactory_gte: String
  tokenFactory_lte: String
  tokenFactory_in: [String!]
  tokenFactory_not_in: [String!]
  tokenFactory_contains: String
  tokenFactory_contains_nocase: String
  tokenFactory_not_contains: String
  tokenFactory_not_contains_nocase: String
  tokenFactory_starts_with: String
  tokenFactory_starts_with_nocase: String
  tokenFactory_not_starts_with: String
  tokenFactory_not_starts_with_nocase: String
  tokenFactory_ends_with: String
  tokenFactory_ends_with_nocase: String
  tokenFactory_not_ends_with: String
  tokenFactory_not_ends_with_nocase: String
  tokenFactory_: TokenFactory_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  totalSupplyExact: BigInt
  totalSupplyExact_not: BigInt
  totalSupplyExact_gt: BigInt
  totalSupplyExact_lt: BigInt
  totalSupplyExact_gte: BigInt
  totalSupplyExact_lte: BigInt
  totalSupplyExact_in: [BigInt!]
  totalSupplyExact_not_in: [BigInt!]
  pausable: String
  pausable_not: String
  pausable_gt: String
  pausable_lt: String
  pausable_gte: String
  pausable_lte: String
  pausable_in: [String!]
  pausable_not_in: [String!]
  pausable_contains: String
  pausable_contains_nocase: String
  pausable_not_contains: String
  pausable_not_contains_nocase: String
  pausable_starts_with: String
  pausable_starts_with_nocase: String
  pausable_not_starts_with: String
  pausable_not_starts_with_nocase: String
  pausable_ends_with: String
  pausable_ends_with_nocase: String
  pausable_not_ends_with: String
  pausable_not_ends_with_nocase: String
  pausable_: TokenPausable_filter
  collateral: String
  collateral_not: String
  collateral_gt: String
  collateral_lt: String
  collateral_gte: String
  collateral_lte: String
  collateral_in: [String!]
  collateral_not_in: [String!]
  collateral_contains: String
  collateral_contains_nocase: String
  collateral_not_contains: String
  collateral_not_contains_nocase: String
  collateral_starts_with: String
  collateral_starts_with_nocase: String
  collateral_not_starts_with: String
  collateral_not_starts_with_nocase: String
  collateral_ends_with: String
  collateral_ends_with_nocase: String
  collateral_not_ends_with: String
  collateral_not_ends_with_nocase: String
  collateral_: TokenCollateral_filter
  capped: String
  capped_not: String
  capped_gt: String
  capped_lt: String
  capped_gte: String
  capped_lte: String
  capped_in: [String!]
  capped_not_in: [String!]
  capped_contains: String
  capped_contains_nocase: String
  capped_not_contains: String
  capped_not_contains_nocase: String
  capped_starts_with: String
  capped_starts_with_nocase: String
  capped_not_starts_with: String
  capped_not_starts_with_nocase: String
  capped_ends_with: String
  capped_ends_with_nocase: String
  capped_not_ends_with: String
  capped_not_ends_with_nocase: String
  capped_: TokenCapped_filter
  yield_: String
  yield__not: String
  yield__gt: String
  yield__lt: String
  yield__gte: String
  yield__lte: String
  yield__in: [String!]
  yield__not_in: [String!]
  yield__contains: String
  yield__contains_nocase: String
  yield__not_contains: String
  yield__not_contains_nocase: String
  yield__starts_with: String
  yield__starts_with_nocase: String
  yield__not_starts_with: String
  yield__not_starts_with_nocase: String
  yield__ends_with: String
  yield__ends_with_nocase: String
  yield__not_ends_with: String
  yield__not_ends_with_nocase: String
  yield__: TokenYield_filter
  redeemable: String
  redeemable_not: String
  redeemable_gt: String
  redeemable_lt: String
  redeemable_gte: String
  redeemable_lte: String
  redeemable_in: [String!]
  redeemable_not_in: [String!]
  redeemable_contains: String
  redeemable_contains_nocase: String
  redeemable_not_contains: String
  redeemable_not_contains_nocase: String
  redeemable_starts_with: String
  redeemable_starts_with_nocase: String
  redeemable_not_starts_with: String
  redeemable_not_starts_with_nocase: String
  redeemable_ends_with: String
  redeemable_ends_with_nocase: String
  redeemable_not_ends_with: String
  redeemable_not_ends_with_nocase: String
  redeemable_: TokenRedeemable_filter
  bond: String
  bond_not: String
  bond_gt: String
  bond_lt: String
  bond_gte: String
  bond_lte: String
  bond_in: [String!]
  bond_not_in: [String!]
  bond_contains: String
  bond_contains_nocase: String
  bond_not_contains: String
  bond_not_contains_nocase: String
  bond_starts_with: String
  bond_starts_with_nocase: String
  bond_not_starts_with: String
  bond_not_starts_with_nocase: String
  bond_ends_with: String
  bond_ends_with_nocase: String
  bond_not_ends_with: String
  bond_not_ends_with_nocase: String
  bond_: TokenBond_filter
  fund: String
  fund_not: String
  fund_gt: String
  fund_lt: String
  fund_gte: String
  fund_lte: String
  fund_in: [String!]
  fund_not_in: [String!]
  fund_contains: String
  fund_contains_nocase: String
  fund_not_contains: String
  fund_not_contains_nocase: String
  fund_starts_with: String
  fund_starts_with_nocase: String
  fund_not_starts_with: String
  fund_not_starts_with_nocase: String
  fund_ends_with: String
  fund_ends_with_nocase: String
  fund_not_ends_with: String
  fund_not_ends_with_nocase: String
  fund_: TokenFund_filter
  basePriceClaim: String
  basePriceClaim_not: String
  basePriceClaim_gt: String
  basePriceClaim_lt: String
  basePriceClaim_gte: String
  basePriceClaim_lte: String
  basePriceClaim_in: [String!]
  basePriceClaim_not_in: [String!]
  basePriceClaim_contains: String
  basePriceClaim_contains_nocase: String
  basePriceClaim_not_contains: String
  basePriceClaim_not_contains_nocase: String
  basePriceClaim_starts_with: String
  basePriceClaim_starts_with_nocase: String
  basePriceClaim_not_starts_with: String
  basePriceClaim_not_starts_with_nocase: String
  basePriceClaim_ends_with: String
  basePriceClaim_ends_with_nocase: String
  basePriceClaim_not_ends_with: String
  basePriceClaim_not_ends_with_nocase: String
  basePriceClaim_: IdentityClaim_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  createdAt
  createdBy
  createdBy__id
  createdBy__isContract
  createdBy__country
  account
  account__id
  account__isContract
  account__country
  accessControl
  accessControl__id
  identity
  identity__id
  identity__deployedInTransaction
  balances
  type
  tokenFactory
  tokenFactory__id
  tokenFactory__name
  tokenFactory__typeId
  name
  symbol
  decimals
  totalSupply
  totalSupplyExact
  pausable
  pausable__id
  pausable__paused
  collateral
  collateral__id
  capped
  capped__id
  capped__cap
  capped__capExact
  yield_
  yield___id
  redeemable
  redeemable__id
  redeemable__redeemedAmount
  redeemable__redeemedAmountExact
  bond
  bond__id
  bond__faceValue
  bond__faceValueExact
  bond__maturityDate
  bond__isMatured
  fund
  fund__id
  fund__managementFeeBps
  basePriceClaim
  basePriceClaim__id
  basePriceClaim__name
  basePriceClaim__uri
  basePriceClaim__revoked
  basePriceClaim__deployedInTransaction
  deployedInTransaction
}

type TopicScheme {
  id: Bytes!
  registry: TopicSchemeRegistry!
  name: String!
  signature: String!
  enabled: Boolean!
  deployedInTransaction: Bytes!
}

type TopicSchemeRegistry {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  schemes(skip: Int = 0, first: Int = 100, orderBy: TopicScheme_orderBy, orderDirection: OrderDirection, where: TopicScheme_filter): [TopicScheme!]!
  deployedInTransaction: Bytes!
}

input TopicSchemeRegistry_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  schemes_: TopicScheme_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TopicSchemeRegistry_filter]
  or: [TopicSchemeRegistry_filter]
}

enum TopicSchemeRegistry_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  schemes
  deployedInTransaction
}

input TopicScheme_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  registry: String
  registry_not: String
  registry_gt: String
  registry_lt: String
  registry_gte: String
  registry_lte: String
  registry_in: [String!]
  registry_not_in: [String!]
  registry_contains: String
  registry_contains_nocase: String
  registry_not_contains: String
  registry_not_contains_nocase: String
  registry_starts_with: String
  registry_starts_with_nocase: String
  registry_not_starts_with: String
  registry_not_starts_with_nocase: String
  registry_ends_with: String
  registry_ends_with_nocase: String
  registry_not_ends_with: String
  registry_not_ends_with_nocase: String
  registry_: TopicSchemeRegistry_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  signature: String
  signature_not: String
  signature_gt: String
  signature_lt: String
  signature_gte: String
  signature_lte: String
  signature_in: [String!]
  signature_not_in: [String!]
  signature_contains: String
  signature_contains_nocase: String
  signature_not_contains: String
  signature_not_contains_nocase: String
  signature_starts_with: String
  signature_starts_with_nocase: String
  signature_not_starts_with: String
  signature_not_starts_with_nocase: String
  signature_ends_with: String
  signature_ends_with_nocase: String
  signature_not_ends_with: String
  signature_not_ends_with_nocase: String
  enabled: Boolean
  enabled_not: Boolean
  enabled_in: [Boolean!]
  enabled_not_in: [Boolean!]
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TopicScheme_filter]
  or: [TopicScheme_filter]
}

enum TopicScheme_orderBy {
  id
  registry
  registry__id
  registry__deployedInTransaction
  name
  signature
  enabled
  deployedInTransaction
}

type TrustedIssuersRegistry {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

input TrustedIssuersRegistry_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TrustedIssuersRegistry_filter]
  or: [TrustedIssuersRegistry_filter]
}

enum TrustedIssuersRegistry_orderBy {
  id
  accessControl
  accessControl__id
  account
  account__id
  account__isContract
  account__country
  deployedInTransaction
}

type Vault {
  id: Bytes!
  createdAt: BigInt!
  createdBy: Account!
  factory: VaultFactory!
  account: Account!
  accessControl: AccessControl!
  required: BigInt!
  signers(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  transactions(skip: Int = 0, first: Int = 100, orderBy: VaultTransaction_orderBy, orderDirection: OrderDirection, where: VaultTransaction_filter): [VaultTransaction!]!
  balance: BigDecimal!
  balanceExact: BigInt!
  deployedInTransaction: Bytes!
}

type VaultContractCall {
  id: Bytes!
  target: Account!
  calldata: Bytes!
  returnData: Bytes
}

input VaultContractCall_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  target: String
  target_not: String
  target_gt: String
  target_lt: String
  target_gte: String
  target_lte: String
  target_in: [String!]
  target_not_in: [String!]
  target_contains: String
  target_contains_nocase: String
  target_not_contains: String
  target_not_contains_nocase: String
  target_starts_with: String
  target_starts_with_nocase: String
  target_not_starts_with: String
  target_not_starts_with_nocase: String
  target_ends_with: String
  target_ends_with_nocase: String
  target_not_ends_with: String
  target_not_ends_with_nocase: String
  target_: Account_filter
  calldata: Bytes
  calldata_not: Bytes
  calldata_gt: Bytes
  calldata_lt: Bytes
  calldata_gte: Bytes
  calldata_lte: Bytes
  calldata_in: [Bytes!]
  calldata_not_in: [Bytes!]
  calldata_contains: Bytes
  calldata_not_contains: Bytes
  returnData: Bytes
  returnData_not: Bytes
  returnData_gt: Bytes
  returnData_lt: Bytes
  returnData_gte: Bytes
  returnData_lte: Bytes
  returnData_in: [Bytes!]
  returnData_not_in: [Bytes!]
  returnData_contains: Bytes
  returnData_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultContractCall_filter]
  or: [VaultContractCall_filter]
}

enum VaultContractCall_orderBy {
  id
  target
  target__id
  target__isContract
  target__country
  calldata
  returnData
}

type VaultERC20Transfer {
  id: Bytes!
  token: Account!
  amount: BigDecimal!
  amountExact: BigInt!
}

input VaultERC20Transfer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Account_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  amountExact: BigInt
  amountExact_not: BigInt
  amountExact_gt: BigInt
  amountExact_lt: BigInt
  amountExact_gte: BigInt
  amountExact_lte: BigInt
  amountExact_in: [BigInt!]
  amountExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultERC20Transfer_filter]
  or: [VaultERC20Transfer_filter]
}

enum VaultERC20Transfer_orderBy {
  id
  token
  token__id
  token__isContract
  token__country
  amount
  amountExact
}

type VaultFactory {
  id: Bytes!
  deployedInTransaction: Bytes!
  accessControl: AccessControl!
  systemAddon: SystemAddon!
  system: System!
  account: Account!
  vaults(skip: Int = 0, first: Int = 100, orderBy: Vault_orderBy, orderDirection: OrderDirection, where: Vault_filter): [Vault!]!
}

input VaultFactory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  systemAddon: String
  systemAddon_not: String
  systemAddon_gt: String
  systemAddon_lt: String
  systemAddon_gte: String
  systemAddon_lte: String
  systemAddon_in: [String!]
  systemAddon_not_in: [String!]
  systemAddon_contains: String
  systemAddon_contains_nocase: String
  systemAddon_not_contains: String
  systemAddon_not_contains_nocase: String
  systemAddon_starts_with: String
  systemAddon_starts_with_nocase: String
  systemAddon_not_starts_with: String
  systemAddon_not_starts_with_nocase: String
  systemAddon_ends_with: String
  systemAddon_ends_with_nocase: String
  systemAddon_not_ends_with: String
  systemAddon_not_ends_with_nocase: String
  systemAddon_: SystemAddon_filter
  system: String
  system_not: String
  system_gt: String
  system_lt: String
  system_gte: String
  system_lte: String
  system_in: [String!]
  system_not_in: [String!]
  system_contains: String
  system_contains_nocase: String
  system_not_contains: String
  system_not_contains_nocase: String
  system_starts_with: String
  system_starts_with_nocase: String
  system_not_starts_with: String
  system_not_starts_with_nocase: String
  system_ends_with: String
  system_ends_with_nocase: String
  system_not_ends_with: String
  system_not_ends_with_nocase: String
  system_: System_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  vaults_: Vault_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultFactory_filter]
  or: [VaultFactory_filter]
}

enum VaultFactory_orderBy {
  id
  deployedInTransaction
  accessControl
  accessControl__id
  systemAddon
  systemAddon__id
  systemAddon__deployedInTransaction
  systemAddon__name
  systemAddon__typeId
  system
  system__id
  system__deployedInTransaction
  account
  account__id
  account__isContract
  account__country
  vaults
}

type VaultTransaction {
  id: Bytes!
  vault: Vault!
  txIndex: BigInt!
  to: Account!
  value: BigDecimal!
  valueExact: BigInt!
  data: Bytes!
  comment: String!
  executed: Boolean!
  confirmationsRequired: BigInt!
  confirmationsCount: BigInt!
  confirmations(skip: Int = 0, first: Int = 100, orderBy: VaultTransactionConfirmation_orderBy, orderDirection: OrderDirection, where: VaultTransactionConfirmation_filter): [VaultTransactionConfirmation!]!
  submittedBy: Account!
  submittedAt: BigInt!
  executedAt: BigInt
  executedBy: Account
  erc20Transfer: VaultERC20Transfer
  contractCall: VaultContractCall
  deployedInTransaction: Bytes!
}

type VaultTransactionConfirmation {
  id: Bytes!
  transaction: VaultTransaction!
  signer: Account!
  confirmed: Boolean!
  confirmedAt: BigInt
  revokedAt: BigInt
  deployedInTransaction: Bytes!
}

input VaultTransactionConfirmation_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: VaultTransaction_filter
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: Account_filter
  confirmed: Boolean
  confirmed_not: Boolean
  confirmed_in: [Boolean!]
  confirmed_not_in: [Boolean!]
  confirmedAt: BigInt
  confirmedAt_not: BigInt
  confirmedAt_gt: BigInt
  confirmedAt_lt: BigInt
  confirmedAt_gte: BigInt
  confirmedAt_lte: BigInt
  confirmedAt_in: [BigInt!]
  confirmedAt_not_in: [BigInt!]
  revokedAt: BigInt
  revokedAt_not: BigInt
  revokedAt_gt: BigInt
  revokedAt_lt: BigInt
  revokedAt_gte: BigInt
  revokedAt_lte: BigInt
  revokedAt_in: [BigInt!]
  revokedAt_not_in: [BigInt!]
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultTransactionConfirmation_filter]
  or: [VaultTransactionConfirmation_filter]
}

enum VaultTransactionConfirmation_orderBy {
  id
  transaction
  transaction__id
  transaction__txIndex
  transaction__value
  transaction__valueExact
  transaction__data
  transaction__comment
  transaction__executed
  transaction__confirmationsRequired
  transaction__confirmationsCount
  transaction__submittedAt
  transaction__executedAt
  transaction__deployedInTransaction
  signer
  signer__id
  signer__isContract
  signer__country
  confirmed
  confirmedAt
  revokedAt
  deployedInTransaction
}

input VaultTransaction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  txIndex: BigInt
  txIndex_not: BigInt
  txIndex_gt: BigInt
  txIndex_lt: BigInt
  txIndex_gte: BigInt
  txIndex_lte: BigInt
  txIndex_in: [BigInt!]
  txIndex_not_in: [BigInt!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  value: BigDecimal
  value_not: BigDecimal
  value_gt: BigDecimal
  value_lt: BigDecimal
  value_gte: BigDecimal
  value_lte: BigDecimal
  value_in: [BigDecimal!]
  value_not_in: [BigDecimal!]
  valueExact: BigInt
  valueExact_not: BigInt
  valueExact_gt: BigInt
  valueExact_lt: BigInt
  valueExact_gte: BigInt
  valueExact_lte: BigInt
  valueExact_in: [BigInt!]
  valueExact_not_in: [BigInt!]
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  comment: String
  comment_not: String
  comment_gt: String
  comment_lt: String
  comment_gte: String
  comment_lte: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_contains: String
  comment_contains_nocase: String
  comment_not_contains: String
  comment_not_contains_nocase: String
  comment_starts_with: String
  comment_starts_with_nocase: String
  comment_not_starts_with: String
  comment_not_starts_with_nocase: String
  comment_ends_with: String
  comment_ends_with_nocase: String
  comment_not_ends_with: String
  comment_not_ends_with_nocase: String
  executed: Boolean
  executed_not: Boolean
  executed_in: [Boolean!]
  executed_not_in: [Boolean!]
  confirmationsRequired: BigInt
  confirmationsRequired_not: BigInt
  confirmationsRequired_gt: BigInt
  confirmationsRequired_lt: BigInt
  confirmationsRequired_gte: BigInt
  confirmationsRequired_lte: BigInt
  confirmationsRequired_in: [BigInt!]
  confirmationsRequired_not_in: [BigInt!]
  confirmationsCount: BigInt
  confirmationsCount_not: BigInt
  confirmationsCount_gt: BigInt
  confirmationsCount_lt: BigInt
  confirmationsCount_gte: BigInt
  confirmationsCount_lte: BigInt
  confirmationsCount_in: [BigInt!]
  confirmationsCount_not_in: [BigInt!]
  confirmations_: VaultTransactionConfirmation_filter
  submittedBy: String
  submittedBy_not: String
  submittedBy_gt: String
  submittedBy_lt: String
  submittedBy_gte: String
  submittedBy_lte: String
  submittedBy_in: [String!]
  submittedBy_not_in: [String!]
  submittedBy_contains: String
  submittedBy_contains_nocase: String
  submittedBy_not_contains: String
  submittedBy_not_contains_nocase: String
  submittedBy_starts_with: String
  submittedBy_starts_with_nocase: String
  submittedBy_not_starts_with: String
  submittedBy_not_starts_with_nocase: String
  submittedBy_ends_with: String
  submittedBy_ends_with_nocase: String
  submittedBy_not_ends_with: String
  submittedBy_not_ends_with_nocase: String
  submittedBy_: Account_filter
  submittedAt: BigInt
  submittedAt_not: BigInt
  submittedAt_gt: BigInt
  submittedAt_lt: BigInt
  submittedAt_gte: BigInt
  submittedAt_lte: BigInt
  submittedAt_in: [BigInt!]
  submittedAt_not_in: [BigInt!]
  executedAt: BigInt
  executedAt_not: BigInt
  executedAt_gt: BigInt
  executedAt_lt: BigInt
  executedAt_gte: BigInt
  executedAt_lte: BigInt
  executedAt_in: [BigInt!]
  executedAt_not_in: [BigInt!]
  executedBy: String
  executedBy_not: String
  executedBy_gt: String
  executedBy_lt: String
  executedBy_gte: String
  executedBy_lte: String
  executedBy_in: [String!]
  executedBy_not_in: [String!]
  executedBy_contains: String
  executedBy_contains_nocase: String
  executedBy_not_contains: String
  executedBy_not_contains_nocase: String
  executedBy_starts_with: String
  executedBy_starts_with_nocase: String
  executedBy_not_starts_with: String
  executedBy_not_starts_with_nocase: String
  executedBy_ends_with: String
  executedBy_ends_with_nocase: String
  executedBy_not_ends_with: String
  executedBy_not_ends_with_nocase: String
  executedBy_: Account_filter
  erc20Transfer: String
  erc20Transfer_not: String
  erc20Transfer_gt: String
  erc20Transfer_lt: String
  erc20Transfer_gte: String
  erc20Transfer_lte: String
  erc20Transfer_in: [String!]
  erc20Transfer_not_in: [String!]
  erc20Transfer_contains: String
  erc20Transfer_contains_nocase: String
  erc20Transfer_not_contains: String
  erc20Transfer_not_contains_nocase: String
  erc20Transfer_starts_with: String
  erc20Transfer_starts_with_nocase: String
  erc20Transfer_not_starts_with: String
  erc20Transfer_not_starts_with_nocase: String
  erc20Transfer_ends_with: String
  erc20Transfer_ends_with_nocase: String
  erc20Transfer_not_ends_with: String
  erc20Transfer_not_ends_with_nocase: String
  erc20Transfer_: VaultERC20Transfer_filter
  contractCall: String
  contractCall_not: String
  contractCall_gt: String
  contractCall_lt: String
  contractCall_gte: String
  contractCall_lte: String
  contractCall_in: [String!]
  contractCall_not_in: [String!]
  contractCall_contains: String
  contractCall_contains_nocase: String
  contractCall_not_contains: String
  contractCall_not_contains_nocase: String
  contractCall_starts_with: String
  contractCall_starts_with_nocase: String
  contractCall_not_starts_with: String
  contractCall_not_starts_with_nocase: String
  contractCall_ends_with: String
  contractCall_ends_with_nocase: String
  contractCall_not_ends_with: String
  contractCall_not_ends_with_nocase: String
  contractCall_: VaultContractCall_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultTransaction_filter]
  or: [VaultTransaction_filter]
}

enum VaultTransaction_orderBy {
  id
  vault
  vault__id
  vault__createdAt
  vault__required
  vault__balance
  vault__balanceExact
  vault__deployedInTransaction
  txIndex
  to
  to__id
  to__isContract
  to__country
  value
  valueExact
  data
  comment
  executed
  confirmationsRequired
  confirmationsCount
  confirmations
  submittedBy
  submittedBy__id
  submittedBy__isContract
  submittedBy__country
  submittedAt
  executedAt
  executedBy
  executedBy__id
  executedBy__isContract
  executedBy__country
  erc20Transfer
  erc20Transfer__id
  erc20Transfer__amount
  erc20Transfer__amountExact
  contractCall
  contractCall__id
  contractCall__calldata
  contractCall__returnData
  deployedInTransaction
}

input Vault_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdBy: String
  createdBy_not: String
  createdBy_gt: String
  createdBy_lt: String
  createdBy_gte: String
  createdBy_lte: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_contains: String
  createdBy_contains_nocase: String
  createdBy_not_contains: String
  createdBy_not_contains_nocase: String
  createdBy_starts_with: String
  createdBy_starts_with_nocase: String
  createdBy_not_starts_with: String
  createdBy_not_starts_with_nocase: String
  createdBy_ends_with: String
  createdBy_ends_with_nocase: String
  createdBy_not_ends_with: String
  createdBy_not_ends_with_nocase: String
  createdBy_: Account_filter
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: VaultFactory_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  accessControl: String
  accessControl_not: String
  accessControl_gt: String
  accessControl_lt: String
  accessControl_gte: String
  accessControl_lte: String
  accessControl_in: [String!]
  accessControl_not_in: [String!]
  accessControl_contains: String
  accessControl_contains_nocase: String
  accessControl_not_contains: String
  accessControl_not_contains_nocase: String
  accessControl_starts_with: String
  accessControl_starts_with_nocase: String
  accessControl_not_starts_with: String
  accessControl_not_starts_with_nocase: String
  accessControl_ends_with: String
  accessControl_ends_with_nocase: String
  accessControl_not_ends_with: String
  accessControl_not_ends_with_nocase: String
  accessControl_: AccessControl_filter
  required: BigInt
  required_not: BigInt
  required_gt: BigInt
  required_lt: BigInt
  required_gte: BigInt
  required_lte: BigInt
  required_in: [BigInt!]
  required_not_in: [BigInt!]
  signers: [String!]
  signers_not: [String!]
  signers_contains: [String!]
  signers_contains_nocase: [String!]
  signers_not_contains: [String!]
  signers_not_contains_nocase: [String!]
  signers_: Account_filter
  transactions_: VaultTransaction_filter
  balance: BigDecimal
  balance_not: BigDecimal
  balance_gt: BigDecimal
  balance_lt: BigDecimal
  balance_gte: BigDecimal
  balance_lte: BigDecimal
  balance_in: [BigDecimal!]
  balance_not_in: [BigDecimal!]
  balanceExact: BigInt
  balanceExact_not: BigInt
  balanceExact_gt: BigInt
  balanceExact_lt: BigInt
  balanceExact_gte: BigInt
  balanceExact_lte: BigInt
  balanceExact_in: [BigInt!]
  balanceExact_not_in: [BigInt!]
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vault_filter]
  or: [Vault_filter]
}

enum Vault_orderBy {
  id
  createdAt
  createdBy
  createdBy__id
  createdBy__isContract
  createdBy__country
  factory
  factory__id
  factory__deployedInTransaction
  account
  account__id
  account__isContract
  account__country
  accessControl
  accessControl__id
  required
  signers
  transactions
  balance
  balanceExact
  deployedInTransaction
}

type XvPSettlement {
  id: Bytes!
  name: String!
  cutoffDate: BigInt!
  autoExecute: Boolean!
  executed: Boolean!
  cancelled: Boolean!
  createdAt: BigInt!
  flows(skip: Int = 0, first: Int = 100, orderBy: XvPSettlementFlow_orderBy, orderDirection: OrderDirection, where: XvPSettlementFlow_filter): [XvPSettlementFlow!]!
  approvals(skip: Int = 0, first: Int = 100, orderBy: XvPSettlementApproval_orderBy, orderDirection: OrderDirection, where: XvPSettlementApproval_filter): [XvPSettlementApproval!]!
  participants(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]!
  deployedInTransaction: Bytes!
}

type XvPSettlementApproval {
  id: Bytes!
  xvpSettlement: XvPSettlement!
  account: Account!
  approved: Boolean!
  timestamp: BigInt
}

input XvPSettlementApproval_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  xvpSettlement: String
  xvpSettlement_not: String
  xvpSettlement_gt: String
  xvpSettlement_lt: String
  xvpSettlement_gte: String
  xvpSettlement_lte: String
  xvpSettlement_in: [String!]
  xvpSettlement_not_in: [String!]
  xvpSettlement_contains: String
  xvpSettlement_contains_nocase: String
  xvpSettlement_not_contains: String
  xvpSettlement_not_contains_nocase: String
  xvpSettlement_starts_with: String
  xvpSettlement_starts_with_nocase: String
  xvpSettlement_not_starts_with: String
  xvpSettlement_not_starts_with_nocase: String
  xvpSettlement_ends_with: String
  xvpSettlement_ends_with_nocase: String
  xvpSettlement_not_ends_with: String
  xvpSettlement_not_ends_with_nocase: String
  xvpSettlement_: XvPSettlement_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  approved: Boolean
  approved_not: Boolean
  approved_in: [Boolean!]
  approved_not_in: [Boolean!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [XvPSettlementApproval_filter]
  or: [XvPSettlementApproval_filter]
}

enum XvPSettlementApproval_orderBy {
  id
  xvpSettlement
  xvpSettlement__id
  xvpSettlement__name
  xvpSettlement__cutoffDate
  xvpSettlement__autoExecute
  xvpSettlement__executed
  xvpSettlement__cancelled
  xvpSettlement__createdAt
  xvpSettlement__deployedInTransaction
  account
  account__id
  account__isContract
  account__country
  approved
  timestamp
}

type XvPSettlementFlow {
  id: Bytes!
  xvpSettlement: XvPSettlement!
  asset: Token!
  from: Account!
  to: Account!
  amount: BigDecimal!
  amountExact: BigInt!
}

input XvPSettlementFlow_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  xvpSettlement: String
  xvpSettlement_not: String
  xvpSettlement_gt: String
  xvpSettlement_lt: String
  xvpSettlement_gte: String
  xvpSettlement_lte: String
  xvpSettlement_in: [String!]
  xvpSettlement_not_in: [String!]
  xvpSettlement_contains: String
  xvpSettlement_contains_nocase: String
  xvpSettlement_not_contains: String
  xvpSettlement_not_contains_nocase: String
  xvpSettlement_starts_with: String
  xvpSettlement_starts_with_nocase: String
  xvpSettlement_not_starts_with: String
  xvpSettlement_not_starts_with_nocase: String
  xvpSettlement_ends_with: String
  xvpSettlement_ends_with_nocase: String
  xvpSettlement_not_ends_with: String
  xvpSettlement_not_ends_with_nocase: String
  xvpSettlement_: XvPSettlement_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Token_filter
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: Account_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  amountExact: BigInt
  amountExact_not: BigInt
  amountExact_gt: BigInt
  amountExact_lt: BigInt
  amountExact_gte: BigInt
  amountExact_lte: BigInt
  amountExact_in: [BigInt!]
  amountExact_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [XvPSettlementFlow_filter]
  or: [XvPSettlementFlow_filter]
}

enum XvPSettlementFlow_orderBy {
  id
  xvpSettlement
  xvpSettlement__id
  xvpSettlement__name
  xvpSettlement__cutoffDate
  xvpSettlement__autoExecute
  xvpSettlement__executed
  xvpSettlement__cancelled
  xvpSettlement__createdAt
  xvpSettlement__deployedInTransaction
  asset
  asset__id
  asset__createdAt
  asset__type
  asset__name
  asset__symbol
  asset__decimals
  asset__totalSupply
  asset__totalSupplyExact
  asset__deployedInTransaction
  from
  from__id
  from__isContract
  from__country
  to
  to__id
  to__isContract
  to__country
  amount
  amountExact
}

input XvPSettlement_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  cutoffDate: BigInt
  cutoffDate_not: BigInt
  cutoffDate_gt: BigInt
  cutoffDate_lt: BigInt
  cutoffDate_gte: BigInt
  cutoffDate_lte: BigInt
  cutoffDate_in: [BigInt!]
  cutoffDate_not_in: [BigInt!]
  autoExecute: Boolean
  autoExecute_not: Boolean
  autoExecute_in: [Boolean!]
  autoExecute_not_in: [Boolean!]
  executed: Boolean
  executed_not: Boolean
  executed_in: [Boolean!]
  executed_not_in: [Boolean!]
  cancelled: Boolean
  cancelled_not: Boolean
  cancelled_in: [Boolean!]
  cancelled_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  flows_: XvPSettlementFlow_filter
  approvals_: XvPSettlementApproval_filter
  participants: [String!]
  participants_not: [String!]
  participants_contains: [String!]
  participants_contains_nocase: [String!]
  participants_not_contains: [String!]
  participants_not_contains_nocase: [String!]
  participants_: Account_filter
  deployedInTransaction: Bytes
  deployedInTransaction_not: Bytes
  deployedInTransaction_gt: Bytes
  deployedInTransaction_lt: Bytes
  deployedInTransaction_gte: Bytes
  deployedInTransaction_lte: Bytes
  deployedInTransaction_in: [Bytes!]
  deployedInTransaction_not_in: [Bytes!]
  deployedInTransaction_contains: Bytes
  deployedInTransaction_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [XvPSettlement_filter]
  or: [XvPSettlement_filter]
}

enum XvPSettlement_orderBy {
  id
  name
  cutoffDate
  autoExecute
  executed
  cancelled
  createdAt
  flows
  approvals
  participants
  deployedInTransaction
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}