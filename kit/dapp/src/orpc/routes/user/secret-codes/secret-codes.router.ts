/**
 * Secret Recovery Codes Router
 *
 * AUTHENTICATION SYSTEM OVERVIEW:
 *
 * The Asset Tokenization Kit implements a comprehensive multi-factor authentication system
 * consisting of two complementary security mechanisms:
 *
 * 1. TOTP Two-Factor Authentication (Primary)
 *    - Time-based One-Time Passwords following RFC 6238
 *    - Integrates with authenticator apps (Google Authenticator, Authy, etc.)
 *    - Provides ongoing authentication security beyond passwords
 *    - Auto-enables on first successful verification
 *
 * 2. Secret Recovery Codes (Backup)
 *    - Single-use authentication bypass tokens for emergency access
 *    - Generated when TOTP is unavailable (lost device, app issues)
 *    - Complement (don't replace) 2FA system architecture
 *    - Progressive security model with confirmation requirements
 *
 * ARCHITECTURAL DECISIONS:
 *
 * Portal Service Integration:
 * - SettleMint Portal API handles all cryptographic operations
 * - Provides secure random generation, key management, and validation
 * - Maintains verification state with replay attack protection
 * - Reduces local security attack surface and complexity
 *
 * ORPC Error Handling:
 * - Typed error responses (UNAUTHORIZED, INPUT_VALIDATION_FAILED, CONFLICT)
 * - Consistent error structure across authentication endpoints
 * - Security-focused error messages prevent information disclosure
 * - Integration with client-side error handling and user feedback
 *
 * Two-Phase Security Model:
 * - Setup Phase: Generate codes/secrets without strict requirements
 * - Confirmation Phase: Enable stricter security after user acknowledgment
 * - Prevents incomplete security states and improves user experience
 * - Allows progressive security enhancement based on user comfort level
 *
 * SECURITY BOUNDARIES:
 *
 * Trust Model:
 * - Portal service is trusted cryptographic authority
 * - Local database maintains state but not sensitive cryptographic material
 * - Wallet address provides additional identity binding layer
 * - Session authentication required for all security operations
 *
 * Attack Surface Mitigation:
 * - No local cryptographic key storage (Portal handles secrets)
 * - Rate limiting and replay protection handled by Portal service
 * - Input validation prevents malformed requests and injection attacks
 * - Fail-secure approach with default denial for ambiguous states
 *
 * INTEGRATION PATTERNS:
 *
 * Better Auth Integration:
 * - Builds on existing session and user management
 * - Extends authentication without replacing core auth system
 * - Maintains consistency with existing security policies
 * - Uses standard middleware patterns for database and Portal access
 *
 * Client-Server Communication:
 * - RESTful API design with clear resource boundaries
 * - JSON schema validation for all inputs and outputs
 * - TypeScript end-to-end type safety from validation to response
 * - OpenAPI documentation generation for client SDK development
 *
 * RECOVERY CODES SPECIFIC IMPLEMENTATION:
 *
 * ARCHITECTURE: Implements backup authentication mechanism for users who lose access to their
 * primary 2FA device. Secret codes provide a one-time recovery path when TOTP is unavailable.
 *
 * SECURITY MODEL:
 * - Generate: Creates 8-12 single-use recovery codes via Portal API
 * - Confirm: Records user acknowledgment of code storage (enables password requirements)
 * - Codes are cryptographically secure random strings generated by Portal service
 * - Each code can only be used once for authentication bypass
 *
 * BUSINESS LOGIC:
 * - Two-phase setup: Generate codes â†’ Confirm storage
 * - Confirmation is irreversible and enables stricter security requirements
 * - Codes complement (not replace) 2FA - both systems work independently
 *
 * INTEGRATION: Uses Portal GraphQL mutations for secure code generation and management.
 * Portal service handles cryptographic randomness, storage, and one-time-use tracking.
 */

import { generate } from "./secret-codes.generate";
import { confirm } from "./secret-codes.confirm";

/**
 * Secret recovery codes route handlers.
 *
 * @remarks
 * ARCHITECTURE: Two-endpoint design covers complete backup authentication lifecycle:
 * - generate: Create cryptographically secure recovery codes
 * - confirm: Record user acknowledgment and enable security requirements
 *
 * SECURITY: Each endpoint validates prerequisites and maintains secure state transitions.
 */
const routes = {
  generate,
  confirm,
};

export default routes;
export { routes as secretCodesRouter };
