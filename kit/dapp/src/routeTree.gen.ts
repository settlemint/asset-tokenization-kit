/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as PrivateRouteImport } from './routes/_private'
import { Route as AuthPathnameRouteImport } from './routes/auth.$pathname'
import { Route as PrivateOnboardingRouteImport } from './routes/_private/onboarding'
import { Route as PrivateOnboardedRouteImport } from './routes/_private/_onboarded'
import { Route as PrivateOnboardedIndexRouteImport } from './routes/_private/_onboarded/index'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPathnameRoute = AuthPathnameRouteImport.update({
  id: '/$pathname',
  path: '/$pathname',
  getParentRoute: () => AuthRoute,
} as any)
const PrivateOnboardingRoute = PrivateOnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateOnboardedRoute = PrivateOnboardedRouteImport.update({
  id: '/_onboarded',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateOnboardedIndexRoute = PrivateOnboardedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateOnboardedRoute,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteWithChildren
  '/onboarding': typeof PrivateOnboardingRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/': typeof PrivateOnboardedIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/onboarding': typeof PrivateOnboardingRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/': typeof PrivateOnboardedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/_private/_onboarded': typeof PrivateOnboardedRouteWithChildren
  '/_private/onboarding': typeof PrivateOnboardingRoute
  '/auth/$pathname': typeof AuthPathnameRoute
  '/_private/_onboarded/': typeof PrivateOnboardedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth' | '/onboarding' | '/auth/$pathname' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/onboarding' | '/auth/$pathname' | '/'
  id:
    | '__root__'
    | '/_private'
    | '/auth'
    | '/_private/_onboarded'
    | '/_private/onboarding'
    | '/auth/$pathname'
    | '/_private/_onboarded/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/auth/$' | '/api/rpc/$'
  id: '__root__' | '/api/$' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_private/onboarding': {
      id: '/_private/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof PrivateOnboardingRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/_onboarded': {
      id: '/_private/_onboarded'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateOnboardedRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/_onboarded/': {
      id: '/_private/_onboarded/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateOnboardedIndexRouteImport
      parentRoute: typeof PrivateOnboardedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface PrivateOnboardedRouteChildren {
  PrivateOnboardedIndexRoute: typeof PrivateOnboardedIndexRoute
}

const PrivateOnboardedRouteChildren: PrivateOnboardedRouteChildren = {
  PrivateOnboardedIndexRoute: PrivateOnboardedIndexRoute,
}

const PrivateOnboardedRouteWithChildren =
  PrivateOnboardedRoute._addFileChildren(PrivateOnboardedRouteChildren)

interface PrivateRouteChildren {
  PrivateOnboardedRoute: typeof PrivateOnboardedRouteWithChildren
  PrivateOnboardingRoute: typeof PrivateOnboardingRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateOnboardedRoute: PrivateOnboardedRouteWithChildren,
  PrivateOnboardingRoute: PrivateOnboardingRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface AuthRouteChildren {
  AuthPathnameRoute: typeof AuthPathnameRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthPathnameRoute: AuthPathnameRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
