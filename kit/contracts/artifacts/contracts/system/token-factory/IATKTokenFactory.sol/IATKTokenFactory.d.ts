// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface IATKTokenFactory$Type {
  _format: "hh-sol-artifact-1";
  contractName: "IATKTokenFactory";
  sourceName: "contracts/system/token-factory/IATKTokenFactory.sol";
  abi: [
    {
      inputs: [
        {
          internalType: "address";
          name: "predictedAddress";
          type: "address";
        },
      ];
      name: "AccessManagerAlreadyDeployed";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "predictedAddress";
          type: "address";
        },
      ];
      name: "AddressAlreadyDeployed";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidIdentityVerificationModuleAddress";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidImplementationAddress";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidTokenAddress";
      type: "error";
    },
    {
      inputs: [];
      name: "ProxyCreationFailed";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "deployedTokenIdentityAddress";
          type: "address";
        },
        {
          internalType: "address";
          name: "tokenIdentityAddress";
          type: "address";
        },
      ];
      name: "TokenIdentityAddressMismatch";
      type: "error";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "tokenAddress";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "tokenIdentity";
          type: "address";
        },
        {
          indexed: false;
          internalType: "bytes4[]";
          name: "interfaces";
          type: "bytes4[]";
        },
        {
          indexed: false;
          internalType: "address";
          name: "accessManager";
          type: "address";
        },
      ];
      name: "TokenAssetCreated";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "oldImplementation";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "newImplementation";
          type: "address";
        },
      ];
      name: "TokenImplementationUpdated";
      type: "event";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "systemAddress";
          type: "address";
        },
        {
          internalType: "address";
          name: "tokenImplementation_";
          type: "address";
        },
        {
          internalType: "address";
          name: "initialAdmin";
          type: "address";
        },
        {
          internalType: "address";
          name: "identityVerificationModule";
          type: "address";
        },
      ];
      name: "initialize";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "tokenImplementation_";
          type: "address";
        },
      ];
      name: "isValidTokenImplementation";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes4";
          name: "interfaceId";
          type: "bytes4";
        },
      ];
      name: "supportsInterface";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "tokenImplementation";
      outputs: [
        {
          internalType: "address";
          name: "";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
  ];
  bytecode: "0x";
  deployedBytecode: "0x";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "IATKTokenFactory",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IATKTokenFactory$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/system/token-factory/IATKTokenFactory.sol:IATKTokenFactory",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IATKTokenFactory$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "IATKTokenFactory",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IATKTokenFactory$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/system/token-factory/IATKTokenFactory.sol:IATKTokenFactory",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IATKTokenFactory$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "IATKTokenFactory",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IATKTokenFactory$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/system/token-factory/IATKTokenFactory.sol:IATKTokenFactory",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IATKTokenFactory$Type["abi"]>>;
}
