// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface ISMARTTokenAccessManager$Type {
  _format: "hh-sol-artifact-1";
  contractName: "ISMARTTokenAccessManager";
  sourceName: "contracts/smart/extensions/access-managed/ISMARTTokenAccessManager.sol";
  abi: [
    {
      inputs: [];
      name: "AccessControlBadConfirmation";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          internalType: "bytes32";
          name: "neededRole";
          type: "bytes32";
        },
      ];
      name: "AccessControlUnauthorizedAccount";
      type: "error";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          indexed: true;
          internalType: "bytes32";
          name: "previousAdminRole";
          type: "bytes32";
        },
        {
          indexed: true;
          internalType: "bytes32";
          name: "newAdminRole";
          type: "bytes32";
        },
      ];
      name: "RoleAdminChanged";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          indexed: true;
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
      ];
      name: "RoleGranted";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          indexed: true;
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
      ];
      name: "RoleRevoked";
      type: "event";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          internalType: "address[]";
          name: "accounts";
          type: "address[]";
        },
      ];
      name: "batchGrantRole";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          internalType: "address[]";
          name: "accounts";
          type: "address[]";
        },
      ];
      name: "batchRevokeRole";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
      ];
      name: "getRoleAdmin";
      outputs: [
        {
          internalType: "bytes32";
          name: "";
          type: "bytes32";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          internalType: "bytes32[]";
          name: "roles";
          type: "bytes32[]";
        },
      ];
      name: "grantMultipleRoles";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "grantRole";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "hasRole";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          internalType: "address";
          name: "callerConfirmation";
          type: "address";
        },
      ];
      name: "renounceRole";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          internalType: "bytes32[]";
          name: "roles";
          type: "bytes32[]";
        },
      ];
      name: "revokeMultipleRoles";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "role";
          type: "bytes32";
        },
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "revokeRole";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
  ];
  bytecode: "0x";
  deployedBytecode: "0x";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "ISMARTTokenAccessManager",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<ISMARTTokenAccessManager$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/smart/extensions/access-managed/ISMARTTokenAccessManager.sol:ISMARTTokenAccessManager",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<ISMARTTokenAccessManager$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "ISMARTTokenAccessManager",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<ISMARTTokenAccessManager$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/smart/extensions/access-managed/ISMARTTokenAccessManager.sol:ISMARTTokenAccessManager",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<ISMARTTokenAccessManager$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "ISMARTTokenAccessManager",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<ISMARTTokenAccessManager$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/smart/extensions/access-managed/ISMARTTokenAccessManager.sol:ISMARTTokenAccessManager",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<ISMARTTokenAccessManager$Type["abi"]>>;
}
