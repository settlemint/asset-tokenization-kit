// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface ISMARTFixedYieldSchedule$Type {
  _format: "hh-sol-artifact-1";
  contractName: "ISMARTFixedYieldSchedule";
  sourceName: "contracts/smart/extensions/yield/schedules/fixed/ISMARTFixedYieldSchedule.sol";
  abi: [
    {
      inputs: [];
      name: "AlreadyInitialized";
      type: "error";
    },
    {
      inputs: [];
      name: "CannotInitializeLogicContract";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "currentBalance";
          type: "uint256";
        },
        {
          internalType: "uint256";
          name: "requiredBalance";
          type: "uint256";
        },
      ];
      name: "InsufficientUnderlyingBalance";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidAmount";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidEndDate";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidInterval";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidPeriod";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidRate";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidStartDate";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidToken";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidUnderlyingAsset";
      type: "error";
    },
    {
      inputs: [];
      name: "NoUnderlyingBalance";
      type: "error";
    },
    {
      inputs: [];
      name: "NoYieldAvailable";
      type: "error";
    },
    {
      inputs: [];
      name: "ReentrantInitialization";
      type: "error";
    },
    {
      inputs: [];
      name: "ScheduleNotActive";
      type: "error";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: false;
          internalType: "uint256";
          name: "startDate";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "endDate";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "rate";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "interval";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256[]";
          name: "periodEndTimestamps";
          type: "uint256[]";
        },
        {
          indexed: false;
          internalType: "contract IERC20";
          name: "underlyingAsset";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "yieldForNextPeriod";
          type: "uint256";
        },
      ];
      name: "FixedYieldScheduleSet";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "from";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "UnderlyingAssetTopUp";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "UnderlyingAssetWithdrawn";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "holder";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "claimedAmount";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "fromPeriod";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "toPeriod";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256[]";
          name: "periodAmounts";
          type: "uint256[]";
        },
        {
          indexed: false;
          internalType: "uint256[]";
          name: "periodYields";
          type: "uint256[]";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "totalUnclaimedYield";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "yieldForNextPeriod";
          type: "uint256";
        },
      ];
      name: "YieldClaimed";
      type: "event";
    },
    {
      inputs: [];
      name: "allPeriods";
      outputs: [
        {
          internalType: "uint256[]";
          name: "timestamps";
          type: "uint256[]";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "holder";
          type: "address";
        },
      ];
      name: "calculateAccruedYield";
      outputs: [
        {
          internalType: "uint256";
          name: "totalAmount";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "claimYield";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "currentPeriod";
      outputs: [
        {
          internalType: "uint256";
          name: "periodNumber";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "endDate";
      outputs: [
        {
          internalType: "uint256";
          name: "timestamp";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "interval";
      outputs: [
        {
          internalType: "uint256";
          name: "durationSeconds";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "holder";
          type: "address";
        },
      ];
      name: "lastClaimedPeriod";
      outputs: [
        {
          internalType: "uint256";
          name: "periodNumber";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "lastCompletedPeriod";
      outputs: [
        {
          internalType: "uint256";
          name: "periodNumber";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "period";
          type: "uint256";
        },
      ];
      name: "periodEnd";
      outputs: [
        {
          internalType: "uint256";
          name: "timestamp";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "rate";
      outputs: [
        {
          internalType: "uint256";
          name: "yieldRate";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "startDate";
      outputs: [
        {
          internalType: "uint256";
          name: "startDateTimestamp";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes4";
          name: "interfaceId";
          type: "bytes4";
        },
      ];
      name: "supportsInterface";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "timeUntilNextPeriod";
      outputs: [
        {
          internalType: "uint256";
          name: "timeRemaining";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "token";
      outputs: [
        {
          internalType: "contract ISMARTYield";
          name: "tokenContract";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "topUpUnderlyingAsset";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "totalUnclaimedYield";
      outputs: [
        {
          internalType: "uint256";
          name: "totalAmount";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "totalYieldForNextPeriod";
      outputs: [
        {
          internalType: "uint256";
          name: "totalAmount";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "underlyingAsset";
      outputs: [
        {
          internalType: "contract IERC20";
          name: "assetToken";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
      ];
      name: "withdrawAllUnderlyingAsset";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "withdrawUnderlyingAsset";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
  ];
  bytecode: "0x";
  deployedBytecode: "0x";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "ISMARTFixedYieldSchedule",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<ISMARTFixedYieldSchedule$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/smart/extensions/yield/schedules/fixed/ISMARTFixedYieldSchedule.sol:ISMARTFixedYieldSchedule",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<ISMARTFixedYieldSchedule$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "ISMARTFixedYieldSchedule",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<ISMARTFixedYieldSchedule$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/smart/extensions/yield/schedules/fixed/ISMARTFixedYieldSchedule.sol:ISMARTFixedYieldSchedule",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<ISMARTFixedYieldSchedule$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "ISMARTFixedYieldSchedule",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<ISMARTFixedYieldSchedule$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/smart/extensions/yield/schedules/fixed/ISMARTFixedYieldSchedule.sol:ISMARTFixedYieldSchedule",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<ISMARTFixedYieldSchedule$Type["abi"]>>;
}
