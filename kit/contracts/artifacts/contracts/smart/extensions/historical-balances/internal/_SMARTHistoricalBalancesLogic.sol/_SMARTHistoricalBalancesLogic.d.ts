// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface _SMARTHistoricalBalancesLogic$Type {
  _format: "hh-sol-artifact-1";
  contractName: "_SMARTHistoricalBalancesLogic";
  sourceName: "contracts/smart/extensions/historical-balances/internal/_SMARTHistoricalBalancesLogic.sol";
  abi: [
    {
      inputs: [];
      name: "CannotRecoverSelf";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "module";
          type: "address";
        },
      ];
      name: "DuplicateModule";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "requestedTimepoint";
          type: "uint256";
        },
        {
          internalType: "uint48";
          name: "currentTimepoint";
          type: "uint48";
        },
      ];
      name: "FutureLookup";
      type: "error";
    },
    {
      inputs: [];
      name: "InsufficientTokenBalance";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "uint8";
          name: "decimals";
          type: "uint8";
        },
      ];
      name: "InvalidDecimals";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidLostWallet";
      type: "error";
    },
    {
      inputs: [];
      name: "LengthMismatch";
      type: "error";
    },
    {
      inputs: [];
      name: "MintNotCompliant";
      type: "error";
    },
    {
      inputs: [];
      name: "ModuleAlreadyAdded";
      type: "error";
    },
    {
      inputs: [];
      name: "ModuleNotFound";
      type: "error";
    },
    {
      inputs: [];
      name: "NoTokensToRecover";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "uint8";
          name: "bits";
          type: "uint8";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "SafeCastOverflowedUintDowncast";
      type: "error";
    },
    {
      inputs: [];
      name: "TransferNotCompliant";
      type: "error";
    },
    {
      inputs: [];
      name: "ZeroAddressNotAllowed";
      type: "error";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "owner";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "spender";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "Approval";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "oldBalance";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "newBalance";
          type: "uint256";
        },
      ];
      name: "CheckpointUpdated";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_compliance";
          type: "address";
        },
      ];
      name: "ComplianceAdded";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_module";
          type: "address";
        },
        {
          indexed: false;
          internalType: "bytes";
          name: "_params";
          type: "bytes";
        },
      ];
      name: "ComplianceModuleAdded";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_module";
          type: "address";
        },
      ];
      name: "ComplianceModuleRemoved";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "token";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "ERC20TokenRecovered";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_identityRegistry";
          type: "address";
        },
      ];
      name: "IdentityRegistryAdded";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "MintCompleted";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_module";
          type: "address";
        },
        {
          indexed: false;
          internalType: "bytes";
          name: "_params";
          type: "bytes";
        },
      ];
      name: "ModuleParametersUpdated";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "lostWallet";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "newWallet";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "TokensRecovered";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "from";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "Transfer";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "from";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "TransferCompleted";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint8";
          name: "_newDecimals";
          type: "uint8";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_newOnchainID";
          type: "address";
        },
      ];
      name: "UpdatedTokenInformation";
      type: "event";
    },
    {
      inputs: [];
      name: "CLOCK_MODE";
      outputs: [
        {
          internalType: "string";
          name: "";
          type: "string";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_module";
          type: "address";
        },
        {
          internalType: "bytes";
          name: "_params";
          type: "bytes";
        },
      ];
      name: "addComplianceModule";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "owner";
          type: "address";
        },
        {
          internalType: "address";
          name: "spender";
          type: "address";
        },
      ];
      name: "allowance";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "spender";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "approve";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "balanceOf";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "timepoint";
          type: "uint256";
        },
      ];
      name: "balanceOfAt";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address[]";
          name: "_toList";
          type: "address[]";
        },
        {
          internalType: "uint256[]";
          name: "_amounts";
          type: "uint256[]";
        },
      ];
      name: "batchMint";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address[]";
          name: "_toList";
          type: "address[]";
        },
        {
          internalType: "uint256[]";
          name: "_amounts";
          type: "uint256[]";
        },
      ];
      name: "batchTransfer";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "clock";
      outputs: [
        {
          internalType: "uint48";
          name: "";
          type: "uint48";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "compliance";
      outputs: [
        {
          internalType: "contract ISMARTCompliance";
          name: "complianceContract";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "complianceModules";
      outputs: [
        {
          components: [
            {
              internalType: "address";
              name: "module";
              type: "address";
            },
            {
              internalType: "bytes";
              name: "params";
              type: "bytes";
            },
          ];
          internalType: "struct SMARTComplianceModuleParamPair[]";
          name: "modulesList";
          type: "tuple[]";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "decimals";
      outputs: [
        {
          internalType: "uint8";
          name: "";
          type: "uint8";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "identityRegistry";
      outputs: [
        {
          internalType: "contract ISMARTIdentityRegistry";
          name: "registryContract";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "_amount";
          type: "uint256";
        },
      ];
      name: "mint";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "name";
      outputs: [
        {
          internalType: "string";
          name: "";
          type: "string";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "onchainID";
      outputs: [
        {
          internalType: "address";
          name: "idAddress";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "token";
          type: "address";
        },
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "recoverERC20";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_lostWallet";
          type: "address";
        },
      ];
      name: "recoverTokens";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "registeredInterfaces";
      outputs: [
        {
          internalType: "bytes4[]";
          name: "";
          type: "bytes4[]";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_module";
          type: "address";
        },
      ];
      name: "removeComplianceModule";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_compliance";
          type: "address";
        },
      ];
      name: "setCompliance";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_identityRegistry";
          type: "address";
        },
      ];
      name: "setIdentityRegistry";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_onchainID";
          type: "address";
        },
      ];
      name: "setOnchainID";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_module";
          type: "address";
        },
        {
          internalType: "bytes";
          name: "_params";
          type: "bytes";
        },
      ];
      name: "setParametersForComplianceModule";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes4";
          name: "interfaceId";
          type: "bytes4";
        },
      ];
      name: "supportsInterface";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "symbol";
      outputs: [
        {
          internalType: "string";
          name: "";
          type: "string";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "totalSupply";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "timepoint";
          type: "uint256";
        },
      ];
      name: "totalSupplyAt";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "transfer";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "from";
          type: "address";
        },
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "transferFrom";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "nonpayable";
      type: "function";
    },
  ];
  bytecode: "0x";
  deployedBytecode: "0x";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "_SMARTHistoricalBalancesLogic",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<_SMARTHistoricalBalancesLogic$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/smart/extensions/historical-balances/internal/_SMARTHistoricalBalancesLogic.sol:_SMARTHistoricalBalancesLogic",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<_SMARTHistoricalBalancesLogic$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "_SMARTHistoricalBalancesLogic",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<_SMARTHistoricalBalancesLogic$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/smart/extensions/historical-balances/internal/_SMARTHistoricalBalancesLogic.sol:_SMARTHistoricalBalancesLogic",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<_SMARTHistoricalBalancesLogic$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "_SMARTHistoricalBalancesLogic",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<_SMARTHistoricalBalancesLogic$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/smart/extensions/historical-balances/internal/_SMARTHistoricalBalancesLogic.sol:_SMARTHistoricalBalancesLogic",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<_SMARTHistoricalBalancesLogic$Type["abi"]>>;
}
