// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface ISMARTTopicSchemeRegistry$Type {
  "_format": "hh-sol-artifact-1",
  "contractName": "ISMARTTopicSchemeRegistry",
  "sourceName": "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topicId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "signature",
          "type": "string"
        }
      ],
      "name": "TopicSchemeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topicId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "TopicSchemeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topicId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldSignature",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newSignature",
          "type": "string"
        }
      ],
      "name": "TopicSchemeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "topicIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        }
      ],
      "name": "TopicSchemesBatchRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        }
      ],
      "name": "batchRegisterTopicSchemes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTopicIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "topicIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTopicId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "topicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTopicSchemeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topicId",
          "type": "uint256"
        }
      ],
      "name": "getTopicSchemeSignature",
      "outputs": [
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTopicSchemeSignatureByName",
      "outputs": [
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "topicId",
          "type": "uint256"
        }
      ],
      "name": "hasTopicScheme",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "hasTopicSchemeByName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        }
      ],
      "name": "registerTopicScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "removeTopicScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newSignature",
          "type": "string"
        }
      ],
      "name": "updateTopicScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "ISMARTTopicSchemeRegistry",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<ISMARTTopicSchemeRegistry$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol:ISMARTTopicSchemeRegistry",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<ISMARTTopicSchemeRegistry$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "ISMARTTopicSchemeRegistry",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<ISMARTTopicSchemeRegistry$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol:ISMARTTopicSchemeRegistry",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<ISMARTTopicSchemeRegistry$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "ISMARTTopicSchemeRegistry",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<ISMARTTopicSchemeRegistry$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol:ISMARTTopicSchemeRegistry",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<ISMARTTopicSchemeRegistry$Type["abi"]>>;
}
