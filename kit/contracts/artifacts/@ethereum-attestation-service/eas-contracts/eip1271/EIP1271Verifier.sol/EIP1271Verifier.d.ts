// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface EIP1271Verifier$Type {
  _format: "hh-sol-artifact-1";
  contractName: "EIP1271Verifier";
  sourceName: "@ethereum-attestation-service/eas-contracts/eip1271/EIP1271Verifier.sol";
  abi: [
    {
      inputs: [];
      name: "InvalidNonce";
      type: "error";
    },
    {
      inputs: [];
      name: "InvalidShortString";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "string";
          name: "str";
          type: "string";
        },
      ];
      name: "StringTooLong";
      type: "error";
    },
    {
      anonymous: false;
      inputs: [];
      name: "EIP712DomainChanged";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: false;
          internalType: "uint256";
          name: "oldNonce";
          type: "uint256";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "newNonce";
          type: "uint256";
        },
      ];
      name: "NonceIncreased";
      type: "event";
    },
    {
      inputs: [];
      name: "eip712Domain";
      outputs: [
        {
          internalType: "bytes1";
          name: "fields";
          type: "bytes1";
        },
        {
          internalType: "string";
          name: "name";
          type: "string";
        },
        {
          internalType: "string";
          name: "version";
          type: "string";
        },
        {
          internalType: "uint256";
          name: "chainId";
          type: "uint256";
        },
        {
          internalType: "address";
          name: "verifyingContract";
          type: "address";
        },
        {
          internalType: "bytes32";
          name: "salt";
          type: "bytes32";
        },
        {
          internalType: "uint256[]";
          name: "extensions";
          type: "uint256[]";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "getAttestTypeHash";
      outputs: [
        {
          internalType: "bytes32";
          name: "";
          type: "bytes32";
        },
      ];
      stateMutability: "pure";
      type: "function";
    },
    {
      inputs: [];
      name: "getDomainSeparator";
      outputs: [
        {
          internalType: "bytes32";
          name: "";
          type: "bytes32";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "getName";
      outputs: [
        {
          internalType: "string";
          name: "";
          type: "string";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "getNonce";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "getRevokeTypeHash";
      outputs: [
        {
          internalType: "bytes32";
          name: "";
          type: "bytes32";
        },
      ];
      stateMutability: "pure";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "newNonce";
          type: "uint256";
        },
      ];
      name: "increaseNonce";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
  ];
  bytecode: "0x";
  deployedBytecode: "0x";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "EIP1271Verifier",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<EIP1271Verifier$Type["abi"]>>;
  export function deployContract(
    contractName: "@ethereum-attestation-service/eas-contracts/eip1271/EIP1271Verifier.sol:EIP1271Verifier",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<EIP1271Verifier$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "EIP1271Verifier",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<EIP1271Verifier$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "@ethereum-attestation-service/eas-contracts/eip1271/EIP1271Verifier.sol:EIP1271Verifier",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<EIP1271Verifier$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "EIP1271Verifier",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<EIP1271Verifier$Type["abi"]>>;
  export function getContractAt(
    contractName: "@ethereum-attestation-service/eas-contracts/eip1271/EIP1271Verifier.sol:EIP1271Verifier",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<EIP1271Verifier$Type["abi"]>>;
}
