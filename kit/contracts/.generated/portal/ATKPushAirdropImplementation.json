{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "forwarder_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "MAX_BATCH_SIZE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "batchClaim",
      "inputs": [
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "bytes32[][]",
          "internalType": "bytes32[][]"
        }
      ],
      "outputs": [],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "batchDistribute",
      "inputs": [
        {
          "name": "indices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "recipients",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "merkleProofs",
          "type": "bytes32[][]",
          "internalType": "bytes32[][]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claim",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "claimTracker",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IATKClaimTracker"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "distribute",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "merkleProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "distributionCap",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getClaimedAmount",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "token_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "root_",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "owner_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "distributionCap_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isClaimed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isDistributed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isTrustedForwarder",
      "inputs": [
        {
          "name": "forwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "merkleRoot",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "renounceOwnership",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDistributionCap",
      "inputs": [
        {
          "name": "newDistributionCap_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "token",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalDistributed",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "trustedForwarder",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawTokens",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "BatchClaimed",
      "inputs": [
        {
          "name": "claimant",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "indices",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BatchTokensDistributed",
      "inputs": [
        {
          "name": "recipientCount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "indices",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Claimed",
      "inputs": [
        {
          "name": "claimant",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "index",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DistributionCapUpdated",
      "inputs": [
        {
          "name": "oldCap",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "newCap",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "previousOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokensDistributed",
      "inputs": [
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "index",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokensWithdrawn",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AlreadyDistributed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "BatchSizeExceedsLimit",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DistributionCapExceeded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidClaimTrackerAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidDistributionAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidInitialization",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidInputArrayLengths",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidMerkleProof",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidMerkleRoot",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidTokenAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidWithdrawalAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotInitializing",
      "inputs": []
    },
    {
      "type": "error",
      "name": "OwnableInvalidOwner",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "OwnableUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "PushAirdropClaimNotAllowed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ReentrancyGuardReentrantCall",
      "inputs": []
    },
    {
      "type": "error",
      "name": "SafeERC20FailedOperation",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ZeroAmountToDistribute",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60a03461008857601f6118f238819003918201601f19168301916001600160401b0383118484101761008c5780849260209460405283398101031261008857516001600160a01b03811681036100885760805261005a6100a0565b6100626100a0565b60405161179b90816101378239608051818181610a4801528181610b2a015261131d0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b5f5160206118d25f395f51905f525460ff8160401c16610127576002600160401b03196001600160401b038216016100d55750565b6001600160401b0319166001600160401b039081175f5160206118d25f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b63f92ee8a960e01b5f5260045ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908163222abc1114610ef7575080632eb4a7ab14610eda578063429c6e5b14610eb457806349df728c14610dcb5780634b32102a14610bd35780634be7adee14610b5e578063572b6c0514610b095780636f62c3a614610ae0578063715018a614610a775780637da0a87714610a325780638da5cb5b146109fd578063ae0b51df146109bc578063b7f1aca814610966578063cd63d93014610948578063cfdbf2541461092c578063e2b4b2f714610606578063ef692c7d14610214578063efca2eed146101f6578063f2fde38b146101c9578063f364c90c1461012e5763fc0c546a14610105575f80fd5b3461012b578060031936011261012b57546040516001600160a01b039091168152602090f35b80fd5b503461012b57604036600319011261012b57600254604051633cd9324360e21b81526004803590820152602480359082015290602090829060449082906001600160a01b03165afa9081156101be5760209291610191575b506040519015158152f35b6101b19150823d84116101b7575b6101a98183610f60565b8101906110cc565b5f610186565b503d61019f565b6040513d84823e3d90fd5b503461012b57602036600319011261012b576101f36101e6610f1a565b6101ee6110e4565b61105b565b80f35b503461012b578060031936011261012b576020600354604051908152f35b503461012b57608036600319011261012b576004356001600160401b0381116104c857610245903690600401610f30565b906024356001600160401b03811161038f57610265903690600401610f30565b6044929192356001600160401b03811161060257610287903690600401610f30565b906064356001600160401b0381116105fe576102a7903690600401610f30565b9190956102b26110e4565b6102ba6111c5565b606488116105ef578488148015906105e5575b80156105db575b6105cc57889489978a5b8a81106105205750600454801515908161050b575b506104fc57909436829003601e190191908b5b8b8110610393578c8c8c8c8c61031e81600354611002565b60035560405192835260208301526060604083015282606083015260018060fb1b03831161038f57816080917fcb717668fc2be4cb2b22f131f5c0055a75ad81c1cb5003da116c8e8f0407c58c9460051b8091848401378101030190a160015f51602061174f5f395f51905f525580f35b8380fd5b61039e818d8c611023565b35906103b36103ae828b89611023565b611047565b916103bf82858a611023565b3590898310156104e7578260051b860135878112156104e25786018035906001600160401b0382116104dc57602001908060051b360382136104dc57610407918487856111fd565b156104cc578f60018060a01b0360025416803b156104c85760405163762ba3ff60e11b81526004810184905260248101859052604481018590529082908290606490829084905af180156101be576104b3575b50546001947ff75d5c8724380d126d0ce1ef2c57b7e856e7fe00051f6184966b31323463cf129260409261049a90869084906001600160a01b0316611137565b82519485526020850152858060a01b031692a201610306565b6104be828092610f60565b61012b575f61045a565b5080fd5b5063582f497d60e11b8f5260048ffd5b50508f80fd5b508f80fd5b50634e487b7160e01b8f52603260045260248ffd5b636fd8707b60e11b8b5260048bfd5b905061051988600354611002565b115f6102f3565b989661052d8a8c8b611023565b359061053d6103ae8c8688611023565b916105498c8a89611023565b35926001600160a01b0316156105bd5782156105ae5761056890610f95565b61059f579061057691611002565b965f19811461058b57600180910199016102de565b634e487b7160e01b8c52601160045260248cfd5b63cce553a960e01b8d5260048dfd5b63a68332cd60e01b8e5260048efd5b637e59fcff60e01b8e5260048efd5b632c635df560e11b8952600489fd5b50828414156102d4565b50838514156102cd565b632a8677b560e21b8952600489fd5b8780fd5b8580fd5b503461012b57608036600319011261012b57610620610f1a565b604435906024356001600160a01b038316830361038f575f51602061176f5f395f51905f52549260ff8460401c1615936001600160401b03811680159081610924575b600114908161091a575b159081610911575b506109025767ffffffffffffffff1981166001175f51602061176f5f395f51905f5255846108d6575b506040516103bb808201908282106001600160401b038311176108c2576020918391611374833930815203019086f080156108b7576001600160a01b0316926106e56112ef565b6001600160a01b03169081156108a857821561089957831561088a576040516318160ddd60e01b8152602081600481865afa9081610857575b5061073257630f58058360e11b8652600486fd5b604051633cd9324360e21b8152866004820152866024820152602081604481885afa908161083a575b5061076f57632b58d96960e01b8652600486fd5b6107839061077b6112ef565b6101ee6112ef565b6bffffffffffffffffffffffff60a01b8554161784556001556bffffffffffffffffffffffff60a01b60025416176002556107bc6112ef565b6107c46112ef565b60015f51602061174f5f395f51905f52556064356004556107e25780f35b68ff0000000000000000195f51602061176f5f395f51905f5254165f51602061176f5f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6108529060203d6020116101b7576101a98183610f60565b61075b565b6020813d602011610882575b8161087060209383610f60565b8101031261087e575161071e565b5f80fd5b3d9150610863565b632b58d96960e01b8652600486fd5b639dd854d360e01b8652600486fd5b630f58058360e11b8652600486fd5b6040513d87823e3d90fd5b634e487b7160e01b88526041600452602488fd5b68ffffffffffffffffff191668010000000000000001175f51602061176f5f395f51905f52555f61069e565b63f92ee8a960e01b8652600486fd5b9050155f610675565b303b15915061066d565b869150610663565b503461012b578060031936011261012b57602060405160648152f35b503461012b578060031936011261012b576020600454604051908152f35b503461012b57602036600319011261012b577f64687926ea82d024193ae2d49d2c6e63089c2caf9cba13ff897d094f1526f01760406004356109a66110e4565b600454908060045582519182526020820152a180f35b503461012b57606036600319011261012b576044356001600160401b0381116104c857906109ef60049236908401610f30565b50506341cbd5e560e11b8152fd5b503461012b578060031936011261012b575f51602061172f5f395f51905f52546040516001600160a01b039091168152602090f35b503461012b578060031936011261012b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461012b578060031936011261012b57610a906110e4565b5f51602061172f5f395f51905f5280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461012b57602036600319011261012b576020610aff600435610f95565b1515604051908152f35b503461012b57602036600319011261012b576020610b25610f1a565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b503461012b57606036600319011261012b576004356001600160401b0381116104c857610b8f903690600401610f30565b50506024356001600160401b0381116104c857610bb0903690600401610f30565b50506044356001600160401b0381116104c857906109ef60049236908401610f30565b503461087e57608036600319011261087e576024356001600160a01b0381169060043582820361087e57604435916064356001600160401b03811161087e57610c20903690600401610f30565b610c286110e4565b610c306111c5565b8515610dbc578415610dad576004548015159081610d98575b50610d8957610c5784610f95565b610d7a57610c67918584866111fd565b15610d6b576002546001600160a01b0316803b1561087e5760405163762ba3ff60e11b8152600481018490526024810185905260448101859052905f908290606490829084905af18015610d6057610d23575b5091604091610d04827ff75d5c8724380d126d0ce1ef2c57b7e856e7fe00051f6184966b31323463cf1295610cf182600354611002565b60035588546001600160a01b0316611137565b82519182526020820152a260015f51602061174f5f395f51905f525580f35b7ff75d5c8724380d126d0ce1ef2c57b7e856e7fe00051f6184966b31323463cf129391955091610d555f604094610f60565b5f9591935091610cba565b6040513d5f823e3d90fd5b63582f497d60e11b5f5260045ffd5b63cce553a960e01b5f5260045ffd5b636fd8707b60e11b5f5260045ffd5b9050610da686600354611002565b115f610c49565b63a68332cd60e01b5f5260045ffd5b637e59fcff60e01b5f5260045ffd5b3461087e57602036600319011261087e57610de4610f1a565b610dec6110e4565b6001600160a01b038116908115610ea5575f546040516370a0823160e01b815230600482015291906001600160a01b0316602083602481845afa928315610d60575f93610e6d575b5091610e64816020937f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b95611137565b604051908152a2005b9250906020833d602011610e9d575b81610e8960209383610f60565b8101031261087e5791519190610e64610e34565b3d9150610e7c565b634261081360e11b5f5260045ffd5b3461087e57602036600319011261087e576020610ed2600435610f95565b604051908152f35b3461087e575f36600319011261087e576020600154604051908152f35b3461087e575f36600319011261087e576002546001600160a01b03168152602090f35b600435906001600160a01b038216820361087e57565b9181601f8401121561087e578235916001600160401b03831161087e576020808501948460051b01011161087e57565b90601f801991011681019081106001600160401b03821117610f8157604052565b634e487b7160e01b5f52604160045260245ffd5b60025460405163429c6e5b60e01b81526004810192909252602090829060249082906001600160a01b03165afa908115610d60575f91610fd3575090565b90506020813d602011610ffa575b81610fee60209383610f60565b8101031261087e575190565b3d9150610fe1565b9190820180921161100f57565b634e487b7160e01b5f52601160045260245ffd5b91908110156110335760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b038116810361087e5790565b6001600160a01b031680156110b9575f51602061172f5f395f51905f5280546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b631e4fbdf760e01b5f525f60045260245ffd5b9081602091031261087e5751801515810361087e5790565b5f51602061172f5f395f51905f52546001600160a01b039081169061110761131a565b160361110f57565b61111761131a565b63118cdaa760e01b5f9081526001600160a01b0391909116600452602490fd5b60405163a9059cbb60e01b60208281019182526001600160a01b03909416602483015260448083019590955293815290925f91611175606482610f60565b519082855af115610d60575f513d6111bc57506001600160a01b0381163b155b61119c5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415611195565b60025f51602061174f5f395f51905f5254146111ee5760025f51602061174f5f395f51905f5255565b633ee5aeb560e01b5f5260045ffd5b9194929394604051916020830193845260018060a01b0316604083015260608201526060815261122e608082610f60565b519020604051602081019182526020815261124a604082610f60565b519020600154926001600160401b038511610f81578460051b604051956112746020830188610f60565b8652602086019082019136831161087e57905b8282106112df57505050905f915b84518310156112d75760208360051b86010151908181105f146112c6575f52602052600160405f205b920191611295565b905f52602052600160405f206112be565b915092501490565b8135815260209182019101611287565b60ff5f51602061176f5f395f51905f525460401c161561130b57565b631afcd79f60e31b5f5260045ffd5b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611368575b1561136457601319360136811161100f573560601c90565b3390565b50601436101561134c56fe60803460b857601f6103bb38819003918201601f19168301916001600160401b0383118484101760bc5780849260209460405283398101031260b857516001600160a01b0381169081900360b857801560a5575f80546001600160a01b031981168317825560405192916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36102ea90816100d18239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c8063429c6e5b1461024f578063715018a6146101f85780638da5cb5b146101d1578063bd40bde614610196578063ec5747fe14610133578063f2fde38b146100aa5763f364c90c14610066575f80fd5b346100a65760403660031901126100a657602061009c6004358060081c5f526001602052600160ff60405f205492161b16151590565b6040519015158152f35b5f80fd5b346100a65760203660031901126100a6576004356001600160a01b038116908190036100a6576100d86102b7565b8015610120575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b346100a65760407f08401774913e94f43659333293c99fdfdea868c488d679967e054abc8b5ae8346101643661029d565b61016f9492946102b7565b8460081c5f526001602052825f20600160ff87161b815417905582519182526020820152a2005b346100a65760206101c86101a93661029d565b50508060081c5f526001602052600160ff60405f205492161b16151590565b15604051908152f35b346100a6575f3660031901126100a6575f546040516001600160a01b039091168152602090f35b346100a6575f3660031901126100a6576102106102b7565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100a65760203660031901126100a6576102836004358060081c5f526001602052600160ff60405f205492161b16151590565b156102955760205f195b604051908152f35b60205f61028d565b60609060031901126100a657600435906024359060443590565b5f546001600160a01b031633036102ca57565b63118cdaa760e01b5f523360045260245ffdfea164736f6c634300081c000a9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000af0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00",
    "sourceMap": "1738:9722:8:-:0;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;1623:37:236;;4930:109:0;;:::i;:::-;3384:94:8;;:::i;:::-;1738:9722;;;;;;;;1623:37:236;1738:9722:8;;;;;;;;;;;;;;;;;-1:-1:-1;1738:9722:8;;;;;;-1:-1:-1;1738:9722:8;;;;;-1:-1:-1;1738:9722:8;7709:422:237;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;;;;7894:76:237;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;7983:34:237;7979:146;;7709:422;:::o;7979:146::-;-1:-1:-1;;;;;;1738:9722:8;-1:-1:-1;;;;;1738:9722:8;;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;;;;8085:29:237;;1738:9722:8;;8085:29:237;7709:422::o;7894:76::-;7936:23;;;-1:-1:-1;7936:23:237;;-1:-1:-1;7936:23:237",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c908163222abc1114610ef7575080632eb4a7ab14610eda578063429c6e5b14610eb457806349df728c14610dcb5780634b32102a14610bd35780634be7adee14610b5e578063572b6c0514610b095780636f62c3a614610ae0578063715018a614610a775780637da0a87714610a325780638da5cb5b146109fd578063ae0b51df146109bc578063b7f1aca814610966578063cd63d93014610948578063cfdbf2541461092c578063e2b4b2f714610606578063ef692c7d14610214578063efca2eed146101f6578063f2fde38b146101c9578063f364c90c1461012e5763fc0c546a14610105575f80fd5b3461012b578060031936011261012b57546040516001600160a01b039091168152602090f35b80fd5b503461012b57604036600319011261012b57600254604051633cd9324360e21b81526004803590820152602480359082015290602090829060449082906001600160a01b03165afa9081156101be5760209291610191575b506040519015158152f35b6101b19150823d84116101b7575b6101a98183610f60565b8101906110cc565b5f610186565b503d61019f565b6040513d84823e3d90fd5b503461012b57602036600319011261012b576101f36101e6610f1a565b6101ee6110e4565b61105b565b80f35b503461012b578060031936011261012b576020600354604051908152f35b503461012b57608036600319011261012b576004356001600160401b0381116104c857610245903690600401610f30565b906024356001600160401b03811161038f57610265903690600401610f30565b6044929192356001600160401b03811161060257610287903690600401610f30565b906064356001600160401b0381116105fe576102a7903690600401610f30565b9190956102b26110e4565b6102ba6111c5565b606488116105ef578488148015906105e5575b80156105db575b6105cc57889489978a5b8a81106105205750600454801515908161050b575b506104fc57909436829003601e190191908b5b8b8110610393578c8c8c8c8c61031e81600354611002565b60035560405192835260208301526060604083015282606083015260018060fb1b03831161038f57816080917fcb717668fc2be4cb2b22f131f5c0055a75ad81c1cb5003da116c8e8f0407c58c9460051b8091848401378101030190a160015f51602061174f5f395f51905f525580f35b8380fd5b61039e818d8c611023565b35906103b36103ae828b89611023565b611047565b916103bf82858a611023565b3590898310156104e7578260051b860135878112156104e25786018035906001600160401b0382116104dc57602001908060051b360382136104dc57610407918487856111fd565b156104cc578f60018060a01b0360025416803b156104c85760405163762ba3ff60e11b81526004810184905260248101859052604481018590529082908290606490829084905af180156101be576104b3575b50546001947ff75d5c8724380d126d0ce1ef2c57b7e856e7fe00051f6184966b31323463cf129260409261049a90869084906001600160a01b0316611137565b82519485526020850152858060a01b031692a201610306565b6104be828092610f60565b61012b575f61045a565b5080fd5b5063582f497d60e11b8f5260048ffd5b50508f80fd5b508f80fd5b50634e487b7160e01b8f52603260045260248ffd5b636fd8707b60e11b8b5260048bfd5b905061051988600354611002565b115f6102f3565b989661052d8a8c8b611023565b359061053d6103ae8c8688611023565b916105498c8a89611023565b35926001600160a01b0316156105bd5782156105ae5761056890610f95565b61059f579061057691611002565b965f19811461058b57600180910199016102de565b634e487b7160e01b8c52601160045260248cfd5b63cce553a960e01b8d5260048dfd5b63a68332cd60e01b8e5260048efd5b637e59fcff60e01b8e5260048efd5b632c635df560e11b8952600489fd5b50828414156102d4565b50838514156102cd565b632a8677b560e21b8952600489fd5b8780fd5b8580fd5b503461012b57608036600319011261012b57610620610f1a565b604435906024356001600160a01b038316830361038f575f51602061176f5f395f51905f52549260ff8460401c1615936001600160401b03811680159081610924575b600114908161091a575b159081610911575b506109025767ffffffffffffffff1981166001175f51602061176f5f395f51905f5255846108d6575b506040516103bb808201908282106001600160401b038311176108c2576020918391611374833930815203019086f080156108b7576001600160a01b0316926106e56112ef565b6001600160a01b03169081156108a857821561089957831561088a576040516318160ddd60e01b8152602081600481865afa9081610857575b5061073257630f58058360e11b8652600486fd5b604051633cd9324360e21b8152866004820152866024820152602081604481885afa908161083a575b5061076f57632b58d96960e01b8652600486fd5b6107839061077b6112ef565b6101ee6112ef565b6bffffffffffffffffffffffff60a01b8554161784556001556bffffffffffffffffffffffff60a01b60025416176002556107bc6112ef565b6107c46112ef565b60015f51602061174f5f395f51905f52556064356004556107e25780f35b68ff0000000000000000195f51602061176f5f395f51905f5254165f51602061176f5f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6108529060203d6020116101b7576101a98183610f60565b61075b565b6020813d602011610882575b8161087060209383610f60565b8101031261087e575161071e565b5f80fd5b3d9150610863565b632b58d96960e01b8652600486fd5b639dd854d360e01b8652600486fd5b630f58058360e11b8652600486fd5b6040513d87823e3d90fd5b634e487b7160e01b88526041600452602488fd5b68ffffffffffffffffff191668010000000000000001175f51602061176f5f395f51905f52555f61069e565b63f92ee8a960e01b8652600486fd5b9050155f610675565b303b15915061066d565b869150610663565b503461012b578060031936011261012b57602060405160648152f35b503461012b578060031936011261012b576020600454604051908152f35b503461012b57602036600319011261012b577f64687926ea82d024193ae2d49d2c6e63089c2caf9cba13ff897d094f1526f01760406004356109a66110e4565b600454908060045582519182526020820152a180f35b503461012b57606036600319011261012b576044356001600160401b0381116104c857906109ef60049236908401610f30565b50506341cbd5e560e11b8152fd5b503461012b578060031936011261012b575f51602061172f5f395f51905f52546040516001600160a01b039091168152602090f35b503461012b578060031936011261012b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461012b578060031936011261012b57610a906110e4565b5f51602061172f5f395f51905f5280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461012b57602036600319011261012b576020610aff600435610f95565b1515604051908152f35b503461012b57602036600319011261012b576020610b25610f1a565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b503461012b57606036600319011261012b576004356001600160401b0381116104c857610b8f903690600401610f30565b50506024356001600160401b0381116104c857610bb0903690600401610f30565b50506044356001600160401b0381116104c857906109ef60049236908401610f30565b503461087e57608036600319011261087e576024356001600160a01b0381169060043582820361087e57604435916064356001600160401b03811161087e57610c20903690600401610f30565b610c286110e4565b610c306111c5565b8515610dbc578415610dad576004548015159081610d98575b50610d8957610c5784610f95565b610d7a57610c67918584866111fd565b15610d6b576002546001600160a01b0316803b1561087e5760405163762ba3ff60e11b8152600481018490526024810185905260448101859052905f908290606490829084905af18015610d6057610d23575b5091604091610d04827ff75d5c8724380d126d0ce1ef2c57b7e856e7fe00051f6184966b31323463cf1295610cf182600354611002565b60035588546001600160a01b0316611137565b82519182526020820152a260015f51602061174f5f395f51905f525580f35b7ff75d5c8724380d126d0ce1ef2c57b7e856e7fe00051f6184966b31323463cf129391955091610d555f604094610f60565b5f9591935091610cba565b6040513d5f823e3d90fd5b63582f497d60e11b5f5260045ffd5b63cce553a960e01b5f5260045ffd5b636fd8707b60e11b5f5260045ffd5b9050610da686600354611002565b115f610c49565b63a68332cd60e01b5f5260045ffd5b637e59fcff60e01b5f5260045ffd5b3461087e57602036600319011261087e57610de4610f1a565b610dec6110e4565b6001600160a01b038116908115610ea5575f546040516370a0823160e01b815230600482015291906001600160a01b0316602083602481845afa928315610d60575f93610e6d575b5091610e64816020937f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b95611137565b604051908152a2005b9250906020833d602011610e9d575b81610e8960209383610f60565b8101031261087e5791519190610e64610e34565b3d9150610e7c565b634261081360e11b5f5260045ffd5b3461087e57602036600319011261087e576020610ed2600435610f95565b604051908152f35b3461087e575f36600319011261087e576020600154604051908152f35b3461087e575f36600319011261087e576002546001600160a01b03168152602090f35b600435906001600160a01b038216820361087e57565b9181601f8401121561087e578235916001600160401b03831161087e576020808501948460051b01011161087e57565b90601f801991011681019081106001600160401b03821117610f8157604052565b634e487b7160e01b5f52604160045260245ffd5b60025460405163429c6e5b60e01b81526004810192909252602090829060249082906001600160a01b03165afa908115610d60575f91610fd3575090565b90506020813d602011610ffa575b81610fee60209383610f60565b8101031261087e575190565b3d9150610fe1565b9190820180921161100f57565b634e487b7160e01b5f52601160045260245ffd5b91908110156110335760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b038116810361087e5790565b6001600160a01b031680156110b9575f51602061172f5f395f51905f5280546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b631e4fbdf760e01b5f525f60045260245ffd5b9081602091031261087e5751801515810361087e5790565b5f51602061172f5f395f51905f52546001600160a01b039081169061110761131a565b160361110f57565b61111761131a565b63118cdaa760e01b5f9081526001600160a01b0391909116600452602490fd5b60405163a9059cbb60e01b60208281019182526001600160a01b03909416602483015260448083019590955293815290925f91611175606482610f60565b519082855af115610d60575f513d6111bc57506001600160a01b0381163b155b61119c5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415611195565b60025f51602061174f5f395f51905f5254146111ee5760025f51602061174f5f395f51905f5255565b633ee5aeb560e01b5f5260045ffd5b9194929394604051916020830193845260018060a01b0316604083015260608201526060815261122e608082610f60565b519020604051602081019182526020815261124a604082610f60565b519020600154926001600160401b038511610f81578460051b604051956112746020830188610f60565b8652602086019082019136831161087e57905b8282106112df57505050905f915b84518310156112d75760208360051b86010151908181105f146112c6575f52602052600160405f205b920191611295565b905f52602052600160405f206112be565b915092501490565b8135815260209182019101611287565b60ff5f51602061176f5f395f51905f525460401c161561130b57565b631afcd79f60e31b5f5260045ffd5b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611368575b1561136457601319360136811161100f573560601c90565b3390565b50601436101561134c56fe60803460b857601f6103bb38819003918201601f19168301916001600160401b0383118484101760bc5780849260209460405283398101031260b857516001600160a01b0381169081900360b857801560a5575f80546001600160a01b031981168317825560405192916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36102ea90816100d18239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c8063429c6e5b1461024f578063715018a6146101f85780638da5cb5b146101d1578063bd40bde614610196578063ec5747fe14610133578063f2fde38b146100aa5763f364c90c14610066575f80fd5b346100a65760403660031901126100a657602061009c6004358060081c5f526001602052600160ff60405f205492161b16151590565b6040519015158152f35b5f80fd5b346100a65760203660031901126100a6576004356001600160a01b038116908190036100a6576100d86102b7565b8015610120575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b346100a65760407f08401774913e94f43659333293c99fdfdea868c488d679967e054abc8b5ae8346101643661029d565b61016f9492946102b7565b8460081c5f526001602052825f20600160ff87161b815417905582519182526020820152a2005b346100a65760206101c86101a93661029d565b50508060081c5f526001602052600160ff60405f205492161b16151590565b15604051908152f35b346100a6575f3660031901126100a6575f546040516001600160a01b039091168152602090f35b346100a6575f3660031901126100a6576102106102b7565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100a65760203660031901126100a6576102836004358060081c5f526001602052600160ff60405f205492161b16151590565b156102955760205f195b604051908152f35b60205f61028d565b60609060031901126100a657600435906024359060443590565b5f546001600160a01b031633036102ca57565b63118cdaa760e01b5f523360045260245ffdfea164736f6c634300081c000a9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000a",
    "sourceMap": "1738:9722:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;7716:13:0;1738:9722:8;;;-1:-1:-1;;;7716:43:0;;1738:9722:8;;;7716:43:0;;;1738:9722:8;;;;;;;;;;;;;7716:43:0;;1738:9722:8;;-1:-1:-1;;;;;1738:9722:8;7716:43:0;;;;;;;1738:9722:8;7716:43:0;;;;1738:9722:8;;;;;;;;;;7716:43:0;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;1738:9722:8;;;;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;2357:1:234;1738:9722:8;;:::i;:::-;2303:62:234;;:::i;:::-;2357:1;:::i;:::-;1738:9722:8;;;;;;;;;;;;;;;;4771:17;1738:9722;;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;2303:62:234;;;;;:::i;:::-;3361:103:244;;:::i;:::-;1738:9722:8;3020:26:0;;3016:87;;8165:35:8;;;;;:74;;;1738:9722;8165:131;;;;1738:9722;8148:217;;8375:22;8407:28;;8508:13;;8523:18;;;;;;1738:9722;;;9168:20;;;:73;;;;8503:590;9164:136;;;9380:13;;1738:9722;;;;-1:-1:-1;;1738:9722:8;;;9380:13;9395:18;;;;;;1738:9722;;;;;10073:31;1738:9722;10073:31;1738:9722;10073:31;:::i;:::-;;1738:9722;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10120:61;1738:9722;;;;;;;;;;;10120:61;;;;1738:9722;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;;;;;9415:3;9450:10;;;;;:::i;:::-;1738:9722;9494:13;;;;;;;:::i;:::-;;:::i;:::-;9538:10;;;;;;:::i;:::-;1738:9722;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;;9625:61;;;;;;:::i;:::-;9624:62;9620:128;;1738:9722;;;;;;9822:13;1738:9722;;9822:48;;;;;1738:9722;;-1:-1:-1;;;9822:48:8;;1738:9722;9822:48;;1738:9722;;;;;;;;;;;;;;;;;;;;;;;;;;9822:48;;;;;;;;9415:3;-1:-1:-1;1738:9722:8;;;9973:43;;1738:9722;;9947:6;;1738:9722;;;;-1:-1:-1;;;;;1738:9722:8;9947:6;:::i;:::-;1738:9722;;;;;;;;;;;;;;;9973:43;;1738:9722;9380:13;;9822:48;;;;;;:::i;:::-;1738:9722;;9822:48;;;;1738:9722;;;9620:128;-1:-1:-1;;;;9713:20:8;;1738:9722;7007:20;9713;1738:9722;;;;;;;;;;;;-1:-1:-1;;;;1738:9722:8;;;;;;;;9164:136;-1:-1:-1;;;9264:25:8;;1738:9722;6733:25;9264;9168:73;1738:9722;;9192:30;1738:9722;9192:17;1738:9722;9192:30;:::i;:::-;:49;9168:73;;;8543:3;8578:10;;;;;;;:::i;:::-;1738:9722;8622:13;;;;;;;:::i;:::-;8666:10;;;;;;:::i;:::-;1738:9722;;-1:-1:-1;;;;;1738:9722:8;8742:23;8738:64;;8820:11;;8816:48;;8882:23;;;:::i;:::-;8878:94;;9030:20;;;;:::i;:::-;1738:9722;-1:-1:-1;;1738:9722:8;;;;;;;;8543:3;1738:9722;8508:13;;1738:9722;-1:-1:-1;;;1738:9722:8;;;;;;;;8878:94;-1:-1:-1;;;8937:20:8;;1738:9722;6860:20;8937;8816:48;-1:-1:-1;;;8840:24:8;;1738:9722;6568:24;8840;8738:64;-1:-1:-1;;;8774:28:8;;1738:9722;6506:28;8774;8148:217;-1:-1:-1;;;8328:26:8;;1738:9722;8328:26;;8165:131;8259:37;;;;;8165:131;;:74;8204:35;;;;;8165:74;;3016:87:0;-1:-1:-1;;;3069:23:0;;1738:9722:8;3069:23:0;;1738:9722:8;;;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;;;;;4301:16:237;1738:9722:8;-1:-1:-1;;;;;1738:9722:8;;4724:16:237;;:34;;;;1738:9722:8;;4788:16:237;:50;;;;1738:9722:8;4853:13:237;:30;;;;1738:9722:8;4849:91:237;;;-1:-1:-1;;1738:9722:8;;;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;4977:67:237;;1738:9722:8;;;;4267:40;;;;;;;;-1:-1:-1;;;;;4267:40:8;;;;;1738:9722;4267:40;;;;;;4301:4;1738:9722;;4267:40;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;6891:76:237;;:::i;:::-;-1:-1:-1;;;;;1738:9722:8;;5664:20:0;;5660:54;;5728:19;;5724:51;;5789:27;;5785:68;;1738:9722:8;;-1:-1:-1;;;5972:28:0;;1738:9722:8;;;;5972:28:0;;;;;;;1738:9722:8;-1:-1:-1;5968:175:0;;-1:-1:-1;;;6111:21:0;;1738:9722:8;5693:21:0;6111;5968:175;1738:9722:8;;;;;6290:47:0;;;1738:9722:8;6290:47:0;;1738:9722:8;;;;;;;6290:47:0;1738:9722:8;6290:47:0;;;;;;;;5968:175;-1:-1:-1;6286:208:0;;-1:-1:-1;;;6455:28:0;;1738:9722:8;5825:28:0;6455;6286:208;6959:1:237;6286:208:0;6891:76:237;;:::i;:::-;;;:::i;6959:1::-;1738:9722:8;;;;;;;;;;;;;;6599:47:0;1738:9722:8;;;6599:47:0;1738:9722:8;6891:76:237;;:::i;:::-;;;:::i;:::-;1738:9722:8;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;;;5064:101:237;;1738:9722:8;;5064:101:237;1738:9722:8;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;-1:-1:-1;;;;;;;;;;;1738:9722:8;5140:14:237;1738:9722:8;;;;;;5140:14:237;1738:9722:8;;6290:47:0;;;1738:9722:8;6290:47:0;1738:9722:8;6290:47:0;;;;;;;:::i;:::-;;;5972:28;1738:9722:8;5972:28:0;;1738:9722:8;5972:28:0;;;;;;1738:9722:8;5972:28:0;;;:::i;:::-;;;1738:9722:8;;;;;5972:28:0;;1738:9722:8;-1:-1:-1;1738:9722:8;;5972:28:0;;;-1:-1:-1;5972:28:0;;5785:68;-1:-1:-1;;;5825:28:0;;1738:9722:8;5825:28:0;;5724:51;-1:-1:-1;;;5756:19:0;;1738:9722:8;5756:19:0;;5660:54;-1:-1:-1;;;5693:21:0;;1738:9722:8;5693:21:0;;4267:40:8;1738:9722;;;;;;;;;4267:40;-1:-1:-1;;;1738:9722:8;;;;;;;;4977:67:237;-1:-1:-1;;1738:9722:8;;;-1:-1:-1;;;;;;;;;;;1738:9722:8;4977:67:237;;;4849:91;-1:-1:-1;;;4906:23:237;;1738:9722:8;4906:23:237;;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:237;;4724:34;;;-1:-1:-1;4724:34:237;;1738:9722:8;;;;;;;;;;;;;;;;2793:3:0;1738:9722:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;5750:51;1738:9722;;;2303:62:234;;:::i;:::-;1738:9722:8;;;;;;;;;;;;;;;5750:51;1738:9722;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11423:28:8;;;1738:9722;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;;;;;;;;;1830:17:236;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;;;;;2303:62:234;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1738:9722:8;;-1:-1:-1;;;;;;1738:9722:8;;;;;;;-1:-1:-1;;;;;1738:9722:8;3975:40:234;1738:9722:8;;3975:40:234;1738:9722:8;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;5309:23;1738:9722;;5309:23;:::i;:::-;:28;;1738:9722;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;;:::i;:::-;;;1830:17:236;-1:-1:-1;;;;;1738:9722:8;;;;;2054:31:236;;;;1738:9722:8;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;:::i;:::-;2303:62:234;;:::i;:::-;3361:103:244;;:::i;:::-;6474:23:8;;6470:64;;6548:11;;6544:48;;1738:9722;;6641:20;;;:69;;;;1738:9722;6637:132;;;6823:23;;;:::i;:::-;6819:61;;6927:57;;;;;;:::i;:::-;6926:58;6922:116;;7104:13;1738:9722;-1:-1:-1;;;;;1738:9722:8;7104:48;;;;;1738:9722;;-1:-1:-1;;;7104:48:8;;1738:9722;7104:48;;1738:9722;;;;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;;-1:-1:-1;;7104:48:8;;;;;;;;1738:9722;;;;;7295:6;1738:9722;7317:43;1738:9722;7199:27;1738:9722;7199:27;1738:9722;7199:27;:::i;:::-;;1738:9722;;;-1:-1:-1;;;;;1738:9722:8;7295:6;:::i;:::-;1738:9722;;;;;;;;;7317:43;1738:9722;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;7104:48;7317:43;7104:48;;;;;;1738:9722;;7104:48;;:::i;:::-;1738:9722;;;;-1:-1:-1;7104:48:8;;;;1738:9722;;;;;;;;;6922:116;7007:20;;;1738:9722;7007:20;1738:9722;;7007:20;6819:61;6860:20;;;1738:9722;6860:20;1738:9722;;6860:20;6637:132;6733:25;;;1738:9722;6733:25;1738:9722;;6733:25;6641:69;1738:9722;;6665:26;1738:9722;6665:17;1738:9722;6665:26;:::i;:::-;:45;6641:69;;;6544:48;6568:24;;;1738:9722;6568:24;1738:9722;;6568:24;6470:64;6506:28;;;1738:9722;6506:28;1738:9722;;6506:28;1738:9722;;;;;;-1:-1:-1;;1738:9722:8;;;;;;:::i;:::-;2303:62:234;;:::i;:::-;-1:-1:-1;;;;;1738:9722:8;;;9499:16:0;;9495:55;;1738:9722:8;;;;-1:-1:-1;;;9578:31:0;;9603:4;1738:9722:8;9578:31:0;;1738:9722:8;;;-1:-1:-1;;;;;1738:9722:8;;;9578:31:0;1738:9722:8;;9578:31:0;;;;;;;1738:9722:8;9578:31:0;;;1738:9722:8;9643:7:0;;;;1738:9722:8;9643:7:0;9666:28;9643:7;;:::i;:::-;1738:9722:8;;;;;9666:28:0;1738:9722:8;9578:31:0;;;;1738:9722:8;9578:31:0;;1738:9722:8;9578:31:0;;;;;;1738:9722:8;9578:31:0;;;:::i;:::-;;;1738:9722:8;;;;;;;9578:31:0;9643:7;9578:31;;;;;-1:-1:-1;9578:31:0;;9495:55;9524:26;;;1738:9722:8;9524:26:0;1738:9722:8;;9524:26:0;1738:9722:8;;;;;;-1:-1:-1;;1738:9722:8;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;;7097:11:0;1738:9722:8;;;;;;;;;;;;;-1:-1:-1;;1738:9722:8;;;;7299:13:0;1738:9722:8;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;:::o;:::-;;;;-1:-1:-1;1738:9722:8;;;;;-1:-1:-1;1738:9722:8;7956:132:0;8044:13;1738:9722:8;;;-1:-1:-1;;;8044:37:0;;;;;1738:9722:8;;;;;;;;8044:37:0;;1738:9722:8;;-1:-1:-1;;;;;1738:9722:8;8044:37:0;;;;;;;-1:-1:-1;8044:37:0;;;8037:44;7956:132;:::o;8044:37::-;;;1738:9722:8;8044:37:0;;1738:9722:8;8044:37:0;;;;;;1738:9722:8;8044:37:0;;;:::i;:::-;;;1738:9722:8;;;;;7956:132:0;:::o;8044:37::-;;;-1:-1:-1;8044:37:0;;1738:9722:8;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;;;;;:::o;3405:215:234:-;-1:-1:-1;;;;;1738:9722:8;3489:22:234;;3485:91;;-1:-1:-1;;;;;;;;;;;1738:9722:8;;-1:-1:-1;;;;;;1738:9722:8;;;;;;;-1:-1:-1;;;;;1738:9722:8;3975:40:234;-1:-1:-1;;3975:40:234;3405:215::o;3485:91::-;3534:31;;;3509:1;3534:31;3509:1;3534:31;1738:9722:8;;3509:1:234;3534:31;1738:9722:8;;;;;;;;;;;;;;;;;;:::o;2658:162:234:-;-1:-1:-1;;;;;;;;;;;1738:9722:8;-1:-1:-1;;;;;1738:9722:8;;;;14687:38:0;;:::i;:::-;1738:9722:8;2717:23:234;2713:101;;2658:162::o;2713:101::-;14687:38:0;;:::i;:::-;-1:-1:-1;;;;2763:40:234;;;-1:-1:-1;;;;;1738:9722:8;;;;2763:40:234;1738:9722:8;;;2763:40:234;1219:160:205;1738:9722:8;;-1:-1:-1;;;1328:43:205;;;;;;;-1:-1:-1;;;;;1738:9722:8;;;1328:43:205;;;1738:9722:8;;;;;;;;;1328:43:205;;;1219:160;;-1:-1:-1;;1328:43:205;;1738:9722:8;1328:43:205;:::i;:::-;8507:421;;;;;;;;;-1:-1:-1;8507:421:205;;8942:15;;-1:-1:-1;;;;;;1738:9722:8;;8960:26:205;:31;8942:68;8938:146;;1219:160;:::o;8938:146::-;-1:-1:-1;;;;9033:40:205;;;-1:-1:-1;;;;;1738:9722:8;;;;9033:40:205;1738:9722:8;1328:43:205;;9033:40;8942:68;9009:1;8994:16;;8942:68;;3470:384:244;1991:1;-1:-1:-1;;;;;;;;;;;1738:9722:8;3670:20:244;3666:88;;1991:1;-1:-1:-1;;;;;;;;;;;1738:9722:8;3470:384:244:o;3666:88::-;3713:30;;;-1:-1:-1;3713:30:244;;-1:-1:-1;3713:30:244;10207:461:0;;;;;;1738:9722:8;;10552:39:0;;;;1738:9722:8;;;;;;;;;;;;;;;;;;10552:39:0;;;;;;:::i;:::-;1738:9722:8;10542:50:0;;1738:9722:8;;10552:39:0;10531:62;;1738:9722:8;;;10552:39:0;10531:62;;;1738:9722:8;10531:62:0;;:::i;:::-;1738:9722:8;10521:73:0;;10643:11;1738:9722:8;;-1:-1:-1;;;;;1738:9722:8;;;;;;;;;;;10552:39:0;1738:9722:8;;;;:::i;:::-;;;10552:39:0;1738:9722:8;;;;;;;;;;;;;;;;;;2559:27:223;;;2601:13;-1:-1:-1;2596:134:223;2634:3;1738:9722:8;;2616:16:223;;;;;10552:39:0;1738:9722:8;;;;;;;605:59:222;:5;;;:59;:5;;;-1:-1:-1;889:135:222;10552:39:0;889:135:222;10643:11:0;1738:9722:8;-1:-1:-1;889:135:222;605:59;2634:3:223;1738:9722:8;2601:13:223;;;605:59:222;889:135;-1:-1:-1;889:135:222;10552:39:0;889:135:222;10643:11:0;1738:9722:8;-1:-1:-1;889:135:222;605:59;;2616:16:223;;;;;2016:33;10207:461:0;:::o;1738:9722:8:-;;;;;10552:39:0;1738:9722:8;;;;;;;7082:141:237;1738:9722:8;-1:-1:-1;;;;;;;;;;;1738:9722:8;;;;7148:18:237;7144:73;;7082:141::o;7144:73::-;7189:17;;;-1:-1:-1;7189:17:237;;-1:-1:-1;7189:17:237;2329:429:236;2545:10;1830:17;-1:-1:-1;;;;;1738:9722:8;2054:31:236;;2526:71;;2329:429;2522:230;;;1738:9722:8;;2435:8:236;1738:9722:8;2435:8:236;1738:9722:8;;;;;;;;2613:72:236:o;2522:230::-;2545:10;2716:25;:::o;2526:71::-;2435:8;3606:2;2435:8;2560:37;;2526:71;",
    "linkReferences": {},
    "immutableReferences": {
      "57669": [
        {
          "start": 2632,
          "length": 32
        },
        {
          "start": 2858,
          "length": 32
        },
        {
          "start": 4893,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "MAX_BATCH_SIZE()": "cfdbf254",
    "batchClaim(uint256[],uint256[],bytes32[][])": "4be7adee",
    "batchDistribute(uint256[],address[],uint256[],bytes32[][])": "ef692c7d",
    "claim(uint256,uint256,bytes32[])": "ae0b51df",
    "claimTracker()": "222abc11",
    "distribute(uint256,address,uint256,bytes32[])": "4b32102a",
    "distributionCap()": "cd63d930",
    "getClaimedAmount(uint256)": "429c6e5b",
    "initialize(address,bytes32,address,uint256)": "e2b4b2f7",
    "isClaimed(uint256,uint256)": "f364c90c",
    "isDistributed(uint256)": "6f62c3a6",
    "isTrustedForwarder(address)": "572b6c05",
    "merkleRoot()": "2eb4a7ab",
    "owner()": "8da5cb5b",
    "renounceOwnership()": "715018a6",
    "setDistributionCap(uint256)": "b7f1aca8",
    "token()": "fc0c546a",
    "totalDistributed()": "efca2eed",
    "transferOwnership(address)": "f2fde38b",
    "trustedForwarder()": "7da0a877",
    "withdrawTokens(address)": "49df728c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchSizeExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributionCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaimTrackerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDistributionAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PushAirdropClaimNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountToDistribute\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"BatchTokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"DistributionCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"\",\"type\":\"bytes32[][]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTracker\",\"outputs\":[{\"internalType\":\"contract IATKClaimTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionCap_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isDistributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDistributionCap_\",\"type\":\"uint256\"}],\"name\":\"setDistributionCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"This contract implements an admin-controlled distribution system where:      - Only the contract owner can distribute tokens to recipients      - Recipients cannot claim tokens themselves - they must be pushed by the admin      - Uses Merkle proof verification for secure distribution validation      - Tracks distributed status using ATKBitmapClaimTracker      - Supports both single and batch distributions      - Includes optional distribution cap for controlling total distributions      The contract extends ATKAirdrop but overrides claim functions to prevent user-initiated claims.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"PushAirdropClaimNotAllowed()\":[{\"details\":\"Push airdrops only allow admin-initiated distributions, not user claims.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"BatchClaimed(address,uint256,uint256[],uint256[])\":{\"params\":{\"amounts\":\"The amounts claimed for each index.\",\"claimant\":\"The address that claimed the tokens.\",\"indices\":\"The indices of the claims in the Merkle tree.\",\"totalAmount\":\"The total amount of tokens claimed in the batch.\"}},\"BatchTokensDistributed(uint256,uint256,uint256[])\":{\"params\":{\"indices\":\"The indices of the distributions in the Merkle tree.\",\"recipientCount\":\"The number of recipients in the batch.\",\"totalAmount\":\"The total amount of tokens distributed in the batch.\"}},\"Claimed(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens claimed.\",\"claimant\":\"The address that claimed the tokens.\",\"index\":\"The index of the claim in the Merkle tree.\"}},\"DistributionCapUpdated(uint256,uint256)\":{\"params\":{\"newCap\":\"The new distribution cap.\",\"oldCap\":\"The previous distribution cap.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TokensDistributed(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens distributed.\",\"index\":\"The index of the distribution in the Merkle tree.\",\"recipient\":\"The address that received the tokens.\"}},\"TokensWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens withdrawn.\",\"to\":\"The address receiving the withdrawn tokens.\"}}},\"kind\":\"dev\",\"methods\":{\"batchClaim(uint256[],uint256[],bytes32[][])\":{\"details\":\"Overrides the abstract batchClaim function from ATKAirdrop to prevent user-initiated claims.      In push airdrops, only the admin can distribute tokens.      All parameters are unused as this function always reverts.\"},\"batchDistribute(uint256[],address[],uint256[],bytes32[][])\":{\"details\":\"Only the contract owner can distribute tokens. Batch version for gas efficiency.\",\"params\":{\"amounts\":\"The amounts of tokens to distribute to each recipient.\",\"indices\":\"The indices of the distributions in the Merkle tree.\",\"merkleProofs\":\"The Merkle proof arrays for verification of each distribution.\",\"recipients\":\"The addresses to receive tokens.\"}},\"claim(uint256,uint256,bytes32[])\":{\"details\":\"Overrides the abstract claim function from ATKAirdrop to prevent user-initiated claims.      In push airdrops, only the admin can distribute tokens.      All parameters are unused as this function always reverts.\"},\"claimTracker()\":{\"returns\":{\"_0\":\"The claim tracker contract.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"forwarder_\":\"The address of the forwarder contract.\"}},\"distribute(uint256,address,uint256,bytes32[])\":{\"details\":\"Only the contract owner can distribute tokens. Verifies Merkle proof and distribution cap.\",\"params\":{\"amount\":\"The amount of tokens to distribute.\",\"index\":\"The index of the distribution in the Merkle tree.\",\"merkleProof\":\"The Merkle proof array for verification.\",\"recipient\":\"The address to receive tokens.\"}},\"distributionCap()\":{\"returns\":{\"_0\":\"The maximum tokens that can be distributed (0 for no cap).\"}},\"getClaimedAmount(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"claimedAmount The amount already claimed for this index.\"}},\"initialize(address,bytes32,address,uint256)\":{\"details\":\"Sets up the base airdrop functionality and push-specific parameters.      Deploys its own bitmap claim tracker for efficient distribution tracking.\",\"params\":{\"distributionCap_\":\"The maximum tokens that can be distributed (0 for no cap).\",\"owner_\":\"The initial owner of the contract (admin who can distribute tokens).\",\"root_\":\"The Merkle root for verifying distributions.\",\"token_\":\"The address of the ERC20 token to be distributed.\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"index\":\"The index to check in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"},\"returns\":{\"_0\":\"claimed True if the index has been fully claimed, false otherwise.\"}},\"isDistributed(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"distributed True if tokens have been distributed for this index.\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"merkleRoot()\":{\"returns\":{\"_0\":\"The Merkle root for verifying airdrop claims.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDistributionCap(uint256)\":{\"details\":\"Only the owner can update the distribution cap.\",\"params\":{\"newDistributionCap_\":\"The new distribution cap (0 for no cap).\"}},\"token()\":{\"returns\":{\"_0\":\"The ERC20 token being distributed.\"}},\"totalDistributed()\":{\"returns\":{\"_0\":\"The total amount distributed.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"withdrawTokens(address)\":{\"params\":{\"to\":\"The address to send the withdrawn tokens to.\"}}},\"stateVariables\":{\"_distributionCap\":{\"details\":\"Set to 0 for no cap. Used to limit total distributions.\"},\"_totalDistributed\":{\"details\":\"Tracks the cumulative amount of tokens that have been distributed.\"}},\"title\":\"ATK Push Airdrop Implementation\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyDistributed()\":[{\"notice\":\"Thrown when tokens have already been distributed to a specific index.\"}],\"BatchSizeExceedsLimit()\":[{\"notice\":\"Error indicating that the batch size exceeds the maximum allowed limit.\"}],\"DistributionCapExceeded()\":[{\"notice\":\"Thrown when a distribution would exceed the configured distribution cap.\"}],\"InvalidClaimTrackerAddress()\":[{\"notice\":\"Error indicating that an invalid claim tracker address was provided.\"}],\"InvalidDistributionAddress()\":[{\"notice\":\"Thrown when attempting to distribute to an invalid address.\"}],\"InvalidInputArrayLengths()\":[{\"notice\":\"Error indicating that input array lengths do not match in batch operations.\"}],\"InvalidMerkleProof()\":[{\"notice\":\"Error indicating that a provided Merkle proof is invalid for the claim parameters.\"}],\"InvalidMerkleRoot()\":[{\"notice\":\"Error indicating that a provided Merkle root is invalid.\"}],\"InvalidTokenAddress()\":[{\"notice\":\"Error indicating that an invalid token address was provided.\"}],\"InvalidWithdrawalAddress()\":[{\"notice\":\"Error indicating that an invalid withdrawal address was provided.\"}],\"PushAirdropClaimNotAllowed()\":[{\"notice\":\"Thrown when attempting to claim tokens from a push airdrop.\"}],\"ZeroAmountToDistribute()\":[{\"notice\":\"Thrown when attempting to distribute zero tokens.\"}]},\"events\":{\"BatchClaimed(address,uint256,uint256[],uint256[])\":{\"notice\":\"Emitted when a user claims multiple allocations in a single transaction.\"},\"BatchTokensDistributed(uint256,uint256,uint256[])\":{\"notice\":\"Emitted when tokens are distributed to multiple recipients in a batch.\"},\"Claimed(address,uint256,uint256)\":{\"notice\":\"Emitted when a user successfully claims their airdrop allocation.\"},\"DistributionCapUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the distribution cap is updated.\"},\"TokensDistributed(address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are distributed to a recipient.\"},\"TokensWithdrawn(address,uint256)\":{\"notice\":\"Emitted when the contract owner withdraws unclaimed tokens.\"}},\"kind\":\"user\",\"methods\":{\"MAX_BATCH_SIZE()\":{\"notice\":\"Maximum number of items allowed in batch operations to prevent OOM and gas limit issues.\"},\"batchClaim(uint256[],uint256[],bytes32[][])\":{\"notice\":\"Claims tokens for multiple recipients - NOT ALLOWED in push airdrops.\"},\"batchDistribute(uint256[],address[],uint256[],bytes32[][])\":{\"notice\":\"Distributes tokens to multiple recipients in a single transaction.\"},\"claim(uint256,uint256,bytes32[])\":{\"notice\":\"Claims tokens for a recipient - NOT ALLOWED in push airdrops.\"},\"claimTracker()\":{\"notice\":\"Returns the claim tracker contract.\"},\"distribute(uint256,address,uint256,bytes32[])\":{\"notice\":\"Distributes tokens to a single recipient with Merkle proof verification.\"},\"distributionCap()\":{\"notice\":\"Returns the distribution cap.\"},\"getClaimedAmount(uint256)\":{\"notice\":\"Gets the amount already claimed for a specific index.\"},\"initialize(address,bytes32,address,uint256)\":{\"notice\":\"Initializes the push airdrop contract with specified parameters.\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"Checks if a claim has been fully claimed for a specific index.\"},\"isDistributed(uint256)\":{\"notice\":\"Checks if tokens have been distributed to a specific index.\"},\"merkleRoot()\":{\"notice\":\"Returns the Merkle root for verifying airdrop claims.\"},\"setDistributionCap(uint256)\":{\"notice\":\"Updates the distribution cap.\"},\"token()\":{\"notice\":\"Returns the token being distributed in this airdrop.\"},\"totalDistributed()\":{\"notice\":\"Returns the total amount of tokens distributed so far.\"},\"withdrawTokens(address)\":{\"notice\":\"Allows the owner to withdraw any tokens remaining in the contract.\"}},\"notice\":\"Implementation of a push airdrop contract where only the admin can distribute tokens to recipients in the ATK Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/addons/airdrop/push-airdrop/ATKPushAirdropImplementation.sol\":\"ATKPushAirdropImplementation\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/addons/airdrop/ATKAirdrop.sol\":{\"keccak256\":\"0xd0e004c6ebab9fb2ee0a888b59da8e8429a22e9e1bb9f7b522adccdd477c8839\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://99efc79da77add06b1b5700301030859dae8ed5c3ca5044a3ff51906c0d41468\",\"dweb:/ipfs/QmYWCUkifCfVyA53P54siBGeKpMNekxjyZtbaJ4kbkgQBn\"]},\"contracts/addons/airdrop/ATKAirdropErrors.sol\":{\"keccak256\":\"0xa93b24c2e8660cad5b9941dc0d41aac535af781e66f36d5f2fddf1c692998b4a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://92dff09331337aae31cc944bd0d6394da4f360be163ed55e36396139f3b44b9b\",\"dweb:/ipfs/Qmc6t58jdku5FhJ61b2B6ajjh8BNt2xc46vL7qYW25oPEg\"]},\"contracts/addons/airdrop/IATKAirdrop.sol\":{\"keccak256\":\"0x5693909b573592bc415bc92930d365b8ec1d7ef8eddc0a9e45e3fb3ca07c9eb7\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://fbeaa32c2f1ad5513f01abb8500f05fc86e756180a386f933f502ae8f8457fee\",\"dweb:/ipfs/QmciPuDp6YuJjHuGTJxpi7eBBSL2Ac1aX9p8US7wP7YzA7\"]},\"contracts/addons/airdrop/claim-tracker/ATKBitmapClaimTracker.sol\":{\"keccak256\":\"0xad4a4e867e9592c44569e4a24d9e26357261a40c63adb8eaf149317a420d025c\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://34ef63b749eaf024b164d2d5edf3fa619a467f52097db9c20ed12c28cfecd1d0\",\"dweb:/ipfs/QmSparQqF7QMVo4zGugd3aNRZdBJGSAFmz8FFb5ysVTQ9V\"]},\"contracts/addons/airdrop/claim-tracker/IATKClaimTracker.sol\":{\"keccak256\":\"0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f\",\"dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne\"]},\"contracts/addons/airdrop/push-airdrop/ATKPushAirdropErrors.sol\":{\"keccak256\":\"0xf569486818486846fcc854365e21bfc279e1d2527e88ca5b8b0b6f73e7c280ef\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://b7cef762f1b66bcfa638020d992b81ce94b3b9ae8526218c243692e71514b4cc\",\"dweb:/ipfs/Qmf72qnmJSxU13ar1wQTgRwm497hVJyCJ29cbEHJNf5Zvy\"]},\"contracts/addons/airdrop/push-airdrop/ATKPushAirdropImplementation.sol\":{\"keccak256\":\"0x9f9b2c1f31982d9f2d22c0c2939bdf32dbbc656c076475fc45e6a0d28feff5dd\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://2638e6bc017265dcc7467b45e301ab6fd1f92b950c4215998b115ae2f9aa3bb7\",\"dweb:/ipfs/QmbCVhDgQD9xys5vA2VaU2QVf4EHzwMygycoXtZRVRVc9B\"]},\"contracts/addons/airdrop/push-airdrop/IATKPushAirdrop.sol\":{\"keccak256\":\"0x213d72f20969e05bcee296ae6c8e045f35b7097b88a868232ba548480c49a9a7\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://b9b66ca6f17ffde3198a1689a6e706280086435f13da18ac939f538b0ae2e615\",\"dweb:/ipfs/QmZAaZHhbyYsRVx1XSAQzVgpcK21BJsS6bbRWVTmKayPAw\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol\":{\"keccak256\":\"0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758\",\"dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://19ae787a7dd001269cd60a394b1a5261b78925a0fc3a6f927beb2986a9aa56cf\",\"dweb:/ipfs/QmYLfXiuKmcRgTDBEDXMMjXU8t6JxsspUmjxYzqWS55oEv\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AlreadyDistributed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BatchSizeExceedsLimit"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DistributionCapExceeded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidClaimTrackerAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidDistributionAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInitialization"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInputArrayLengths"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidMerkleProof"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidMerkleRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidTokenAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidWithdrawalAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotInitializing"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableInvalidOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableUnauthorizedAccount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "PushAirdropClaimNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ReentrancyGuardReentrantCall"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "SafeERC20FailedOperation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroAmountToDistribute"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimant",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "recipientCount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchTokensDistributed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimant",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Claimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "oldCap",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newCap",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DistributionCapUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "version",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensDistributed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensWithdrawn",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_BATCH_SIZE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "",
              "type": "bytes32[][]"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "batchClaim"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "merkleProofs",
              "type": "bytes32[][]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchDistribute"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimTracker",
          "outputs": [
            {
              "internalType": "contract IATKClaimTracker",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "distribute"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "distributionCap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getClaimedAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token_",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "root_",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionCap_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isDistributed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTrustedForwarder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "merkleRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newDistributionCap_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDistributionCap"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalDistributed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedForwarder",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTokens"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchClaim(uint256[],uint256[],bytes32[][])": {
            "details": "Overrides the abstract batchClaim function from ATKAirdrop to prevent user-initiated claims.      In push airdrops, only the admin can distribute tokens.      All parameters are unused as this function always reverts."
          },
          "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
            "details": "Only the contract owner can distribute tokens. Batch version for gas efficiency.",
            "params": {
              "amounts": "The amounts of tokens to distribute to each recipient.",
              "indices": "The indices of the distributions in the Merkle tree.",
              "merkleProofs": "The Merkle proof arrays for verification of each distribution.",
              "recipients": "The addresses to receive tokens."
            }
          },
          "claim(uint256,uint256,bytes32[])": {
            "details": "Overrides the abstract claim function from ATKAirdrop to prevent user-initiated claims.      In push airdrops, only the admin can distribute tokens.      All parameters are unused as this function always reverts."
          },
          "claimTracker()": {
            "returns": {
              "_0": "The claim tracker contract."
            }
          },
          "constructor": {
            "custom:oz-upgrades-unsafe-allow": "constructor",
            "params": {
              "forwarder_": "The address of the forwarder contract."
            }
          },
          "distribute(uint256,address,uint256,bytes32[])": {
            "details": "Only the contract owner can distribute tokens. Verifies Merkle proof and distribution cap.",
            "params": {
              "amount": "The amount of tokens to distribute.",
              "index": "The index of the distribution in the Merkle tree.",
              "merkleProof": "The Merkle proof array for verification.",
              "recipient": "The address to receive tokens."
            }
          },
          "distributionCap()": {
            "returns": {
              "_0": "The maximum tokens that can be distributed (0 for no cap)."
            }
          },
          "getClaimedAmount(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "claimedAmount The amount already claimed for this index."
            }
          },
          "initialize(address,bytes32,address,uint256)": {
            "details": "Sets up the base airdrop functionality and push-specific parameters.      Deploys its own bitmap claim tracker for efficient distribution tracking.",
            "params": {
              "distributionCap_": "The maximum tokens that can be distributed (0 for no cap).",
              "owner_": "The initial owner of the contract (admin who can distribute tokens).",
              "root_": "The Merkle root for verifying distributions.",
              "token_": "The address of the ERC20 token to be distributed."
            }
          },
          "isClaimed(uint256,uint256)": {
            "params": {
              "index": "The index to check in the Merkle tree.",
              "totalAmount": "The total amount allocated for this index."
            },
            "returns": {
              "_0": "claimed True if the index has been fully claimed, false otherwise."
            }
          },
          "isDistributed(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "distributed True if tokens have been distributed for this index."
            }
          },
          "isTrustedForwarder(address)": {
            "details": "Indicates whether any particular address is the trusted forwarder."
          },
          "merkleRoot()": {
            "returns": {
              "_0": "The Merkle root for verifying airdrop claims."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "setDistributionCap(uint256)": {
            "details": "Only the owner can update the distribution cap.",
            "params": {
              "newDistributionCap_": "The new distribution cap (0 for no cap)."
            }
          },
          "token()": {
            "returns": {
              "_0": "The ERC20 token being distributed."
            }
          },
          "totalDistributed()": {
            "returns": {
              "_0": "The total amount distributed."
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "trustedForwarder()": {
            "details": "Returns the address of the trusted forwarder."
          },
          "withdrawTokens(address)": {
            "params": {
              "to": "The address to send the withdrawn tokens to."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MAX_BATCH_SIZE()": {
            "notice": "Maximum number of items allowed in batch operations to prevent OOM and gas limit issues."
          },
          "batchClaim(uint256[],uint256[],bytes32[][])": {
            "notice": "Claims tokens for multiple recipients - NOT ALLOWED in push airdrops."
          },
          "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
            "notice": "Distributes tokens to multiple recipients in a single transaction."
          },
          "claim(uint256,uint256,bytes32[])": {
            "notice": "Claims tokens for a recipient - NOT ALLOWED in push airdrops."
          },
          "claimTracker()": {
            "notice": "Returns the claim tracker contract."
          },
          "distribute(uint256,address,uint256,bytes32[])": {
            "notice": "Distributes tokens to a single recipient with Merkle proof verification."
          },
          "distributionCap()": {
            "notice": "Returns the distribution cap."
          },
          "getClaimedAmount(uint256)": {
            "notice": "Gets the amount already claimed for a specific index."
          },
          "initialize(address,bytes32,address,uint256)": {
            "notice": "Initializes the push airdrop contract with specified parameters."
          },
          "isClaimed(uint256,uint256)": {
            "notice": "Checks if a claim has been fully claimed for a specific index."
          },
          "isDistributed(uint256)": {
            "notice": "Checks if tokens have been distributed to a specific index."
          },
          "merkleRoot()": {
            "notice": "Returns the Merkle root for verifying airdrop claims."
          },
          "setDistributionCap(uint256)": {
            "notice": "Updates the distribution cap."
          },
          "token()": {
            "notice": "Returns the token being distributed in this airdrop."
          },
          "totalDistributed()": {
            "notice": "Returns the total amount of tokens distributed so far."
          },
          "withdrawTokens(address)": {
            "notice": "Allows the owner to withdraw any tokens remaining in the contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/addons/airdrop/push-airdrop/ATKPushAirdropImplementation.sol": "ATKPushAirdropImplementation"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/addons/airdrop/ATKAirdrop.sol": {
        "keccak256": "0xd0e004c6ebab9fb2ee0a888b59da8e8429a22e9e1bb9f7b522adccdd477c8839",
        "urls": [
          "bzz-raw://99efc79da77add06b1b5700301030859dae8ed5c3ca5044a3ff51906c0d41468",
          "dweb:/ipfs/QmYWCUkifCfVyA53P54siBGeKpMNekxjyZtbaJ4kbkgQBn"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/ATKAirdropErrors.sol": {
        "keccak256": "0xa93b24c2e8660cad5b9941dc0d41aac535af781e66f36d5f2fddf1c692998b4a",
        "urls": [
          "bzz-raw://92dff09331337aae31cc944bd0d6394da4f360be163ed55e36396139f3b44b9b",
          "dweb:/ipfs/Qmc6t58jdku5FhJ61b2B6ajjh8BNt2xc46vL7qYW25oPEg"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/IATKAirdrop.sol": {
        "keccak256": "0x5693909b573592bc415bc92930d365b8ec1d7ef8eddc0a9e45e3fb3ca07c9eb7",
        "urls": [
          "bzz-raw://fbeaa32c2f1ad5513f01abb8500f05fc86e756180a386f933f502ae8f8457fee",
          "dweb:/ipfs/QmciPuDp6YuJjHuGTJxpi7eBBSL2Ac1aX9p8US7wP7YzA7"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/claim-tracker/ATKBitmapClaimTracker.sol": {
        "keccak256": "0xad4a4e867e9592c44569e4a24d9e26357261a40c63adb8eaf149317a420d025c",
        "urls": [
          "bzz-raw://34ef63b749eaf024b164d2d5edf3fa619a467f52097db9c20ed12c28cfecd1d0",
          "dweb:/ipfs/QmSparQqF7QMVo4zGugd3aNRZdBJGSAFmz8FFb5ysVTQ9V"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/claim-tracker/IATKClaimTracker.sol": {
        "keccak256": "0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be",
        "urls": [
          "bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f",
          "dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/push-airdrop/ATKPushAirdropErrors.sol": {
        "keccak256": "0xf569486818486846fcc854365e21bfc279e1d2527e88ca5b8b0b6f73e7c280ef",
        "urls": [
          "bzz-raw://b7cef762f1b66bcfa638020d992b81ce94b3b9ae8526218c243692e71514b4cc",
          "dweb:/ipfs/Qmf72qnmJSxU13ar1wQTgRwm497hVJyCJ29cbEHJNf5Zvy"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/push-airdrop/ATKPushAirdropImplementation.sol": {
        "keccak256": "0x9f9b2c1f31982d9f2d22c0c2939bdf32dbbc656c076475fc45e6a0d28feff5dd",
        "urls": [
          "bzz-raw://2638e6bc017265dcc7467b45e301ab6fd1f92b950c4215998b115ae2f9aa3bb7",
          "dweb:/ipfs/QmbCVhDgQD9xys5vA2VaU2QVf4EHzwMygycoXtZRVRVc9B"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/push-airdrop/IATKPushAirdrop.sol": {
        "keccak256": "0x213d72f20969e05bcee296ae6c8e045f35b7097b88a868232ba548480c49a9a7",
        "urls": [
          "bzz-raw://b9b66ca6f17ffde3198a1689a6e706280086435f13da18ac939f538b0ae2e615",
          "dweb:/ipfs/QmZAaZHhbyYsRVx1XSAQzVgpcK21BJsS6bbRWVTmKayPAw"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/Ownable.sol": {
        "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        "urls": [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC1363.sol": {
        "keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        "urls": [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC165.sol": {
        "keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        "urls": [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/interfaces/IERC20.sol": {
        "keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        "urls": [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5",
        "urls": [
          "bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508",
          "dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/cryptography/Hashes.sol": {
        "keccak256": "0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269",
        "urls": [
          "bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11",
          "dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/cryptography/MerkleProof.sol": {
        "keccak256": "0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134",
        "urls": [
          "bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6",
          "dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/access/OwnableUpgradeable.sol": {
        "keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
        "urls": [
          "bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
          "dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol": {
        "keccak256": "0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb",
        "urls": [
          "bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758",
          "dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol": {
        "keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
        "urls": [
          "bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
          "dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol": {
        "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
        "urls": [
          "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
          "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ReentrancyGuardUpgradeable.sol": {
        "keccak256": "0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866",
        "urls": [
          "bzz-raw://19ae787a7dd001269cd60a394b1a5261b78925a0fc3a6f927beb2986a9aa56cf",
          "dweb:/ipfs/QmYLfXiuKmcRgTDBEDXMMjXU8t6JxsspUmjxYzqWS55oEv"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "MAX_BATCH_SIZE()": {
        "notice": "Maximum number of items allowed in batch operations to prevent OOM and gas limit issues."
      },
      "batchClaim(uint256[],uint256[],bytes32[][])": {
        "notice": "Claims tokens for multiple recipients - NOT ALLOWED in push airdrops."
      },
      "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
        "notice": "Distributes tokens to multiple recipients in a single transaction."
      },
      "claim(uint256,uint256,bytes32[])": {
        "notice": "Claims tokens for a recipient - NOT ALLOWED in push airdrops."
      },
      "claimTracker()": {
        "notice": "Returns the claim tracker contract."
      },
      "distribute(uint256,address,uint256,bytes32[])": {
        "notice": "Distributes tokens to a single recipient with Merkle proof verification."
      },
      "distributionCap()": {
        "notice": "Returns the distribution cap."
      },
      "getClaimedAmount(uint256)": {
        "notice": "Gets the amount already claimed for a specific index."
      },
      "initialize(address,bytes32,address,uint256)": {
        "notice": "Initializes the push airdrop contract with specified parameters."
      },
      "isClaimed(uint256,uint256)": {
        "notice": "Checks if a claim has been fully claimed for a specific index."
      },
      "isDistributed(uint256)": {
        "notice": "Checks if tokens have been distributed to a specific index."
      },
      "merkleRoot()": {
        "notice": "Returns the Merkle root for verifying airdrop claims."
      },
      "setDistributionCap(uint256)": {
        "notice": "Updates the distribution cap."
      },
      "token()": {
        "notice": "Returns the token being distributed in this airdrop."
      },
      "totalDistributed()": {
        "notice": "Returns the total amount of tokens distributed so far."
      },
      "withdrawTokens(address)": {
        "notice": "Allows the owner to withdraw any tokens remaining in the contract."
      }
    },
    "events": {
      "BatchClaimed(address,uint256,uint256[],uint256[])": {
        "notice": "Emitted when a user claims multiple allocations in a single transaction."
      },
      "BatchTokensDistributed(uint256,uint256,uint256[])": {
        "notice": "Emitted when tokens are distributed to multiple recipients in a batch."
      },
      "Claimed(address,uint256,uint256)": {
        "notice": "Emitted when a user successfully claims their airdrop allocation."
      },
      "DistributionCapUpdated(uint256,uint256)": {
        "notice": "Emitted when the distribution cap is updated."
      },
      "TokensDistributed(address,uint256,uint256)": {
        "notice": "Emitted when tokens are distributed to a recipient."
      },
      "TokensWithdrawn(address,uint256)": {
        "notice": "Emitted when the contract owner withdraws unclaimed tokens."
      }
    },
    "errors": {
      "AlreadyDistributed()": [
        {
          "notice": "Thrown when tokens have already been distributed to a specific index."
        }
      ],
      "BatchSizeExceedsLimit()": [
        {
          "notice": "Error indicating that the batch size exceeds the maximum allowed limit."
        }
      ],
      "DistributionCapExceeded()": [
        {
          "notice": "Thrown when a distribution would exceed the configured distribution cap."
        }
      ],
      "InvalidClaimTrackerAddress()": [
        {
          "notice": "Error indicating that an invalid claim tracker address was provided."
        }
      ],
      "InvalidDistributionAddress()": [
        {
          "notice": "Thrown when attempting to distribute to an invalid address."
        }
      ],
      "InvalidInputArrayLengths()": [
        {
          "notice": "Error indicating that input array lengths do not match in batch operations."
        }
      ],
      "InvalidMerkleProof()": [
        {
          "notice": "Error indicating that a provided Merkle proof is invalid for the claim parameters."
        }
      ],
      "InvalidMerkleRoot()": [
        {
          "notice": "Error indicating that a provided Merkle root is invalid."
        }
      ],
      "InvalidTokenAddress()": [
        {
          "notice": "Error indicating that an invalid token address was provided."
        }
      ],
      "InvalidWithdrawalAddress()": [
        {
          "notice": "Error indicating that an invalid withdrawal address was provided."
        }
      ],
      "PushAirdropClaimNotAllowed()": [
        {
          "notice": "Thrown when attempting to claim tokens from a push airdrop."
        }
      ],
      "ZeroAmountToDistribute()": [
        {
          "notice": "Thrown when attempting to distribute zero tokens."
        }
      ]
    },
    "notice": "Implementation of a push airdrop contract where only the admin can distribute tokens to recipients in the ATK Protocol."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "This contract implements an admin-controlled distribution system where:      - Only the contract owner can distribute tokens to recipients      - Recipients cannot claim tokens themselves - they must be pushed by the admin      - Uses Merkle proof verification for secure distribution validation      - Tracks distributed status using ATKBitmapClaimTracker      - Supports both single and batch distributions      - Includes optional distribution cap for controlling total distributions      The contract extends ATKAirdrop but overrides claim functions to prevent user-initiated claims.",
    "methods": {
      "batchClaim(uint256[],uint256[],bytes32[][])": {
        "details": "Overrides the abstract batchClaim function from ATKAirdrop to prevent user-initiated claims.      In push airdrops, only the admin can distribute tokens.      All parameters are unused as this function always reverts."
      },
      "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
        "details": "Only the contract owner can distribute tokens. Batch version for gas efficiency.",
        "params": {
          "amounts": "The amounts of tokens to distribute to each recipient.",
          "indices": "The indices of the distributions in the Merkle tree.",
          "merkleProofs": "The Merkle proof arrays for verification of each distribution.",
          "recipients": "The addresses to receive tokens."
        }
      },
      "claim(uint256,uint256,bytes32[])": {
        "details": "Overrides the abstract claim function from ATKAirdrop to prevent user-initiated claims.      In push airdrops, only the admin can distribute tokens.      All parameters are unused as this function always reverts."
      },
      "claimTracker()": {
        "returns": {
          "_0": "The claim tracker contract."
        }
      },
      "constructor": {
        "params": {
          "forwarder_": "The address of the forwarder contract."
        }
      },
      "distribute(uint256,address,uint256,bytes32[])": {
        "details": "Only the contract owner can distribute tokens. Verifies Merkle proof and distribution cap.",
        "params": {
          "amount": "The amount of tokens to distribute.",
          "index": "The index of the distribution in the Merkle tree.",
          "merkleProof": "The Merkle proof array for verification.",
          "recipient": "The address to receive tokens."
        }
      },
      "distributionCap()": {
        "returns": {
          "_0": "The maximum tokens that can be distributed (0 for no cap)."
        }
      },
      "getClaimedAmount(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "claimedAmount The amount already claimed for this index."
        }
      },
      "initialize(address,bytes32,address,uint256)": {
        "details": "Sets up the base airdrop functionality and push-specific parameters.      Deploys its own bitmap claim tracker for efficient distribution tracking.",
        "params": {
          "distributionCap_": "The maximum tokens that can be distributed (0 for no cap).",
          "owner_": "The initial owner of the contract (admin who can distribute tokens).",
          "root_": "The Merkle root for verifying distributions.",
          "token_": "The address of the ERC20 token to be distributed."
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "index": "The index to check in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        },
        "returns": {
          "_0": "claimed True if the index has been fully claimed, false otherwise."
        }
      },
      "isDistributed(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "distributed True if tokens have been distributed for this index."
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "merkleRoot()": {
        "returns": {
          "_0": "The Merkle root for verifying airdrop claims."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDistributionCap(uint256)": {
        "details": "Only the owner can update the distribution cap.",
        "params": {
          "newDistributionCap_": "The new distribution cap (0 for no cap)."
        }
      },
      "token()": {
        "returns": {
          "_0": "The ERC20 token being distributed."
        }
      },
      "totalDistributed()": {
        "returns": {
          "_0": "The total amount distributed."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "withdrawTokens(address)": {
        "params": {
          "to": "The address to send the withdrawn tokens to."
        }
      }
    },
    "events": {
      "BatchClaimed(address,uint256,uint256[],uint256[])": {
        "params": {
          "amounts": "The amounts claimed for each index.",
          "claimant": "The address that claimed the tokens.",
          "indices": "The indices of the claims in the Merkle tree.",
          "totalAmount": "The total amount of tokens claimed in the batch."
        }
      },
      "BatchTokensDistributed(uint256,uint256,uint256[])": {
        "params": {
          "indices": "The indices of the distributions in the Merkle tree.",
          "recipientCount": "The number of recipients in the batch.",
          "totalAmount": "The total amount of tokens distributed in the batch."
        }
      },
      "Claimed(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens claimed.",
          "claimant": "The address that claimed the tokens.",
          "index": "The index of the claim in the Merkle tree."
        }
      },
      "DistributionCapUpdated(uint256,uint256)": {
        "params": {
          "newCap": "The new distribution cap.",
          "oldCap": "The previous distribution cap."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "TokensDistributed(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens distributed.",
          "index": "The index of the distribution in the Merkle tree.",
          "recipient": "The address that received the tokens."
        }
      },
      "TokensWithdrawn(address,uint256)": {
        "params": {
          "amount": "The amount of tokens withdrawn.",
          "to": "The address receiving the withdrawn tokens."
        }
      }
    },
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "PushAirdropClaimNotAllowed()": [
        {
          "details": "Push airdrops only allow admin-initiated distributions, not user claims."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "title": "ATK Push Airdrop Implementation"
  },
  "id": 8
}