{
  "abi": [
    {
      "type": "function",
      "name": "atkVaultImplementation",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "createVault",
      "inputs": [
        {
          "name": "signers",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "required",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "initialOwner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "salt",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "contractAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "systemAddress_",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "initialAdmin_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "predictVaultAddress",
      "inputs": [
        {
          "name": "signers",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "required",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "initialOwner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "salt",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "predictedAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ATKVaultCreated",
      "inputs": [
        {
          "name": "vault",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "creator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "atkVaultImplementation()": "bcbd9edb",
    "createVault(address[],uint256,address,bytes32)": "7fe6496d",
    "initialize(address,address)": "485cc955",
    "predictVaultAddress(address[],uint256,address,bytes32)": "2f7efa2f"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ATKVaultCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"atkVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"systemAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialAdmin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predictedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Defines the functions for creating and managing ATK Vault contracts\",\"events\":{\"ATKVaultCreated(address,address)\":{\"params\":{\"creator\":\"Address of the account that created the vault\",\"vault\":\"Address of the newly created vault\"}}},\"kind\":\"dev\",\"methods\":{\"atkVaultImplementation()\":{\"details\":\"This function is expected to be available on the factory contract.\"},\"createVault(address[],uint256,address,bytes32)\":{\"params\":{\"initialOwner\":\"Address that will have admin role\",\"required\":\"Number of confirmations required to execute a transaction\",\"salt\":\"Salt value for deterministic address generation\",\"signers\":\"Array of initial signer addresses\"},\"returns\":{\"contractAddress\":\"Address of the newly created vault\"}},\"initialize(address,address)\":{\"params\":{\"initialAdmin_\":\"Address that will have admin role\",\"systemAddress_\":\"Address of the ATK system contract\"}},\"predictVaultAddress(address[],uint256,address,bytes32)\":{\"params\":{\"initialOwner\":\"Address that will have admin role\",\"required\":\"Number of confirmations required to execute a transaction\",\"salt\":\"Salt value for deterministic address generation\",\"signers\":\"Array of initial signer addresses\"},\"returns\":{\"predictedAddress\":\"The predicted address of the vault\"}}},\"title\":\"IATKVaultFactory Interface\",\"version\":1},\"userdoc\":{\"events\":{\"ATKVaultCreated(address,address)\":{\"notice\":\"Emitted when a new ATK Vault contract is created\"}},\"kind\":\"user\",\"methods\":{\"atkVaultImplementation()\":{\"notice\":\"Returns the address of the current ATKVault logic contract (implementation).\"},\"createVault(address[],uint256,address,bytes32)\":{\"notice\":\"Creates a new ATK Vault contract\"},\"initialize(address,address)\":{\"notice\":\"Initializes the factory contract\"},\"predictVaultAddress(address[],uint256,address,bytes32)\":{\"notice\":\"Predicts the address where an ATK Vault contract would be deployed\"}},\"notice\":\"Interface for the ATK Vault Factory contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/addons/vault/IATKVaultFactory.sol\":\"IATKVaultFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/addons/vault/IATKVaultFactory.sol\":{\"keccak256\":\"0xd55488b864ae1faf4e314fc4eddd0afabf2d465854e46afacdb595f5b9a8cd09\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://25ffe5915fbc91500631793972b8465572d0c515e5f300c9142569d9f601708c\",\"dweb:/ipfs/QmWxmXv2VrouDe6G67r8FwJuAN3kR3tNkdaqTCtCkk1HSv\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ATKVaultCreated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "atkVaultImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "signers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "required",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "initialOwner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createVault",
          "outputs": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "systemAddress_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initialAdmin_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "signers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "required",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "initialOwner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "predictVaultAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "predictedAddress",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "atkVaultImplementation()": {
            "details": "This function is expected to be available on the factory contract."
          },
          "createVault(address[],uint256,address,bytes32)": {
            "params": {
              "initialOwner": "Address that will have admin role",
              "required": "Number of confirmations required to execute a transaction",
              "salt": "Salt value for deterministic address generation",
              "signers": "Array of initial signer addresses"
            },
            "returns": {
              "contractAddress": "Address of the newly created vault"
            }
          },
          "initialize(address,address)": {
            "params": {
              "initialAdmin_": "Address that will have admin role",
              "systemAddress_": "Address of the ATK system contract"
            }
          },
          "predictVaultAddress(address[],uint256,address,bytes32)": {
            "params": {
              "initialOwner": "Address that will have admin role",
              "required": "Number of confirmations required to execute a transaction",
              "salt": "Salt value for deterministic address generation",
              "signers": "Array of initial signer addresses"
            },
            "returns": {
              "predictedAddress": "The predicted address of the vault"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "atkVaultImplementation()": {
            "notice": "Returns the address of the current ATKVault logic contract (implementation)."
          },
          "createVault(address[],uint256,address,bytes32)": {
            "notice": "Creates a new ATK Vault contract"
          },
          "initialize(address,address)": {
            "notice": "Initializes the factory contract"
          },
          "predictVaultAddress(address[],uint256,address,bytes32)": {
            "notice": "Predicts the address where an ATK Vault contract would be deployed"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/addons/vault/IATKVaultFactory.sol": "IATKVaultFactory"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/addons/vault/IATKVaultFactory.sol": {
        "keccak256": "0xd55488b864ae1faf4e314fc4eddd0afabf2d465854e46afacdb595f5b9a8cd09",
        "urls": [
          "bzz-raw://25ffe5915fbc91500631793972b8465572d0c515e5f300c9142569d9f601708c",
          "dweb:/ipfs/QmWxmXv2VrouDe6G67r8FwJuAN3kR3tNkdaqTCtCkk1HSv"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "atkVaultImplementation()": {
        "notice": "Returns the address of the current ATKVault logic contract (implementation)."
      },
      "createVault(address[],uint256,address,bytes32)": {
        "notice": "Creates a new ATK Vault contract"
      },
      "initialize(address,address)": {
        "notice": "Initializes the factory contract"
      },
      "predictVaultAddress(address[],uint256,address,bytes32)": {
        "notice": "Predicts the address where an ATK Vault contract would be deployed"
      }
    },
    "events": {
      "ATKVaultCreated(address,address)": {
        "notice": "Emitted when a new ATK Vault contract is created"
      }
    },
    "notice": "Interface for the ATK Vault Factory contract"
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "Defines the functions for creating and managing ATK Vault contracts",
    "methods": {
      "atkVaultImplementation()": {
        "details": "This function is expected to be available on the factory contract."
      },
      "createVault(address[],uint256,address,bytes32)": {
        "params": {
          "initialOwner": "Address that will have admin role",
          "required": "Number of confirmations required to execute a transaction",
          "salt": "Salt value for deterministic address generation",
          "signers": "Array of initial signer addresses"
        },
        "returns": {
          "contractAddress": "Address of the newly created vault"
        }
      },
      "initialize(address,address)": {
        "params": {
          "initialAdmin_": "Address that will have admin role",
          "systemAddress_": "Address of the ATK system contract"
        }
      },
      "predictVaultAddress(address[],uint256,address,bytes32)": {
        "params": {
          "initialOwner": "Address that will have admin role",
          "required": "Number of confirmations required to execute a transaction",
          "salt": "Salt value for deterministic address generation",
          "signers": "Array of initial signer addresses"
        },
        "returns": {
          "predictedAddress": "The predicted address of the vault"
        }
      }
    },
    "events": {
      "ATKVaultCreated(address,address)": {
        "params": {
          "creator": "Address of the account that created the vault",
          "vault": "Address of the newly created vault"
        }
      }
    },
    "title": "IATKVaultFactory Interface"
  },
  "id": 29
}