{
  "abi": [
    {
      "type": "function",
      "name": "addIdentityToStorage",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "internalType": "contract IIdentity"
        },
        {
          "name": "_country",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bindIdentityRegistry",
      "inputs": [
        {
          "name": "_identityRegistry",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getRecoveredWalletFromStorage",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isWalletMarkedAsLost",
      "inputs": [
        {
          "name": "userWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "linkWalletRecovery",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "linkedIdentityRegistries",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "markWalletAsLost",
      "inputs": [
        {
          "name": "identityContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "userWallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "modifyStoredIdentity",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "internalType": "contract IIdentity"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "modifyStoredInvestorCountry",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_country",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "removeIdentityFromStorage",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "storedIdentity",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IIdentity"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "storedInvestorCountry",
      "inputs": [
        {
          "name": "_userAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "unbindIdentityRegistry",
      "inputs": [
        {
          "name": "_identityRegistry",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "CountryModified",
      "inputs": [
        {
          "name": "_identityWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_country",
          "type": "uint16",
          "indexed": false,
          "internalType": "uint16"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityModified",
      "inputs": [
        {
          "name": "_oldIdentity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        },
        {
          "name": "_newIdentity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRegistryBound",
      "inputs": [
        {
          "name": "_identityRegistry",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityRegistryUnbound",
      "inputs": [
        {
          "name": "_identityRegistry",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityStored",
      "inputs": [
        {
          "name": "_investorAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityUnstored",
      "inputs": [
        {
          "name": "_investorAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_identity",
          "type": "address",
          "indexed": true,
          "internalType": "contract IIdentity"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "IdentityWalletMarkedAsLost",
      "inputs": [
        {
          "name": "identityContract",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "userWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "markedBy",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WalletRecoveryLinked",
      "inputs": [
        {
          "name": "lostWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newWallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "establishedBy",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addIdentityToStorage(address,address,uint16)": "a53410dd",
    "bindIdentityRegistry(address)": "690a49f9",
    "getRecoveredWalletFromStorage(address)": "05510c89",
    "isWalletMarkedAsLost(address)": "da7b67f6",
    "linkWalletRecovery(address,address)": "e99cff52",
    "linkedIdentityRegistries()": "bf9eb959",
    "markWalletAsLost(address,address)": "f63304f6",
    "modifyStoredIdentity(address,address)": "e805cf86",
    "modifyStoredInvestorCountry(address,uint16)": "9f3418d5",
    "removeIdentityFromStorage(address)": "cf191bcd",
    "storedIdentity(address)": "7988d3a5",
    "storedInvestorCountry(address)": "727e13bc",
    "supportsInterface(bytes4)": "01ffc9a7",
    "unbindIdentityRegistry(address)": "97a012f7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"CountryModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryUnbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"IdentityStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"IdentityUnstored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"markedBy\",\"type\":\"address\"}],\"name\":\"IdentityWalletMarkedAsLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"establishedBy\",\"type\":\"address\"}],\"name\":\"WalletRecoveryLinked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"addIdentityToStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"bindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"}],\"name\":\"getRecoveredWalletFromStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"isWalletMarkedAsLost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"linkWalletRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkedIdentityRegistries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"markWalletAsLost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"modifyStoredIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"modifyStoredInvestorCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"removeIdentityFromStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedIdentity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"storedInvestorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"unbindIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CountryModified(address,uint16)\":{\"details\":\"This event is emitted when an Identity's country has been updated.\",\"params\":{\"_country\":\"is the numeric code (ISO 3166-1) of the new country.\",\"_identityWallet\":\"is the address on which the country has been updated.\"}},\"IdentityModified(address,address)\":{\"details\":\"This event is emitted when an Identity has been updated.\",\"params\":{\"_newIdentity\":\"is the new Identity contract's.\",\"_oldIdentity\":\"is the old Identity contract's address to update.\"}},\"IdentityRegistryBound(address)\":{\"details\":\"This event is emitted when an Identity Registry is bound to the storage contract.\",\"params\":{\"_identityRegistry\":\"is the address of the identity registry added.\"}},\"IdentityRegistryUnbound(address)\":{\"details\":\"This event is emitted when an Identity Registry is unbound from the storage contract.\",\"params\":{\"_identityRegistry\":\"is the address of the identity registry removed.\"}},\"IdentityStored(address,address)\":{\"details\":\"This event is emitted when an Identity is registered into the storage contract.\",\"params\":{\"_identity\":\"` is the address of the Identity smart contract (onchainID).\",\"_investorAddress\":\"` is the address of the investor's wallet.\"}},\"IdentityUnstored(address,address)\":{\"details\":\"This event is emitted when an Identity is removed from the storage contract.\",\"params\":{\"_identity\":\"is the address of the Identity smart contract (onchainID).\",\"_investorAddress\":\"is the address of the investor's wallet.\"}},\"IdentityWalletMarkedAsLost(address,address,address)\":{\"params\":{\"identityContract\":\"The IIdentity contract associated with the user wallet.\",\"markedBy\":\"The address (typically the Identity Registry contract) that initiated this action.\",\"userWallet\":\"The user wallet address that was marked as lost.\"}},\"WalletRecoveryLinked(address,address,address)\":{\"params\":{\"establishedBy\":\"The address that established this recovery link.\",\"lostWallet\":\"The lost wallet address.\",\"newWallet\":\"The new replacement wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"addIdentityToStorage(address,address,uint16)\":{\"details\":\"adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityStored` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"bindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to add.\"}},\"getRecoveredWalletFromStorage(address)\":{\"details\":\"This is the key function for token recovery - allows checking if caller is authorized to recover from lostWallet.\",\"params\":{\"lostWallet\":\"The lost wallet address.\"},\"returns\":{\"_0\":\"The new wallet address that replaced the lost wallet, or address(0) if not found.\"}},\"isWalletMarkedAsLost(address)\":{\"details\":\"A \\\"globally lost\\\" wallet means it has been declared lost in the context of at least one identity      it was associated with.\",\"params\":{\"userWallet\":\"The user wallet address to check.\"},\"returns\":{\"_0\":\"True if the wallet has been marked as lost at least once, false otherwise.\"}},\"linkWalletRecovery(address,address)\":{\"details\":\"This creates a bidirectional mapping for token recovery purposes.\",\"params\":{\"lostWallet\":\"The lost wallet address.\",\"newWallet\":\"The new replacement wallet address.\"}},\"linkedIdentityRegistries()\":{\"details\":\"Returns the identity registries linked to the storage contract\"},\"markWalletAsLost(address,address)\":{\"details\":\"Called by an authorized Identity Registry. This indicates the wallet should no longer be considered active      for verification or operations related to this specific identity, and potentially globally.\",\"params\":{\"identityContract\":\"The IIdentity contract address to which the userWallet was associated.\",\"userWallet\":\"The user wallet address to be marked as lost.\"}},\"modifyStoredIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityModified` event\",\"_userAddress\":\"The address of the user\"}},\"modifyStoredInvestorCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryModified` event\",\"_userAddress\":\"The address of the user\"}},\"removeIdentityFromStorage(address)\":{\"details\":\"Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityUnstored` event\"}},\"storedIdentity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"storedInvestorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"unbindIdentityRegistry(address)\":{\"params\":{\"_identityRegistry\":\"The identity registry address to remove.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"IdentityWalletMarkedAsLost(address,address,address)\":{\"notice\":\"Emitted when a user wallet is marked as lost for a specific identity contract within the storage.\"},\"WalletRecoveryLinked(address,address,address)\":{\"notice\":\"Emitted when a wallet recovery link is established between a lost wallet and its replacement.\"}},\"kind\":\"user\",\"methods\":{\"bindIdentityRegistry(address)\":{\"notice\":\"Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS\"},\"getRecoveredWalletFromStorage(address)\":{\"notice\":\"Gets the new wallet address that replaced a lost wallet during recovery.\"},\"isWalletMarkedAsLost(address)\":{\"notice\":\"Checks if a user wallet is globally marked as lost in the storage.\"},\"linkWalletRecovery(address,address)\":{\"notice\":\"Establishes a recovery link between a lost wallet and its replacement.\"},\"markWalletAsLost(address,address)\":{\"notice\":\"Marks a user wallet as lost for a specific identity contract in the storage.\"},\"unbindIdentityRegistry(address)\":{\"notice\":\"Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/interface/ISMARTIdentityRegistryStorage.sol\":\"ISMARTIdentityRegistryStorage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol\":{\"keccak256\":\"0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3\",\"dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG\"]},\"contracts/smart/interface/ISMARTIdentityRegistryStorage.sol\":{\"keccak256\":\"0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52\",\"dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb\",\"dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol\":{\"keccak256\":\"0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e\",\"dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8\",\"dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_identityWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CountryModified",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IIdentity",
              "name": "_oldIdentity",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_newIdentity",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityModified",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_identityRegistry",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityRegistryBound",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_identityRegistry",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityRegistryUnbound",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_investorAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityStored",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_investorAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityUnstored",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "identityContract",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "userWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "markedBy",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityWalletMarkedAsLost",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "establishedBy",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "WalletRecoveryLinked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addIdentityToStorage"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_identityRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "bindIdentityRegistry"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRecoveredWalletFromStorage",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "userWallet",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isWalletMarkedAsLost",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lostWallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "newWallet",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "linkWalletRecovery"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "linkedIdentityRegistries",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "identityContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "userWallet",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "markWalletAsLost"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "contract IIdentity",
              "name": "_identity",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "modifyStoredIdentity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "modifyStoredInvestorCountry"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeIdentityFromStorage"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "storedIdentity",
          "outputs": [
            {
              "internalType": "contract IIdentity",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "storedInvestorCountry",
          "outputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_identityRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unbindIdentityRegistry"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addIdentityToStorage(address,address,uint16)": {
            "details": "adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract",
            "params": {
              "_country": "The country of the investor  emits `IdentityStored` event",
              "_identity": "The address of the user's identity contract",
              "_userAddress": "The address of the user"
            }
          },
          "bindIdentityRegistry(address)": {
            "params": {
              "_identityRegistry": "The identity registry address to add."
            }
          },
          "getRecoveredWalletFromStorage(address)": {
            "details": "This is the key function for token recovery - allows checking if caller is authorized to recover from lostWallet.",
            "params": {
              "lostWallet": "The lost wallet address."
            },
            "returns": {
              "_0": "The new wallet address that replaced the lost wallet, or address(0) if not found."
            }
          },
          "isWalletMarkedAsLost(address)": {
            "details": "A \"globally lost\" wallet means it has been declared lost in the context of at least one identity      it was associated with.",
            "params": {
              "userWallet": "The user wallet address to check."
            },
            "returns": {
              "_0": "True if the wallet has been marked as lost at least once, false otherwise."
            }
          },
          "linkWalletRecovery(address,address)": {
            "details": "This creates a bidirectional mapping for token recovery purposes.",
            "params": {
              "lostWallet": "The lost wallet address.",
              "newWallet": "The new replacement wallet address."
            }
          },
          "linkedIdentityRegistries()": {
            "details": "Returns the identity registries linked to the storage contract"
          },
          "markWalletAsLost(address,address)": {
            "details": "Called by an authorized Identity Registry. This indicates the wallet should no longer be considered active      for verification or operations related to this specific identity, and potentially globally.",
            "params": {
              "identityContract": "The IIdentity contract address to which the userWallet was associated.",
              "userWallet": "The user wallet address to be marked as lost."
            }
          },
          "modifyStoredIdentity(address,address)": {
            "details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
            "params": {
              "_identity": "The address of the user's new identity contract  emits `IdentityModified` event",
              "_userAddress": "The address of the user"
            }
          },
          "modifyStoredInvestorCountry(address,uint16)": {
            "details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
            "params": {
              "_country": "The new country of the user  emits `CountryModified` event",
              "_userAddress": "The address of the user"
            }
          },
          "removeIdentityFromStorage(address)": {
            "details": "Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract",
            "params": {
              "_userAddress": "The address of the user to be removed  emits `IdentityUnstored` event"
            }
          },
          "storedIdentity(address)": {
            "details": "Returns the onchainID of an investor.",
            "params": {
              "_userAddress": "The wallet of the investor"
            }
          },
          "storedInvestorCountry(address)": {
            "details": "Returns the country code of an investor.",
            "params": {
              "_userAddress": "The wallet of the investor"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "unbindIdentityRegistry(address)": {
            "params": {
              "_identityRegistry": "The identity registry address to remove."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "bindIdentityRegistry(address)": {
            "notice": "Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS"
          },
          "getRecoveredWalletFromStorage(address)": {
            "notice": "Gets the new wallet address that replaced a lost wallet during recovery."
          },
          "isWalletMarkedAsLost(address)": {
            "notice": "Checks if a user wallet is globally marked as lost in the storage."
          },
          "linkWalletRecovery(address,address)": {
            "notice": "Establishes a recovery link between a lost wallet and its replacement."
          },
          "markWalletAsLost(address,address)": {
            "notice": "Marks a user wallet as lost for a specific identity contract in the storage."
          },
          "unbindIdentityRegistry(address)": {
            "notice": "Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/interface/ISMARTIdentityRegistryStorage.sol": "ISMARTIdentityRegistryStorage"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol": {
        "keccak256": "0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f",
        "urls": [
          "bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3",
          "dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ISMARTIdentityRegistryStorage.sol": {
        "keccak256": "0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985",
        "urls": [
          "bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52",
          "dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol": {
        "keccak256": "0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e",
        "urls": [
          "bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb",
          "dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol": {
        "keccak256": "0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122",
        "urls": [
          "bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e",
          "dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol": {
        "keccak256": "0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862",
        "urls": [
          "bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8",
          "dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "bindIdentityRegistry(address)": {
        "notice": "Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS"
      },
      "getRecoveredWalletFromStorage(address)": {
        "notice": "Gets the new wallet address that replaced a lost wallet during recovery."
      },
      "isWalletMarkedAsLost(address)": {
        "notice": "Checks if a user wallet is globally marked as lost in the storage."
      },
      "linkWalletRecovery(address,address)": {
        "notice": "Establishes a recovery link between a lost wallet and its replacement."
      },
      "markWalletAsLost(address,address)": {
        "notice": "Marks a user wallet as lost for a specific identity contract in the storage."
      },
      "unbindIdentityRegistry(address)": {
        "notice": "Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract"
      }
    },
    "events": {
      "IdentityWalletMarkedAsLost(address,address,address)": {
        "notice": "Emitted when a user wallet is marked as lost for a specific identity contract within the storage."
      },
      "WalletRecoveryLinked(address,address,address)": {
        "notice": "Emitted when a wallet recovery link is established between a lost wallet and its replacement."
      }
    }
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "addIdentityToStorage(address,address,uint16)": {
        "details": "adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract",
        "params": {
          "_country": "The country of the investor  emits `IdentityStored` event",
          "_identity": "The address of the user's identity contract",
          "_userAddress": "The address of the user"
        }
      },
      "bindIdentityRegistry(address)": {
        "params": {
          "_identityRegistry": "The identity registry address to add."
        }
      },
      "getRecoveredWalletFromStorage(address)": {
        "details": "This is the key function for token recovery - allows checking if caller is authorized to recover from lostWallet.",
        "params": {
          "lostWallet": "The lost wallet address."
        },
        "returns": {
          "_0": "The new wallet address that replaced the lost wallet, or address(0) if not found."
        }
      },
      "isWalletMarkedAsLost(address)": {
        "details": "A \"globally lost\" wallet means it has been declared lost in the context of at least one identity      it was associated with.",
        "params": {
          "userWallet": "The user wallet address to check."
        },
        "returns": {
          "_0": "True if the wallet has been marked as lost at least once, false otherwise."
        }
      },
      "linkWalletRecovery(address,address)": {
        "details": "This creates a bidirectional mapping for token recovery purposes.",
        "params": {
          "lostWallet": "The lost wallet address.",
          "newWallet": "The new replacement wallet address."
        }
      },
      "linkedIdentityRegistries()": {
        "details": "Returns the identity registries linked to the storage contract"
      },
      "markWalletAsLost(address,address)": {
        "details": "Called by an authorized Identity Registry. This indicates the wallet should no longer be considered active      for verification or operations related to this specific identity, and potentially globally.",
        "params": {
          "identityContract": "The IIdentity contract address to which the userWallet was associated.",
          "userWallet": "The user wallet address to be marked as lost."
        }
      },
      "modifyStoredIdentity(address,address)": {
        "details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
        "params": {
          "_identity": "The address of the user's new identity contract  emits `IdentityModified` event",
          "_userAddress": "The address of the user"
        }
      },
      "modifyStoredInvestorCountry(address,uint16)": {
        "details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract",
        "params": {
          "_country": "The new country of the user  emits `CountryModified` event",
          "_userAddress": "The address of the user"
        }
      },
      "removeIdentityFromStorage(address)": {
        "details": "Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract",
        "params": {
          "_userAddress": "The address of the user to be removed  emits `IdentityUnstored` event"
        }
      },
      "storedIdentity(address)": {
        "details": "Returns the onchainID of an investor.",
        "params": {
          "_userAddress": "The wallet of the investor"
        }
      },
      "storedInvestorCountry(address)": {
        "details": "Returns the country code of an investor.",
        "params": {
          "_userAddress": "The wallet of the investor"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "unbindIdentityRegistry(address)": {
        "params": {
          "_identityRegistry": "The identity registry address to remove."
        }
      }
    },
    "events": {
      "CountryModified(address,uint16)": {
        "details": "This event is emitted when an Identity's country has been updated.",
        "params": {
          "_country": "is the numeric code (ISO 3166-1) of the new country.",
          "_identityWallet": "is the address on which the country has been updated."
        }
      },
      "IdentityModified(address,address)": {
        "details": "This event is emitted when an Identity has been updated.",
        "params": {
          "_newIdentity": "is the new Identity contract's.",
          "_oldIdentity": "is the old Identity contract's address to update."
        }
      },
      "IdentityRegistryBound(address)": {
        "details": "This event is emitted when an Identity Registry is bound to the storage contract.",
        "params": {
          "_identityRegistry": "is the address of the identity registry added."
        }
      },
      "IdentityRegistryUnbound(address)": {
        "details": "This event is emitted when an Identity Registry is unbound from the storage contract.",
        "params": {
          "_identityRegistry": "is the address of the identity registry removed."
        }
      },
      "IdentityStored(address,address)": {
        "details": "This event is emitted when an Identity is registered into the storage contract.",
        "params": {
          "_identity": "` is the address of the Identity smart contract (onchainID).",
          "_investorAddress": "` is the address of the investor's wallet."
        }
      },
      "IdentityUnstored(address,address)": {
        "details": "This event is emitted when an Identity is removed from the storage contract.",
        "params": {
          "_identity": "is the address of the Identity smart contract (onchainID).",
          "_investorAddress": "is the address of the investor's wallet."
        }
      },
      "IdentityWalletMarkedAsLost(address,address,address)": {
        "params": {
          "identityContract": "The IIdentity contract associated with the user wallet.",
          "markedBy": "The address (typically the Identity Registry contract) that initiated this action.",
          "userWallet": "The user wallet address that was marked as lost."
        }
      },
      "WalletRecoveryLinked(address,address,address)": {
        "params": {
          "establishedBy": "The address that established this recovery link.",
          "lostWallet": "The lost wallet address.",
          "newWallet": "The new replacement wallet address."
        }
      }
    }
  },
  "id": 130
}