{
  "abi": [
    {
      "type": "function",
      "name": "batchClaim",
      "inputs": [
        {
          "name": "indices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "totalAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "merkleProofs",
          "type": "bytes32[][]",
          "internalType": "bytes32[][]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "batchDistribute",
      "inputs": [
        {
          "name": "indices",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "recipients",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "merkleProofs",
          "type": "bytes32[][]",
          "internalType": "bytes32[][]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claim",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "merkleProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claimTracker",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IATKClaimTracker"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "distribute",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "merkleProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "distributionCap",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getClaimedAmount",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isClaimed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isDistributed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "merkleRoot",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setDistributionCap",
      "inputs": [
        {
          "name": "newDistributionCap_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "token",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IERC20"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalDistributed",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawTokens",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "batchClaim(uint256[],uint256[],bytes32[][])": "4be7adee",
    "batchDistribute(uint256[],address[],uint256[],bytes32[][])": "ef692c7d",
    "claim(uint256,uint256,bytes32[])": "ae0b51df",
    "claimTracker()": "222abc11",
    "distribute(uint256,address,uint256,bytes32[])": "4b32102a",
    "distributionCap()": "cd63d930",
    "getClaimedAmount(uint256)": "429c6e5b",
    "isClaimed(uint256,uint256)": "f364c90c",
    "isDistributed(uint256)": "6f62c3a6",
    "merkleRoot()": "2eb4a7ab",
    "name()": "06fdde03",
    "setDistributionCap(uint256)": "b7f1aca8",
    "token()": "fc0c546a",
    "totalDistributed()": "efca2eed",
    "withdrawTokens(address)": "49df728c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTracker\",\"outputs\":[{\"internalType\":\"contract IATKClaimTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isDistributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDistributionCap_\",\"type\":\"uint256\"}],\"name\":\"setDistributionCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"Defines the functions specific to push airdrops where only admins can distribute tokens.\",\"kind\":\"dev\",\"methods\":{\"batchClaim(uint256[],uint256[],bytes32[][])\":{\"params\":{\"indices\":\"The indices of the claims in the Merkle tree.\",\"merkleProofs\":\"The Merkle proofs for each index.\",\"totalAmounts\":\"The total amounts allocated for each index.\"}},\"batchDistribute(uint256[],address[],uint256[],bytes32[][])\":{\"details\":\"Only the contract owner can distribute tokens.\",\"params\":{\"amounts\":\"The amounts of tokens to distribute to each recipient.\",\"indices\":\"The indices of the distributions in the Merkle tree.\",\"merkleProofs\":\"The Merkle proof arrays for verification of each distribution.\",\"recipients\":\"The addresses to receive tokens.\"}},\"claim(uint256,uint256,bytes32[])\":{\"params\":{\"index\":\"The index of the claim in the Merkle tree.\",\"merkleProof\":\"The Merkle proof array.\",\"totalAmount\":\"The total amount allocated for this index.\"}},\"claimTracker()\":{\"returns\":{\"_0\":\"The claim tracker contract.\"}},\"distribute(uint256,address,uint256,bytes32[])\":{\"details\":\"Only the contract owner can distribute tokens.\",\"params\":{\"amount\":\"The amount of tokens to distribute.\",\"index\":\"The index of the distribution in the Merkle tree.\",\"merkleProof\":\"The Merkle proof array for verification.\",\"recipient\":\"The address to receive tokens.\"}},\"distributionCap()\":{\"returns\":{\"_0\":\"The maximum tokens that can be distributed (0 for no cap).\"}},\"getClaimedAmount(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"claimedAmount The amount already claimed for this index.\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"index\":\"The index to check in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"},\"returns\":{\"_0\":\"claimed True if the index has been fully claimed, false otherwise.\"}},\"isDistributed(uint256)\":{\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"_0\":\"distributed True if tokens have been distributed for this index.\"}},\"merkleRoot()\":{\"returns\":{\"_0\":\"The Merkle root for verifying airdrop claims.\"}},\"name()\":{\"returns\":{\"_0\":\"The human-readable name of the airdrop.\"}},\"setDistributionCap(uint256)\":{\"details\":\"Only the owner can update the distribution cap.\",\"params\":{\"newDistributionCap_\":\"The new distribution cap (0 for no cap).\"}},\"token()\":{\"returns\":{\"_0\":\"The ERC20 token being distributed.\"}},\"totalDistributed()\":{\"returns\":{\"_0\":\"The total amount distributed.\"}},\"withdrawTokens(address)\":{\"params\":{\"to\":\"The address to send the withdrawn tokens to.\"}}},\"title\":\"IATKPushAirdrop\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchClaim(uint256[],uint256[],bytes32[][])\":{\"notice\":\"Claims multiple airdrop allocations for the caller in a single transaction.\"},\"batchDistribute(uint256[],address[],uint256[],bytes32[][])\":{\"notice\":\"Distributes tokens to multiple recipients in a single transaction.\"},\"claim(uint256,uint256,bytes32[])\":{\"notice\":\"Claims an airdrop allocation for the caller.\"},\"claimTracker()\":{\"notice\":\"Returns the claim tracker contract.\"},\"distribute(uint256,address,uint256,bytes32[])\":{\"notice\":\"Distributes tokens to a single recipient with Merkle proof verification.\"},\"distributionCap()\":{\"notice\":\"Returns the distribution cap.\"},\"getClaimedAmount(uint256)\":{\"notice\":\"Gets the amount already claimed for a specific index.\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"Checks if a claim has been fully claimed for a specific index.\"},\"isDistributed(uint256)\":{\"notice\":\"Checks if tokens have been distributed to a specific index.\"},\"merkleRoot()\":{\"notice\":\"Returns the Merkle root for verifying airdrop claims.\"},\"name()\":{\"notice\":\"Returns the name of this airdrop.\"},\"setDistributionCap(uint256)\":{\"notice\":\"Updates the distribution cap.\"},\"token()\":{\"notice\":\"Returns the token being distributed in this airdrop.\"},\"totalDistributed()\":{\"notice\":\"Returns the total amount of tokens distributed so far.\"},\"withdrawTokens(address)\":{\"notice\":\"Allows the owner to withdraw any tokens remaining in the contract.\"}},\"notice\":\"Interface for push airdrop contracts in the ATK Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/addons/airdrop/push-airdrop/IATKPushAirdrop.sol\":\"IATKPushAirdrop\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/addons/airdrop/IATKAirdrop.sol\":{\"keccak256\":\"0x5556406001ca17a94dfeb60a9db57417b262020690af11bf58dc5893085b7297\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://f426858498d7594fdc8ec019332bb69689c5d6db8f6b5ee4c51b81d5fd3c2d13\",\"dweb:/ipfs/QmbA7Bc5JRPXn47hAHq9nWQo9LR5EDk18savmyxr5nqiSh\"]},\"contracts/addons/airdrop/claim-tracker/IATKClaimTracker.sol\":{\"keccak256\":\"0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f\",\"dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne\"]},\"contracts/addons/airdrop/push-airdrop/IATKPushAirdrop.sol\":{\"keccak256\":\"0x213d72f20969e05bcee296ae6c8e045f35b7097b88a868232ba548480c49a9a7\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://b9b66ca6f17ffde3198a1689a6e706280086435f13da18ac939f538b0ae2e615\",\"dweb:/ipfs/QmZAaZHhbyYsRVx1XSAQzVgpcK21BJsS6bbRWVTmKayPAw\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "totalAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "merkleProofs",
              "type": "bytes32[][]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchClaim"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "indices",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "merkleProofs",
              "type": "bytes32[][]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchDistribute"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimTracker",
          "outputs": [
            {
              "internalType": "contract IATKClaimTracker",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "distribute"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "distributionCap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getClaimedAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isDistributed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "merkleRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newDistributionCap_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDistributionCap"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalDistributed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTokens"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchClaim(uint256[],uint256[],bytes32[][])": {
            "params": {
              "indices": "The indices of the claims in the Merkle tree.",
              "merkleProofs": "The Merkle proofs for each index.",
              "totalAmounts": "The total amounts allocated for each index."
            }
          },
          "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
            "details": "Only the contract owner can distribute tokens.",
            "params": {
              "amounts": "The amounts of tokens to distribute to each recipient.",
              "indices": "The indices of the distributions in the Merkle tree.",
              "merkleProofs": "The Merkle proof arrays for verification of each distribution.",
              "recipients": "The addresses to receive tokens."
            }
          },
          "claim(uint256,uint256,bytes32[])": {
            "params": {
              "index": "The index of the claim in the Merkle tree.",
              "merkleProof": "The Merkle proof array.",
              "totalAmount": "The total amount allocated for this index."
            }
          },
          "claimTracker()": {
            "returns": {
              "_0": "The claim tracker contract."
            }
          },
          "distribute(uint256,address,uint256,bytes32[])": {
            "details": "Only the contract owner can distribute tokens.",
            "params": {
              "amount": "The amount of tokens to distribute.",
              "index": "The index of the distribution in the Merkle tree.",
              "merkleProof": "The Merkle proof array for verification.",
              "recipient": "The address to receive tokens."
            }
          },
          "distributionCap()": {
            "returns": {
              "_0": "The maximum tokens that can be distributed (0 for no cap)."
            }
          },
          "getClaimedAmount(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "claimedAmount The amount already claimed for this index."
            }
          },
          "isClaimed(uint256,uint256)": {
            "params": {
              "index": "The index to check in the Merkle tree.",
              "totalAmount": "The total amount allocated for this index."
            },
            "returns": {
              "_0": "claimed True if the index has been fully claimed, false otherwise."
            }
          },
          "isDistributed(uint256)": {
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "_0": "distributed True if tokens have been distributed for this index."
            }
          },
          "merkleRoot()": {
            "returns": {
              "_0": "The Merkle root for verifying airdrop claims."
            }
          },
          "name()": {
            "returns": {
              "_0": "The human-readable name of the airdrop."
            }
          },
          "setDistributionCap(uint256)": {
            "details": "Only the owner can update the distribution cap.",
            "params": {
              "newDistributionCap_": "The new distribution cap (0 for no cap)."
            }
          },
          "token()": {
            "returns": {
              "_0": "The ERC20 token being distributed."
            }
          },
          "totalDistributed()": {
            "returns": {
              "_0": "The total amount distributed."
            }
          },
          "withdrawTokens(address)": {
            "params": {
              "to": "The address to send the withdrawn tokens to."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchClaim(uint256[],uint256[],bytes32[][])": {
            "notice": "Claims multiple airdrop allocations for the caller in a single transaction."
          },
          "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
            "notice": "Distributes tokens to multiple recipients in a single transaction."
          },
          "claim(uint256,uint256,bytes32[])": {
            "notice": "Claims an airdrop allocation for the caller."
          },
          "claimTracker()": {
            "notice": "Returns the claim tracker contract."
          },
          "distribute(uint256,address,uint256,bytes32[])": {
            "notice": "Distributes tokens to a single recipient with Merkle proof verification."
          },
          "distributionCap()": {
            "notice": "Returns the distribution cap."
          },
          "getClaimedAmount(uint256)": {
            "notice": "Gets the amount already claimed for a specific index."
          },
          "isClaimed(uint256,uint256)": {
            "notice": "Checks if a claim has been fully claimed for a specific index."
          },
          "isDistributed(uint256)": {
            "notice": "Checks if tokens have been distributed to a specific index."
          },
          "merkleRoot()": {
            "notice": "Returns the Merkle root for verifying airdrop claims."
          },
          "name()": {
            "notice": "Returns the name of this airdrop."
          },
          "setDistributionCap(uint256)": {
            "notice": "Updates the distribution cap."
          },
          "token()": {
            "notice": "Returns the token being distributed in this airdrop."
          },
          "totalDistributed()": {
            "notice": "Returns the total amount of tokens distributed so far."
          },
          "withdrawTokens(address)": {
            "notice": "Allows the owner to withdraw any tokens remaining in the contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/addons/airdrop/push-airdrop/IATKPushAirdrop.sol": "IATKPushAirdrop"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/addons/airdrop/IATKAirdrop.sol": {
        "keccak256": "0x5556406001ca17a94dfeb60a9db57417b262020690af11bf58dc5893085b7297",
        "urls": [
          "bzz-raw://f426858498d7594fdc8ec019332bb69689c5d6db8f6b5ee4c51b81d5fd3c2d13",
          "dweb:/ipfs/QmbA7Bc5JRPXn47hAHq9nWQo9LR5EDk18savmyxr5nqiSh"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/claim-tracker/IATKClaimTracker.sol": {
        "keccak256": "0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be",
        "urls": [
          "bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f",
          "dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/push-airdrop/IATKPushAirdrop.sol": {
        "keccak256": "0x213d72f20969e05bcee296ae6c8e045f35b7097b88a868232ba548480c49a9a7",
        "urls": [
          "bzz-raw://b9b66ca6f17ffde3198a1689a6e706280086435f13da18ac939f538b0ae2e615",
          "dweb:/ipfs/QmZAaZHhbyYsRVx1XSAQzVgpcK21BJsS6bbRWVTmKayPAw"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "batchClaim(uint256[],uint256[],bytes32[][])": {
        "notice": "Claims multiple airdrop allocations for the caller in a single transaction."
      },
      "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
        "notice": "Distributes tokens to multiple recipients in a single transaction."
      },
      "claim(uint256,uint256,bytes32[])": {
        "notice": "Claims an airdrop allocation for the caller."
      },
      "claimTracker()": {
        "notice": "Returns the claim tracker contract."
      },
      "distribute(uint256,address,uint256,bytes32[])": {
        "notice": "Distributes tokens to a single recipient with Merkle proof verification."
      },
      "distributionCap()": {
        "notice": "Returns the distribution cap."
      },
      "getClaimedAmount(uint256)": {
        "notice": "Gets the amount already claimed for a specific index."
      },
      "isClaimed(uint256,uint256)": {
        "notice": "Checks if a claim has been fully claimed for a specific index."
      },
      "isDistributed(uint256)": {
        "notice": "Checks if tokens have been distributed to a specific index."
      },
      "merkleRoot()": {
        "notice": "Returns the Merkle root for verifying airdrop claims."
      },
      "name()": {
        "notice": "Returns the name of this airdrop."
      },
      "setDistributionCap(uint256)": {
        "notice": "Updates the distribution cap."
      },
      "token()": {
        "notice": "Returns the token being distributed in this airdrop."
      },
      "totalDistributed()": {
        "notice": "Returns the total amount of tokens distributed so far."
      },
      "withdrawTokens(address)": {
        "notice": "Allows the owner to withdraw any tokens remaining in the contract."
      }
    },
    "notice": "Interface for push airdrop contracts in the ATK Protocol."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "Defines the functions specific to push airdrops where only admins can distribute tokens.",
    "methods": {
      "batchClaim(uint256[],uint256[],bytes32[][])": {
        "params": {
          "indices": "The indices of the claims in the Merkle tree.",
          "merkleProofs": "The Merkle proofs for each index.",
          "totalAmounts": "The total amounts allocated for each index."
        }
      },
      "batchDistribute(uint256[],address[],uint256[],bytes32[][])": {
        "details": "Only the contract owner can distribute tokens.",
        "params": {
          "amounts": "The amounts of tokens to distribute to each recipient.",
          "indices": "The indices of the distributions in the Merkle tree.",
          "merkleProofs": "The Merkle proof arrays for verification of each distribution.",
          "recipients": "The addresses to receive tokens."
        }
      },
      "claim(uint256,uint256,bytes32[])": {
        "params": {
          "index": "The index of the claim in the Merkle tree.",
          "merkleProof": "The Merkle proof array.",
          "totalAmount": "The total amount allocated for this index."
        }
      },
      "claimTracker()": {
        "returns": {
          "_0": "The claim tracker contract."
        }
      },
      "distribute(uint256,address,uint256,bytes32[])": {
        "details": "Only the contract owner can distribute tokens.",
        "params": {
          "amount": "The amount of tokens to distribute.",
          "index": "The index of the distribution in the Merkle tree.",
          "merkleProof": "The Merkle proof array for verification.",
          "recipient": "The address to receive tokens."
        }
      },
      "distributionCap()": {
        "returns": {
          "_0": "The maximum tokens that can be distributed (0 for no cap)."
        }
      },
      "getClaimedAmount(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "claimedAmount The amount already claimed for this index."
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "index": "The index to check in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        },
        "returns": {
          "_0": "claimed True if the index has been fully claimed, false otherwise."
        }
      },
      "isDistributed(uint256)": {
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "_0": "distributed True if tokens have been distributed for this index."
        }
      },
      "merkleRoot()": {
        "returns": {
          "_0": "The Merkle root for verifying airdrop claims."
        }
      },
      "name()": {
        "returns": {
          "_0": "The human-readable name of the airdrop."
        }
      },
      "setDistributionCap(uint256)": {
        "details": "Only the owner can update the distribution cap.",
        "params": {
          "newDistributionCap_": "The new distribution cap (0 for no cap)."
        }
      },
      "token()": {
        "returns": {
          "_0": "The ERC20 token being distributed."
        }
      },
      "totalDistributed()": {
        "returns": {
          "_0": "The total amount distributed."
        }
      },
      "withdrawTokens(address)": {
        "params": {
          "to": "The address to send the withdrawn tokens to."
        }
      }
    },
    "title": "IATKPushAirdrop"
  },
  "id": 10
}