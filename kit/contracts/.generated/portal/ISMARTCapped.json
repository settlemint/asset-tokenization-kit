{
  "abi": [
    {
      "type": "function",
      "name": "cap",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setCap",
      "inputs": [
        {
          "name": "newCap",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "CapSet",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "cap",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ExceededCap",
      "inputs": [
        {
          "name": "newSupply",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cap",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidCap",
      "inputs": [
        {
          "name": "cap",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "cap()": "355274ea",
    "setCap(uint256)": "47786d37"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ExceededCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"InvalidCap\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ExceededCap(uint256,uint256)\":[{\"details\":\"This error is thrown when a mint operation (creating new tokens) is attempted, but the      resulting total supply would be greater than the pre-defined `cap`.      For example, if the cap is 1,000,000 tokens and current supply is 990,000, attempting to mint      20,000 more tokens would trigger this error because 990,000 + 20,000 = 1,010,000, which is > 1,000,000.\",\"params\":{\"cap\":\"The hard-coded maximum allowed total supply for the token.\",\"newSupply\":\"The total supply that *would have resulted* if the mint operation had proceeded.\"}}],\"InvalidCap(uint256)\":[{\"details\":\"This error is thrown if the cap is set to an invalid value, either during      initialization or when calling `setCap`. An invalid value is either zero or a      value below the current total supply of tokens.\",\"params\":{\"cap\":\"The invalid cap value that was attempted to be set.\"}}]},\"events\":{\"CapSet(address,uint256)\":{\"params\":{\"cap\":\"The new cap value.\",\"sender\":\"The address that set/changed the cap.\"}}},\"kind\":\"dev\",\"methods\":{\"cap()\":{\"details\":\"This function provides a way to query the hard limit on the token's supply.      It is a `view` function, meaning it does not modify the contract's state and does not      cost gas when called externally as a read-only operation (e.g., from a user interface).\",\"returns\":{\"_0\":\"uint256 The maximum number of tokens that can be in circulation.\"}},\"setCap(uint256)\":{\"details\":\"Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.\",\"params\":{\"newCap\":\"The new maximum total supply. Must be >= the current total supply.\"}}},\"title\":\"Interface for the SMART Capped Token Extension\",\"version\":1},\"userdoc\":{\"errors\":{\"ExceededCap(uint256,uint256)\":[{\"notice\":\"Error: Minting would exceed the maximum token supply cap.\"}],\"InvalidCap(uint256)\":[{\"notice\":\"Error: An invalid cap value was provided.\"}]},\"events\":{\"CapSet(address,uint256)\":{\"notice\":\"Emitted when the cap is set or changed.\"}},\"kind\":\"user\",\"methods\":{\"cap()\":{\"notice\":\"Returns the maximum allowed total supply for this token (the \\\"cap\\\").\"},\"setCap(uint256)\":{\"notice\":\"Sets or updates the maximum total supply (cap) for the token.\"}},\"notice\":\"This interface defines the external functions that a SMART token contract with a capped         total supply must implement. A \\\"capped\\\" token has a maximum limit on the total number         of tokens that can ever exist (be minted).         In Solidity, an interface specifies *what* functions a contract has (their names, parameters,         and return types) but not *how* they are implemented. This allows other contracts or         off-chain applications to interact with any capped token in a standard way.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/capped/ISMARTCapped.sol\":\"ISMARTCapped\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/capped/ISMARTCapped.sol\":{\"keccak256\":\"0x71e83270af727b097f9e01c5d45c9d750d3fc20e3deb9a561a83d1bfe51dc84c\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://71c7bc0c10ac17c4cf14e0e5091fb38c02ea03babccebecf9b23a10981cd0669\",\"dweb:/ipfs/QmQhedfLt5xzhM2Ch146xtGGjNF3sMDnPugZ4e3QA4gADJ\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ExceededCap"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidCap"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CapSet",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "cap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newCap",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCap"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "cap()": {
            "details": "This function provides a way to query the hard limit on the token's supply.      It is a `view` function, meaning it does not modify the contract's state and does not      cost gas when called externally as a read-only operation (e.g., from a user interface).",
            "returns": {
              "_0": "uint256 The maximum number of tokens that can be in circulation."
            }
          },
          "setCap(uint256)": {
            "details": "Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.",
            "params": {
              "newCap": "The new maximum total supply. Must be >= the current total supply."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "cap()": {
            "notice": "Returns the maximum allowed total supply for this token (the \"cap\")."
          },
          "setCap(uint256)": {
            "notice": "Sets or updates the maximum total supply (cap) for the token."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/capped/ISMARTCapped.sol": "ISMARTCapped"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/capped/ISMARTCapped.sol": {
        "keccak256": "0x71e83270af727b097f9e01c5d45c9d750d3fc20e3deb9a561a83d1bfe51dc84c",
        "urls": [
          "bzz-raw://71c7bc0c10ac17c4cf14e0e5091fb38c02ea03babccebecf9b23a10981cd0669",
          "dweb:/ipfs/QmQhedfLt5xzhM2Ch146xtGGjNF3sMDnPugZ4e3QA4gADJ"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "cap()": {
        "notice": "Returns the maximum allowed total supply for this token (the \"cap\")."
      },
      "setCap(uint256)": {
        "notice": "Sets or updates the maximum total supply (cap) for the token."
      }
    },
    "events": {
      "CapSet(address,uint256)": {
        "notice": "Emitted when the cap is set or changed."
      }
    },
    "errors": {
      "ExceededCap(uint256,uint256)": [
        {
          "notice": "Error: Minting would exceed the maximum token supply cap."
        }
      ],
      "InvalidCap(uint256)": [
        {
          "notice": "Error: An invalid cap value was provided."
        }
      ]
    },
    "notice": "This interface defines the external functions that a SMART token contract with a capped         total supply must implement. A \"capped\" token has a maximum limit on the total number         of tokens that can ever exist (be minted).         In Solidity, an interface specifies *what* functions a contract has (their names, parameters,         and return types) but not *how* they are implemented. This allows other contracts or         off-chain applications to interact with any capped token in a standard way."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "cap()": {
        "details": "This function provides a way to query the hard limit on the token's supply.      It is a `view` function, meaning it does not modify the contract's state and does not      cost gas when called externally as a read-only operation (e.g., from a user interface).",
        "returns": {
          "_0": "uint256 The maximum number of tokens that can be in circulation."
        }
      },
      "setCap(uint256)": {
        "details": "Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.",
        "params": {
          "newCap": "The new maximum total supply. Must be >= the current total supply."
        }
      }
    },
    "events": {
      "CapSet(address,uint256)": {
        "params": {
          "cap": "The new cap value.",
          "sender": "The address that set/changed the cap."
        }
      }
    },
    "errors": {
      "ExceededCap(uint256,uint256)": [
        {
          "details": "This error is thrown when a mint operation (creating new tokens) is attempted, but the      resulting total supply would be greater than the pre-defined `cap`.      For example, if the cap is 1,000,000 tokens and current supply is 990,000, attempting to mint      20,000 more tokens would trigger this error because 990,000 + 20,000 = 1,010,000, which is > 1,000,000.",
          "params": {
            "cap": "The hard-coded maximum allowed total supply for the token.",
            "newSupply": "The total supply that *would have resulted* if the mint operation had proceeded."
          }
        }
      ],
      "InvalidCap(uint256)": [
        {
          "details": "This error is thrown if the cap is set to an invalid value, either during      initialization or when calling `setCap`. An invalid value is either zero or a      value below the current total supply of tokens.",
          "params": {
            "cap": "The invalid cap value that was attempted to be set."
          }
        }
      ]
    },
    "title": "Interface for the SMART Capped Token Extension"
  },
  "id": 78
}