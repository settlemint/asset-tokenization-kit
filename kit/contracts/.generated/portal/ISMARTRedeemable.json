{
  "abi": [
    {
      "type": "function",
      "name": "redeem",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "success",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "redeemAll",
      "inputs": [],
      "outputs": [
        {
          "name": "success",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "Redeemed",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "redeem(uint256)": "db006a75",
    "redeemAll()": "2f4350c2"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface is intended to be implemented by contracts that provide redeemable token functionality. The functions defined here are external, meaning they can be called from outside the contract.\",\"events\":{\"Redeemed(address,uint256)\":{\"details\":\"This event is crucial for tracking the reduction of token supply due to redemptions. It signifies that a token holder has voluntarily exchanged their tokens to have them permanently removed from circulation. Off-chain services can listen to this event to update balances, statistics, or trigger other processes. The `indexed` keyword for `sender` allows for efficient searching and filtering of these events based on the sender's address.\",\"params\":{\"amount\":\"The quantity of tokens that were redeemed and thus burned. This is the amount by which the sender's balance and the total supply decreased.\",\"sender\":\"The address of the token holder who redeemed their tokens. This address initiated the redeem transaction.\"}}},\"kind\":\"dev\",\"methods\":{\"redeem(uint256)\":{\"details\":\"When a token holder calls this function, the specified `amount` of their tokens will be burned (destroyed). This action reduces both the token holder's balance and the total supply of the token. The function should: 1. Optionally execute a `_beforeRedeem` hook for pre-redemption logic. 2. Perform the burn operation via an internal function like `_redeemable_executeBurn`. 3. Optionally execute an `_afterRedeem` hook for post-redemption logic. 4. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.\",\"params\":{\"amount\":\"The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.\"},\"returns\":{\"success\":\"A boolean value indicating whether the redemption was successful (typically `true`).\"}},\"redeemAll()\":{\"details\":\"When a token holder calls this function, their entire balance of this token will be burned (destroyed). This action reduces the token holder's balance to zero and decreases the total supply of the token accordingly. The function should: 1. Determine the caller's current token balance. 2. Optionally execute a `_beforeRedeem` hook for pre-redemption logic with the full balance amount. 3. Perform the burn operation for the full balance via an internal function like `_redeemable_executeBurn`. 4. Optionally execute an `_afterRedeem` hook for post-redemption logic with the full balance amount. 5. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.\",\"returns\":{\"success\":\"A boolean value indicating whether the redemption of all tokens was successful (typically `true`).\"}}},\"title\":\"Interface for the SMART Redeemable Extension\",\"version\":1},\"userdoc\":{\"events\":{\"Redeemed(address,uint256)\":{\"notice\":\"Emitted when tokens are successfully redeemed (burned by the token holder).\"}},\"kind\":\"user\",\"methods\":{\"redeem(uint256)\":{\"notice\":\"Allows the caller (the token holder) to redeem a specific amount of their own tokens.\"},\"redeemAll()\":{\"notice\":\"Allows the caller (the token holder) to redeem all of their own tokens.\"}},\"notice\":\"This interface defines the functions that a SMART Redeemable token extension must implement. It allows token holders to redeem (burn) their own tokens, effectively reducing the total supply.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/redeemable/ISMARTRedeemable.sol\":\"ISMARTRedeemable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/redeemable/ISMARTRedeemable.sol\":{\"keccak256\":\"0x1fc0f734530bdd13a3a75e55da83395a1104fccda32c2779551d94d5d068ad4b\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://b4099cf6845bbef145a1ebf65eec2d997835b424d4dba4ba6c4329411328735e\",\"dweb:/ipfs/QmdSZf9nRRDyeJaQzuUCV4ZCg1kyWLBr4xmPCABSTvres5\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Redeemed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "redeem",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "redeemAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "redeem(uint256)": {
            "details": "When a token holder calls this function, the specified `amount` of their tokens will be burned (destroyed). This action reduces both the token holder's balance and the total supply of the token. The function should: 1. Optionally execute a `_beforeRedeem` hook for pre-redemption logic. 2. Perform the burn operation via an internal function like `_redeemable_executeBurn`. 3. Optionally execute an `_afterRedeem` hook for post-redemption logic. 4. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.",
            "params": {
              "amount": "The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance."
            },
            "returns": {
              "success": "A boolean value indicating whether the redemption was successful (typically `true`)."
            }
          },
          "redeemAll()": {
            "details": "When a token holder calls this function, their entire balance of this token will be burned (destroyed). This action reduces the token holder's balance to zero and decreases the total supply of the token accordingly. The function should: 1. Determine the caller's current token balance. 2. Optionally execute a `_beforeRedeem` hook for pre-redemption logic with the full balance amount. 3. Perform the burn operation for the full balance via an internal function like `_redeemable_executeBurn`. 4. Optionally execute an `_afterRedeem` hook for post-redemption logic with the full balance amount. 5. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.",
            "returns": {
              "success": "A boolean value indicating whether the redemption of all tokens was successful (typically `true`)."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "redeem(uint256)": {
            "notice": "Allows the caller (the token holder) to redeem a specific amount of their own tokens."
          },
          "redeemAll()": {
            "notice": "Allows the caller (the token holder) to redeem all of their own tokens."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/redeemable/ISMARTRedeemable.sol": "ISMARTRedeemable"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/redeemable/ISMARTRedeemable.sol": {
        "keccak256": "0x1fc0f734530bdd13a3a75e55da83395a1104fccda32c2779551d94d5d068ad4b",
        "urls": [
          "bzz-raw://b4099cf6845bbef145a1ebf65eec2d997835b424d4dba4ba6c4329411328735e",
          "dweb:/ipfs/QmdSZf9nRRDyeJaQzuUCV4ZCg1kyWLBr4xmPCABSTvres5"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "redeem(uint256)": {
        "notice": "Allows the caller (the token holder) to redeem a specific amount of their own tokens."
      },
      "redeemAll()": {
        "notice": "Allows the caller (the token holder) to redeem all of their own tokens."
      }
    },
    "events": {
      "Redeemed(address,uint256)": {
        "notice": "Emitted when tokens are successfully redeemed (burned by the token holder)."
      }
    },
    "notice": "This interface defines the functions that a SMART Redeemable token extension must implement. It allows token holders to redeem (burn) their own tokens, effectively reducing the total supply."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "This interface is intended to be implemented by contracts that provide redeemable token functionality. The functions defined here are external, meaning they can be called from outside the contract.",
    "methods": {
      "redeem(uint256)": {
        "details": "When a token holder calls this function, the specified `amount` of their tokens will be burned (destroyed). This action reduces both the token holder's balance and the total supply of the token. The function should: 1. Optionally execute a `_beforeRedeem` hook for pre-redemption logic. 2. Perform the burn operation via an internal function like `_redeemable_executeBurn`. 3. Optionally execute an `_afterRedeem` hook for post-redemption logic. 4. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.",
        "params": {
          "amount": "The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance."
        },
        "returns": {
          "success": "A boolean value indicating whether the redemption was successful (typically `true`)."
        }
      },
      "redeemAll()": {
        "details": "When a token holder calls this function, their entire balance of this token will be burned (destroyed). This action reduces the token holder's balance to zero and decreases the total supply of the token accordingly. The function should: 1. Determine the caller's current token balance. 2. Optionally execute a `_beforeRedeem` hook for pre-redemption logic with the full balance amount. 3. Perform the burn operation for the full balance via an internal function like `_redeemable_executeBurn`. 4. Optionally execute an `_afterRedeem` hook for post-redemption logic with the full balance amount. 5. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.",
        "returns": {
          "success": "A boolean value indicating whether the redemption of all tokens was successful (typically `true`)."
        }
      }
    },
    "events": {
      "Redeemed(address,uint256)": {
        "details": "This event is crucial for tracking the reduction of token supply due to redemptions. It signifies that a token holder has voluntarily exchanged their tokens to have them permanently removed from circulation. Off-chain services can listen to this event to update balances, statistics, or trigger other processes. The `indexed` keyword for `sender` allows for efficient searching and filtering of these events based on the sender's address.",
        "params": {
          "amount": "The quantity of tokens that were redeemed and thus burned. This is the amount by which the sender's balance and the total supply decreased.",
          "sender": "The address of the token holder who redeemed their tokens. This address initiated the redeem transaction."
        }
      }
    },
    "title": "Interface for the SMART Redeemable Extension"
  },
  "id": 101
}