{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_trustedForwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADMIN_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "GLOBAL_LIST_MANAGER_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "canTransfer",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "created",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "destroyed",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getGlobalBlockedCountries",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint16[]",
          "internalType": "uint16[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleAdmin",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "grantRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isGloballyBlocked",
      "inputs": [
        {
          "name": "_country",
          "type": "uint16",
          "internalType": "uint16"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isTrustedForwarder",
      "inputs": [
        {
          "name": "forwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "renounceRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "callerConfirmation",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setGlobalBlockedCountries",
      "inputs": [
        {
          "name": "_countries",
          "type": "uint16[]",
          "internalType": "uint16[]"
        },
        {
          "name": "_block",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferred",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "trustedForwarder",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "validateParameters",
      "inputs": [
        {
          "name": "_params",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "GlobalBlockedCountriesUpdated",
      "inputs": [
        {
          "name": "countries",
          "type": "uint16[]",
          "indexed": false,
          "internalType": "uint16[]"
        },
        {
          "name": "blocked",
          "type": "bool",
          "indexed": true,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleAdminChanged",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "previousAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "newAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleGranted",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleRevoked",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessControlBadConfirmation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AccessControlUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "neededRole",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ComplianceCheckFailed",
      "inputs": [
        {
          "name": "reason",
          "type": "string",
          "internalType": "string"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidParameters",
      "inputs": [
        {
          "name": "reason",
          "type": "string",
          "internalType": "string"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "2254:7889:133:-:0;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;1500:37:196;;2528:44:128;11196:18;;:::i;:::-;2528:44;:::i;:::-;;5705:50:129;11196:18:128;;:::i;:::-;5705:50:129;:::i;:::-;;2254:7889:133;;;;;;;;1500:37:196;2254:7889:133;;;;;;;;;;;;;;;;;-1:-1:-1;2254:7889:133;;;;;;-1:-1:-1;2254:7889:133;;;;;-1:-1:-1;2254:7889:133;6179:316:179;-1:-1:-1;;;;;2254:7889:133;;2232:4:179;2254:7889:133;;;-1:-1:-1;;;;;;;;;;;2254:7889:133;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;2232:4:179;2254:7889:133;;;-1:-1:-1;;;;;;;;;;;2254:7889:133;;;;;;;-1:-1:-1;;2254:7889:133;;;;;11196:18:128;;:::i;:::-;2254:7889:133;;-1:-1:-1;;;;;2254:7889:133;2232:4:179;-1:-1:-1;;;;;;;;;;;2232:4:179;;6370:40;6347:4;6424:11;:::o;6272:217::-;6466:12;2232:4;6466:12;:::o;6179:316::-;-1:-1:-1;;;;;2254:7889:133;;;;;;-1:-1:-1;;;;;;;;;;;2254:7889:133;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;-1:-1:-1;;;;;;;;;;;2254:7889:133;;;;;;;-1:-1:-1;;2254:7889:133;;;;;11196:18:128;;:::i;:::-;2254:7889:133;;-1:-1:-1;;;;;2254:7889:133;3004:37:129;-1:-1:-1;;;;;;;;;;;2254:7889:133;;6370:40:179;6347:4;6424:11;:::o;2206:429:196:-;1707:17;2254:7889:133;-1:-1:-1;;;;;2254:7889:133;2422:10:196;1931:31;;2403:71;;2206:429;2399:230;;;2254:7889:133;;2312:8:196;2254:7889:133;2312:8:196;2254:7889:133;;;;;;;;2490:72:196:o;2254:7889:133:-;;;;;;;;;;;;2399:230:196;2422:10;2593:25;:::o;2403:71::-;2312:8;3483:2;2312:8;2437:37;;2403:71;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a714610a3e5750806306fdde03146109ad5780630fbf50921461097257806310efe2a514610731578063248a9ca3146109405780632f2ff15d1461090357806336568abe146108af578063572b6c05146108525780636974f58e14610816578063771d2f5e146107dc5780637da0a8771461079857806391d1485414610750578063a217fddf14610736578063c4c104b914610731578063ca1e16b3146104e1578063d547741f1461049f578063dccf19f41461011c578063ddfcf377146101015763ea6b97a5146100ed575f80fd5b346100fd576100fb36610b57565b005b5f80fd5b346100fd576100fb61011236610b57565b9491509250610c75565b346100fd575f3660031901126100fd57604051806020600254918281520190828260025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace925f905b80600f8301106103b7576101ff9454918181106103a2575b81811061038a575b818110610373575b81811061035b575b818110610343575b81811061032b575b818110610313575b8181106102fb575b8181106102e3575b8181106102cb575b8181106102b3575b81811061029b575b818110610283575b81811061026b575b818110610253575b10610245575b509392930382610bc6565b604051918291602083019060208452518091526040830191905f5b818110610228575050500390f35b825161ffff1684528594506020938401939092019160010161021a565b60f01c8152602001856101f4565b92602060019161ffff8560e01c1681520193016101ee565b92602060019161ffff8560d01c1681520193016101e6565b92602060019161ffff8560c01c1681520193016101de565b92602060019161ffff8560b01c1681520193016101d6565b92602060019161ffff8560a01c1681520193016101ce565b92602060019161ffff8560901c1681520193016101c6565b92602060019161ffff8560801c1681520193016101be565b92602060019161ffff8560701c1681520193016101b6565b92602060019161ffff8560601c1681520193016101ae565b92602060019161ffff8560501c1681520193016101a6565b92602060019161ffff8560401c16815201930161019e565b92602060019161ffff8560301c168152019301610196565b92602060019161ffff85831c16815201930161018e565b92602060019161ffff8560101c168152019301610186565b92602060019161ffff8516815201930161017e565b916010919350610200600191865461ffff8116825261ffff81861c16602083015261ffff8160201c16604083015261ffff8160301c16606083015261ffff8160401c16608083015261ffff8160501c1660a083015261ffff8160601c1660c083015261ffff8160701c1660e083015261ffff8160801c1661010083015261ffff8160901c1661012083015261ffff8160a01c1661014083015261ffff8160b01c1661016083015261ffff8160c01c1661018083015261ffff8160d01c166101a083015261ffff8160e01c166101c083015260f01c6101e0820152019401920185929391610166565b346100fd5760403660031901126100fd576100fb6004356104be610aba565b906104dc6104d7825f525f602052600160405f20015490565b610db2565b610e98565b346100fd5760403660031901126100fd5760043567ffffffffffffffff81116100fd57366023820112156100fd5780600401359067ffffffffffffffff82116100fd573660248360051b830101116100fd5760243580158015928383036100fd5761054a6110dc565b6001600160a01b0381165f9081527f9b6046957f41cb9d409aa8cdf012eb36129daef06a27f14d4eed5f0368318d1f602052604090205460ff16156106ed575060ff841694935f5b858110156106815760248160051b840101359061ffff82168083036100fd575f818152600160205260409020805460ff1981168b17909155869060ff168880610679575b1561064b575050600254680100000000000000008110156106375760019361060682866106209401600255610f25565b90919061ffff8084549260031b9316831b921b1916179055565b600254905f52600360205260405f20555b01610592565b634e487b7160e01b5f52604160045260245ffd5b600194925081610671575b50610662575b50610631565b61066b90611149565b8861065c565b90508a610656565b5080156105d6565b50604080516020808252810187905290810160248401875f5b8181106106ca57857f055af132300a0011f52bb29453d7d257bbd60c08ad560bff6ae21c6381505ffa86860387a2005b90919260208060019261ffff6106df88610aab565b16815201940192910161069a565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527f9b55cfb75ccf6f1a6d907f6f30122d92666cac147d834990fba3410dfac61ef6602452604490fd5b610afe565b346100fd575f3660031901126100fd5760206040515f8152f35b346100fd5760403660031901126100fd57610769610aba565b6004355f525f60205260405f209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b346100fd575f3660031901126100fd576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fd575f3660031901126100fd5760206040517f9b55cfb75ccf6f1a6d907f6f30122d92666cac147d834990fba3410dfac61ef68152f35b346100fd5760203660031901126100fd5760043567ffffffffffffffff81116100fd5761084a6100fb913690600401610ad0565b810190610be8565b346100fd5760203660031901126100fd576004356001600160a01b038116908190036100fd576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169091148152602090f35b346100fd5760403660031901126100fd576108c8610aba565b6001600160a01b036108d86110dc565b166001600160a01b038216036108f4576100fb90600435610e98565b63334bd91960e11b5f5260045ffd5b346100fd5760403660031901126100fd576100fb600435610922610aba565b9061093b6104d7825f525f602052600160405f20015490565b610e03565b346100fd5760203660031901126100fd57602061096a6004355f525f602052600160405f20015490565b604051908152f35b346100fd5760203660031901126100fd5760043561ffff81168091036100fd575f526001602052602060ff60405f2054166040519015158152f35b346100fd575f3660031901126100fd576040516060810181811067ffffffffffffffff8211176106375760405260238152604060208201917f436f756e74727920426c6f636b4c69737420436f6d706c69616e6365204d6f64835262756c6560e81b828201528151928391602083525180918160208501528484015e5f828201840152601f01601f19168101030190f35b346100fd5760203660031901126100fd576004359063ffffffff60e01b82168092036100fd57602091638c30a94360e01b8114908115610a80575b5015158152f35b637965db0b60e01b811491508115610a9a575b5083610a79565b6301ffc9a760e01b14905083610a93565b359061ffff821682036100fd57565b602435906001600160a01b03821682036100fd57565b9181601f840112156100fd5782359167ffffffffffffffff83116100fd57602083818601950101116100fd57565b346100fd5760803660031901126100fd576004356001600160a01b03811681036100fd57506024356001600160a01b03811681036100fd575060643567ffffffffffffffff81116100fd576100fb903690600401610ad0565b60a06003198201126100fd576004356001600160a01b03811681036100fd57916024356001600160a01b03811681036100fd57916044356001600160a01b03811681036100fd5791606435916084359067ffffffffffffffff82116100fd57610bc291600401610ad0565b9091565b90601f8019910116810190811067ffffffffffffffff82111761063757604052565b6020818303126100fd5780359067ffffffffffffffff82116100fd57019080601f830112156100fd5781359167ffffffffffffffff8311610637578260051b9060405193610c396020840186610bc6565b84526020808501928201019283116100fd57602001905b828210610c5d5750505090565b60208091610c6a84610aab565b815201910190610c50565b90610c8291939293610f65565b90158015610da6575b610da15761ffff1691825f52600160205260ff60405f205416610d5157610cb491810190610be8565b908151915f5b838110610cc75750505050565b8151811015610d3d578261ffff60208360051b850101511614610cec57600101610cba565b60405163327d269360e01b815260206004820152602260248201527f526563656976657220636f756e74727920626c6f636b656420666f7220746f6b60448201526132b760f11b6064820152608490fd5b634e487b7160e01b5f52603260045260245ffd5b60405163327d269360e01b815260206004820152602160248201527f526563656976657220636f756e74727920676c6f62616c6c7920626c6f636b656044820152601960fa1b6064820152608490fd5b505050565b5061ffff811615610c8b565b610dba6110dc565b5f828152602081815260408083206001600160a01b038516845290915290205460ff1615610de6575050565b63e2517d3f60e01b5f5260018060a01b031660045260245260445ffd5b5f818152602081815260408083206001600160a01b038616845290915290205460ff16610e92575f818152602081815260408083206001600160a01b0386811685529252909120805460ff19166001179055610e5d6110dc565b16916001600160a01b0316907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b5f818152602081815260408083206001600160a01b038616845290915290205460ff1615610e92575f818152602081815260408083206001600160a01b0386811685529252909120805460ff19169055610ef06110dc565b16916001600160a01b0316907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b90600254821015610d3d5760025f52600482901c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace019160011b601e1690565b6040516304d3863d60e21b815291929190602090829060049082906001600160a01b03165afa90811561104c575f9161109a575b50604051630bb7c8fd60e31b81526001600160a01b03938416600482018190529190931692602081602481875afa90811561104c575f9161105f575b501561105757602090602460405180958193637e42683b60e01b835260048301525afa91821561104c575f9261100d575b5060019190565b9091506020813d602011611044575b8161102960209383610bc6565b810103126100fd575161ffff811681036100fd57905f611006565b3d915061101c565b6040513d5f823e3d90fd5b505f91508190565b90506020813d602011611092575b8161107a60209383610bc6565b810103126100fd575180151581036100fd575f610fd5565b3d915061106d565b90506020813d6020116110d4575b816110b560209383610bc6565b810103126100fd57516001600160a01b03811681036100fd575f610f99565b3d91506110a8565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148061113e575b1561113a576013193601368111611126573560601c90565b634e487b7160e01b5f52601160045260245ffd5b3390565b50601436101561110e565b61ffff16805f52600360205260405f20548015611204575f198101818111611126576002545f198101908111611126578082036111cd575b50505060025480156111b9575f190161119981610f25565b61ffff82549160031b1b191690556002555f5260036020525f6040812055565b634e487b7160e01b5f52603160045260245ffd5b6106069161ffff6111e06111f093610f25565b90549060031b1c16928391610f25565b5f52600360205260405f20555f8080611181565b505056fea164736f6c634300081c000a",
    "sourceMap": "2254:7889:133:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;13583:20:129;2254:7889:133;;;;;;;;;13583:20:129;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::ii;:::-;4717:18:179;2475:4;4717:18;;3901:6;2254:7889:133;3901:6:179;2254:7889:133;;3901:22:179;2254:7889:133;3901:6:179;2254:7889:133;3901:22:179;2254:7889:133;3810:120:179;;4717:18;2475:4;:::i;:::-;4747:26;:::i;2254:7889:133:-;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11196:18:128;;:::i;:::-;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;;;;3519:23:179;3515:108;;-1:-1:-1;2254:7889:133;;;;4512:13;2254:7889;4512:13;4527:19;;;;;;2254:7889;;;;;;;;;;;;;;;;;;;;;11065:16:129;2254:7889:133;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;11153:21:129;;;;4512:13:133;11149:374:129;;;2254:7889:133;;11238:20:129;2254:7889:133;;;;;;;11065:16:129;2254:7889:133;;;;;;;11238:20:129;2254:7889:133;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;11238:20:129;2254:7889:133;;;;11287:21:129;2254:7889:133;;;;;;11149:374:129;2254:7889:133;4512:13;;2254:7889;;;;;;;;;;;;11149:374:129;11065:16;11388:21;;;;;;11149:374;11384:139;;;11149:374;;;;11384:139;11503:8;;;:::i;:::-;11384:139;;;11388:21;;;;;;11153;11164:10;;;11153:21;;4527:19:133;-1:-1:-1;2254:7889:133;;;;;;;;;;;;;;;;;;4527:19;-1:-1:-1;2254:7889:133;;;;;;4693:49;;;;;;;2254:7889;;;;;;;11065:16:129;2254:7889:133;;;;;:::i;:::-;;;;;;;;;;;;3515:108:179;-1:-1:-1;;;2254:7889:133;3565:47:179;;;-1:-1:-1;;;;;2254:7889:133;;;;;;3004:37:129;2254:7889:133;;;;3565:47:179;2254:7889:133;;:::i;:::-;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;:::i;:::-;;;;;;;;;;;2954:29:179;2254:7889:133;;;;;;-1:-1:-1;2254:7889:133;;;;;;-1:-1:-1;2254:7889:133;;;;;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;1707:17:196;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;3004:37:129;2254:7889:133;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;7040:31:129;2254:7889:133;;;;;;:::i;:::-;7040:31:129;;;;:::i;2254:7889:133:-;;;;;;-1:-1:-1;;2254:7889:133;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;1707:17:196;-1:-1:-1;;;;;2254:7889:133;1931:31:196;;;2254:7889:133;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;:::i;:::-;-1:-1:-1;;;;;11196:18:128;;:::i;:::-;2254:7889:133;-1:-1:-1;;;;;2254:7889:133;;5421:34:179;5417:102;;5529:37;2254:7889:133;;;5529:37:179;:::i;5417:102::-;5478:30;;;2254:7889:133;5478:30:179;2254:7889:133;;5478:30:179;2254:7889:133;;;;;;-1:-1:-1;;2254:7889:133;;;;4330:25:179;2254:7889:133;;;;:::i;:::-;4300:18:179;2475:4;4300:18;;3901:6;2254:7889:133;3901:6:179;2254:7889:133;;3901:22:179;2254:7889:133;3901:6:179;2254:7889:133;3901:22:179;2254:7889:133;3810:120:179;;2475:4;4330:25;:::i;2254:7889:133:-;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;3901:6:179;2254:7889:133;3901:6:179;2254:7889:133;;3901:22:179;2254:7889:133;3901:6:179;2254:7889:133;3901:22:179;2254:7889:133;3810:120:179;;2254:7889:133;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;;;;;13296:16:129;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7046:55:128;;;:95;;;;2254:7889:133;;;;;;;7046:95:128;-1:-1:-1;;;2673:47:179;;;-1:-1:-1;2673:87:179;;;;7046:95:128;;;;;2673:87:179;-1:-1:-1;;;862:40:225;;-1:-1:-1;2673:87:179;;;2254:7889:133;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;2254:7889:133;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;-1:-1:-1;2254:7889:133;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;2254:7889:133;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;7970:1781;;8335:28;7970:1781;;;;8335:28;:::i;:::-;8579:12;;2254:7889;;8579:36;;7970:1781;8575:137;;2254:7889;;;;-1:-1:-1;2254:7889:133;13296:16:129;2254:7889:133;;;;-1:-1:-1;2254:7889:133;;;8826:130;;8185:31:129;;;;;;:::i;:::-;2254:7889:133;;;9303:13;-1:-1:-1;9318:36:133;;;;;;7970:1781;;;;:::o;9303:13::-;2254:7889;;;;;;;;;;;;;;;;;;9375:48;9371:153;;13296:16:129;2254:7889:133;9303:13;;9371:153;2254:7889;;-1:-1:-1;;;9450:59:133;;2254:7889;9450:59;;;2254:7889;;;;;;;;;;;-1:-1:-1;;;2254:7889:133;;;;9450:59;;;2254:7889;;;;-1:-1:-1;2254:7889:133;;;;;-1:-1:-1;2254:7889:133;8826:130;2254:7889;;-1:-1:-1;;;8887:58:133;;2254:7889;8887:58;;;2254:7889;;;;;;;;;;;-1:-1:-1;;;2254:7889:133;;;;8887:58;;;8575:137;8631:7;;;:::o;8579:36::-;2254:7889;;;;8595:20;8579:36;;3199:103:179;11196:18:128;;:::i;:::-;2954:6:179;2254:7889:133;;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;3519:23:179;3515:108;;3199:103;;:::o;3515:108::-;3565:47;;;2954:6;3565:47;2254:7889:133;;;;;;3565:47:179;2254:7889:133;;;;2954:6:179;3565:47;6179:316;2254:7889:133;;;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;;;11196:18:128;;:::i;:::-;2254:7889:133;;-1:-1:-1;;;;;2254:7889:133;;6370:40:179;2254:7889:133;;6370:40:179;6347:4;6424:11;:::o;6272:217::-;6466:12;;2254:7889:133;6466:12:179;:::o;6732:317::-;2254:7889:133;;;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;;;;;;;-1:-1:-1;;2254:7889:133;;;11196:18:128;;:::i;:::-;2254:7889:133;;-1:-1:-1;;;;;2254:7889:133;;6924:40:179;2254:7889:133;;6924:40:179;2254:7889:133;6978:11:179;:::o;2254:7889:133:-;;11238:20:129;2254:7889:133;;;;;;11238:20:129;-1:-1:-1;2254:7889:133;;;;;;;;;;;;;:::o;9493:777:129:-;2254:7889:133;;-1:-1:-1;;;9755:33:129;;9493:777;;;2254:7889:133;9755:33:129;;2254:7889:133;;9755:33:129;;2254:7889:133;;-1:-1:-1;;;;;2254:7889:133;9755:33:129;;;;;;;2254:7889:133;9755:33:129;;;9493:777;-1:-1:-1;2254:7889:133;;-1:-1:-1;;;9887:32:129;;-1:-1:-1;;;;;2254:7889:133;;;9755:33:129;9887:32;;2254:7889:133;;;;;;;;9755:33:129;2254:7889:133;9887:32:129;2254:7889:133;;9887:32:129;;;;;;;2254:7889:133;9887:32:129;;;9493:777;9933:12;;9929:154;;9755:33;2254:7889:133;9887:32:129;2254:7889:133;;;;;;;;;10192:39:129;;9755:33;10192:39;;2254:7889:133;10192:39:129;;;;;;;2254:7889:133;10192:39:129;;;9493:777;10241:22;10249:4;10241:22;9493:777;:::o;10192:39::-;;;;9755:33;10192:39;;9755:33;10192:39;;;;;;9755:33;10192:39;;;:::i;:::-;;;2254:7889:133;;;;;;;;;;;;10192:39:129;;;;;;;-1:-1:-1;10192:39:129;;;2254:7889:133;;;;;;;;;9929:154:129;-1:-1:-1;2254:7889:133;;-1:-1:-1;2254:7889:133;;10055:17:129:o;9887:32::-;;;9755:33;9887:32;;9755:33;9887:32;;;;;;9755:33;9887:32;;;:::i;:::-;;;2254:7889:133;;;;;;;;;;;;9887:32:129;;;;;;-1:-1:-1;9887:32:129;;9755:33;;;;;;;;;;;;;;;;;:::i;:::-;;;2254:7889:133;;;;;-1:-1:-1;;;;;2254:7889:133;;;;;;9755:33:129;;;;;;-1:-1:-1;9755:33:129;;2206:429:196;2422:10;1707:17;-1:-1:-1;;;;;2254:7889:133;1931:31:196;;2403:71;;2206:429;2399:230;;;2254:7889:133;;2312:8:196;2254:7889:133;2312:8:196;2254:7889:133;;;;;;;;2490:72:196:o;2254:7889:133:-;;;;;;;;;;;;2399:230:196;2422:10;2593:25;:::o;2403:71::-;2312:8;3483:2;2312:8;2437:37;;2403:71;;12141:843:129;2254:7889:133;;;-1:-1:-1;2254:7889:133;12239:21:129;2254:7889:133;;;-1:-1:-1;2254:7889:133;;12284:17:129;;12280:30;;-1:-1:-1;;2254:7889:133;;;;;;;12453:20:129;2254:7889:133;-1:-1:-1;;2254:7889:133;;;;;;;12499:18:129;;;12495:335;;12141:843;2254:7889:133;;;12453:20:129;2254:7889:133;;;;;-1:-1:-1;;2254:7889:133;;;;:::i;:::-;;;;;12239:21:129;2254:7889:133;;;;;;12453:20:129;2254:7889:133;-1:-1:-1;2254:7889:133;12239:21:129;2254:7889:133;;-1:-1:-1;2254:7889:133;;;;12141:843:129:o;2254:7889:133:-;;;;-1:-1:-1;2254:7889:133;;;;;-1:-1:-1;2254:7889:133;12495:335:129;12681:27;12636:31;2254:7889:133;12636:31:129;12681:41;12636:31;;:::i;:::-;2254:7889:133;;;12239:21:129;2254:7889:133;;;12681:27:129;;;;:::i;:41::-;-1:-1:-1;2254:7889:133;12239:21:129;2254:7889:133;;;-1:-1:-1;2254:7889:133;;12495:335:129;;;;;12280:30;12303:7;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "43093": [
        {
          "start": 1965,
          "length": 32
        },
        {
          "start": 2173,
          "length": 32
        },
        {
          "start": 4319,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DEFAULT_ADMIN_ROLE()": "a217fddf",
    "GLOBAL_LIST_MANAGER_ROLE()": "771d2f5e",
    "canTransfer(address,address,address,uint256,bytes)": "ddfcf377",
    "created(address,address,uint256,bytes)": "c4c104b9",
    "destroyed(address,address,uint256,bytes)": "10efe2a5",
    "getGlobalBlockedCountries()": "dccf19f4",
    "getRoleAdmin(bytes32)": "248a9ca3",
    "grantRole(bytes32,address)": "2f2ff15d",
    "hasRole(bytes32,address)": "91d14854",
    "isGloballyBlocked(uint16)": "0fbf5092",
    "isTrustedForwarder(address)": "572b6c05",
    "name()": "06fdde03",
    "renounceRole(bytes32,address)": "36568abe",
    "revokeRole(bytes32,address)": "d547741f",
    "setGlobalBlockedCountries(uint16[],bool)": "ca1e16b3",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferred(address,address,address,uint256,bytes)": "ea6b97a5",
    "trustedForwarder()": "7da0a877",
    "validateParameters(bytes)": "6974f58e"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ComplianceCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"countries\",\"type\":\"uint16[]\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"GlobalBlockedCountriesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLOBAL_LIST_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"canTransfer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalBlockedCountries\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"isGloballyBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setGlobalBlockedCountries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"validateParameters\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"custom:parameters\":\"The `_params` data for this module should be ABI-encoded as a dynamic array of `uint16` country codes:                   `abi.encode(uint16[] memory additionalBlockedCountries)`. These are countries blocked *in addition* to the global list for a specific token.\",\"details\":\"It inherits from `AbstractCountryComplianceModule` and implements a country-based block-list logic. The module combines two sources for the block-list: 1. **Global Block-List**: A list of country codes maintained within this specific module instance.    This list can be managed by addresses holding the `GLOBAL_LIST_MANAGER_ROLE` (inherited from `AbstractCountryComplianceModule`). 2. **Token-Specific Block-List**: An additional list of country codes provided via the `_params` argument when this module    is registered with a particular `ISMART` token. The format for these parameters is `abi.encode(uint16[] memory additionalBlockedCountries)`. A transfer *to* a recipient is BLOCKED (i.e., `canTransfer` reverts) if:    - The recipient has a registered identity in the token's `ISMARTIdentityRegistry` AND their country code is known (not 0),    - AND the recipient's registered country code is present in this module instance's global block-list,    - OR the recipient's registered country code is present in the token-specific list of blocked countries passed via `_params`. If the recipient has no identity or their country code is 0, the transfer is implicitly ALLOWED by this module because it cannot determine if they are from a blocked country. Similarly, if their known country is not on any block-list, the transfer is allowed.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ComplianceCheckFailed(string)\":[{\"details\":\"This error indicates that a proposed token transfer, mint, or burn operation violates      the rules enforced by this specific compliance module.\",\"params\":{\"reason\":\"A descriptive string explaining why the compliance check failed (e.g., \\\"Sender not allow listed\\\", \\\"Transfer exceeds daily limit\\\").\"}}],\"InvalidParameters(string)\":[{\"details\":\"This error signals that the data supplied to configure or update the module is malformed, out of expected range,      or otherwise unsuitable for the module's intended operation.\",\"params\":{\"reason\":\"A descriptive string explaining why the parameters are considered invalid (e.g., \\\"Invalid country code format\\\", \\\"Limit parameter cannot be zero\\\").\"}}]},\"events\":{\"GlobalBlockedCountriesUpdated(uint16[],bool)\":{\"params\":{\"blocked\":\"A boolean indicating whether the specified `countries` were added (`true`) to or removed (`false`) from the global block-list.\",\"countries\":\"An array of country codes (ISO 3166-1 numeric) that were updated.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"canTransfer(address,address,address,uint256,bytes)\":{\"details\":\"This function implements the core compliance logic for the `CountryBlockListComplianceModule`. It is called by the `SMARTComplianceImplementation` before a token transfer. The logic is as follows: 1. Retrieve the recipient's (`_to`) country code using `_getUserCountry` (from `AbstractCountryComplianceModule`). 2. If the recipient has no identity or their country code is 0 (unknown), the transfer is allowed by this module (return without reverting).    This is because the module cannot enforce a block-list if the country is unknown. 3. If the recipient's country is in this module's global block-list (checked via `isGloballyBlocked`),    the transfer is blocked, and the function reverts with `ComplianceCheckFailed(\\\"Receiver country globally blocked\\\")`. 4. If not globally blocked, decode the token-specific `additionalBlockedCountries` from `_params` (using `_decodeParams`). 5. Check if the recipient's country is present in this `additionalBlockedCountries` list. If yes,    the transfer is blocked, and the function reverts with `ComplianceCheckFailed(\\\"Receiver country blocked for token\\\")`. 6. If the recipient's country is known and not found in any block-list, the transfer is allowed by this module (function completes without reverting).\",\"params\":{\"_params\":\"ABI-encoded `uint16[]` of additional country codes blocked specifically for this `_token`,                in addition to the module's global block-list.\",\"_to\":\"Address of the recipient whose country is being checked against the block-list.\",\"_token\":\"Address of the `ISMART` token contract for which the compliance check is being performed.\"}},\"constructor\":{\"details\":\"When a contract inheriting from `CountryBlockListComplianceModule` is deployed, this constructor is called. It calls the constructor of `AbstractCountryComplianceModule` with the `_trustedForwarder` address.\"},\"created(address,address,uint256,bytes)\":{\"details\":\"This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.\",\"params\":{\"_params\":\"The parameters that were configured for this module when it was added to the `_token`.\",\"_to\":\"The address that received the newly created tokens.\",\"_token\":\"The address of the `ISMART` token contract where tokens were created.\",\"_value\":\"The amount of tokens created.\"}},\"destroyed(address,address,uint256,bytes)\":{\"details\":\"This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.\",\"params\":{\"_from\":\"The address whose tokens were destroyed.\",\"_params\":\"The parameters that were configured for this module when it was added to the `_token`.\",\"_token\":\"The address of the `ISMART` token contract from which tokens were destroyed.\",\"_value\":\"The amount of tokens destroyed.\"}},\"getGlobalBlockedCountries()\":{\"details\":\"This function provides a way to enumerate all countries that are currently blocked in the global block-list. It's useful for administrative purposes, auditing, or for front-ends that need to display the current list of blocked countries.\",\"returns\":{\"_0\":\"An array of `uint16` country codes representing all globally blocked countries. The array will be empty if no countries are currently in the global block-list.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isGloballyBlocked(uint16)\":{\"params\":{\"_country\":\"The country code (ISO 3166-1 numeric) to check.\"},\"returns\":{\"_0\":\"`true` if the `_country` is part of the global block-list for this module instance, `false` otherwise.\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"name()\":{\"details\":\"This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., \\\"KYC Module\\\", \\\"Country Restriction Module\\\").\",\"returns\":{\"_0\":\"The string \\\"Country BlockList Compliance Module\\\".\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setGlobalBlockedCountries(uint16[],bool)\":{\"details\":\"This function can only be called by addresses that have been granted the `GLOBAL_LIST_MANAGER_ROLE` for this module instance. It iterates through the `_countries` array and sets their status in the global country list. When adding countries, they are added to both the mapping and the enumerable array. When removing countries, they are removed from both the mapping and the array using the swap-and-pop technique.\",\"params\":{\"_block\":\"If `true`, the specified `_countries` will be added to the global block-list (or updated if already present).               If `false`, the specified `_countries` will be removed from the global block-list.\",\"_countries\":\"An array of country codes (ISO 3166-1 numeric) to be added or removed.\"}},\"supportsInterface(bytes4)\":{\"details\":\"This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface. It also calls `super.supportsInterface(interfaceId)` to include support for interfaces from parent contracts (like `AccessControl` which also implements `IERC165`).\",\"params\":{\"interfaceId\":\"The interface identifier (bytes4) to check.\"},\"returns\":{\"_0\":\"`true` if the contract supports the `interfaceId`, `false` otherwise.\"}},\"transferred(address,address,address,uint256,bytes)\":{\"details\":\"This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.\",\"params\":{\"_from\":\"The address from which tokens were transferred.\",\"_params\":\"The parameters that were configured for this module when it was added to the `_token`.\",\"_to\":\"The address to which tokens were transferred.\",\"_token\":\"The address of the `ISMART` token contract that performed the transfer.\",\"_value\":\"The amount of tokens transferred.\"}},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"validateParameters(bytes)\":{\"details\":\"This function overrides `validateParameters` from `AbstractComplianceModule`. It specifically checks if `_params` can be successfully decoded as a dynamic array of `uint16` (country codes). If the decoding fails (i.e., `_params` are not in the format `abi.encode(uint16[])`), the function will revert. Note: This function *only* validates the format of `_params`. It does *not* validate the individual country codes within the array (e.g., checking if they are valid ISO 3166-1 numeric codes). Such specific validation might be done by the concrete module if needed.\",\"params\":{\"_params\":\"The ABI-encoded parameters to validate. Expected to be `abi.encode(uint16[] memory countryCodes)`.\"}}},\"title\":\"Country Block-List Compliance Module\",\"version\":1},\"userdoc\":{\"errors\":{\"ComplianceCheckFailed(string)\":[{\"notice\":\"Emitted when a compliance check performed by the `canTransfer` function fails.\"}],\"InvalidParameters(string)\":[{\"notice\":\"Emitted by the `validateParameters` function if the provided configuration parameters are invalid for this module.\"}]},\"events\":{\"GlobalBlockedCountriesUpdated(uint16[],bool)\":{\"notice\":\"Emitted when one or more countries are added to or removed from this module instance's global block-list.\"}},\"kind\":\"user\",\"methods\":{\"GLOBAL_LIST_MANAGER_ROLE()\":{\"notice\":\"Role identifier for addresses authorized to manage a global list of countries within a specific instance of a derived country compliance module.\"},\"canTransfer(address,address,address,uint256,bytes)\":{\"notice\":\"Determines if a transfer to a recipient should be blocked based on their country's presence in the combined block-lists.\"},\"constructor\":{\"notice\":\"Constructor for the `CountryBlockListComplianceModule`.\"},\"created(address,address,uint256,bytes)\":{\"notice\":\"This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).\"},\"destroyed(address,address,uint256,bytes)\":{\"notice\":\"This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).\"},\"getGlobalBlockedCountries()\":{\"notice\":\"Returns an array of all globally blocked country codes for this module instance.\"},\"isGloballyBlocked(uint16)\":{\"notice\":\"Checks if a specific country code is present in this module instance's global block-list.\"},\"name()\":{\"notice\":\"Returns the human-readable name of this compliance module.\"},\"setGlobalBlockedCountries(uint16[],bool)\":{\"notice\":\"Adds or removes multiple countries from this module instance's global block-list.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if the contract supports a given interface ID.\"},\"transferred(address,address,address,uint256,bytes)\":{\"notice\":\"This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.\"},\"validateParameters(bytes)\":{\"notice\":\"Validates that the provided parameters (`_params`) conform to the expected format for country-based modules.\"}},\"notice\":\"This compliance module restricts token transfers *to* users if their registered country is on a prohibited list (block-list).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/modules/CountryBlockListComplianceModule.sol\":\"CountryBlockListComplianceModule\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol\":{\"keccak256\":\"0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3\",\"dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG\"]},\"contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol\":{\"keccak256\":\"0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee\",\"dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V\"]},\"contracts/smart/interface/ISMART.sol\":{\"keccak256\":\"0xfce323160dd5cd8c9db34de0ea872bec41fd2ea8d8496e1e3c17865d374994da\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://1a1fafbdec0c59e078798438d2a3cd05bd70b864d7dfa67faf135d5634c5ae51\",\"dweb:/ipfs/QmehZwexgZN2BZKA6eFrG3DHUMRUZnzYTen6j5Ry5Znbf2\"]},\"contracts/smart/interface/ISMARTCompliance.sol\":{\"keccak256\":\"0x948341e4ad374e1dded6d1b30c395ad0f01e6ea2099fb6b96c5476e8b28c1d77\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://d261e9a0c8682f11ac86048f13e367caee6d5f512d51b8752186b8c01b6ba618\",\"dweb:/ipfs/Qmdp14emh3NFSAphyuAgsTE7qZt1g1UYcNLS3tNNM8T6Hv\"]},\"contracts/smart/interface/ISMARTComplianceModule.sol\":{\"keccak256\":\"0x0506b3696a61f59ebb32ffb0fcb1c955c3c76e1ab9f85440cf5562a800490c6e\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://2aef21997c167cf1dc9430b232e0dcddd6316f945f44e2ebe943241c2c257896\",\"dweb:/ipfs/Qmbp5MEoHkBMTTreXYoxjKohVVbEPBtcwX1QPfLHv71FxQ\"]},\"contracts/smart/interface/ISMARTIdentityRegistry.sol\":{\"keccak256\":\"0x62a95a9db2ac97ceaf59f7585d7bbaf3acb65ed9b5e57597b9d1fe1b4d7c4eda\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://bd870710359396db48e70ef7e40449125ff744c6c8ce15ad7e1894df430c87ea\",\"dweb:/ipfs/QmZ6khf5Vm6hBkkUgYC1b161jSQaZeegJVRY6ndjRW1EcG\"]},\"contracts/smart/interface/ISMARTIdentityRegistryStorage.sol\":{\"keccak256\":\"0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52\",\"dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz\"]},\"contracts/smart/interface/ISMARTTopicSchemeRegistry.sol\":{\"keccak256\":\"0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0\",\"dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd\"]},\"contracts/smart/interface/structs/SMARTComplianceModuleParamPair.sol\":{\"keccak256\":\"0x489a55538b554a0c935bee7efc28f7e821e161638c5726c9d367a644a0b7c62a\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://04bb06aed3ee3c5c6f3df9a59721c08ddd57b5521da1c9c6fd96b7c8b57db813\",\"dweb:/ipfs/QmRuzqKDr2sBHNuQhCzWGa8euNiMyvP7LTjSFjvAj5uFqh\"]},\"contracts/smart/modules/AbstractComplianceModule.sol\":{\"keccak256\":\"0xee7491e92413a69bcdcae4917721421a12b4cb52d2b7af1d8ba95d88247d8469\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8b276067f4ddf3066a06b705834b7afc4f316d9f0b5a47b5148e54e6fbc03ec1\",\"dweb:/ipfs/QmYvj9WBMUDUkTdZ2Ltj7wHAG1MPTABvehBnZNpYdZCoHQ\"]},\"contracts/smart/modules/AbstractCountryComplianceModule.sol\":{\"keccak256\":\"0x2b61ff1406705861a70098f17ecb81d010b9de0bafbe3753c0564e44540a776d\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://90ae610431a038244e35c9e769bd9e6a0d00677624d48c7b96fa9471880d7fa2\",\"dweb:/ipfs/QmNehDw2w1K8Y5DXANKyzkGDn1F59fGu4PbJ9bRFMoWVTU\"]},\"contracts/smart/modules/CountryBlockListComplianceModule.sol\":{\"keccak256\":\"0xd1471b73c29b6831f2af4ed7e247894a83d7ccea4607e14f1791a3aef03265b9\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://0b34be24d1e0e91623039fc332c6cb644a36dd38b0647d9984017dadbe5f9e3f\",\"dweb:/ipfs/QmVGJdzEsGPwApdcx6VzfrjHy1yS9Ty2MaxUcA84Pe6mS4\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e\",\"dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb\",\"dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol\":{\"keccak256\":\"0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e\",\"dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8\",\"dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"dependencies/@openzeppelin-contracts-5.3.0/metatx/ERC2771Context.sol\":{\"keccak256\":\"0x0b030a33274bde015419d99e54c9164f876a7d10eb590317b79b1d5e4ab23d99\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68e5f96988198e8efd25ddef0d89750b4daebb7fd1204fa7f5eaccdfcb3398c8\",\"dweb:/ipfs/QmaM6nNkf9UmEtQraopuZamEWCdTWp7GvuN3pjMQrNCHxm\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_trustedForwarder",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessControlBadConfirmation"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AccessControlUnauthorizedAccount"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "ComplianceCheckFailed"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "InvalidParameters"
        },
        {
          "inputs": [
            {
              "internalType": "uint16[]",
              "name": "countries",
              "type": "uint16[]",
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "blocked",
              "type": "bool",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "GlobalBlockedCountriesUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleAdminChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleGranted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleRevoked",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "GLOBAL_LIST_MANAGER_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "canTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "created"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "destroyed"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGlobalBlockedCountries",
          "outputs": [
            {
              "internalType": "uint16[]",
              "name": "",
              "type": "uint16[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "_country",
              "type": "uint16"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isGloballyBlocked",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTrustedForwarder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeRole"
        },
        {
          "inputs": [
            {
              "internalType": "uint16[]",
              "name": "_countries",
              "type": "uint16[]"
            },
            {
              "internalType": "bool",
              "name": "_block",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setGlobalBlockedCountries"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferred"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedForwarder",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_params",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "validateParameters"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "canTransfer(address,address,address,uint256,bytes)": {
            "details": "This function implements the core compliance logic for the `CountryBlockListComplianceModule`. It is called by the `SMARTComplianceImplementation` before a token transfer. The logic is as follows: 1. Retrieve the recipient's (`_to`) country code using `_getUserCountry` (from `AbstractCountryComplianceModule`). 2. If the recipient has no identity or their country code is 0 (unknown), the transfer is allowed by this module (return without reverting).    This is because the module cannot enforce a block-list if the country is unknown. 3. If the recipient's country is in this module's global block-list (checked via `isGloballyBlocked`),    the transfer is blocked, and the function reverts with `ComplianceCheckFailed(\"Receiver country globally blocked\")`. 4. If not globally blocked, decode the token-specific `additionalBlockedCountries` from `_params` (using `_decodeParams`). 5. Check if the recipient's country is present in this `additionalBlockedCountries` list. If yes,    the transfer is blocked, and the function reverts with `ComplianceCheckFailed(\"Receiver country blocked for token\")`. 6. If the recipient's country is known and not found in any block-list, the transfer is allowed by this module (function completes without reverting).",
            "params": {
              "_params": "ABI-encoded `uint16[]` of additional country codes blocked specifically for this `_token`,                in addition to the module's global block-list.",
              "_to": "Address of the recipient whose country is being checked against the block-list.",
              "_token": "Address of the `ISMART` token contract for which the compliance check is being performed."
            }
          },
          "constructor": {
            "details": "When a contract inheriting from `CountryBlockListComplianceModule` is deployed, this constructor is called. It calls the constructor of `AbstractCountryComplianceModule` with the `_trustedForwarder` address."
          },
          "created(address,address,uint256,bytes)": {
            "details": "This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.",
            "params": {
              "_params": "The parameters that were configured for this module when it was added to the `_token`.",
              "_to": "The address that received the newly created tokens.",
              "_token": "The address of the `ISMART` token contract where tokens were created.",
              "_value": "The amount of tokens created."
            }
          },
          "destroyed(address,address,uint256,bytes)": {
            "details": "This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.",
            "params": {
              "_from": "The address whose tokens were destroyed.",
              "_params": "The parameters that were configured for this module when it was added to the `_token`.",
              "_token": "The address of the `ISMART` token contract from which tokens were destroyed.",
              "_value": "The amount of tokens destroyed."
            }
          },
          "getGlobalBlockedCountries()": {
            "details": "This function provides a way to enumerate all countries that are currently blocked in the global block-list. It's useful for administrative purposes, auditing, or for front-ends that need to display the current list of blocked countries.",
            "returns": {
              "_0": "An array of `uint16` country codes representing all globally blocked countries. The array will be empty if no countries are currently in the global block-list."
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "isGloballyBlocked(uint16)": {
            "params": {
              "_country": "The country code (ISO 3166-1 numeric) to check."
            },
            "returns": {
              "_0": "`true` if the `_country` is part of the global block-list for this module instance, `false` otherwise."
            }
          },
          "isTrustedForwarder(address)": {
            "details": "Indicates whether any particular address is the trusted forwarder."
          },
          "name()": {
            "details": "This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., \"KYC Module\", \"Country Restriction Module\").",
            "returns": {
              "_0": "The string \"Country BlockList Compliance Module\"."
            }
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "setGlobalBlockedCountries(uint16[],bool)": {
            "details": "This function can only be called by addresses that have been granted the `GLOBAL_LIST_MANAGER_ROLE` for this module instance. It iterates through the `_countries` array and sets their status in the global country list. When adding countries, they are added to both the mapping and the enumerable array. When removing countries, they are removed from both the mapping and the array using the swap-and-pop technique.",
            "params": {
              "_block": "If `true`, the specified `_countries` will be added to the global block-list (or updated if already present).               If `false`, the specified `_countries` will be removed from the global block-list.",
              "_countries": "An array of country codes (ISO 3166-1 numeric) to be added or removed."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface. It also calls `super.supportsInterface(interfaceId)` to include support for interfaces from parent contracts (like `AccessControl` which also implements `IERC165`).",
            "params": {
              "interfaceId": "The interface identifier (bytes4) to check."
            },
            "returns": {
              "_0": "`true` if the contract supports the `interfaceId`, `false` otherwise."
            }
          },
          "transferred(address,address,address,uint256,bytes)": {
            "details": "This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.",
            "params": {
              "_from": "The address from which tokens were transferred.",
              "_params": "The parameters that were configured for this module when it was added to the `_token`.",
              "_to": "The address to which tokens were transferred.",
              "_token": "The address of the `ISMART` token contract that performed the transfer.",
              "_value": "The amount of tokens transferred."
            }
          },
          "trustedForwarder()": {
            "details": "Returns the address of the trusted forwarder."
          },
          "validateParameters(bytes)": {
            "details": "This function overrides `validateParameters` from `AbstractComplianceModule`. It specifically checks if `_params` can be successfully decoded as a dynamic array of `uint16` (country codes). If the decoding fails (i.e., `_params` are not in the format `abi.encode(uint16[])`), the function will revert. Note: This function *only* validates the format of `_params`. It does *not* validate the individual country codes within the array (e.g., checking if they are valid ISO 3166-1 numeric codes). Such specific validation might be done by the concrete module if needed.",
            "params": {
              "_params": "The ABI-encoded parameters to validate. Expected to be `abi.encode(uint16[] memory countryCodes)`."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "GLOBAL_LIST_MANAGER_ROLE()": {
            "notice": "Role identifier for addresses authorized to manage a global list of countries within a specific instance of a derived country compliance module."
          },
          "canTransfer(address,address,address,uint256,bytes)": {
            "notice": "Determines if a transfer to a recipient should be blocked based on their country's presence in the combined block-lists."
          },
          "constructor": {
            "notice": "Constructor for the `CountryBlockListComplianceModule`."
          },
          "created(address,address,uint256,bytes)": {
            "notice": "This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted)."
          },
          "destroyed(address,address,uint256,bytes)": {
            "notice": "This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned)."
          },
          "getGlobalBlockedCountries()": {
            "notice": "Returns an array of all globally blocked country codes for this module instance."
          },
          "isGloballyBlocked(uint16)": {
            "notice": "Checks if a specific country code is present in this module instance's global block-list."
          },
          "name()": {
            "notice": "Returns the human-readable name of this compliance module."
          },
          "setGlobalBlockedCountries(uint16[],bool)": {
            "notice": "Adds or removes multiple countries from this module instance's global block-list."
          },
          "supportsInterface(bytes4)": {
            "notice": "Checks if the contract supports a given interface ID."
          },
          "transferred(address,address,address,uint256,bytes)": {
            "notice": "This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred."
          },
          "validateParameters(bytes)": {
            "notice": "Validates that the provided parameters (`_params`) conform to the expected format for country-based modules."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/modules/CountryBlockListComplianceModule.sol": "CountryBlockListComplianceModule"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol": {
        "keccak256": "0x3a8a72df8da5bf4d988bbfb00151b933ff17cdc8d4be47dc121cd9e2083ba86f",
        "urls": [
          "bzz-raw://369250658bf8d3ebb583946820afa494271ce6bfde607d15c7060cdf7a303cf3",
          "dweb:/ipfs/QmSJjaK6vyv8K9RX1k3rwxsoKfVNyMoHEszxyxdTQfDKQG"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol": {
        "keccak256": "0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c",
        "urls": [
          "bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee",
          "dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V"
        ],
        "license": "CC0-1.0"
      },
      "contracts/smart/interface/ISMART.sol": {
        "keccak256": "0xfce323160dd5cd8c9db34de0ea872bec41fd2ea8d8496e1e3c17865d374994da",
        "urls": [
          "bzz-raw://1a1fafbdec0c59e078798438d2a3cd05bd70b864d7dfa67faf135d5634c5ae51",
          "dweb:/ipfs/QmehZwexgZN2BZKA6eFrG3DHUMRUZnzYTen6j5Ry5Znbf2"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTCompliance.sol": {
        "keccak256": "0x948341e4ad374e1dded6d1b30c395ad0f01e6ea2099fb6b96c5476e8b28c1d77",
        "urls": [
          "bzz-raw://d261e9a0c8682f11ac86048f13e367caee6d5f512d51b8752186b8c01b6ba618",
          "dweb:/ipfs/Qmdp14emh3NFSAphyuAgsTE7qZt1g1UYcNLS3tNNM8T6Hv"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTComplianceModule.sol": {
        "keccak256": "0x0506b3696a61f59ebb32ffb0fcb1c955c3c76e1ab9f85440cf5562a800490c6e",
        "urls": [
          "bzz-raw://2aef21997c167cf1dc9430b232e0dcddd6316f945f44e2ebe943241c2c257896",
          "dweb:/ipfs/Qmbp5MEoHkBMTTreXYoxjKohVVbEPBtcwX1QPfLHv71FxQ"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTIdentityRegistry.sol": {
        "keccak256": "0x62a95a9db2ac97ceaf59f7585d7bbaf3acb65ed9b5e57597b9d1fe1b4d7c4eda",
        "urls": [
          "bzz-raw://bd870710359396db48e70ef7e40449125ff744c6c8ce15ad7e1894df430c87ea",
          "dweb:/ipfs/QmZ6khf5Vm6hBkkUgYC1b161jSQaZeegJVRY6ndjRW1EcG"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTIdentityRegistryStorage.sol": {
        "keccak256": "0x219b3d03958859e2f082aac5cbf3b40acf243e326ee6e74e6bb03be7724c2985",
        "urls": [
          "bzz-raw://8cf8d30ec47cb2aed5b51d373837584fb6f08deab1d35142510271e733404f52",
          "dweb:/ipfs/Qmc9NnABx9ouhhCR8qgJC3RtU5oAyycSjZkY6nGtuWFwuz"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/ISMARTTopicSchemeRegistry.sol": {
        "keccak256": "0xec5e42dcf7d929f8a0db42c9c8a0fa81d089a9f7177b7da10df029f94334ca8a",
        "urls": [
          "bzz-raw://e346e3241e3110b3f17d2b244a49d68a1d79c6928bef7d372ea3458c1029cea0",
          "dweb:/ipfs/QmeSyCYN9qYXRjn799fRFP7X9apf7bubVhnFEUGQatx3xd"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/interface/structs/SMARTComplianceModuleParamPair.sol": {
        "keccak256": "0x489a55538b554a0c935bee7efc28f7e821e161638c5726c9d367a644a0b7c62a",
        "urls": [
          "bzz-raw://04bb06aed3ee3c5c6f3df9a59721c08ddd57b5521da1c9c6fd96b7c8b57db813",
          "dweb:/ipfs/QmRuzqKDr2sBHNuQhCzWGa8euNiMyvP7LTjSFjvAj5uFqh"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/modules/AbstractComplianceModule.sol": {
        "keccak256": "0xee7491e92413a69bcdcae4917721421a12b4cb52d2b7af1d8ba95d88247d8469",
        "urls": [
          "bzz-raw://8b276067f4ddf3066a06b705834b7afc4f316d9f0b5a47b5148e54e6fbc03ec1",
          "dweb:/ipfs/QmYvj9WBMUDUkTdZ2Ltj7wHAG1MPTABvehBnZNpYdZCoHQ"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/modules/AbstractCountryComplianceModule.sol": {
        "keccak256": "0x2b61ff1406705861a70098f17ecb81d010b9de0bafbe3753c0564e44540a776d",
        "urls": [
          "bzz-raw://90ae610431a038244e35c9e769bd9e6a0d00677624d48c7b96fa9471880d7fa2",
          "dweb:/ipfs/QmNehDw2w1K8Y5DXANKyzkGDn1F59fGu4PbJ9bRFMoWVTU"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/smart/modules/CountryBlockListComplianceModule.sol": {
        "keccak256": "0xd1471b73c29b6831f2af4ed7e247894a83d7ccea4607e14f1791a3aef03265b9",
        "urls": [
          "bzz-raw://0b34be24d1e0e91623039fc332c6cb644a36dd38b0647d9984017dadbe5f9e3f",
          "dweb:/ipfs/QmVGJdzEsGPwApdcx6VzfrjHy1yS9Ty2MaxUcA84Pe6mS4"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol": {
        "keccak256": "0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779",
        "urls": [
          "bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e",
          "dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol": {
        "keccak256": "0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e",
        "urls": [
          "bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb",
          "dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol": {
        "keccak256": "0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122",
        "urls": [
          "bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e",
          "dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol": {
        "keccak256": "0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862",
        "urls": [
          "bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8",
          "dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/AccessControl.sol": {
        "keccak256": "0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458",
        "urls": [
          "bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67",
          "dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol": {
        "keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
        "urls": [
          "bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
          "dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/metatx/ERC2771Context.sol": {
        "keccak256": "0x0b030a33274bde015419d99e54c9164f876a7d10eb590317b79b1d5e4ab23d99",
        "urls": [
          "bzz-raw://68e5f96988198e8efd25ddef0d89750b4daebb7fd1204fa7f5eaccdfcb3398c8",
          "dweb:/ipfs/QmaM6nNkf9UmEtQraopuZamEWCdTWp7GvuN3pjMQrNCHxm"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
        "urls": [
          "bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
          "dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/ERC165.sol": {
        "keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
        "urls": [
          "bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
          "dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "GLOBAL_LIST_MANAGER_ROLE()": {
        "notice": "Role identifier for addresses authorized to manage a global list of countries within a specific instance of a derived country compliance module."
      },
      "canTransfer(address,address,address,uint256,bytes)": {
        "notice": "Determines if a transfer to a recipient should be blocked based on their country's presence in the combined block-lists."
      },
      "constructor": {
        "notice": "Constructor for the `CountryBlockListComplianceModule`."
      },
      "created(address,address,uint256,bytes)": {
        "notice": "This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted)."
      },
      "destroyed(address,address,uint256,bytes)": {
        "notice": "This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned)."
      },
      "getGlobalBlockedCountries()": {
        "notice": "Returns an array of all globally blocked country codes for this module instance."
      },
      "isGloballyBlocked(uint16)": {
        "notice": "Checks if a specific country code is present in this module instance's global block-list."
      },
      "name()": {
        "notice": "Returns the human-readable name of this compliance module."
      },
      "setGlobalBlockedCountries(uint16[],bool)": {
        "notice": "Adds or removes multiple countries from this module instance's global block-list."
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if the contract supports a given interface ID."
      },
      "transferred(address,address,address,uint256,bytes)": {
        "notice": "This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred."
      },
      "validateParameters(bytes)": {
        "notice": "Validates that the provided parameters (`_params`) conform to the expected format for country-based modules."
      }
    },
    "events": {
      "GlobalBlockedCountriesUpdated(uint16[],bool)": {
        "notice": "Emitted when one or more countries are added to or removed from this module instance's global block-list."
      }
    },
    "errors": {
      "ComplianceCheckFailed(string)": [
        {
          "notice": "Emitted when a compliance check performed by the `canTransfer` function fails."
        }
      ],
      "InvalidParameters(string)": [
        {
          "notice": "Emitted by the `validateParameters` function if the provided configuration parameters are invalid for this module."
        }
      ]
    },
    "notice": "This compliance module restricts token transfers *to* users if their registered country is on a prohibited list (block-list)."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "It inherits from `AbstractCountryComplianceModule` and implements a country-based block-list logic. The module combines two sources for the block-list: 1. **Global Block-List**: A list of country codes maintained within this specific module instance.    This list can be managed by addresses holding the `GLOBAL_LIST_MANAGER_ROLE` (inherited from `AbstractCountryComplianceModule`). 2. **Token-Specific Block-List**: An additional list of country codes provided via the `_params` argument when this module    is registered with a particular `ISMART` token. The format for these parameters is `abi.encode(uint16[] memory additionalBlockedCountries)`. A transfer *to* a recipient is BLOCKED (i.e., `canTransfer` reverts) if:    - The recipient has a registered identity in the token's `ISMARTIdentityRegistry` AND their country code is known (not 0),    - AND the recipient's registered country code is present in this module instance's global block-list,    - OR the recipient's registered country code is present in the token-specific list of blocked countries passed via `_params`. If the recipient has no identity or their country code is 0, the transfer is implicitly ALLOWED by this module because it cannot determine if they are from a blocked country. Similarly, if their known country is not on any block-list, the transfer is allowed.",
    "methods": {
      "canTransfer(address,address,address,uint256,bytes)": {
        "details": "This function implements the core compliance logic for the `CountryBlockListComplianceModule`. It is called by the `SMARTComplianceImplementation` before a token transfer. The logic is as follows: 1. Retrieve the recipient's (`_to`) country code using `_getUserCountry` (from `AbstractCountryComplianceModule`). 2. If the recipient has no identity or their country code is 0 (unknown), the transfer is allowed by this module (return without reverting).    This is because the module cannot enforce a block-list if the country is unknown. 3. If the recipient's country is in this module's global block-list (checked via `isGloballyBlocked`),    the transfer is blocked, and the function reverts with `ComplianceCheckFailed(\"Receiver country globally blocked\")`. 4. If not globally blocked, decode the token-specific `additionalBlockedCountries` from `_params` (using `_decodeParams`). 5. Check if the recipient's country is present in this `additionalBlockedCountries` list. If yes,    the transfer is blocked, and the function reverts with `ComplianceCheckFailed(\"Receiver country blocked for token\")`. 6. If the recipient's country is known and not found in any block-list, the transfer is allowed by this module (function completes without reverting).",
        "params": {
          "_params": "ABI-encoded `uint16[]` of additional country codes blocked specifically for this `_token`,                in addition to the module's global block-list.",
          "_to": "Address of the recipient whose country is being checked against the block-list.",
          "_token": "Address of the `ISMART` token contract for which the compliance check is being performed."
        }
      },
      "constructor": {
        "details": "When a contract inheriting from `CountryBlockListComplianceModule` is deployed, this constructor is called. It calls the constructor of `AbstractCountryComplianceModule` with the `_trustedForwarder` address."
      },
      "created(address,address,uint256,bytes)": {
        "details": "This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.",
        "params": {
          "_params": "The parameters that were configured for this module when it was added to the `_token`.",
          "_to": "The address that received the newly created tokens.",
          "_token": "The address of the `ISMART` token contract where tokens were created.",
          "_value": "The amount of tokens created."
        }
      },
      "destroyed(address,address,uint256,bytes)": {
        "details": "This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.",
        "params": {
          "_from": "The address whose tokens were destroyed.",
          "_params": "The parameters that were configured for this module when it was added to the `_token`.",
          "_token": "The address of the `ISMART` token contract from which tokens were destroyed.",
          "_value": "The amount of tokens destroyed."
        }
      },
      "getGlobalBlockedCountries()": {
        "details": "This function provides a way to enumerate all countries that are currently blocked in the global block-list. It's useful for administrative purposes, auditing, or for front-ends that need to display the current list of blocked countries.",
        "returns": {
          "_0": "An array of `uint16` country codes representing all globally blocked countries. The array will be empty if no countries are currently in the global block-list."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isGloballyBlocked(uint16)": {
        "params": {
          "_country": "The country code (ISO 3166-1 numeric) to check."
        },
        "returns": {
          "_0": "`true` if the `_country` is part of the global block-list for this module instance, `false` otherwise."
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "name()": {
        "details": "This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., \"KYC Module\", \"Country Restriction Module\").",
        "returns": {
          "_0": "The string \"Country BlockList Compliance Module\"."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setGlobalBlockedCountries(uint16[],bool)": {
        "details": "This function can only be called by addresses that have been granted the `GLOBAL_LIST_MANAGER_ROLE` for this module instance. It iterates through the `_countries` array and sets their status in the global country list. When adding countries, they are added to both the mapping and the enumerable array. When removing countries, they are removed from both the mapping and the array using the swap-and-pop technique.",
        "params": {
          "_block": "If `true`, the specified `_countries` will be added to the global block-list (or updated if already present).               If `false`, the specified `_countries` will be removed from the global block-list.",
          "_countries": "An array of country codes (ISO 3166-1 numeric) to be added or removed."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface. It also calls `super.supportsInterface(interfaceId)` to include support for interfaces from parent contracts (like `AccessControl` which also implements `IERC165`).",
        "params": {
          "interfaceId": "The interface identifier (bytes4) to check."
        },
        "returns": {
          "_0": "`true` if the contract supports the `interfaceId`, `false` otherwise."
        }
      },
      "transferred(address,address,address,uint256,bytes)": {
        "details": "This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.",
        "params": {
          "_from": "The address from which tokens were transferred.",
          "_params": "The parameters that were configured for this module when it was added to the `_token`.",
          "_to": "The address to which tokens were transferred.",
          "_token": "The address of the `ISMART` token contract that performed the transfer.",
          "_value": "The amount of tokens transferred."
        }
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "validateParameters(bytes)": {
        "details": "This function overrides `validateParameters` from `AbstractComplianceModule`. It specifically checks if `_params` can be successfully decoded as a dynamic array of `uint16` (country codes). If the decoding fails (i.e., `_params` are not in the format `abi.encode(uint16[])`), the function will revert. Note: This function *only* validates the format of `_params`. It does *not* validate the individual country codes within the array (e.g., checking if they are valid ISO 3166-1 numeric codes). Such specific validation might be done by the concrete module if needed.",
        "params": {
          "_params": "The ABI-encoded parameters to validate. Expected to be `abi.encode(uint16[] memory countryCodes)`."
        }
      }
    },
    "events": {
      "GlobalBlockedCountriesUpdated(uint16[],bool)": {
        "params": {
          "blocked": "A boolean indicating whether the specified `countries` were added (`true`) to or removed (`false`) from the global block-list.",
          "countries": "An array of country codes (ISO 3166-1 numeric) that were updated."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ComplianceCheckFailed(string)": [
        {
          "details": "This error indicates that a proposed token transfer, mint, or burn operation violates      the rules enforced by this specific compliance module.",
          "params": {
            "reason": "A descriptive string explaining why the compliance check failed (e.g., \"Sender not allow listed\", \"Transfer exceeds daily limit\")."
          }
        }
      ],
      "InvalidParameters(string)": [
        {
          "details": "This error signals that the data supplied to configure or update the module is malformed, out of expected range,      or otherwise unsuitable for the module's intended operation.",
          "params": {
            "reason": "A descriptive string explaining why the parameters are considered invalid (e.g., \"Invalid country code format\", \"Limit parameter cannot be zero\")."
          }
        }
      ]
    },
    "title": "Country Block-List Compliance Module"
  },
  "id": 133
}