{
  "abi": [
    {
      "type": "function",
      "name": "balanceOfAt",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "timepoint",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalSupplyAt",
      "inputs": [
        {
          "name": "timepoint",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "CheckpointUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "oldBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "newBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "FutureLookup",
      "inputs": [
        {
          "name": "requestedTimepoint",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "currentTimepoint",
          "type": "uint48",
          "internalType": "uint48"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOfAt(address,uint256)": "4ee2cd7e",
    "totalSupplyAt(uint256)": "981b24d0"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedTimepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"currentTimepoint\",\"type\":\"uint48\"}],\"name\":\"FutureLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CheckpointUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface allows other contracts or off-chain applications to retrieve the balance of an account      or the total supply of the token at a specific past timepoint (e.g., block number).      A Solidity 'interface' is a contract blueprint that only declares function signatures without providing      their implementation. Contracts that 'implement' this interface must provide the defined functions.\",\"errors\":{\"FutureLookup(uint256,uint48)\":[{\"details\":\"Historical data is only available for past timepoints. The `clock()` function in the implementing      contract determines the current reference timepoint.\",\"params\":{\"currentTimepoint\":\"The current valid timepoint (e.g., current block number) according to the contract's `clock()`.\",\"requestedTimepoint\":\"The future timepoint (e.g., block number) that was invalidly requested.\"}}]},\"events\":{\"CheckpointUpdated(address,address,uint256,uint256)\":{\"details\":\"This event signals that a historical data point has been recorded.      Off-chain services can listen to this event to know when to update their own historical data caches      or to trigger other actions based on balance changes.\",\"params\":{\"account\":\"The address for which a balance checkpoint was created. If this is `address(0)`,                it signifies that the checkpoint is for the token's `totalSupply`.                `indexed` for tracking specific accounts or total supply updates.\",\"newBalance\":\"The balance (either of `account` or `totalSupply`) *after* the operation and at the                   time of this checkpoint.\",\"oldBalance\":\"The balance (either of `account` or `totalSupply`) *before* the operation that triggered                   the checkpoint.\",\"sender\":\"The address that initiated the token operation (e.g., minter, transferer, burner)               which resulted in this checkpoint update. `indexed` for easier filtering.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOfAt(address,uint256)\":{\"details\":\"The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.\",\"params\":{\"account\":\"The address of the account whose historical balance is being queried.\",\"timepoint\":\"The specific past timepoint (e.g., block number) to retrieve the balance for.\"},\"returns\":{\"_0\":\"uint256 The token balance of `account` at the specified `timepoint`.\"}},\"totalSupplyAt(uint256)\":{\"details\":\"Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.\",\"params\":{\"timepoint\":\"The specific past timepoint (e.g., block number) to retrieve the total supply for.\"},\"returns\":{\"_0\":\"uint256 The total token supply at the specified `timepoint`.\"}}},\"title\":\"Interface for SMART Historical Balances Extension\",\"version\":1},\"userdoc\":{\"errors\":{\"FutureLookup(uint256,uint48)\":[{\"notice\":\"Error reverted when a historical data lookup (e.g., `balanceOfAt`, `totalSupplyAt`) is attempted         for a `timepoint` that is in the future or is the current `timepoint`.\"}]},\"events\":{\"CheckpointUpdated(address,address,uint256,uint256)\":{\"notice\":\"Emitted when a new checkpoint is written for an account's balance or for the total supply         due to a token operation (mint, burn, transfer).\"}},\"kind\":\"user\",\"methods\":{\"balanceOfAt(address,uint256)\":{\"notice\":\"Returns the token balance of a specific `account` at a given `timepoint`.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Returns the total token supply at a given `timepoint`.\"}},\"notice\":\"Defines the external functions for querying historical token balances and total supply.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/historical-balances/ISMARTHistoricalBalances.sol\":\"ISMARTHistoricalBalances\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/historical-balances/ISMARTHistoricalBalances.sol\":{\"keccak256\":\"0x748c28628df829a95a42783247fd2e2f082bf644370f54463dd8c060a1a4fdb8\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://ca138ff3a56bdcdbfc7dd9ff17f56c0e15643d7f63172fe03dd47da35b47515f\",\"dweb:/ipfs/Qme1CeWEWgbr2YPJ9dRK98VCZ94naen9BhrrKb2wFhs6iC\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestedTimepoint",
              "type": "uint256"
            },
            {
              "internalType": "uint48",
              "name": "currentTimepoint",
              "type": "uint48"
            }
          ],
          "type": "error",
          "name": "FutureLookup"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "oldBalance",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CheckpointUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timepoint",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "timepoint",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupplyAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOfAt(address,uint256)": {
            "details": "The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.",
            "params": {
              "account": "The address of the account whose historical balance is being queried.",
              "timepoint": "The specific past timepoint (e.g., block number) to retrieve the balance for."
            },
            "returns": {
              "_0": "uint256 The token balance of `account` at the specified `timepoint`."
            }
          },
          "totalSupplyAt(uint256)": {
            "details": "Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.",
            "params": {
              "timepoint": "The specific past timepoint (e.g., block number) to retrieve the total supply for."
            },
            "returns": {
              "_0": "uint256 The total token supply at the specified `timepoint`."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOfAt(address,uint256)": {
            "notice": "Returns the token balance of a specific `account` at a given `timepoint`."
          },
          "totalSupplyAt(uint256)": {
            "notice": "Returns the total token supply at a given `timepoint`."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/historical-balances/ISMARTHistoricalBalances.sol": "ISMARTHistoricalBalances"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/historical-balances/ISMARTHistoricalBalances.sol": {
        "keccak256": "0x748c28628df829a95a42783247fd2e2f082bf644370f54463dd8c060a1a4fdb8",
        "urls": [
          "bzz-raw://ca138ff3a56bdcdbfc7dd9ff17f56c0e15643d7f63172fe03dd47da35b47515f",
          "dweb:/ipfs/Qme1CeWEWgbr2YPJ9dRK98VCZ94naen9BhrrKb2wFhs6iC"
        ],
        "license": "FSL-1.1-MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "balanceOfAt(address,uint256)": {
        "notice": "Returns the token balance of a specific `account` at a given `timepoint`."
      },
      "totalSupplyAt(uint256)": {
        "notice": "Returns the total token supply at a given `timepoint`."
      }
    },
    "events": {
      "CheckpointUpdated(address,address,uint256,uint256)": {
        "notice": "Emitted when a new checkpoint is written for an account's balance or for the total supply         due to a token operation (mint, burn, transfer)."
      }
    },
    "errors": {
      "FutureLookup(uint256,uint48)": [
        {
          "notice": "Error reverted when a historical data lookup (e.g., `balanceOfAt`, `totalSupplyAt`) is attempted         for a `timepoint` that is in the future or is the current `timepoint`."
        }
      ]
    },
    "notice": "Defines the external functions for querying historical token balances and total supply."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "This interface allows other contracts or off-chain applications to retrieve the balance of an account      or the total supply of the token at a specific past timepoint (e.g., block number).      A Solidity 'interface' is a contract blueprint that only declares function signatures without providing      their implementation. Contracts that 'implement' this interface must provide the defined functions.",
    "methods": {
      "balanceOfAt(address,uint256)": {
        "details": "The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.",
        "params": {
          "account": "The address of the account whose historical balance is being queried.",
          "timepoint": "The specific past timepoint (e.g., block number) to retrieve the balance for."
        },
        "returns": {
          "_0": "uint256 The token balance of `account` at the specified `timepoint`."
        }
      },
      "totalSupplyAt(uint256)": {
        "details": "Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.",
        "params": {
          "timepoint": "The specific past timepoint (e.g., block number) to retrieve the total supply for."
        },
        "returns": {
          "_0": "uint256 The total token supply at the specified `timepoint`."
        }
      }
    },
    "events": {
      "CheckpointUpdated(address,address,uint256,uint256)": {
        "details": "This event signals that a historical data point has been recorded.      Off-chain services can listen to this event to know when to update their own historical data caches      or to trigger other actions based on balance changes.",
        "params": {
          "account": "The address for which a balance checkpoint was created. If this is `address(0)`,                it signifies that the checkpoint is for the token's `totalSupply`.                `indexed` for tracking specific accounts or total supply updates.",
          "newBalance": "The balance (either of `account` or `totalSupply`) *after* the operation and at the                   time of this checkpoint.",
          "oldBalance": "The balance (either of `account` or `totalSupply`) *before* the operation that triggered                   the checkpoint.",
          "sender": "The address that initiated the token operation (e.g., minter, transferer, burner)               which resulted in this checkpoint update. `indexed` for easier filtering."
        }
      }
    },
    "errors": {
      "FutureLookup(uint256,uint48)": [
        {
          "details": "Historical data is only available for past timepoints. The `clock()` function in the implementing      contract determines the current reference timepoint.",
          "params": {
            "currentTimepoint": "The current valid timepoint (e.g., current block number) according to the contract's `clock()`.",
            "requestedTimepoint": "The future timepoint (e.g., block number) that was invalidly requested."
          }
        }
      ]
    },
    "title": "Interface for SMART Historical Balances Extension"
  },
  "id": 92
}