{
  "abi": [
    {
      "type": "function",
      "name": "calculateTokenIdentityAddress",
      "inputs": [
        {
          "name": "_name",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "_symbol",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "_decimals",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "_initialManager",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "predictedAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "calculateWalletIdentityAddress",
      "inputs": [
        {
          "name": "_walletAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_initialManager",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "predictedAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "createIdentity",
      "inputs": [
        {
          "name": "_wallet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_managementKeys",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [
        {
          "name": "identityContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "createTokenIdentity",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_accessManager",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "tokenIdentityContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getIdentity",
      "inputs": [
        {
          "name": "_wallet",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "identityContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTokenIdentity",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "tokenIdentityContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "IdentityCreated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "identity",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "wallet",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TokenIdentityCreated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "identity",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "token",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "calculateTokenIdentityAddress(string,string,uint8,address)": "f47ebbee",
    "calculateWalletIdentityAddress(address,address)": "ad70bdd7",
    "createIdentity(address,bytes32[])": "e6aa44e2",
    "createTokenIdentity(address,address)": "55c759ed",
    "getIdentity(address)": "2fea7b81",
    "getTokenIdentity(address)": "c6c7fb56",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenIdentityCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_initialManager\",\"type\":\"address\"}],\"name\":\"calculateTokenIdentityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predictedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialManager\",\"type\":\"address\"}],\"name\":\"calculateWalletIdentityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predictedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_managementKeys\",\"type\":\"bytes32[]\"}],\"name\":\"createIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"}],\"name\":\"createTokenIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenIdentityContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identityContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenIdentityContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"These identities are typically based on standards like ERC725 (OnchainID) and are deployed as proxy contracts      to allow for upgradeability. The factory pattern ensures that identities are created in a consistent and predictable manner. This interface extends IERC165 for interface detection support.\",\"events\":{\"IdentityCreated(address,address,address)\":{\"params\":{\"identity\":\"The address of the newly deployed `ATKIdentityProxy` contract.\",\"sender\":\"The address that initiated the identity creation (e.g., an address with `REGISTRAR_ROLE`).\",\"wallet\":\"The investor wallet address for which the identity was created.\"}},\"TokenIdentityCreated(address,address,address)\":{\"params\":{\"identity\":\"The address of the newly deployed `ATKTokenIdentityProxy` contract.\",\"sender\":\"The address that initiated the token identity creation (e.g., an address with `REGISTRAR_ROLE`).\",\"token\":\"The address of the token contract for which the identity was created.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateTokenIdentityAddress(string,string,uint8,address)\":{\"details\":\"Uses token metadata (name, symbol, decimals) combined with token address to calculate the deployment      address. This provides a way to predict addresses for tokens based on their characteristics.\",\"params\":{\"_decimals\":\"The decimals of the token used in salt generation.\",\"_initialManager\":\"The address that would be (or was) set as the initial manager during the token identity's creation.\",\"_name\":\"The name of the token used in salt generation.\",\"_symbol\":\"The symbol of the token used in salt generation.\"},\"returns\":{\"predictedAddress\":\"The pre-computed or actual deployment address of the token's identity contract.\"}},\"calculateWalletIdentityAddress(address,address)\":{\"details\":\"This function typically uses the CREATE2 opcode logic to predict the address based on the factory's address,      a unique salt (often derived from `_walletAddress`), and the creation code of the identity proxy contract,      including its constructor arguments like `_initialManager`.\",\"params\":{\"_initialManager\":\"The address that would be (or was) set as the initial manager during the identity's creation.\",\"_walletAddress\":\"The wallet address for which the identity address is being calculated.\"},\"returns\":{\"predictedAddress\":\"The pre-computed or actual deployment address of the wallet's identity contract.\"}},\"createIdentity(address,bytes32[])\":{\"details\":\"This function is expected to deploy a new identity contract (e.g., a `ATKIdentityProxy`)      and associate it with the `_wallet` address. It may also set up initial management keys for the identity.      The creation process often involves deterministic deployment using CREATE2 for predictable addresses.\",\"params\":{\"_managementKeys\":\"An array of `bytes32` representing pre-hashed management keys to be added to the new identity.                        These keys grant administrative control over the identity contract according to ERC734/ERC725 standards.\",\"_wallet\":\"The wallet address for which the identity is being created. This address might also serve as an initial manager.\"},\"returns\":{\"identityContract\":\"The address of the newly deployed identity contract.\"}},\"createTokenIdentity(address,address)\":{\"details\":\"This function deploys a new identity contract (e.g., a `ATKTokenIdentityProxy`) using the token's      metadata (name, symbol, decimals) queried from the ISMART interface to generate a unique salt.      This provides more predictable and meaningful identity addresses based on token characteristics.\",\"params\":{\"_accessManager\":\"The address of the access manager contract to be used for the token identity.\",\"_token\":\"The address of\"},\"returns\":{\"tokenIdentityContract\":\"The address of the newly deployed token identity contract.\"}},\"getIdentity(address)\":{\"params\":{\"_wallet\":\"The wallet address to look up.\"},\"returns\":{\"identityContract\":\"The address of the identity contract if one exists for the wallet, otherwise `address(0)`.\"}},\"getTokenIdentity(address)\":{\"params\":{\"_token\":\"The token contract address to look up.\"},\"returns\":{\"tokenIdentityContract\":\"The address of the token identity contract if one exists for the token, otherwise `address(0)`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"IATKIdentityFactory Interface\",\"version\":1},\"userdoc\":{\"events\":{\"IdentityCreated(address,address,address)\":{\"notice\":\"Emitted when a new identity contract is successfully created and registered for an investor wallet.\"},\"TokenIdentityCreated(address,address,address)\":{\"notice\":\"Emitted when a new identity contract is successfully created and registered for a token contract.\"}},\"kind\":\"user\",\"methods\":{\"calculateTokenIdentityAddress(string,string,uint8,address)\":{\"notice\":\"Calculates the deterministic address at which an identity contract for a token *would be* or *was* deployed using metadata-based salt.\"},\"calculateWalletIdentityAddress(address,address)\":{\"notice\":\"Calculates the deterministic address at which an identity contract for a user wallet *would be* or *was* deployed.\"},\"createIdentity(address,bytes32[])\":{\"notice\":\"Creates a new on-chain identity for a given user wallet address.\"},\"createTokenIdentity(address,address)\":{\"notice\":\"Creates a new on-chain identity specifically for a token contract using metadata-based salt.\"},\"getIdentity(address)\":{\"notice\":\"Retrieves the address of an already created on-chain identity associated with a given user wallet.\"},\"getTokenIdentity(address)\":{\"notice\":\"Retrieves the address of an already created on-chain identity associated with a given token contract.\"}},\"notice\":\"This interface defines the functions for a factory contract responsible for creating and managing         on-chain identities for both user wallets and token contracts within the ATK Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/identity-factory/IATKIdentityFactory.sol\":\"IATKIdentityFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/system/identity-factory/IATKIdentityFactory.sol\":{\"keccak256\":\"0x59c2021d497a9b067fe83a0c8f009b374b6bf36743bc5121b0969c60786f8266\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://1a8d11c35ae941964b138d974fb75d9927e185f0862ceef84fd2d13ea7060595\",\"dweb:/ipfs/QmQr1iLoGBBhcL1Rww9EmLsJx5rf6C3VdJNFyh5sYVTrrJ\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "identity",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "identity",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TokenIdentityCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "_decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_initialManager",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateTokenIdentityAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "predictedAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_walletAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_initialManager",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateWalletIdentityAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "predictedAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "_managementKeys",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createIdentity",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityContract",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_accessManager",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createTokenIdentity",
          "outputs": [
            {
              "internalType": "address",
              "name": "tokenIdentityContract",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_wallet",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getIdentity",
          "outputs": [
            {
              "internalType": "address",
              "name": "identityContract",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTokenIdentity",
          "outputs": [
            {
              "internalType": "address",
              "name": "tokenIdentityContract",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "calculateTokenIdentityAddress(string,string,uint8,address)": {
            "details": "Uses token metadata (name, symbol, decimals) combined with token address to calculate the deployment      address. This provides a way to predict addresses for tokens based on their characteristics.",
            "params": {
              "_decimals": "The decimals of the token used in salt generation.",
              "_initialManager": "The address that would be (or was) set as the initial manager during the token identity's creation.",
              "_name": "The name of the token used in salt generation.",
              "_symbol": "The symbol of the token used in salt generation."
            },
            "returns": {
              "predictedAddress": "The pre-computed or actual deployment address of the token's identity contract."
            }
          },
          "calculateWalletIdentityAddress(address,address)": {
            "details": "This function typically uses the CREATE2 opcode logic to predict the address based on the factory's address,      a unique salt (often derived from `_walletAddress`), and the creation code of the identity proxy contract,      including its constructor arguments like `_initialManager`.",
            "params": {
              "_initialManager": "The address that would be (or was) set as the initial manager during the identity's creation.",
              "_walletAddress": "The wallet address for which the identity address is being calculated."
            },
            "returns": {
              "predictedAddress": "The pre-computed or actual deployment address of the wallet's identity contract."
            }
          },
          "createIdentity(address,bytes32[])": {
            "details": "This function is expected to deploy a new identity contract (e.g., a `ATKIdentityProxy`)      and associate it with the `_wallet` address. It may also set up initial management keys for the identity.      The creation process often involves deterministic deployment using CREATE2 for predictable addresses.",
            "params": {
              "_managementKeys": "An array of `bytes32` representing pre-hashed management keys to be added to the new identity.                        These keys grant administrative control over the identity contract according to ERC734/ERC725 standards.",
              "_wallet": "The wallet address for which the identity is being created. This address might also serve as an initial manager."
            },
            "returns": {
              "identityContract": "The address of the newly deployed identity contract."
            }
          },
          "createTokenIdentity(address,address)": {
            "details": "This function deploys a new identity contract (e.g., a `ATKTokenIdentityProxy`) using the token's      metadata (name, symbol, decimals) queried from the ISMART interface to generate a unique salt.      This provides more predictable and meaningful identity addresses based on token characteristics.",
            "params": {
              "_accessManager": "The address of the access manager contract to be used for the token identity.",
              "_token": "The address of"
            },
            "returns": {
              "tokenIdentityContract": "The address of the newly deployed token identity contract."
            }
          },
          "getIdentity(address)": {
            "params": {
              "_wallet": "The wallet address to look up."
            },
            "returns": {
              "identityContract": "The address of the identity contract if one exists for the wallet, otherwise `address(0)`."
            }
          },
          "getTokenIdentity(address)": {
            "params": {
              "_token": "The token contract address to look up."
            },
            "returns": {
              "tokenIdentityContract": "The address of the token identity contract if one exists for the token, otherwise `address(0)`."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "calculateTokenIdentityAddress(string,string,uint8,address)": {
            "notice": "Calculates the deterministic address at which an identity contract for a token *would be* or *was* deployed using metadata-based salt."
          },
          "calculateWalletIdentityAddress(address,address)": {
            "notice": "Calculates the deterministic address at which an identity contract for a user wallet *would be* or *was* deployed."
          },
          "createIdentity(address,bytes32[])": {
            "notice": "Creates a new on-chain identity for a given user wallet address."
          },
          "createTokenIdentity(address,address)": {
            "notice": "Creates a new on-chain identity specifically for a token contract using metadata-based salt."
          },
          "getIdentity(address)": {
            "notice": "Retrieves the address of an already created on-chain identity associated with a given user wallet."
          },
          "getTokenIdentity(address)": {
            "notice": "Retrieves the address of an already created on-chain identity associated with a given token contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/identity-factory/IATKIdentityFactory.sol": "IATKIdentityFactory"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/system/identity-factory/IATKIdentityFactory.sol": {
        "keccak256": "0x59c2021d497a9b067fe83a0c8f009b374b6bf36743bc5121b0969c60786f8266",
        "urls": [
          "bzz-raw://1a8d11c35ae941964b138d974fb75d9927e185f0862ceef84fd2d13ea7060595",
          "dweb:/ipfs/QmQr1iLoGBBhcL1Rww9EmLsJx5rf6C3VdJNFyh5sYVTrrJ"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "calculateTokenIdentityAddress(string,string,uint8,address)": {
        "notice": "Calculates the deterministic address at which an identity contract for a token *would be* or *was* deployed using metadata-based salt."
      },
      "calculateWalletIdentityAddress(address,address)": {
        "notice": "Calculates the deterministic address at which an identity contract for a user wallet *would be* or *was* deployed."
      },
      "createIdentity(address,bytes32[])": {
        "notice": "Creates a new on-chain identity for a given user wallet address."
      },
      "createTokenIdentity(address,address)": {
        "notice": "Creates a new on-chain identity specifically for a token contract using metadata-based salt."
      },
      "getIdentity(address)": {
        "notice": "Retrieves the address of an already created on-chain identity associated with a given user wallet."
      },
      "getTokenIdentity(address)": {
        "notice": "Retrieves the address of an already created on-chain identity associated with a given token contract."
      }
    },
    "events": {
      "IdentityCreated(address,address,address)": {
        "notice": "Emitted when a new identity contract is successfully created and registered for an investor wallet."
      },
      "TokenIdentityCreated(address,address,address)": {
        "notice": "Emitted when a new identity contract is successfully created and registered for a token contract."
      }
    },
    "notice": "This interface defines the functions for a factory contract responsible for creating and managing         on-chain identities for both user wallets and token contracts within the ATK Protocol."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "These identities are typically based on standards like ERC725 (OnchainID) and are deployed as proxy contracts      to allow for upgradeability. The factory pattern ensures that identities are created in a consistent and predictable manner. This interface extends IERC165 for interface detection support.",
    "methods": {
      "calculateTokenIdentityAddress(string,string,uint8,address)": {
        "details": "Uses token metadata (name, symbol, decimals) combined with token address to calculate the deployment      address. This provides a way to predict addresses for tokens based on their characteristics.",
        "params": {
          "_decimals": "The decimals of the token used in salt generation.",
          "_initialManager": "The address that would be (or was) set as the initial manager during the token identity's creation.",
          "_name": "The name of the token used in salt generation.",
          "_symbol": "The symbol of the token used in salt generation."
        },
        "returns": {
          "predictedAddress": "The pre-computed or actual deployment address of the token's identity contract."
        }
      },
      "calculateWalletIdentityAddress(address,address)": {
        "details": "This function typically uses the CREATE2 opcode logic to predict the address based on the factory's address,      a unique salt (often derived from `_walletAddress`), and the creation code of the identity proxy contract,      including its constructor arguments like `_initialManager`.",
        "params": {
          "_initialManager": "The address that would be (or was) set as the initial manager during the identity's creation.",
          "_walletAddress": "The wallet address for which the identity address is being calculated."
        },
        "returns": {
          "predictedAddress": "The pre-computed or actual deployment address of the wallet's identity contract."
        }
      },
      "createIdentity(address,bytes32[])": {
        "details": "This function is expected to deploy a new identity contract (e.g., a `ATKIdentityProxy`)      and associate it with the `_wallet` address. It may also set up initial management keys for the identity.      The creation process often involves deterministic deployment using CREATE2 for predictable addresses.",
        "params": {
          "_managementKeys": "An array of `bytes32` representing pre-hashed management keys to be added to the new identity.                        These keys grant administrative control over the identity contract according to ERC734/ERC725 standards.",
          "_wallet": "The wallet address for which the identity is being created. This address might also serve as an initial manager."
        },
        "returns": {
          "identityContract": "The address of the newly deployed identity contract."
        }
      },
      "createTokenIdentity(address,address)": {
        "details": "This function deploys a new identity contract (e.g., a `ATKTokenIdentityProxy`) using the token's      metadata (name, symbol, decimals) queried from the ISMART interface to generate a unique salt.      This provides more predictable and meaningful identity addresses based on token characteristics.",
        "params": {
          "_accessManager": "The address of the access manager contract to be used for the token identity.",
          "_token": "The address of"
        },
        "returns": {
          "tokenIdentityContract": "The address of the newly deployed token identity contract."
        }
      },
      "getIdentity(address)": {
        "params": {
          "_wallet": "The wallet address to look up."
        },
        "returns": {
          "identityContract": "The address of the identity contract if one exists for the wallet, otherwise `address(0)`."
        }
      },
      "getTokenIdentity(address)": {
        "params": {
          "_token": "The token contract address to look up."
        },
        "returns": {
          "tokenIdentityContract": "The address of the token identity contract if one exists for the token, otherwise `address(0)`."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "events": {
      "IdentityCreated(address,address,address)": {
        "params": {
          "identity": "The address of the newly deployed `ATKIdentityProxy` contract.",
          "sender": "The address that initiated the identity creation (e.g., an address with `REGISTRAR_ROLE`).",
          "wallet": "The investor wallet address for which the identity was created."
        }
      },
      "TokenIdentityCreated(address,address,address)": {
        "params": {
          "identity": "The address of the newly deployed `ATKTokenIdentityProxy` contract.",
          "sender": "The address that initiated the token identity creation (e.g., an address with `REGISTRAR_ROLE`).",
          "token": "The address of the token contract for which the identity was created."
        }
      }
    },
    "title": "IATKIdentityFactory Interface"
  },
  "id": 156
}