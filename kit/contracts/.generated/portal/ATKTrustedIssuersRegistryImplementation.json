{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "trustedForwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADMIN_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "addTrustedIssuer",
      "inputs": [
        {
          "name": "_trustedIssuer",
          "type": "address",
          "internalType": "contract IClaimIssuer"
        },
        {
          "name": "_claimTopics",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getRoleAdmin",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTrustedIssuerClaimTopics",
      "inputs": [
        {
          "name": "_trustedIssuer",
          "type": "address",
          "internalType": "contract IClaimIssuer"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTrustedIssuers",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "contract IClaimIssuer[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTrustedIssuersForClaimTopic",
      "inputs": [
        {
          "name": "claimTopic",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "contract IClaimIssuer[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "grantRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasClaimTopic",
      "inputs": [
        {
          "name": "_issuer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_claimTopic",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "initialAdmin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isTrustedForwarder",
      "inputs": [
        {
          "name": "forwarder",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isTrustedIssuer",
      "inputs": [
        {
          "name": "_issuer",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "removeTrustedIssuer",
      "inputs": [
        {
          "name": "_trustedIssuer",
          "type": "address",
          "internalType": "contract IClaimIssuer"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "callerConfirmation",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "trustedForwarder",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "updateIssuerClaimTopics",
      "inputs": [
        {
          "name": "_trustedIssuer",
          "type": "address",
          "internalType": "contract IClaimIssuer"
        },
        {
          "name": "_newClaimTopics",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ClaimTopicsUpdated",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_issuer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_claimTopics",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint64",
          "indexed": false,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleAdminChanged",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "previousAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "newAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleGranted",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleRevoked",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TrustedIssuerAdded",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_issuer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_claimTopics",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TrustedIssuerRemoved",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_issuer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessControlBadConfirmation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AccessControlUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "neededRole",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AddressNotFoundInList",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidInitialization",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidIssuerAddress",
      "inputs": []
    },
    {
      "type": "error",
      "name": "IssuerAlreadyExists",
      "inputs": [
        {
          "name": "issuerAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "IssuerDoesNotExist",
      "inputs": [
        {
          "name": "issuerAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "IssuerNotFoundInTopicList",
      "inputs": [
        {
          "name": "issuerAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "claimTopic",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "NoClaimTopicsProvided",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotInitializing",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60a03461011057601f61160338819003918201601f19168301916001600160401b038311848410176101145780849260209460405283398101031261011057516001600160a01b0381168103610110576080525f5160206115e35f395f51905f525460ff8160401c16610101576002600160401b03196001600160401b038216016100ab575b6040516114ba908161012982396080518181816107df0152818161082e01526113ec0152f35b6001600160401b0319166001600160401b039081175f5160206115e35f395f51905f52556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f610085565b63f92ee8a960e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a714610b295750806304bc7e84146109f3578063248a9ca3146109b45780632f2ff15d1461096a57806334a899871461092457806336568abe146108d057806352c111d114610862578063572b6c051461080e5780637da0a877146107ca57806391d14854146107755780639f63ea9814610531578063a217fddf14610517578063b93d28eb14610411578063c28fb2781461036d578063c4d66de814610215578063d547741f146101c4578063d9dd24c5146101255763ef2ed1a4146100e2575f80fd5b34610121576020366003190112610121576001600160a01b03610103610b96565b165f525f602052602060ff600260405f200154166040519015158152f35b5f80fd5b34610121575f3660031901126101215760015461014181610d33565b905f600154905b828110610161576040518061015d8682610c29565b0390f35b818110156101b05760015f8190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68201549091906001600160a01b03166101a98287610d65565b5201610148565b634e487b7160e01b5f52603260045260245ffd5b34610121576040366003190112610121576102136004356101e3610c13565b9061020e610209825f525f51602061146e5f395f51905f52602052600160405f20015490565b610e51565b6112a2565b005b346101215760203660031901126101215761022e610b96565b5f51602061148e5f395f51905f525460ff8160401c16159167ffffffffffffffff821680159081610365575b600114908161035b575b159081610352575b506103435767ffffffffffffffff1982166001175f51602061148e5f395f51905f52556102b99183610317575b506102a2611442565b6102aa611442565b6102b381611052565b50611114565b506102c057005b68ff0000000000000000195f51602061148e5f395f51905f5254165f51602061148e5f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff191668010000000000000001175f51602061148e5f395f51905f525583610299565b63f92ee8a960e01b5f5260045ffd5b9050158461026c565b303b159150610264565b84915061025a565b34610121576020366003190112610121576001600160a01b0361038e610b96565b16805f525f60205260ff600260405f20015416156103ff575f525f6020526103bb600160405f2001610d79565b6040518091602082016020835281518091526020604084019201905f5b8181106103e6575050500390f35b82518452859450602093840193909201916001016103d8565b63502531bd60e11b5f5260045260245ffd5b346101215760203660031901126101215761042a610b96565b610432610dc3565b6001600160a01b03165f8181526020819052604090206002015460ff16156103ff57805f525f60205261046a600160405f2001610d79565b6104738261134b565b8051905f5b8281106104fa5783805f525f60205260405f205f8155600181018054905f8155816104dc575b5f6002840155836001600160a01b036104b56113e9565b167ff7c835af57fa00668263633370297e8186b0e3f75d50c54cad2e941512926a905f80a3005b5f5260205f20908101905b8181101561049e575f81556001016104e7565b806105118561050b60019486610d65565b51610eed565b01610478565b34610121575f3660031901126101215760206040515f8152f35b346101215761053f36610bac565b91610548610dc3565b6001600160a01b031691821561076657801561075757825f525f60205260ff600260405f20015416610744576040516060810181811067ffffffffffffffff82111761070c5760405283815261059d82610d1b565b906105ab6040519283610cf9565b828252602082018360051b8501903682116101215785905b828210610734575050506020818101928352600160408084018281525f898152938490529220925183546001600160a01b0319166001600160a01b039190911617835592518051919383019067ffffffffffffffff831161070c5760209061062b8484610c90565b01905f5260205f205f5b83811061072057505050506002019051151560ff80198354169116179055600154600160401b81101561070c578361067882600161069c94016001556001610c6b565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b5f5b8181106106ee57507fe94b462a27e434fcc3a7b7078729bb68e9244d17b74b452e475bd8972cd66575906001600160a01b036106d86113e9565b16926106e960405192839283610cd0565b0390a3005b80610706856107006001948688610c80565b35610ff6565b0161069e565b634e487b7160e01b5f52604160045260245ffd5b600190602084519401938184015501610635565b81358152602091820191016105c3565b8263c9b1283560e01b5f5260045260245ffd5b63427931f160e11b5f5260045ffd5b63d051089760e01b5f5260045ffd5b346101215760403660031901126101215761078e610c13565b6004355f525f51602061146e5f395f51905f5260205260405f209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b34610121575f366003190112610121576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610121576020366003190112610121576020610829610b96565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b34610121576020366003190112610121576004355f52600260205260405f20805461088c81610d33565b915f5b8281106108a4576040518061015d8682610c29565b806108b160019284610c6b565b838060a01b0391549060031b1c166108c98287610d65565b520161088f565b34610121576040366003190112610121576108e9610c13565b6001600160a01b036108f96113e9565b166001600160a01b0382160361091557610213906004356112a2565b63334bd91960e11b5f5260045ffd5b346101215760403660031901126101215761093d610b96565b6024355f52600360205260405f209060018060a01b03165f52602052602060405f20541515604051908152f35b3461012157604036600319011261012157610213600435610989610c13565b906109af610209825f525f51602061146e5f395f51905f52602052600160405f20015490565b6111f1565b346101215760203660031901126101215760206109eb6004355f525f51602061146e5f395f51905f52602052600160405f20015490565b604051908152f35b3461012157610a0136610bac565b91610a0a610dc3565b60018060a01b031691825f525f60205260ff600260405f2001541615610b1657801561075757825f525f602052600160405f20018054905f5b828110610af3575050505f5b818110610adb5750825f525f602052600160405f200167ffffffffffffffff821161070c57610a7e8282610c90565b82905f5260205f20905f5b838110610ac757507fce5a7730021226f481d123afc9df227c4b90ec04824a92926056c4ecee77d2fd9291506001600160a01b0390506106d86113e9565b600190602083359301928185015501610a89565b80610aed856107006001948688610c80565b01610a4f565b80610b1087610b0460019486610c6b565b90549060031b1c610eed565b01610a43565b8263502531bd60e11b5f5260045260245ffd5b34610121576020366003190112610121576004359063ffffffff60e01b82168092036101215760209163161eee7760e31b8114908115610b6b575b5015158152f35b637965db0b60e01b811491508115610b85575b5083610b64565b6301ffc9a760e01b14905083610b7e565b600435906001600160a01b038216820361012157565b6040600319820112610121576004356001600160a01b0381168103610121579160243567ffffffffffffffff811161012157826023820112156101215780600401359267ffffffffffffffff84116101215760248460051b83010111610121576024019190565b602435906001600160a01b038216820361012157565b60206040818301928281528451809452019201905f5b818110610c4c5750505090565b82516001600160a01b0316845260209384019390920191600101610c3f565b80548210156101b0575f5260205f2001905f90565b91908110156101b05760051b0190565b90600160401b811161070c57815491818155828210610cae57505050565b5f5260205f2091820191015b818110610cc5575050565b5f8155600101610cba565b602080825281018390526001600160fb1b0383116101215760409260051b809284830137010190565b90601f8019910116810190811067ffffffffffffffff82111761070c57604052565b67ffffffffffffffff811161070c5760051b60200190565b90610d3d82610d1b565b610d4a6040519182610cf9565b8281528092610d5b601f1991610d1b565b0190602036910137565b80518210156101b05760209160051b010190565b90604051918281549182825260208201905f5260205f20925f5b818110610daa575050610da892500383610cf9565b565b8454835260019485019487945060209093019201610d93565b610dcb6113e9565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff1615610e0d5750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c309238602452604490fd5b610e596113e9565b815f525f51602061146e5f395f51905f5260205260405f2060018060a01b0382165f5260205260ff60405f20541615610e90575050565b63e2517d3f60e01b5f5260018060a01b031660045260245260445ffd5b80548015610ed9575f190190610ec38282610c6b565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b5f52603160045260245ffd5b90815f52600360205260405f2060018060a01b0382165f5260205260405f2054908115610fd7575f19820192828411610fc357805f52600260205260405f20928354945f198601958611610fc357610f48610da89686610c6b565b90546001600160a01b0360039290921b1c811691908516829003610f8e575b5050505f52600360205260405f209060018060a01b03165f526020525f6040812055610ead565b81610678610f9c9288610c6b565b825f52600360205260405f209060018060a01b03165f5260205260405f20555f8080610f67565b634e487b7160e01b5f52601160045260245ffd5b9050638195595960e01b5f5260018060a01b031660045260245260445ffd5b90815f52600260205260405f209182549060018201809211610fc3575f52600360205260405f2060018060a01b0383165f5260205260405f2055815491600160401b83101561070c5782610678916001610da895018155610c6b565b6001600160a01b0381165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1661110f576001600160a01b038181165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260409020805460ff191660011790556110da6113e9565b16906001600160a01b03165f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff1661110f576001600160a01b038181165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb708660205260409020805460ff1916600117905561119c6113e9565b16906001600160a01b03167fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c3092387f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b5f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff1661129c575f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff191660011790556112676113e9565b16916001600160a01b0316907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b5f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff161561129c575f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff191690556113166113e9565b16916001600160a01b0316907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b906001545f5b818110611376576378ca517b60e11b5f9081526001600160a01b038516600452602490fd5b611381816001610c6b565b905460039190911b1c6001600160a01b03908116908516146113a557600101611351565b9192505f19810191908211610fc3576106786113c56113df936001610c6b565b905460039190911b1c6001600160a01b0316916001610c6b565b610da86001610ead565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611437575b15611433576013193601368111610fc3573560601c90565b3390565b50601436101561141b565b60ff5f51602061148e5f395f51905f525460401c161561145e57565b631afcd79f60e31b5f5260045ffdfe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000af0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00",
    "sourceMap": "3113:36241:172:-:0;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;1623:37:236;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;7894:76:237;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;7983:34:237;7979:146;;-1:-1:-1;3113:36241:172;;;;;;;;1623:37:236;3113:36241:172;;;;;;;;;;;;;;;;7979:146:237;-1:-1:-1;;;;;;3113:36241:172;-1:-1:-1;;;;;3113:36241:172;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;8085:29:237;;3113:36241:172;;8085:29:237;7979:146;;;7894:76;7936:23;;;-1:-1:-1;7936:23:237;;-1:-1:-1;7936:23:237;3113:36241:172;-1:-1:-1;3113:36241:172;;;;;;-1:-1:-1;3113:36241:172;;;;;-1:-1:-1;3113:36241:172",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a714610b295750806304bc7e84146109f3578063248a9ca3146109b45780632f2ff15d1461096a57806334a899871461092457806336568abe146108d057806352c111d114610862578063572b6c051461080e5780637da0a877146107ca57806391d14854146107755780639f63ea9814610531578063a217fddf14610517578063b93d28eb14610411578063c28fb2781461036d578063c4d66de814610215578063d547741f146101c4578063d9dd24c5146101255763ef2ed1a4146100e2575f80fd5b34610121576020366003190112610121576001600160a01b03610103610b96565b165f525f602052602060ff600260405f200154166040519015158152f35b5f80fd5b34610121575f3660031901126101215760015461014181610d33565b905f600154905b828110610161576040518061015d8682610c29565b0390f35b818110156101b05760015f8190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68201549091906001600160a01b03166101a98287610d65565b5201610148565b634e487b7160e01b5f52603260045260245ffd5b34610121576040366003190112610121576102136004356101e3610c13565b9061020e610209825f525f51602061146e5f395f51905f52602052600160405f20015490565b610e51565b6112a2565b005b346101215760203660031901126101215761022e610b96565b5f51602061148e5f395f51905f525460ff8160401c16159167ffffffffffffffff821680159081610365575b600114908161035b575b159081610352575b506103435767ffffffffffffffff1982166001175f51602061148e5f395f51905f52556102b99183610317575b506102a2611442565b6102aa611442565b6102b381611052565b50611114565b506102c057005b68ff0000000000000000195f51602061148e5f395f51905f5254165f51602061148e5f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff191668010000000000000001175f51602061148e5f395f51905f525583610299565b63f92ee8a960e01b5f5260045ffd5b9050158461026c565b303b159150610264565b84915061025a565b34610121576020366003190112610121576001600160a01b0361038e610b96565b16805f525f60205260ff600260405f20015416156103ff575f525f6020526103bb600160405f2001610d79565b6040518091602082016020835281518091526020604084019201905f5b8181106103e6575050500390f35b82518452859450602093840193909201916001016103d8565b63502531bd60e11b5f5260045260245ffd5b346101215760203660031901126101215761042a610b96565b610432610dc3565b6001600160a01b03165f8181526020819052604090206002015460ff16156103ff57805f525f60205261046a600160405f2001610d79565b6104738261134b565b8051905f5b8281106104fa5783805f525f60205260405f205f8155600181018054905f8155816104dc575b5f6002840155836001600160a01b036104b56113e9565b167ff7c835af57fa00668263633370297e8186b0e3f75d50c54cad2e941512926a905f80a3005b5f5260205f20908101905b8181101561049e575f81556001016104e7565b806105118561050b60019486610d65565b51610eed565b01610478565b34610121575f3660031901126101215760206040515f8152f35b346101215761053f36610bac565b91610548610dc3565b6001600160a01b031691821561076657801561075757825f525f60205260ff600260405f20015416610744576040516060810181811067ffffffffffffffff82111761070c5760405283815261059d82610d1b565b906105ab6040519283610cf9565b828252602082018360051b8501903682116101215785905b828210610734575050506020818101928352600160408084018281525f898152938490529220925183546001600160a01b0319166001600160a01b039190911617835592518051919383019067ffffffffffffffff831161070c5760209061062b8484610c90565b01905f5260205f205f5b83811061072057505050506002019051151560ff80198354169116179055600154600160401b81101561070c578361067882600161069c94016001556001610c6b565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b5f5b8181106106ee57507fe94b462a27e434fcc3a7b7078729bb68e9244d17b74b452e475bd8972cd66575906001600160a01b036106d86113e9565b16926106e960405192839283610cd0565b0390a3005b80610706856107006001948688610c80565b35610ff6565b0161069e565b634e487b7160e01b5f52604160045260245ffd5b600190602084519401938184015501610635565b81358152602091820191016105c3565b8263c9b1283560e01b5f5260045260245ffd5b63427931f160e11b5f5260045ffd5b63d051089760e01b5f5260045ffd5b346101215760403660031901126101215761078e610c13565b6004355f525f51602061146e5f395f51905f5260205260405f209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b34610121575f366003190112610121576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610121576020366003190112610121576020610829610b96565b6040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169216919091148152f35b34610121576020366003190112610121576004355f52600260205260405f20805461088c81610d33565b915f5b8281106108a4576040518061015d8682610c29565b806108b160019284610c6b565b838060a01b0391549060031b1c166108c98287610d65565b520161088f565b34610121576040366003190112610121576108e9610c13565b6001600160a01b036108f96113e9565b166001600160a01b0382160361091557610213906004356112a2565b63334bd91960e11b5f5260045ffd5b346101215760403660031901126101215761093d610b96565b6024355f52600360205260405f209060018060a01b03165f52602052602060405f20541515604051908152f35b3461012157604036600319011261012157610213600435610989610c13565b906109af610209825f525f51602061146e5f395f51905f52602052600160405f20015490565b6111f1565b346101215760203660031901126101215760206109eb6004355f525f51602061146e5f395f51905f52602052600160405f20015490565b604051908152f35b3461012157610a0136610bac565b91610a0a610dc3565b60018060a01b031691825f525f60205260ff600260405f2001541615610b1657801561075757825f525f602052600160405f20018054905f5b828110610af3575050505f5b818110610adb5750825f525f602052600160405f200167ffffffffffffffff821161070c57610a7e8282610c90565b82905f5260205f20905f5b838110610ac757507fce5a7730021226f481d123afc9df227c4b90ec04824a92926056c4ecee77d2fd9291506001600160a01b0390506106d86113e9565b600190602083359301928185015501610a89565b80610aed856107006001948688610c80565b01610a4f565b80610b1087610b0460019486610c6b565b90549060031b1c610eed565b01610a43565b8263502531bd60e11b5f5260045260245ffd5b34610121576020366003190112610121576004359063ffffffff60e01b82168092036101215760209163161eee7760e31b8114908115610b6b575b5015158152f35b637965db0b60e01b811491508115610b85575b5083610b64565b6301ffc9a760e01b14905083610b7e565b600435906001600160a01b038216820361012157565b6040600319820112610121576004356001600160a01b0381168103610121579160243567ffffffffffffffff811161012157826023820112156101215780600401359267ffffffffffffffff84116101215760248460051b83010111610121576024019190565b602435906001600160a01b038216820361012157565b60206040818301928281528451809452019201905f5b818110610c4c5750505090565b82516001600160a01b0316845260209384019390920191600101610c3f565b80548210156101b0575f5260205f2001905f90565b91908110156101b05760051b0190565b90600160401b811161070c57815491818155828210610cae57505050565b5f5260205f2091820191015b818110610cc5575050565b5f8155600101610cba565b602080825281018390526001600160fb1b0383116101215760409260051b809284830137010190565b90601f8019910116810190811067ffffffffffffffff82111761070c57604052565b67ffffffffffffffff811161070c5760051b60200190565b90610d3d82610d1b565b610d4a6040519182610cf9565b8281528092610d5b601f1991610d1b565b0190602036910137565b80518210156101b05760209160051b010190565b90604051918281549182825260208201905f5260205f20925f5b818110610daa575050610da892500383610cf9565b565b8454835260019485019487945060209093019201610d93565b610dcb6113e9565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff1615610e0d5750565b63e2517d3f60e01b5f9081526001600160a01b03919091166004527fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c309238602452604490fd5b610e596113e9565b815f525f51602061146e5f395f51905f5260205260405f2060018060a01b0382165f5260205260ff60405f20541615610e90575050565b63e2517d3f60e01b5f5260018060a01b031660045260245260445ffd5b80548015610ed9575f190190610ec38282610c6b565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b5f52603160045260245ffd5b90815f52600360205260405f2060018060a01b0382165f5260205260405f2054908115610fd7575f19820192828411610fc357805f52600260205260405f20928354945f198601958611610fc357610f48610da89686610c6b565b90546001600160a01b0360039290921b1c811691908516829003610f8e575b5050505f52600360205260405f209060018060a01b03165f526020525f6040812055610ead565b81610678610f9c9288610c6b565b825f52600360205260405f209060018060a01b03165f5260205260405f20555f8080610f67565b634e487b7160e01b5f52601160045260245ffd5b9050638195595960e01b5f5260018060a01b031660045260245260445ffd5b90815f52600260205260405f209182549060018201809211610fc3575f52600360205260405f2060018060a01b0383165f5260205260405f2055815491600160401b83101561070c5782610678916001610da895018155610c6b565b6001600160a01b0381165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1661110f576001600160a01b038181165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260409020805460ff191660011790556110da6113e9565b16906001600160a01b03165f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b6001600160a01b0381165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb7086602052604090205460ff1661110f576001600160a01b038181165f9081527f07966f2ab141347034724e9b2a472c2f77f5cd745aeba27cacba797b8fcb708660205260409020805460ff1916600117905561119c6113e9565b16906001600160a01b03167fedcc084d3dcd65a1f7f23c65c46722faca6953d28e43150a467cf43e5c3092387f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b5f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff1661129c575f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff191660011790556112676113e9565b16916001600160a01b0316907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b5f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b038616845290915290205460ff161561129c575f8181525f51602061146e5f395f51905f52602090815260408083206001600160a01b0386811685529252909120805460ff191690556113166113e9565b16916001600160a01b0316907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b906001545f5b818110611376576378ca517b60e11b5f9081526001600160a01b038516600452602490fd5b611381816001610c6b565b905460039190911b1c6001600160a01b03908116908516146113a557600101611351565b9192505f19810191908211610fc3576106786113c56113df936001610c6b565b905460039190911b1c6001600160a01b0316916001610c6b565b610da86001610ead565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611437575b15611433576013193601368111610fc3573560601c90565b3390565b50601436101561141b565b60ff5f51602061148e5f395f51905f525460401c161561145e57565b631afcd79f60e31b5f5260045ffdfe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a164736f6c634300081c000a",
    "sourceMap": "3113:36241:172:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;-1:-1:-1;;;;;3113:36241:172;;:::i;:::-;;;;;;;;;28806:31;3113:36241;;;28806:31;3113:36241;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;23984:16;3113:36241;23965:43;;;:::i;:::-;24088:13;3113:36241;23984:16;3113:36241;24083:178;24103:25;;;;;;3113:36241;;;;;;;:::i;:::-;;;;24088:13;3113:36241;;;;;;23984:16;3113:36241;;;;;;;;23984:16;;3113:36241;-1:-1:-1;;;;;3113:36241:172;24145:46;3113:36241;24145:46;;:::i;:::-;3113:36241;;24088:13;;3113:36241;;;;;;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;5767:26:233;3113:36241:172;;;;:::i;:::-;5737:18:233;3202:4;5737:18;;-1:-1:-1;3113:36241:172;-1:-1:-1;;;;;;;;;;;3113:36241:172;;4919:24:233;3113:36241:172;-1:-1:-1;3113:36241:172;4919:24:233;3113:36241:172;4759:191:233;;5737:18;3202:4;:::i;:::-;5767:26;:::i;:::-;3113:36241:172;;;;;;;-1:-1:-1;;3113:36241:172;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;4301:16:237;3113:36241:172;;;;4724:16:237;;:34;;;;3113:36241:172;4803:1:237;4788:16;:50;;;;3113:36241:172;4853:13:237;:30;;;;3113:36241:172;4849:91:237;;;-1:-1:-1;;3113:36241:172;;4803:1:237;3113:36241:172;-1:-1:-1;;;;;;;;;;;3113:36241:172;14216:55;;3113:36241;4977:67:237;;3113:36241:172;6891:76:237;;;:::i;:::-;;;:::i;:::-;14125:44:172;;;:::i;:::-;;14216:55;:::i;:::-;;5064:101:237;;3113:36241:172;5064:101:237;3113:36241:172;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;-1:-1:-1;;;;;;;;;;;3113:36241:172;5140:14:237;3113:36241:172;;;4803:1:237;3113:36241:172;;5140:14:237;3113:36241:172;4977:67:237;-1:-1:-1;;3113:36241:172;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;4977:67:237;;;4849:91;4906:23;;;3113:36241:172;4906:23:237;3113:36241:172;;4906:23:237;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:237;;4724:34;;;-1:-1:-1;4724:34:237;;3113:36241:172;;;;;;-1:-1:-1;;3113:36241:172;;;;-1:-1:-1;;;;;3113:36241:172;;:::i;:::-;;;;;;;;;25454:47;3113:36241;;;25454:47;3113:36241;;25453:48;25449:104;;3113:36241;;;;;;25570:52;3113:36241;;;25570:52;3113:36241;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3113:36241:172;;;;;;;;;25570:52;3113:36241;;;25449:104;21199:33;;;3113:36241;25510:43;3113:36241;;;;25510:43;3113:36241;;;;;;-1:-1:-1;;3113:36241:172;;;;;;:::i;:::-;3202:4:233;;:::i;:::-;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;18601:37;;3113:36241;;;18600:38;18596:84;;3113:36241;;;;;;;18725:42;3113:36241;;;18725:42;3113:36241;:::i;:::-;18833:55;;;:::i;:::-;3113:36241;;19055:13;3113:36241;19070:24;;;;;;3113:36241;;;;;;;;;;;;;18725:42;3113:36241;;;;;;;;;;;19050:192;3113:36241;18601:37;3113:36241;;;;-1:-1:-1;;;;;36567:38:172;;:::i;:::-;3113:36241;19348:49;3113:36241;19348:49;;3113:36241;;;;;;;;;;;;;;;;;;;;;18725:42;3113:36241;;;19055:13;19139:17;19158:13;19139:17;;18725:42;19139:17;;;:::i;:::-;3113:36241;19158:13;:::i;:::-;3113:36241;19055:13;;3113:36241;;;;;;-1:-1:-1;;3113:36241:172;;;;;;;;;;;;;;;;;;:::i;:::-;3202:4:233;;;:::i;:::-;-1:-1:-1;;;;;3113:36241:172;;16188:27;;16184:62;;16260:24;;16256:60;;3113:36241;;;;;;;16330:37;3113:36241;;;16330:37;3113:36241;;16326:84;;3113:36241;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3113:36241:172;16486:48;;;3113:36241;;;16529:4;3113:36241;16486:48;;;3113:36241;;;-1:-1:-1;3113:36241:172;;;;;;;;;;;;;-1:-1:-1;;;;;;3113:36241:172;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;16486:48;;3113:36241;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;16330:37;3113:36241;;;;;;;;;;;;;;;;16529:4;3113:36241;-1:-1:-1;;;3113:36241:172;;;;;;;;16529:4;3113:36241;;;16529:4;3113:36241;16529:4;3113:36241;:::i;:::-;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;;;;;;;;;;16743:21;;;;;;-1:-1:-1;16920:61:172;;-1:-1:-1;;;;;36567:38:172;;:::i;:::-;3113:36241;;16920:61;3113:36241;;16920:61;;;;;:::i;:::-;;;;3113:36241;16728:13;16804:15;16821:13;16804:15;;16529:4;16804:15;;;;:::i;:::-;3113:36241;16821:13;:::i;:::-;3113:36241;16728:13;;3113:36241;;;;;;;;;;;;;16529:4;3113:36241;;;;;;;;;;;;;;;;;;;;;;;;;;;16326:84;16376:34;;;;3113:36241;16376:34;3113:36241;;;;16376:34;16256:60;21282:23;;;3113:36241;16293:23;3113:36241;;16293:23;16184:62;16224:22;;;3113:36241;16224:22;3113:36241;;16224:22;3113:36241;;;;;;-1:-1:-1;;3113:36241:172;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;3901:31:233;3113:36241:172;;;;;;-1:-1:-1;3113:36241:172;;;;;;-1:-1:-1;3113:36241:172;;;;;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;;;1830:17:236;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;;;;:::i;:::-;;;1830:17:236;-1:-1:-1;;;;;3113:36241:172;;;;;2054:31:236;;;;3113:36241:172;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;;;;;26648:20;3113:36241;;;;;;;26722:38;;;:::i;:::-;26831:13;3113:36241;26846:21;;;;;;3113:36241;;;;;;;:::i;26831:13::-;26910:14;;3113:36241;26910:14;;;:::i;:::-;3113:36241;;;;;;;;;;;;26884:41;;;;:::i;:::-;3113:36241;;26831:13;;3113:36241;;;;;;-1:-1:-1;;3113:36241:172;;;;;;:::i;:::-;-1:-1:-1;;;;;36567:38:172;;:::i;:::-;3113:36241;-1:-1:-1;;;;;3113:36241:172;;6441:34:233;6437:102;;6549:37;3113:36241:172;;;6549:37:233;:::i;6437:102::-;6498:30;;;3113:36241:172;6498:30:233;3113:36241:172;;6498:30:233;3113:36241:172;;;;;;-1:-1:-1;;3113:36241:172;;;;;;:::i;:::-;;;;;28053:22;3113:36241;;;;;28053:44;3113:36241;;;;;;-1:-1:-1;3113:36241:172;;;;;-1:-1:-1;3113:36241:172;;28053:48;;3113:36241;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;5350:25:233;3113:36241:172;;;;:::i;:::-;5320:18:233;3202:4;5320:18;;-1:-1:-1;3113:36241:172;-1:-1:-1;;;;;;;;;;;3113:36241:172;;4919:24:233;3113:36241:172;-1:-1:-1;3113:36241:172;4919:24:233;3113:36241:172;4759:191:233;;3202:4;5350:25;:::i;3113:36241:172:-;;;;;;-1:-1:-1;;3113:36241:172;;;;;;;;-1:-1:-1;3113:36241:172;-1:-1:-1;;;;;;;;;;;3113:36241:172;;4919:24:233;3113:36241:172;-1:-1:-1;3113:36241:172;4919:24:233;3113:36241:172;4759:191:233;;3113:36241:172;;;;;;;;;;;;;;:::i;:::-;3202:4:233;;;:::i;:::-;3113:36241:172;;;;;;;;;;;;;;21153:37;3113:36241;;;21153:37;3113:36241;;21152:38;21148:84;;21246:27;;21242:63;;3113:36241;;;;;;21355:42;3113:36241;;;21355:42;3113:36241;;21623:13;3113:36241;21638:28;;;;;;22201:13;;;3113:36241;22216:24;;;;;;3113:36241;;;;;;;21355:42;3113:36241;;;23051:42;3113:36241;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;23127:64:172;;3113:36241;-1:-1:-1;;;;;;3113:36241:172;-1:-1:-1;36567:38:172;;:::i;3113:36241::-;21355:42;3113:36241;;;;;;;;;;;;;;22201:13;22809:18;22829:13;22809:18;;21355:42;22809:18;;;;:::i;22829:13::-;3113:36241;22201:13;;21623;21946:21;21969:13;21946:21;;21355:42;21946:21;;;:::i;:::-;3113:36241;;;;;;21969:13;:::i;:::-;3113:36241;21623:13;;21148:84;21199:33;;;;3113:36241;21199:33;3113:36241;;;;21199:33;3113:36241;;;;;;-1:-1:-1;;3113:36241:172;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;39242:63:172;;;:103;;;;3113:36241;;;;;;;39242:103;-1:-1:-1;;;3551:47:233;;;-1:-1:-1;3551:87:233;;;;39242:103:172;;;;;3551:87:233;-1:-1:-1;;;1134:40:246;;-1:-1:-1;3551:87:233;;;3113:36241:172;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;:::o;:::-;;-1:-1:-1;;3113:36241:172;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3113:36241:172;;-1:-1:-1;3113:36241:172;;;-1:-1:-1;3113:36241:172;:::o;:::-;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;3113:36241:172;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;3113:36241:172;;-1:-1:-1;3113:36241:172;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;3113:36241:172;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;-1:-1:-1;3113:36241:172;;-1:-1:-1;3113:36241:172;;-1:-1:-1;3113:36241:172;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;-1:-1:-1;3113:36241:172;;;;;;;;4148:103:233;36567:38:172;;:::i;:::-;-1:-1:-1;;;;;3113:36241:172;;-1:-1:-1;3113:36241:172;;;;;;;;;;;;4468:23:233;4464:108;;4148:103;:::o;4464:108::-;-1:-1:-1;;;;4514:47:233;;;-1:-1:-1;;;;;3113:36241:172;;;;4514:47:233;3113:36241:172;658:27:142;3113:36241:172;;;;4514:47:233;4148:103;36567:38:172;;:::i;:::-;3113:36241;-1:-1:-1;3113:36241:172;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;-1:-1:-1;3113:36241:172;;;;;;;;-1:-1:-1;3113:36241:172;;;;;-1:-1:-1;3113:36241:172;;;4468:23:233;4464:108;;4148:103;;:::o;4464:108::-;4514:47;;;-1:-1:-1;4514:47:233;3113:36241:172;;;;;;4514:47:233;3113:36241:172;;;;-1:-1:-1;4514:47:233;3113:36241:172;;;;;;;-1:-1:-1;;3113:36241:172;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;31814:1290;;3113:36241;-1:-1:-1;3113:36241:172;31944:22;3113:36241;;;-1:-1:-1;3113:36241:172;;;;;;;;-1:-1:-1;3113:36241:172;;;;-1:-1:-1;3113:36241:172;;32115:25;;;32111:90;;-1:-1:-1;;3113:36241:172;;;;;;;;;-1:-1:-1;3113:36241:172;32343:20;3113:36241;;;-1:-1:-1;3113:36241:172;;;;;;;;;;;;;;32406:27;33084:11;32406:27;;;:::i;:::-;3113:36241;;-1:-1:-1;;;;;31944:22:172;3113:36241;;;;;;;;;;;32544:27;;;32540:342;;31814:1290;3113:36241;;;-1:-1:-1;3113:36241:172;31944:22;3113:36241;;;-1:-1:-1;3113:36241:172;32974:49;3113:36241;;;;;;-1:-1:-1;3113:36241:172;;;-1:-1:-1;3113:36241:172;;;;33084:11;:::i;32540:342::-;32587:22;;:35;:22;;;:::i;:35::-;3113:36241;-1:-1:-1;3113:36241:172;31944:22;3113:36241;;;-1:-1:-1;3113:36241:172;32771:46;3113:36241;;;;;;-1:-1:-1;3113:36241:172;;;;-1:-1:-1;3113:36241:172;;32540:342;;;;;3113:36241;;;;-1:-1:-1;3113:36241:172;;;;;-1:-1:-1;3113:36241:172;32111:90;32149:52;;;;;-1:-1:-1;32149:52:172;3113:36241;;;;;;32149:52;3113:36241;;;;-1:-1:-1;32149:52:172;29630:439;;3113:36241;-1:-1:-1;3113:36241:172;29752:20;3113:36241;;;-1:-1:-1;3113:36241:172;;;;;30024:1;3113:36241;;;;;;;-1:-1:-1;3113:36241:172;29955:22;3113:36241;;;-1:-1:-1;3113:36241:172;;;;;;;;-1:-1:-1;3113:36241:172;;;;-1:-1:-1;3113:36241:172;;;;;-1:-1:-1;;;3113:36241:172;;;;;;;;30024:1;3113:36241;;;;;;:::i;7270:387:233:-;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;;36567:38;;:::i;:::-;3113:36241;;-1:-1:-1;;;;;3113:36241:172;;7532:40:233;3113:36241:172;;7532:40:233;7509:4;7586:11;:::o;7432:219::-;7628:12;3113:36241:172;7628:12:233;:::o;7270:387::-;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;;36567:38;;:::i;:::-;3113:36241;;-1:-1:-1;;;;;3113:36241:172;658:27:142;7532:40:233;3113:36241:172;;7532:40:233;7509:4;7586:11;:::o;7270:387::-;3113:36241:172;;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;;;36567:38;;:::i;:::-;3113:36241;;-1:-1:-1;;;;;3113:36241:172;;7532:40:233;3113:36241:172;;7532:40:233;7509:4;7586:11;:::o;7432:219::-;7628:12;;3113:36241:172;7628:12:233;:::o;7894:388::-;3113:36241:172;;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;;;;;;;-1:-1:-1;;3113:36241:172;;;36567:38;;:::i;:::-;3113:36241;;-1:-1:-1;;;;;3113:36241:172;;8157:40:233;3113:36241:172;;8157:40:233;3113:36241:172;8211:11:233;:::o;34538:1001:172:-;;18725:42;3113:36241;34694:1;34697:14;;;;;;-1:-1:-1;;;34694:1:172;35497:35;;;-1:-1:-1;;;;;3113:36241:172;;35497:35;3113:36241;;;35497:35;34682:13;34732:7;;18725:42;34732:7;:::i;:::-;3113:36241;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;;;;34732:23;34728:464;;18725:42;3113:36241;34682:13;;34728:464;3113:36241;;-1:-1:-1;;;3113:36241:172;;;;;;;;34861:7;34871:20;34861:30;34871:20;18725:42;34871:20;:::i;:::-;3113:36241;;;;;;;;-1:-1:-1;;;;;3113:36241:172;;;34861:7;:::i;:30::-;35092:8;18725:42;35092:8;:::i;2329:429:236:-;2545:10;1830:17;-1:-1:-1;;;;;3113:36241:172;2054:31:236;;2526:71;;2329:429;2522:230;;;3113:36241:172;;2435:8:236;3113:36241:172;2435:8:236;3113:36241:172;;;;;;;;2613:72:236:o;2522:230::-;2545:10;2716:25;:::o;2526:71::-;2435:8;3606:2;2435:8;2560:37;;2526:71;;7082:141:237;3113:36241:172;-1:-1:-1;;;;;;;;;;;3113:36241:172;;;;7148:18:237;7144:73;;7082:141::o;7144:73::-;7189:17;;;-1:-1:-1;7189:17:237;;-1:-1:-1;7189:17:237",
    "linkReferences": {},
    "immutableReferences": {
      "57669": [
        {
          "start": 2015,
          "length": 32
        },
        {
          "start": 2094,
          "length": 32
        },
        {
          "start": 5100,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DEFAULT_ADMIN_ROLE()": "a217fddf",
    "addTrustedIssuer(address,uint256[])": "9f63ea98",
    "getRoleAdmin(bytes32)": "248a9ca3",
    "getTrustedIssuerClaimTopics(address)": "c28fb278",
    "getTrustedIssuers()": "d9dd24c5",
    "getTrustedIssuersForClaimTopic(uint256)": "52c111d1",
    "grantRole(bytes32,address)": "2f2ff15d",
    "hasClaimTopic(address,uint256)": "34a89987",
    "hasRole(bytes32,address)": "91d14854",
    "initialize(address)": "c4d66de8",
    "isTrustedForwarder(address)": "572b6c05",
    "isTrustedIssuer(address)": "ef2ed1a4",
    "removeTrustedIssuer(address)": "b93d28eb",
    "renounceRole(bytes32,address)": "36568abe",
    "revokeRole(bytes32,address)": "d547741f",
    "supportsInterface(bytes4)": "01ffc9a7",
    "trustedForwarder()": "7da0a877",
    "updateIssuerClaimTopics(address,uint256[])": "04bc7e84"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressNotFoundInList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIssuerAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"IssuerAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"IssuerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"IssuerNotFoundInTopicList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimTopicsProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTopicsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"TrustedIssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"TrustedIssuerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"addTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"}],\"name\":\"getTrustedIssuerClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedIssuers\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"getTrustedIssuersForClaimTopic\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaimTopic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"isTrustedIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"}],\"name\":\"removeTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_newClaimTopics\",\"type\":\"uint256[]\"}],\"name\":\"updateIssuerClaimTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"This registry plays a crucial role in decentralized identity and verifiable credential systems. It allows relying parties (e.g., smart contracts controlling access to tokenized assets) to verify if a claim presented by a user was issued by an entity trusted for that particular type of claim (claim topic). Key features: -   **Upgradeable:** Uses the UUPS (Universal Upgradeable Proxy Standard) pattern, allowing the logic to be     updated without changing the contract address or losing data. -   **Access Control:** Leverages `AccessControlUpgradeable` from OpenZeppelin. A `REGISTRAR_ROLE` is     defined, which grants permission to add, remove, and update trusted issuers and their claim topics.     The `DEFAULT_ADMIN_ROLE` can manage who holds the `REGISTRAR_ROLE`. -   **Efficient Lookups:** Maintains mappings to quickly find all trusted issuers for a given claim topic     (`_issuersByClaimTopic`) and to check if a specific issuer is trusted for a specific topic     (`_claimTopicIssuerIndex`). -   **Meta-transactions:** Supports gasless transactions for users via `ERC2771ContextUpgradeable` if a trusted     forwarder is configured. -   **ERC165:** Implements `supportsInterface` for discoverability of its `IERC3643TrustedIssuersRegistry` compliance. The contract stores `TrustedIssuer` structs, which link an issuer's address to an array of claim topics they are authorized for. It also maintains an array of all registered issuer addresses (`_issuerAddresses`) for enumeration.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressNotFoundInList(address)\":[{\"details\":\"This usually signals an internal state inconsistency, as removal operations generally assume the item exists.\",\"params\":{\"addr\":\"The address that was not found in the list.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidIssuerAddress()\":[{\"details\":\"The zero address is invalid for representing an issuer contract. This ensures all registered issuers have a valid contract address.\"}],\"IssuerAlreadyExists(address)\":[{\"details\":\"This prevents duplicate entries for the same issuer, maintaining data integrity.\",\"params\":{\"issuerAddress\":\"The address of the issuer that already exists.\"}}],\"IssuerDoesNotExist(address)\":[{\"details\":\"Ensures that operations are only performed on existing, registered issuers.\",\"params\":{\"issuerAddress\":\"The address of the issuer that was not found in the registry.\"}}],\"IssuerNotFoundInTopicList(address,uint256)\":[{\"details\":\"This typically indicates an inconsistency in state or an incorrect operation, as an issuer should only be removed from topics they are actually associated with.\",\"params\":{\"claimTopic\":\"The specific claim topic from which the issuer was being removed.\",\"issuerAddress\":\"The address of the issuer that was expected but not found.\"}}],\"NoClaimTopicsProvided()\":[{\"details\":\"A trusted issuer must be associated with at least one claim topic they are authorized to issue claims for. This prevents registering issuers with no specified area of authority.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ClaimTopicsUpdated(address,address,uint256[])\":{\"details\":\"This event allows tracking modifications to an issuer's scope of authority without removing and re-adding them.\",\"params\":{\"_claimTopics\":\"The new array of `uint256` claim topics for which the issuer is now trusted.\",\"_issuer\":\"The address of the `IClaimIssuer` contract whose claim topics were updated. Indexed for searchability.\",\"sender\":\"The address of the account (holder of `REGISTRAR_ROLE`) that performed the update. Indexed for searchability.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TrustedIssuerAdded(address,address,uint256[])\":{\"details\":\"This event is crucial for off-chain systems and UIs to track changes in the set of trusted issuers.\",\"params\":{\"_claimTopics\":\"An array of `uint256` claim topics for which the new issuer is now trusted.\",\"_issuer\":\"The address of the `IClaimIssuer` contract that was added as a trusted issuer. Indexed for searchability.\",\"sender\":\"The address of the account (holder of `REGISTRAR_ROLE`) that performed the addition. Indexed for searchability.\"}},\"TrustedIssuerRemoved(address,address)\":{\"details\":\"Upon this event, the issuer is no longer considered trusted for any claim topics it was previously associated with.\",\"params\":{\"_issuer\":\"The address of the `IClaimIssuer` contract that was removed. Indexed for searchability.\",\"sender\":\"The address of the account (holder of `REGISTRAR_ROLE`) that performed the removal. Indexed for searchability.\"}}},\"kind\":\"dev\",\"methods\":{\"addTrustedIssuer(address,uint256[])\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It performs several validation checks: -   The `_trustedIssuer` address must not be the zero address. -   The `_claimTopics` array must not be empty (an issuer must be trusted for at least one topic). -   The issuer must not already be registered to prevent duplicates. If all checks pass, the function: 1.  Stores the issuer's details (address, claim topics, and `exists = true`) in the `_trustedIssuers` mapping. 2.  Adds the issuer's address to the `_issuerAddresses` array for enumeration. 3.  For each claim topic in `_claimTopics`, it calls `_addIssuerToClaimTopic` to update the     `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, linking the issuer to that topic. 4.  Emits a `TrustedIssuerAdded` event.Reverts with:      - `InvalidIssuerAddress()` if `_trustedIssuer` is `address(0)`.      - `NoClaimTopicsProvided()` if `_claimTopics` is empty.      - `IssuerAlreadyExists(issuerAddress)` if the issuer is already registered.\",\"params\":{\"_claimTopics\":\"An array of `uint256` values representing the claim topics for which this issuer will be trusted.\",\"_trustedIssuer\":\"The `IClaimIssuer` compliant contract address of the issuer to be added.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor This is a standard OpenZeppelin annotation for UUPS proxy constructors that call `_disableInitializers()`.\",\"details\":\"This constructor is part of the UUPS (Universal Upgradeable Proxy Standard) pattern. Its primary role is to initialize `ERC2771ContextUpgradeable` with the `trustedForwarder` address, enabling meta-transaction support from the moment of deployment if a forwarder is provided. `_disableInitializers()` is called to prevent the `initialize` function (which acts as the true initializer for upgradeable contracts) from being called on this logic contract directly. The `initialize` function should only be called once, through the proxy, after deployment.\",\"params\":{\"trustedForwarder\":\"The address of the trusted forwarder contract for ERC2771 meta-transactions. If `address(0)`, meta-transactions via a forwarder are effectively disabled.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedIssuerClaimTopics(address)\":{\"details\":\"It first checks if the provided `_trustedIssuer` address actually exists as a registered issuer using the `exists` flag in the `_trustedIssuers` mapping. If not, it reverts. If the issuer exists, it returns the `claimTopics` array stored in their `TrustedIssuer` struct.Reverts with `IssuerDoesNotExist(address(_trustedIssuer))` if the issuer is not found in the registry.\",\"params\":{\"_trustedIssuer\":\"The `IClaimIssuer` contract address of the issuer whose authorized claim topics are being queried.\"},\"returns\":{\"_0\":\"An array of `uint256` values, where each value is a claim topic the issuer is trusted for. Returns an empty array if the issuer is trusted for no topics (though `addTrustedIssuer` and `updateIssuerClaimTopics` prevent setting an empty list initially).\"}},\"getTrustedIssuers()\":{\"details\":\"This function iterates through the `_issuerAddresses` array and casts each `address` to an `IClaimIssuer` type for the return array. This is useful for clients wanting to get a complete list of entities considered trusted by this registry.\",\"returns\":{\"_0\":\"An array of `IClaimIssuer` interface types. Each element is a contract address of a trusted issuer. Returns an empty array if no issuers are registered.\"}},\"getTrustedIssuersForClaimTopic(uint256)\":{\"details\":\"This function directly accesses the `_issuersByClaimTopic` mapping using the given `claimTopic` as a key. It then converts the stored array of `address` types into an array of `IClaimIssuer` interface types. This is a primary query function for relying parties to discover who can issue valid claims for a certain topic.\",\"params\":{\"claimTopic\":\"The `uint256` identifier of the claim topic being queried.\"},\"returns\":{\"_0\":\"An array of `IClaimIssuer` interface types. Each element is a contract address of an issuer trusted for the specified `claimTopic`. Returns an empty array if no issuers are trusted for that topic.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasClaimTopic(address,uint256)\":{\"details\":\"This function uses the `_claimTopicIssuerIndex` mapping for an efficient O(1) lookup. If `_claimTopicIssuerIndex[_claimTopic][_issuer]` is greater than 0, it means the issuer is present in the list of trusted issuers for that `_claimTopic`, so the function returns `true`. Otherwise (if the value is 0), the issuer is not trusted for that topic, and it returns `false`.\",\"params\":{\"_claimTopic\":\"The `uint256` identifier of the claim topic to check against.\",\"_issuer\":\"The address of the issuer contract to check.\"},\"returns\":{\"_0\":\"`true` if the `_issuer` is trusted for the `_claimTopic`, `false` otherwise.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"details\":\"This function is typically called by the deployer immediately after the proxy contract pointing to this implementation is deployed. It sets up the initial state: 1.  `__ERC165_init_unchained()`: Initializes ERC165 interface detection. 2.  `__AccessControlEnumerable_init_unchained()`: Initializes the role-based access control system. 3.  The `ERC2771ContextUpgradeable` is already initialized by its own constructor. 4.  `_grantRole(DEFAULT_ADMIN_ROLE, initialAdmin)`: Grants the `DEFAULT_ADMIN_ROLE` to `initialAdmin`.     The admin can manage all other roles, including granting/revoking `REGISTRAR_ROLE`. 5.  `_grantRole(REGISTRAR_ROLE, initialAdmin)`: Grants the `REGISTRAR_ROLE` to `initialAdmin`.     This allows the `initialAdmin` to immediately start adding trusted issuers. This role can later be     transferred or granted to other operational addresses/contracts. The `initializer` modifier from `Initializable` ensures this function can only be executed once.\",\"params\":{\"initialAdmin\":\"The address that will receive the initial `DEFAULT_ADMIN_ROLE` and `REGISTRAR_ROLE`. This address will have full control over the registry's setup and initial population of trusted issuers.\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"isTrustedIssuer(address)\":{\"details\":\"This function performs a direct lookup in the `_trustedIssuers` mapping and checks the `exists` flag of the `TrustedIssuer` struct associated with the `_issuer` address.\",\"params\":{\"_issuer\":\"The address to check for trusted issuer status.\"},\"returns\":{\"_0\":\"`true` if the `_issuer` address is found in the registry and its `exists` flag is true; `false` otherwise (e.g., if the issuer was never added or has been removed).\"}},\"removeTrustedIssuer(address)\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer actually exists in the registry. If not, it reverts. If the issuer exists, the function: 1.  Retrieves the list of claim topics the issuer was associated with from `_trustedIssuers`. 2.  Calls `_removeAddressFromList` to remove the issuer's address from the `_issuerAddresses` array. 3.  For each claim topic the issuer was associated with, it calls `_removeIssuerFromClaimTopic` to update     the `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, effectively unlinking the issuer from     those topics. 4.  Deletes the issuer's main record from the `_trustedIssuers` mapping (which also sets `exists` to `false`     implicitly for a new struct if the address were to be reused, though deletion is more explicit here). 5.  Emits a `TrustedIssuerRemoved` event.Reverts with `IssuerDoesNotExist(issuerAddress)` if the issuer is not found in the registry.\",\"params\":{\"_trustedIssuer\":\"The `IClaimIssuer` compliant contract address of the issuer to be removed.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"This function allows other contracts/tools to query if this contract implements specific interfaces. It checks for: 1.  `type(IERC3643TrustedIssuersRegistry).interfaceId`: Confirms adherence to the ERC-3643 standard for     trusted issuer registries. 2.  Interfaces supported by parent contracts (e.g., `AccessControlUpgradeable`, `ERC165Upgradeable`)     via `super.supportsInterface(interfaceId)`. Crucial for interoperability, allowing other components to verify compatibility.\",\"params\":{\"interfaceId\":\"The EIP-165 interface identifier (`bytes4`) to check.\"},\"returns\":{\"_0\":\"`true` if the contract supports `interfaceId`, `false` otherwise.\"}},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"updateIssuerClaimTopics(address,uint256[])\":{\"details\":\"This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer exists and if the new list of claim topics is not empty. The update process involves: 1.  Retrieving the issuer's current list of claim topics. 2.  Removing the issuer from the lookup mappings (`_issuersByClaimTopic`, `_claimTopicIssuerIndex`) for all     their *current* claim topics. 3.  Adding the issuer to the lookup mappings for all topics in the *new* `_newClaimTopics` list. 4.  Updating the `claimTopics` array stored in the issuer's `TrustedIssuer` struct in `_trustedIssuers` to     reflect the `_newClaimTopics`. 5.  Emitting a `ClaimTopicsUpdated` event. This approach ensures that the lookup mappings are consistent with the issuer's newly assigned topics.Reverts with:      - `IssuerDoesNotExist(issuerAddress)` if the issuer is not found.      - `NoClaimTopicsProvided()` if `_newClaimTopics` is empty.\",\"params\":{\"_newClaimTopics\":\"An array of `uint256` values representing the new set of claim topics for which this issuer will be trusted.\",\"_trustedIssuer\":\"The `IClaimIssuer` compliant contract address of the issuer whose claim topics are to be updated.\"}}},\"stateVariables\":{\"_claimTopicIssuerIndex\":{\"details\":\"It maps a claim topic to another mapping, which then maps an issuer's address to their index (plus one) in the `_issuersByClaimTopic[claimTopic]` array. - `_claimTopicIssuerIndex[claimTopic][issuerAddress]` returns `0` if `issuerAddress` is NOT trusted for   `claimTopic`. - If it returns a non-zero value `n`, then `issuerAddress` IS trusted for `claimTopic`, and its actual 0-based   index in the `_issuersByClaimTopic[claimTopic]` array is `n-1`. This structure allows for O(1) check for `hasClaimTopic` and O(1) removal from `_issuersByClaimTopic` using the swap-and-pop technique.\"},\"_issuerAddresses\":{\"details\":\"This array allows for iterating over all trusted issuers, which can be useful for administrative purposes, data export, or displaying a complete list of trusted entities. It is managed to ensure that only existing issuers are present (issuers are removed upon `removeTrustedIssuer`).\"},\"_issuersByClaimTopic\":{\"custom:slither-disable-next-line\":\"uninitialized-state\",\"details\":\"This is a key data structure for efficient querying. For example, to find all issuers trusted to provide KYC claims (assuming KYC is topic `1`), one would look up `_issuersByClaimTopic[1]`. This mapping is updated whenever an issuer is added, removed, or their claim topics are modified.This warning can be safely ignored as Solidity automatically initializes mapping values with their default values (empty array in this case) when first accessed. The contract has proper checks in place when accessing this mapping.\"},\"_trustedIssuers\":{\"details\":\"This allows for quick O(1) lookup of an issuer's information (their authorized claim topics and existence status) given their address. Example: `_trustedIssuers[0xIssuerContractAddress]` would return the `TrustedIssuer` struct for that issuer.\"}},\"title\":\"ATK Trusted Issuers Registry Implementation\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressNotFoundInList(address)\":[{\"notice\":\"Generic error triggered when an address is expected to be in a list (e.g., `_issuerAddresses`) but is not found during a removal operation.\"}],\"InvalidIssuerAddress()\":[{\"notice\":\"Error triggered if an attempt is made to add or interact with an issuer using a zero address.\"}],\"IssuerAlreadyExists(address)\":[{\"notice\":\"Error triggered when attempting to add an issuer that is already registered in the registry.\"}],\"IssuerDoesNotExist(address)\":[{\"notice\":\"Error triggered when attempting to operate on an issuer (e.g., remove, update) that is not registered.\"}],\"IssuerNotFoundInTopicList(address,uint256)\":[{\"notice\":\"Error triggered during an attempt to remove an issuer from a specific claim topic's list, but the issuer was not found in that list.\"}],\"NoClaimTopicsProvided()\":[{\"notice\":\"Error triggered if an attempt is made to add or update an issuer with an empty list of claim topics.\"}]},\"events\":{\"ClaimTopicsUpdated(address,address,uint256[])\":{\"notice\":\"Emitted when the list of claim topics for an existing trusted issuer is successfully updated.\"},\"TrustedIssuerAdded(address,address,uint256[])\":{\"notice\":\"Emitted when a new trusted issuer is successfully added to the registry.\"},\"TrustedIssuerRemoved(address,address)\":{\"notice\":\"Emitted when an existing trusted issuer is successfully removed from the registry.\"}},\"kind\":\"user\",\"methods\":{\"addTrustedIssuer(address,uint256[])\":{\"notice\":\"Adds a new trusted issuer to the registry with a specified list of claim topics they are authorized for.\"},\"constructor\":{\"notice\":\"Constructor for the `ATKTrustedIssuersRegistryImplementation`.\"},\"getTrustedIssuerClaimTopics(address)\":{\"notice\":\"Retrieves the list of claim topics for which a specific trusted issuer is authorized.\"},\"getTrustedIssuers()\":{\"notice\":\"Returns an array of all currently registered and active trusted issuer contract addresses.\"},\"getTrustedIssuersForClaimTopic(uint256)\":{\"notice\":\"Retrieves an array of all issuer contract addresses that are trusted for a specific claim topic.\"},\"hasClaimTopic(address,uint256)\":{\"notice\":\"Checks if a specific issuer is trusted for a specific claim topic.\"},\"initialize(address)\":{\"notice\":\"Initializes the `SMARTTrustedIssuersRegistryImplementation` contract. This function acts as the constructor for an upgradeable contract and can only be called once.\"},\"isTrustedIssuer(address)\":{\"notice\":\"Checks if a given address is registered as a trusted issuer in the registry.\"},\"removeTrustedIssuer(address)\":{\"notice\":\"Removes an existing trusted issuer from the registry. This revokes their trusted status for all previously associated claim topics.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Indicates whether this contract supports a given interface ID, as per ERC165.\"},\"updateIssuerClaimTopics(address,uint256[])\":{\"notice\":\"Updates the list of claim topics for an existing trusted issuer.\"}},\"notice\":\"This contract is the upgradeable logic for managing a registry of trusted claim issuers and the specific claim topics they are authorized to issue claims for. It is compliant with the `IERC3643TrustedIssuersRegistry` interface, a standard for tokenization platforms.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/system/trusted-issuers-registry/ATKTrustedIssuersRegistryImplementation.sol\":\"ATKTrustedIssuersRegistryImplementation\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol\":{\"keccak256\":\"0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee\",\"dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V\"]},\"contracts/system/ATKSystemRoles.sol\":{\"keccak256\":\"0x7c5a50fcea7ee061d1bf5451217fbf83cfbc42cae638a0de4b8fc41fa5d7d980\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://8dc4128ddb017dfd71ff70bd4b292bcf5e60ae6f81a07b1ceb15439607bb93c0\",\"dweb:/ipfs/QmWJpzgR3YuLvRXZPdFzvyZ1mHAyV3fhSUMcdFG4QJ3xzx\"]},\"contracts/system/trusted-issuers-registry/ATKTrustedIssuersRegistryImplementation.sol\":{\"keccak256\":\"0xad3a3463e2bcaab0c27200ec6bce246c0a4a61dc2e03ff0e431d66c37dc98570\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://dabf1376b38336a2947b1b7396fb30d3f7b6b2d789127ffc548487725fc9c3be\",\"dweb:/ipfs/QmQRHfbFfpLbMeVCASeWqKbHkGNd8MFEm6MCHhfq2ADtow\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e\",\"dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb\",\"dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol\":{\"keccak256\":\"0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e\",\"dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D\"]},\"dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8\",\"dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/access/AccessControlUpgradeable.sol\":{\"keccak256\":\"0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838551e10cc07e570b70aee1078e490658d3a0ab8f4adfd4f3f2a565200753da\",\"dweb:/ipfs/QmceT7R3Pqzywyxr3MSEA7VXU4axZAPS6BLy92iV97rGdG\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol\":{\"keccak256\":\"0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758\",\"dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89\",\"dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessControlBadConfirmation"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AccessControlUnauthorizedAccount"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "AddressNotFoundInList"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInitialization"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidIssuerAddress"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "issuerAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "IssuerAlreadyExists"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "issuerAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "IssuerDoesNotExist"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "issuerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "claimTopic",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "IssuerNotFoundInTopicList"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoClaimTopicsProvided"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotInitializing"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_issuer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "_claimTopics",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimTopicsUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "version",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleAdminChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleGranted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleRevoked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_issuer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "_claimTopics",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TrustedIssuerAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_issuer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TrustedIssuerRemoved",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IClaimIssuer",
              "name": "_trustedIssuer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_claimTopics",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addTrustedIssuer"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IClaimIssuer",
              "name": "_trustedIssuer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTrustedIssuerClaimTopics",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTrustedIssuers",
          "outputs": [
            {
              "internalType": "contract IClaimIssuer[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "claimTopic",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTrustedIssuersForClaimTopic",
          "outputs": [
            {
              "internalType": "contract IClaimIssuer[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantRole"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_claimTopic",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasClaimTopic",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initialAdmin",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTrustedForwarder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTrustedIssuer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IClaimIssuer",
              "name": "_trustedIssuer",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeTrustedIssuer"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "trustedForwarder",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IClaimIssuer",
              "name": "_trustedIssuer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_newClaimTopics",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateIssuerClaimTopics"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addTrustedIssuer(address,uint256[])": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It performs several validation checks: -   The `_trustedIssuer` address must not be the zero address. -   The `_claimTopics` array must not be empty (an issuer must be trusted for at least one topic). -   The issuer must not already be registered to prevent duplicates. If all checks pass, the function: 1.  Stores the issuer's details (address, claim topics, and `exists = true`) in the `_trustedIssuers` mapping. 2.  Adds the issuer's address to the `_issuerAddresses` array for enumeration. 3.  For each claim topic in `_claimTopics`, it calls `_addIssuerToClaimTopic` to update the     `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, linking the issuer to that topic. 4.  Emits a `TrustedIssuerAdded` event.Reverts with:      - `InvalidIssuerAddress()` if `_trustedIssuer` is `address(0)`.      - `NoClaimTopicsProvided()` if `_claimTopics` is empty.      - `IssuerAlreadyExists(issuerAddress)` if the issuer is already registered.",
            "params": {
              "_claimTopics": "An array of `uint256` values representing the claim topics for which this issuer will be trusted.",
              "_trustedIssuer": "The `IClaimIssuer` compliant contract address of the issuer to be added."
            }
          },
          "constructor": {
            "custom:oz-upgrades-unsafe-allow": "constructor This is a standard OpenZeppelin annotation for UUPS proxy constructors that call `_disableInitializers()`.",
            "details": "This constructor is part of the UUPS (Universal Upgradeable Proxy Standard) pattern. Its primary role is to initialize `ERC2771ContextUpgradeable` with the `trustedForwarder` address, enabling meta-transaction support from the moment of deployment if a forwarder is provided. `_disableInitializers()` is called to prevent the `initialize` function (which acts as the true initializer for upgradeable contracts) from being called on this logic contract directly. The `initialize` function should only be called once, through the proxy, after deployment.",
            "params": {
              "trustedForwarder": "The address of the trusted forwarder contract for ERC2771 meta-transactions. If `address(0)`, meta-transactions via a forwarder are effectively disabled."
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "getTrustedIssuerClaimTopics(address)": {
            "details": "It first checks if the provided `_trustedIssuer` address actually exists as a registered issuer using the `exists` flag in the `_trustedIssuers` mapping. If not, it reverts. If the issuer exists, it returns the `claimTopics` array stored in their `TrustedIssuer` struct.Reverts with `IssuerDoesNotExist(address(_trustedIssuer))` if the issuer is not found in the registry.",
            "params": {
              "_trustedIssuer": "The `IClaimIssuer` contract address of the issuer whose authorized claim topics are being queried."
            },
            "returns": {
              "_0": "An array of `uint256` values, where each value is a claim topic the issuer is trusted for. Returns an empty array if the issuer is trusted for no topics (though `addTrustedIssuer` and `updateIssuerClaimTopics` prevent setting an empty list initially)."
            }
          },
          "getTrustedIssuers()": {
            "details": "This function iterates through the `_issuerAddresses` array and casts each `address` to an `IClaimIssuer` type for the return array. This is useful for clients wanting to get a complete list of entities considered trusted by this registry.",
            "returns": {
              "_0": "An array of `IClaimIssuer` interface types. Each element is a contract address of a trusted issuer. Returns an empty array if no issuers are registered."
            }
          },
          "getTrustedIssuersForClaimTopic(uint256)": {
            "details": "This function directly accesses the `_issuersByClaimTopic` mapping using the given `claimTopic` as a key. It then converts the stored array of `address` types into an array of `IClaimIssuer` interface types. This is a primary query function for relying parties to discover who can issue valid claims for a certain topic.",
            "params": {
              "claimTopic": "The `uint256` identifier of the claim topic being queried."
            },
            "returns": {
              "_0": "An array of `IClaimIssuer` interface types. Each element is a contract address of an issuer trusted for the specified `claimTopic`. Returns an empty array if no issuers are trusted for that topic."
            }
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasClaimTopic(address,uint256)": {
            "details": "This function uses the `_claimTopicIssuerIndex` mapping for an efficient O(1) lookup. If `_claimTopicIssuerIndex[_claimTopic][_issuer]` is greater than 0, it means the issuer is present in the list of trusted issuers for that `_claimTopic`, so the function returns `true`. Otherwise (if the value is 0), the issuer is not trusted for that topic, and it returns `false`.",
            "params": {
              "_claimTopic": "The `uint256` identifier of the claim topic to check against.",
              "_issuer": "The address of the issuer contract to check."
            },
            "returns": {
              "_0": "`true` if the `_issuer` is trusted for the `_claimTopic`, `false` otherwise."
            }
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "initialize(address)": {
            "details": "This function is typically called by the deployer immediately after the proxy contract pointing to this implementation is deployed. It sets up the initial state: 1.  `__ERC165_init_unchained()`: Initializes ERC165 interface detection. 2.  `__AccessControlEnumerable_init_unchained()`: Initializes the role-based access control system. 3.  The `ERC2771ContextUpgradeable` is already initialized by its own constructor. 4.  `_grantRole(DEFAULT_ADMIN_ROLE, initialAdmin)`: Grants the `DEFAULT_ADMIN_ROLE` to `initialAdmin`.     The admin can manage all other roles, including granting/revoking `REGISTRAR_ROLE`. 5.  `_grantRole(REGISTRAR_ROLE, initialAdmin)`: Grants the `REGISTRAR_ROLE` to `initialAdmin`.     This allows the `initialAdmin` to immediately start adding trusted issuers. This role can later be     transferred or granted to other operational addresses/contracts. The `initializer` modifier from `Initializable` ensures this function can only be executed once.",
            "params": {
              "initialAdmin": "The address that will receive the initial `DEFAULT_ADMIN_ROLE` and `REGISTRAR_ROLE`. This address will have full control over the registry's setup and initial population of trusted issuers."
            }
          },
          "isTrustedForwarder(address)": {
            "details": "Indicates whether any particular address is the trusted forwarder."
          },
          "isTrustedIssuer(address)": {
            "details": "This function performs a direct lookup in the `_trustedIssuers` mapping and checks the `exists` flag of the `TrustedIssuer` struct associated with the `_issuer` address.",
            "params": {
              "_issuer": "The address to check for trusted issuer status."
            },
            "returns": {
              "_0": "`true` if the `_issuer` address is found in the registry and its `exists` flag is true; `false` otherwise (e.g., if the issuer was never added or has been removed)."
            }
          },
          "removeTrustedIssuer(address)": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer actually exists in the registry. If not, it reverts. If the issuer exists, the function: 1.  Retrieves the list of claim topics the issuer was associated with from `_trustedIssuers`. 2.  Calls `_removeAddressFromList` to remove the issuer's address from the `_issuerAddresses` array. 3.  For each claim topic the issuer was associated with, it calls `_removeIssuerFromClaimTopic` to update     the `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, effectively unlinking the issuer from     those topics. 4.  Deletes the issuer's main record from the `_trustedIssuers` mapping (which also sets `exists` to `false`     implicitly for a new struct if the address were to be reused, though deletion is more explicit here). 5.  Emits a `TrustedIssuerRemoved` event.Reverts with `IssuerDoesNotExist(issuerAddress)` if the issuer is not found in the registry.",
            "params": {
              "_trustedIssuer": "The `IClaimIssuer` compliant contract address of the issuer to be removed."
            }
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "supportsInterface(bytes4)": {
            "details": "This function allows other contracts/tools to query if this contract implements specific interfaces. It checks for: 1.  `type(IERC3643TrustedIssuersRegistry).interfaceId`: Confirms adherence to the ERC-3643 standard for     trusted issuer registries. 2.  Interfaces supported by parent contracts (e.g., `AccessControlUpgradeable`, `ERC165Upgradeable`)     via `super.supportsInterface(interfaceId)`. Crucial for interoperability, allowing other components to verify compatibility.",
            "params": {
              "interfaceId": "The EIP-165 interface identifier (`bytes4`) to check."
            },
            "returns": {
              "_0": "`true` if the contract supports `interfaceId`, `false` otherwise."
            }
          },
          "trustedForwarder()": {
            "details": "Returns the address of the trusted forwarder."
          },
          "updateIssuerClaimTopics(address,uint256[])": {
            "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer exists and if the new list of claim topics is not empty. The update process involves: 1.  Retrieving the issuer's current list of claim topics. 2.  Removing the issuer from the lookup mappings (`_issuersByClaimTopic`, `_claimTopicIssuerIndex`) for all     their *current* claim topics. 3.  Adding the issuer to the lookup mappings for all topics in the *new* `_newClaimTopics` list. 4.  Updating the `claimTopics` array stored in the issuer's `TrustedIssuer` struct in `_trustedIssuers` to     reflect the `_newClaimTopics`. 5.  Emitting a `ClaimTopicsUpdated` event. This approach ensures that the lookup mappings are consistent with the issuer's newly assigned topics.Reverts with:      - `IssuerDoesNotExist(issuerAddress)` if the issuer is not found.      - `NoClaimTopicsProvided()` if `_newClaimTopics` is empty.",
            "params": {
              "_newClaimTopics": "An array of `uint256` values representing the new set of claim topics for which this issuer will be trusted.",
              "_trustedIssuer": "The `IClaimIssuer` compliant contract address of the issuer whose claim topics are to be updated."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addTrustedIssuer(address,uint256[])": {
            "notice": "Adds a new trusted issuer to the registry with a specified list of claim topics they are authorized for."
          },
          "constructor": {
            "notice": "Constructor for the `ATKTrustedIssuersRegistryImplementation`."
          },
          "getTrustedIssuerClaimTopics(address)": {
            "notice": "Retrieves the list of claim topics for which a specific trusted issuer is authorized."
          },
          "getTrustedIssuers()": {
            "notice": "Returns an array of all currently registered and active trusted issuer contract addresses."
          },
          "getTrustedIssuersForClaimTopic(uint256)": {
            "notice": "Retrieves an array of all issuer contract addresses that are trusted for a specific claim topic."
          },
          "hasClaimTopic(address,uint256)": {
            "notice": "Checks if a specific issuer is trusted for a specific claim topic."
          },
          "initialize(address)": {
            "notice": "Initializes the `SMARTTrustedIssuersRegistryImplementation` contract. This function acts as the constructor for an upgradeable contract and can only be called once."
          },
          "isTrustedIssuer(address)": {
            "notice": "Checks if a given address is registered as a trusted issuer in the registry."
          },
          "removeTrustedIssuer(address)": {
            "notice": "Removes an existing trusted issuer from the registry. This revokes their trusted status for all previously associated claim topics."
          },
          "supportsInterface(bytes4)": {
            "notice": "Indicates whether this contract supports a given interface ID, as per ERC165."
          },
          "updateIssuerClaimTopics(address,uint256[])": {
            "notice": "Updates the list of claim topics for an existing trusted issuer."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/system/trusted-issuers-registry/ATKTrustedIssuersRegistryImplementation.sol": "ATKTrustedIssuersRegistryImplementation"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol": {
        "keccak256": "0x15b72940814cd959b57bf75623f16c51fc6c50eab51fd2420a8b653519ebd76c",
        "urls": [
          "bzz-raw://479f5e24a1b608776d9d5d7da9c76dd3c9b1dd300d8b4eee7a15dcfba4817bee",
          "dweb:/ipfs/QmPhMBfQAqt5NeRcSu3jDTwhoQXnB7nXNEcmoJ7KoWVt7V"
        ],
        "license": "CC0-1.0"
      },
      "contracts/system/ATKSystemRoles.sol": {
        "keccak256": "0x7c5a50fcea7ee061d1bf5451217fbf83cfbc42cae638a0de4b8fc41fa5d7d980",
        "urls": [
          "bzz-raw://8dc4128ddb017dfd71ff70bd4b292bcf5e60ae6f81a07b1ceb15439607bb93c0",
          "dweb:/ipfs/QmWJpzgR3YuLvRXZPdFzvyZ1mHAyV3fhSUMcdFG4QJ3xzx"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/system/trusted-issuers-registry/ATKTrustedIssuersRegistryImplementation.sol": {
        "keccak256": "0xad3a3463e2bcaab0c27200ec6bce246c0a4a61dc2e03ff0e431d66c37dc98570",
        "urls": [
          "bzz-raw://dabf1376b38336a2947b1b7396fb30d3f7b6b2d789127ffc548487725fc9c3be",
          "dweb:/ipfs/QmQRHfbFfpLbMeVCASeWqKbHkGNd8MFEm6MCHhfq2ADtow"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IClaimIssuer.sol": {
        "keccak256": "0xae785f63b3cb3a94bcb454ef4ad6376aa4848fa29cff1cc8db3bef4a2994a779",
        "urls": [
          "bzz-raw://d8223d2710c51ee39cdfd2cb2f1858b3d64a3222c78ea8ed5eb3e11a93e1222e",
          "dweb:/ipfs/QmYRXPCww7BorScTC6QNMbrRm2zprUmSYFpWomwarJH7Df"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC734.sol": {
        "keccak256": "0x35a14a0d1a3ed51689f1a2cb12e26d30601afbcc1cc9b9b288a03cd11e6d049e",
        "urls": [
          "bzz-raw://156aac402e73e6bd2fa8c0ccd85b2add8d1bb505d8a652218173dbc8e7b9a3cb",
          "dweb:/ipfs/QmPzPyc3kKxoNCGqKAooUju6YvMkDN4MCUH198TEXnA82o"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IERC735.sol": {
        "keccak256": "0xeac82c37b16c1c1c83df3e88be987332b1230ed13e1d017f9d2929f978ac0122",
        "urls": [
          "bzz-raw://695a66b789ac417b7b2b78c578981779db374704382921ff499351cccab0323e",
          "dweb:/ipfs/QmeZoogvsEWf688Z849zZ2dLPDnor6YnnNQLMgedY9Tc9D"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@onchainid-v2.2.1/contracts/interface/IIdentity.sol": {
        "keccak256": "0x5ed42ab81b9b734c79e61d1f7e0734baab5479a356ab6bb469414d3c66269862",
        "urls": [
          "bzz-raw://a0863999b1ed334179a43e699e6057815eea011a78ed51e61b6110fc392e26f8",
          "dweb:/ipfs/Qme6hdHZCAy1V4sLgAZ5NxdrEjEf5mYMabf5UDmUDjkuzW"
        ],
        "license": "GPL-3.0"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/IAccessControl.sol": {
        "keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
        "urls": [
          "bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
          "dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/introspection/IERC165.sol": {
        "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        "urls": [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/access/AccessControlUpgradeable.sol": {
        "keccak256": "0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534",
        "urls": [
          "bzz-raw://838551e10cc07e570b70aee1078e490658d3a0ab8f4adfd4f3f2a565200753da",
          "dweb:/ipfs/QmceT7R3Pqzywyxr3MSEA7VXU4axZAPS6BLy92iV97rGdG"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/metatx/ERC2771ContextUpgradeable.sol": {
        "keccak256": "0x290ba719fd784ff406a8de038c10dc2d0914794c8b016781712fcbb36ca7bffb",
        "urls": [
          "bzz-raw://8b5764ef1dab80c115c14e307c5cbd5845320a653a2d8a3658d20dfba6bc7758",
          "dweb:/ipfs/QmSPSasRTVtYyAEnEVCBPZwoQzgKU7gu7q8NeT9AMMpmmx"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/proxy/utils/Initializable.sol": {
        "keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
        "urls": [
          "bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
          "dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/ContextUpgradeable.sol": {
        "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
        "urls": [
          "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
          "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-upgradeable-5.3.0/utils/introspection/ERC165Upgradeable.sol": {
        "keccak256": "0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab",
        "urls": [
          "bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89",
          "dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "addTrustedIssuer(address,uint256[])": {
        "notice": "Adds a new trusted issuer to the registry with a specified list of claim topics they are authorized for."
      },
      "constructor": {
        "notice": "Constructor for the `ATKTrustedIssuersRegistryImplementation`."
      },
      "getTrustedIssuerClaimTopics(address)": {
        "notice": "Retrieves the list of claim topics for which a specific trusted issuer is authorized."
      },
      "getTrustedIssuers()": {
        "notice": "Returns an array of all currently registered and active trusted issuer contract addresses."
      },
      "getTrustedIssuersForClaimTopic(uint256)": {
        "notice": "Retrieves an array of all issuer contract addresses that are trusted for a specific claim topic."
      },
      "hasClaimTopic(address,uint256)": {
        "notice": "Checks if a specific issuer is trusted for a specific claim topic."
      },
      "initialize(address)": {
        "notice": "Initializes the `SMARTTrustedIssuersRegistryImplementation` contract. This function acts as the constructor for an upgradeable contract and can only be called once."
      },
      "isTrustedIssuer(address)": {
        "notice": "Checks if a given address is registered as a trusted issuer in the registry."
      },
      "removeTrustedIssuer(address)": {
        "notice": "Removes an existing trusted issuer from the registry. This revokes their trusted status for all previously associated claim topics."
      },
      "supportsInterface(bytes4)": {
        "notice": "Indicates whether this contract supports a given interface ID, as per ERC165."
      },
      "updateIssuerClaimTopics(address,uint256[])": {
        "notice": "Updates the list of claim topics for an existing trusted issuer."
      }
    },
    "events": {
      "ClaimTopicsUpdated(address,address,uint256[])": {
        "notice": "Emitted when the list of claim topics for an existing trusted issuer is successfully updated."
      },
      "TrustedIssuerAdded(address,address,uint256[])": {
        "notice": "Emitted when a new trusted issuer is successfully added to the registry."
      },
      "TrustedIssuerRemoved(address,address)": {
        "notice": "Emitted when an existing trusted issuer is successfully removed from the registry."
      }
    },
    "errors": {
      "AddressNotFoundInList(address)": [
        {
          "notice": "Generic error triggered when an address is expected to be in a list (e.g., `_issuerAddresses`) but is not found during a removal operation."
        }
      ],
      "InvalidIssuerAddress()": [
        {
          "notice": "Error triggered if an attempt is made to add or interact with an issuer using a zero address."
        }
      ],
      "IssuerAlreadyExists(address)": [
        {
          "notice": "Error triggered when attempting to add an issuer that is already registered in the registry."
        }
      ],
      "IssuerDoesNotExist(address)": [
        {
          "notice": "Error triggered when attempting to operate on an issuer (e.g., remove, update) that is not registered."
        }
      ],
      "IssuerNotFoundInTopicList(address,uint256)": [
        {
          "notice": "Error triggered during an attempt to remove an issuer from a specific claim topic's list, but the issuer was not found in that list."
        }
      ],
      "NoClaimTopicsProvided()": [
        {
          "notice": "Error triggered if an attempt is made to add or update an issuer with an empty list of claim topics."
        }
      ]
    },
    "notice": "This contract is the upgradeable logic for managing a registry of trusted claim issuers and the specific claim topics they are authorized to issue claims for. It is compliant with the `IERC3643TrustedIssuersRegistry` interface, a standard for tokenization platforms."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "This registry plays a crucial role in decentralized identity and verifiable credential systems. It allows relying parties (e.g., smart contracts controlling access to tokenized assets) to verify if a claim presented by a user was issued by an entity trusted for that particular type of claim (claim topic). Key features: -   **Upgradeable:** Uses the UUPS (Universal Upgradeable Proxy Standard) pattern, allowing the logic to be     updated without changing the contract address or losing data. -   **Access Control:** Leverages `AccessControlUpgradeable` from OpenZeppelin. A `REGISTRAR_ROLE` is     defined, which grants permission to add, remove, and update trusted issuers and their claim topics.     The `DEFAULT_ADMIN_ROLE` can manage who holds the `REGISTRAR_ROLE`. -   **Efficient Lookups:** Maintains mappings to quickly find all trusted issuers for a given claim topic     (`_issuersByClaimTopic`) and to check if a specific issuer is trusted for a specific topic     (`_claimTopicIssuerIndex`). -   **Meta-transactions:** Supports gasless transactions for users via `ERC2771ContextUpgradeable` if a trusted     forwarder is configured. -   **ERC165:** Implements `supportsInterface` for discoverability of its `IERC3643TrustedIssuersRegistry` compliance. The contract stores `TrustedIssuer` structs, which link an issuer's address to an array of claim topics they are authorized for. It also maintains an array of all registered issuer addresses (`_issuerAddresses`) for enumeration.",
    "methods": {
      "addTrustedIssuer(address,uint256[])": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It performs several validation checks: -   The `_trustedIssuer` address must not be the zero address. -   The `_claimTopics` array must not be empty (an issuer must be trusted for at least one topic). -   The issuer must not already be registered to prevent duplicates. If all checks pass, the function: 1.  Stores the issuer's details (address, claim topics, and `exists = true`) in the `_trustedIssuers` mapping. 2.  Adds the issuer's address to the `_issuerAddresses` array for enumeration. 3.  For each claim topic in `_claimTopics`, it calls `_addIssuerToClaimTopic` to update the     `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, linking the issuer to that topic. 4.  Emits a `TrustedIssuerAdded` event.Reverts with:      - `InvalidIssuerAddress()` if `_trustedIssuer` is `address(0)`.      - `NoClaimTopicsProvided()` if `_claimTopics` is empty.      - `IssuerAlreadyExists(issuerAddress)` if the issuer is already registered.",
        "params": {
          "_claimTopics": "An array of `uint256` values representing the claim topics for which this issuer will be trusted.",
          "_trustedIssuer": "The `IClaimIssuer` compliant contract address of the issuer to be added."
        }
      },
      "constructor": {
        "details": "This constructor is part of the UUPS (Universal Upgradeable Proxy Standard) pattern. Its primary role is to initialize `ERC2771ContextUpgradeable` with the `trustedForwarder` address, enabling meta-transaction support from the moment of deployment if a forwarder is provided. `_disableInitializers()` is called to prevent the `initialize` function (which acts as the true initializer for upgradeable contracts) from being called on this logic contract directly. The `initialize` function should only be called once, through the proxy, after deployment.",
        "params": {
          "trustedForwarder": "The address of the trusted forwarder contract for ERC2771 meta-transactions. If `address(0)`, meta-transactions via a forwarder are effectively disabled."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedIssuerClaimTopics(address)": {
        "details": "It first checks if the provided `_trustedIssuer` address actually exists as a registered issuer using the `exists` flag in the `_trustedIssuers` mapping. If not, it reverts. If the issuer exists, it returns the `claimTopics` array stored in their `TrustedIssuer` struct.Reverts with `IssuerDoesNotExist(address(_trustedIssuer))` if the issuer is not found in the registry.",
        "params": {
          "_trustedIssuer": "The `IClaimIssuer` contract address of the issuer whose authorized claim topics are being queried."
        },
        "returns": {
          "_0": "An array of `uint256` values, where each value is a claim topic the issuer is trusted for. Returns an empty array if the issuer is trusted for no topics (though `addTrustedIssuer` and `updateIssuerClaimTopics` prevent setting an empty list initially)."
        }
      },
      "getTrustedIssuers()": {
        "details": "This function iterates through the `_issuerAddresses` array and casts each `address` to an `IClaimIssuer` type for the return array. This is useful for clients wanting to get a complete list of entities considered trusted by this registry.",
        "returns": {
          "_0": "An array of `IClaimIssuer` interface types. Each element is a contract address of a trusted issuer. Returns an empty array if no issuers are registered."
        }
      },
      "getTrustedIssuersForClaimTopic(uint256)": {
        "details": "This function directly accesses the `_issuersByClaimTopic` mapping using the given `claimTopic` as a key. It then converts the stored array of `address` types into an array of `IClaimIssuer` interface types. This is a primary query function for relying parties to discover who can issue valid claims for a certain topic.",
        "params": {
          "claimTopic": "The `uint256` identifier of the claim topic being queried."
        },
        "returns": {
          "_0": "An array of `IClaimIssuer` interface types. Each element is a contract address of an issuer trusted for the specified `claimTopic`. Returns an empty array if no issuers are trusted for that topic."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasClaimTopic(address,uint256)": {
        "details": "This function uses the `_claimTopicIssuerIndex` mapping for an efficient O(1) lookup. If `_claimTopicIssuerIndex[_claimTopic][_issuer]` is greater than 0, it means the issuer is present in the list of trusted issuers for that `_claimTopic`, so the function returns `true`. Otherwise (if the value is 0), the issuer is not trusted for that topic, and it returns `false`.",
        "params": {
          "_claimTopic": "The `uint256` identifier of the claim topic to check against.",
          "_issuer": "The address of the issuer contract to check."
        },
        "returns": {
          "_0": "`true` if the `_issuer` is trusted for the `_claimTopic`, `false` otherwise."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address)": {
        "details": "This function is typically called by the deployer immediately after the proxy contract pointing to this implementation is deployed. It sets up the initial state: 1.  `__ERC165_init_unchained()`: Initializes ERC165 interface detection. 2.  `__AccessControlEnumerable_init_unchained()`: Initializes the role-based access control system. 3.  The `ERC2771ContextUpgradeable` is already initialized by its own constructor. 4.  `_grantRole(DEFAULT_ADMIN_ROLE, initialAdmin)`: Grants the `DEFAULT_ADMIN_ROLE` to `initialAdmin`.     The admin can manage all other roles, including granting/revoking `REGISTRAR_ROLE`. 5.  `_grantRole(REGISTRAR_ROLE, initialAdmin)`: Grants the `REGISTRAR_ROLE` to `initialAdmin`.     This allows the `initialAdmin` to immediately start adding trusted issuers. This role can later be     transferred or granted to other operational addresses/contracts. The `initializer` modifier from `Initializable` ensures this function can only be executed once.",
        "params": {
          "initialAdmin": "The address that will receive the initial `DEFAULT_ADMIN_ROLE` and `REGISTRAR_ROLE`. This address will have full control over the registry's setup and initial population of trusted issuers."
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "isTrustedIssuer(address)": {
        "details": "This function performs a direct lookup in the `_trustedIssuers` mapping and checks the `exists` flag of the `TrustedIssuer` struct associated with the `_issuer` address.",
        "params": {
          "_issuer": "The address to check for trusted issuer status."
        },
        "returns": {
          "_0": "`true` if the `_issuer` address is found in the registry and its `exists` flag is true; `false` otherwise (e.g., if the issuer was never added or has been removed)."
        }
      },
      "removeTrustedIssuer(address)": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer actually exists in the registry. If not, it reverts. If the issuer exists, the function: 1.  Retrieves the list of claim topics the issuer was associated with from `_trustedIssuers`. 2.  Calls `_removeAddressFromList` to remove the issuer's address from the `_issuerAddresses` array. 3.  For each claim topic the issuer was associated with, it calls `_removeIssuerFromClaimTopic` to update     the `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, effectively unlinking the issuer from     those topics. 4.  Deletes the issuer's main record from the `_trustedIssuers` mapping (which also sets `exists` to `false`     implicitly for a new struct if the address were to be reused, though deletion is more explicit here). 5.  Emits a `TrustedIssuerRemoved` event.Reverts with `IssuerDoesNotExist(issuerAddress)` if the issuer is not found in the registry.",
        "params": {
          "_trustedIssuer": "The `IClaimIssuer` compliant contract address of the issuer to be removed."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "This function allows other contracts/tools to query if this contract implements specific interfaces. It checks for: 1.  `type(IERC3643TrustedIssuersRegistry).interfaceId`: Confirms adherence to the ERC-3643 standard for     trusted issuer registries. 2.  Interfaces supported by parent contracts (e.g., `AccessControlUpgradeable`, `ERC165Upgradeable`)     via `super.supportsInterface(interfaceId)`. Crucial for interoperability, allowing other components to verify compatibility.",
        "params": {
          "interfaceId": "The EIP-165 interface identifier (`bytes4`) to check."
        },
        "returns": {
          "_0": "`true` if the contract supports `interfaceId`, `false` otherwise."
        }
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "updateIssuerClaimTopics(address,uint256[])": {
        "details": "This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer exists and if the new list of claim topics is not empty. The update process involves: 1.  Retrieving the issuer's current list of claim topics. 2.  Removing the issuer from the lookup mappings (`_issuersByClaimTopic`, `_claimTopicIssuerIndex`) for all     their *current* claim topics. 3.  Adding the issuer to the lookup mappings for all topics in the *new* `_newClaimTopics` list. 4.  Updating the `claimTopics` array stored in the issuer's `TrustedIssuer` struct in `_trustedIssuers` to     reflect the `_newClaimTopics`. 5.  Emitting a `ClaimTopicsUpdated` event. This approach ensures that the lookup mappings are consistent with the issuer's newly assigned topics.Reverts with:      - `IssuerDoesNotExist(issuerAddress)` if the issuer is not found.      - `NoClaimTopicsProvided()` if `_newClaimTopics` is empty.",
        "params": {
          "_newClaimTopics": "An array of `uint256` values representing the new set of claim topics for which this issuer will be trusted.",
          "_trustedIssuer": "The `IClaimIssuer` compliant contract address of the issuer whose claim topics are to be updated."
        }
      }
    },
    "events": {
      "ClaimTopicsUpdated(address,address,uint256[])": {
        "details": "This event allows tracking modifications to an issuer's scope of authority without removing and re-adding them.",
        "params": {
          "_claimTopics": "The new array of `uint256` claim topics for which the issuer is now trusted.",
          "_issuer": "The address of the `IClaimIssuer` contract whose claim topics were updated. Indexed for searchability.",
          "sender": "The address of the account (holder of `REGISTRAR_ROLE`) that performed the update. Indexed for searchability."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TrustedIssuerAdded(address,address,uint256[])": {
        "details": "This event is crucial for off-chain systems and UIs to track changes in the set of trusted issuers.",
        "params": {
          "_claimTopics": "An array of `uint256` claim topics for which the new issuer is now trusted.",
          "_issuer": "The address of the `IClaimIssuer` contract that was added as a trusted issuer. Indexed for searchability.",
          "sender": "The address of the account (holder of `REGISTRAR_ROLE`) that performed the addition. Indexed for searchability."
        }
      },
      "TrustedIssuerRemoved(address,address)": {
        "details": "Upon this event, the issuer is no longer considered trusted for any claim topics it was previously associated with.",
        "params": {
          "_issuer": "The address of the `IClaimIssuer` contract that was removed. Indexed for searchability.",
          "sender": "The address of the account (holder of `REGISTRAR_ROLE`) that performed the removal. Indexed for searchability."
        }
      }
    },
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressNotFoundInList(address)": [
        {
          "details": "This usually signals an internal state inconsistency, as removal operations generally assume the item exists.",
          "params": {
            "addr": "The address that was not found in the list."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidIssuerAddress()": [
        {
          "details": "The zero address is invalid for representing an issuer contract. This ensures all registered issuers have a valid contract address."
        }
      ],
      "IssuerAlreadyExists(address)": [
        {
          "details": "This prevents duplicate entries for the same issuer, maintaining data integrity.",
          "params": {
            "issuerAddress": "The address of the issuer that already exists."
          }
        }
      ],
      "IssuerDoesNotExist(address)": [
        {
          "details": "Ensures that operations are only performed on existing, registered issuers.",
          "params": {
            "issuerAddress": "The address of the issuer that was not found in the registry."
          }
        }
      ],
      "IssuerNotFoundInTopicList(address,uint256)": [
        {
          "details": "This typically indicates an inconsistency in state or an incorrect operation, as an issuer should only be removed from topics they are actually associated with.",
          "params": {
            "claimTopic": "The specific claim topic from which the issuer was being removed.",
            "issuerAddress": "The address of the issuer that was expected but not found."
          }
        }
      ],
      "NoClaimTopicsProvided()": [
        {
          "details": "A trusted issuer must be associated with at least one claim topic they are authorized to issue claims for. This prevents registering issuers with no specified area of authority."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "title": "ATK Trusted Issuers Registry Implementation"
  },
  "id": 172
}