{
  "abi": [
    {
      "type": "function",
      "name": "startDate",
      "inputs": [],
      "outputs": [
        {
          "name": "startDateTimestamp",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "startDate()": "0b97bc86"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Yield schedule contracts are external contracts that dictate the rules, timing, and calculations for yield distribution. This interface is often extended by more specific schedule interfaces (like `ISMARTFixedYieldSchedule`) that define more complex functionalities. The `startDate()` function is crucial for logic that might depend on whether the yield distribution period has begun (e.g., restricting minting after the start date).\",\"kind\":\"dev\",\"methods\":{\"startDate()\":{\"details\":\"This function provides the point in time (as a Unix timestamp, seconds since epoch) from which the yield schedule is considered active or when yield calculations/distributions commence. This is a `view` function, meaning it does not modify the contract's state and can be called without gas cost if called externally (not from another contract transaction).\",\"returns\":{\"startDateTimestamp\":\"The Unix timestamp indicating when the yield schedule begins.\"}}},\"title\":\"Interface for a generic SMART Yield Schedule contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"startDate()\":{\"notice\":\"Returns the timestamp representing the start date and time of the yield schedule.\"}},\"notice\":\"This interface defines the most basic function that any yield schedule contract, associated with a SMART token's yield extension, must implement. It primarily ensures that the associated SMART token (e.g., via `_SMARTYieldLogic`) can query the start date of the yield schedule.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smart/extensions/yield/schedules/ISMARTYieldSchedule.sol\":\"ISMARTYieldSchedule\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/smart/extensions/yield/schedules/ISMARTYieldSchedule.sol\":{\"keccak256\":\"0xdfbf07a23c23697347fb56aee34b8ca40f6833d71a3f641f48e7867af27d32f6\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://4d8dccf3d331fd4e9b0fa5f26f9386a6ef432f0c304735ef274d8866e029dd5e\",\"dweb:/ipfs/QmPeH5qE3CTWCWUQgxJ2es7iHzLr4NsFsJzttsPTpqErVK\"]},\"dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "startDate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startDateTimestamp",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "startDate()": {
            "details": "This function provides the point in time (as a Unix timestamp, seconds since epoch) from which the yield schedule is considered active or when yield calculations/distributions commence. This is a `view` function, meaning it does not modify the contract's state and can be called without gas cost if called externally (not from another contract transaction).",
            "returns": {
              "startDateTimestamp": "The Unix timestamp indicating when the yield schedule begins."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "startDate()": {
            "notice": "Returns the timestamp representing the start date and time of the yield schedule."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/smart/extensions/yield/schedules/ISMARTYieldSchedule.sol": "ISMARTYieldSchedule"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/smart/extensions/yield/schedules/ISMARTYieldSchedule.sol": {
        "keccak256": "0xdfbf07a23c23697347fb56aee34b8ca40f6833d71a3f641f48e7867af27d32f6",
        "urls": [
          "bzz-raw://4d8dccf3d331fd4e9b0fa5f26f9386a6ef432f0c304735ef274d8866e029dd5e",
          "dweb:/ipfs/QmPeH5qE3CTWCWUQgxJ2es7iHzLr4NsFsJzttsPTpqErVK"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "startDate()": {
        "notice": "Returns the timestamp representing the start date and time of the yield schedule."
      }
    },
    "notice": "This interface defines the most basic function that any yield schedule contract, associated with a SMART token's yield extension, must implement. It primarily ensures that the associated SMART token (e.g., via `_SMARTYieldLogic`) can query the start date of the yield schedule."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "Yield schedule contracts are external contracts that dictate the rules, timing, and calculations for yield distribution. This interface is often extended by more specific schedule interfaces (like `ISMARTFixedYieldSchedule`) that define more complex functionalities. The `startDate()` function is crucial for logic that might depend on whether the yield distribution period has begun (e.g., restricting minting after the start date).",
    "methods": {
      "startDate()": {
        "details": "This function provides the point in time (as a Unix timestamp, seconds since epoch) from which the yield schedule is considered active or when yield calculations/distributions commence. This is a `view` function, meaning it does not modify the contract's state and can be called without gas cost if called externally (not from another contract transaction).",
        "returns": {
          "startDateTimestamp": "The Unix timestamp indicating when the yield schedule begins."
        }
      }
    },
    "title": "Interface for a generic SMART Yield Schedule contract"
  },
  "id": 115
}