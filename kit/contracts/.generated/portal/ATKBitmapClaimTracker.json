{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "owner_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getClaimedAmount",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "claimedAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isClaimAmountValid",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "isValid",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isClaimed",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "claimed",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "recordClaim",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "claimedAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceOwnership",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ClaimRecorded",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "claimedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "previousOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "OwnableInvalidOwner",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "OwnableUnauthorizedAccount",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x60803460b857601f6103bb38819003918201601f19168301916001600160401b0383118484101760bc5780849260209460405283398101031260b857516001600160a01b0381169081900360b857801560a5575f80546001600160a01b031981168317825560405192916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36102ea90816100d18239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c8063429c6e5b1461024f578063715018a6146101f85780638da5cb5b146101d1578063bd40bde614610196578063ec5747fe14610133578063f2fde38b146100aa5763f364c90c14610066575f80fd5b346100a65760403660031901126100a657602061009c6004358060081c5f526001602052600160ff60405f205492161b16151590565b6040519015158152f35b5f80fd5b346100a65760203660031901126100a6576004356001600160a01b038116908190036100a6576100d86102b7565b8015610120575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b346100a65760407f08401774913e94f43659333293c99fdfdea868c488d679967e054abc8b5ae8346101643661029d565b61016f9492946102b7565b8460081c5f526001602052825f20600160ff87161b815417905582519182526020820152a2005b346100a65760206101c86101a93661029d565b50508060081c5f526001602052600160ff60405f205492161b16151590565b15604051908152f35b346100a6575f3660031901126100a6575f546040516001600160a01b039091168152602090f35b346100a6575f3660031901126100a6576102106102b7565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100a65760203660031901126100a6576102836004358060081c5f526001602052600160ff60405f205492161b16151590565b156102955760205f195b604051908152f35b60205f61028d565b60609060031901126100a657600435906024359060443590565b5f546001600160a01b031633036102ca57565b63118cdaa760e01b5f523360045260245ffdfea164736f6c634300081c000a",
    "sourceMap": "856:3968:4:-:0;;;;;;;;;;;;;-1:-1:-1;;856:3968:4;;;;-1:-1:-1;;;;;856:3968:4;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;856:3968:4;;;;;;;;1273:26:187;;1269:95;;-1:-1:-1;856:3968:4;;-1:-1:-1;;;;;;856:3968:4;;;;;;;;;;-1:-1:-1;;;;;856:3968:4;;;;3052:40:187;;-1:-1:-1;3052:40:187;856:3968:4;;;;;;;1269:95:187;1322:31;;;-1:-1:-1;1322:31:187;-1:-1:-1;1322:31:187;856:3968:4;;-1:-1:-1;1322:31:187;856:3968:4;-1:-1:-1;856:3968:4;;;;;;-1:-1:-1;856:3968:4;;;;;-1:-1:-1;856:3968:4",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063429c6e5b1461024f578063715018a6146101f85780638da5cb5b146101d1578063bd40bde614610196578063ec5747fe14610133578063f2fde38b146100aa5763f364c90c14610066575f80fd5b346100a65760403660031901126100a657602061009c6004358060081c5f526001602052600160ff60405f205492161b16151590565b6040519015158152f35b5f80fd5b346100a65760203660031901126100a6576004356001600160a01b038116908190036100a6576100d86102b7565b8015610120575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b346100a65760407f08401774913e94f43659333293c99fdfdea868c488d679967e054abc8b5ae8346101643661029d565b61016f9492946102b7565b8460081c5f526001602052825f20600160ff87161b815417905582519182526020820152a2005b346100a65760206101c86101a93661029d565b50508060081c5f526001602052600160ff60405f205492161b16151590565b15604051908152f35b346100a6575f3660031901126100a6575f546040516001600160a01b039091168152602090f35b346100a6575f3660031901126100a6576102106102b7565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100a65760203660031901126100a6576102836004358060081c5f526001602052600160ff60405f205492161b16151590565b156102955760205f195b604051908152f35b60205f61028d565b60609060031901126100a657600435906024359060443590565b5f546001600160a01b031633036102ca57565b63118cdaa760e01b5f523360045260245ffdfea164736f6c634300081c000a",
    "sourceMap": "856:3968:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;856:3968:4;;;;;2127:23;856:3968;;;;;-1:-1:-1;856:3968:4;4317:14;856:3968;;4317:14;856:3968;;-1:-1:-1;856:3968:4;;;;;4398:11;4397:18;;4141:281;;2127:23;856:3968;;;;;;;;;;;;;;;;;;-1:-1:-1;;856:3968:4;;;;;;-1:-1:-1;;;;;856:3968:4;;;;;;;;1500:62:187;;:::i;:::-;2627:22;;2623:91;;856:3968:4;;;-1:-1:-1;;;;;;856:3968:4;;;;;;-1:-1:-1;;;;;856:3968:4;;3052:40:187;;856:3968:4;3052:40:187;856:3968:4;2623:91:187;2672:31;;;856:3968:4;2672:31:187;856:3968:4;;;;;2672:31:187;856:3968:4;;;;;3228:48;856:3968;;;:::i;:::-;1500:62:187;;;;;:::i;:::-;856:3968:4;;;;;4801:1;856:3968;;;;;4801:1;856:3968;;;;;;4771:44;856:3968;;;;;;;;;;;3228:48;856:3968;;;;;;3818:23;856:3968;;;:::i;:::-;3818:23;;856:3968;;;-1:-1:-1;856:3968:4;4317:14;856:3968;;4317:14;856:3968;;-1:-1:-1;856:3968:4;;;;;4398:11;4397:18;;4141:281;;3818:23;3817:24;856:3968;;;;;;;;;;;;-1:-1:-1;;856:3968:4;;;;;;;;-1:-1:-1;;;;;856:3968:4;;;;;;;;;;;;;;-1:-1:-1;;856:3968:4;;;;1500:62:187;;:::i;:::-;856:3968:4;;;-1:-1:-1;;;;;;856:3968:4;;;;-1:-1:-1;;;;;856:3968:4;3052:40:187;856:3968:4;;3052:40:187;856:3968:4;;;;;;;-1:-1:-1;;856:3968:4;;;;2587:23;856:3968;;;;;-1:-1:-1;856:3968:4;4317:14;856:3968;;4317:14;856:3968;;-1:-1:-1;856:3968:4;;;;;4398:11;4397:18;;4141:281;;2587:23;:47;;;856:3968;-1:-1:-1;;2587:47:4;856:3968;;;;;;2587:47;856:3968;;2587:47;;856:3968;;;;;;;;;;;;;;;;;;:::o;1796:162:187:-;1710:6;856:3968:4;-1:-1:-1;;;;;856:3968:4;735:10:215;1855:23:187;1851:101;;1796:162::o;1851:101::-;1901:40;;;1710:6;1901:40;735:10:215;1901:40:187;856:3968:4;;1710:6:187;1901:40",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getClaimedAmount(uint256)": "429c6e5b",
    "isClaimAmountValid(uint256,uint256,uint256)": "bd40bde6",
    "isClaimed(uint256,uint256)": "f364c90c",
    "owner()": "8da5cb5b",
    "recordClaim(uint256,uint256,uint256)": "ec5747fe",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isClaimAmountValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"recordClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SettleMint Tokenization Services\",\"details\":\"This contract implements claim tracking for airdrops where users can only claim their full      allocation in a single transaction (all-or-nothing claims). It uses a bitmap for gas-efficient      storage, tracking claimed status as binary flags.      This implementation is optimized for scenarios with fixed allocation amounts and single claims.      Only the owner (typically the airdrop contract) can record claims to prevent unauthorized manipulation.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"ClaimRecorded(uint256,uint256,uint256)\":{\"params\":{\"claimedAmount\":\"The amount claimed.\",\"index\":\"The index of the claim in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"owner_\":\"The address that will own this claim tracker (typically the airdrop contract).\"}},\"getClaimedAmount(uint256)\":{\"details\":\"For bitmap tracking, returns either 0 (not claimed) or the total amount (fully claimed).\",\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"claimedAmount\":\"0 if not claimed, or a very large number to indicate fully claimed.\"}},\"isClaimAmountValid(uint256,uint256,uint256)\":{\"details\":\"For bitmap tracking, only valid if the index hasn't been claimed yet.\",\"params\":{\"index\":\"The index to check.\"},\"returns\":{\"isValid\":\"True if the index hasn't been claimed yet, false otherwise.\"}},\"isClaimed(uint256,uint256)\":{\"details\":\"For bitmap tracking, once claimed, the full amount is always claimed.      The totalAmount parameter is kept for interface compatibility but not used in logic.\",\"params\":{\"index\":\"The index to check in the Merkle tree.\"},\"returns\":{\"claimed\":\"True if the index has been claimed, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recordClaim(uint256,uint256,uint256)\":{\"details\":\"Only the owner (airdrop contract) can record claims to prevent unauthorized manipulation.      For bitmap tracking, any claim marks the index as fully claimed.\",\"params\":{\"claimedAmount\":\"The amount being claimed.\",\"index\":\"The index of the claim in the Merkle tree.\",\"totalAmount\":\"The total amount allocated for this index.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_claimedBitMap\":{\"details\":\"Maps word index to a 256-bit word containing claimed flags for 256 indices.      Each bit represents whether the corresponding index has been claimed.\"}},\"title\":\"ATK Bitmap Claim Tracker\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimRecorded(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a claim is recorded for a specific index.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the claim tracker with the specified owner.\"},\"getClaimedAmount(uint256)\":{\"notice\":\"Gets the amount already claimed for a specific index.\"},\"isClaimAmountValid(uint256,uint256,uint256)\":{\"notice\":\"Checks if a new claim amount is valid for a specific index.\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"Checks if a claim has been fully claimed for a specific index.\"},\"recordClaim(uint256,uint256,uint256)\":{\"notice\":\"Records a claim for a specific index.\"}},\"notice\":\"Implementation of binary claim tracking using bitmaps for ATK airdrop contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/addons/airdrop/claim-tracker/ATKBitmapClaimTracker.sol\":\"ATKBitmapClaimTracker\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/\",\":@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/\",\":@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/\",\":@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/\",\":forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/\",\":forge-std/=dependencies/forge-std-1.9.7/src/\"],\"viaIR\":true},\"sources\":{\"contracts/addons/airdrop/claim-tracker/ATKBitmapClaimTracker.sol\":{\"keccak256\":\"0xad4a4e867e9592c44569e4a24d9e26357261a40c63adb8eaf149317a420d025c\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://34ef63b749eaf024b164d2d5edf3fa619a467f52097db9c20ed12c28cfecd1d0\",\"dweb:/ipfs/QmSparQqF7QMVo4zGugd3aNRZdBJGSAFmz8FFb5ysVTQ9V\"]},\"contracts/addons/airdrop/claim-tracker/IATKClaimTracker.sol\":{\"keccak256\":\"0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be\",\"license\":\"FSL-1.1-MIT\",\"urls\":[\"bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f\",\"dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne\"]},\"dependencies/@openzeppelin-contracts-5.3.0/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.28+commit.7893614a"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableInvalidOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableUnauthorizedAccount"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimRecorded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getClaimedAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimAmountValid",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isClaimed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "recordClaim"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "constructor": {
            "params": {
              "owner_": "The address that will own this claim tracker (typically the airdrop contract)."
            }
          },
          "getClaimedAmount(uint256)": {
            "details": "For bitmap tracking, returns either 0 (not claimed) or the total amount (fully claimed).",
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "claimedAmount": "0 if not claimed, or a very large number to indicate fully claimed."
            }
          },
          "isClaimAmountValid(uint256,uint256,uint256)": {
            "details": "For bitmap tracking, only valid if the index hasn't been claimed yet.",
            "params": {
              "index": "The index to check."
            },
            "returns": {
              "isValid": "True if the index hasn't been claimed yet, false otherwise."
            }
          },
          "isClaimed(uint256,uint256)": {
            "details": "For bitmap tracking, once claimed, the full amount is always claimed.      The totalAmount parameter is kept for interface compatibility but not used in logic.",
            "params": {
              "index": "The index to check in the Merkle tree."
            },
            "returns": {
              "claimed": "True if the index has been claimed, false otherwise."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "recordClaim(uint256,uint256,uint256)": {
            "details": "Only the owner (airdrop contract) can record claims to prevent unauthorized manipulation.      For bitmap tracking, any claim marks the index as fully claimed.",
            "params": {
              "claimedAmount": "The amount being claimed.",
              "index": "The index of the claim in the Merkle tree.",
              "totalAmount": "The total amount allocated for this index."
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "constructor": {
            "notice": "Initializes the claim tracker with the specified owner."
          },
          "getClaimedAmount(uint256)": {
            "notice": "Gets the amount already claimed for a specific index."
          },
          "isClaimAmountValid(uint256,uint256,uint256)": {
            "notice": "Checks if a new claim amount is valid for a specific index."
          },
          "isClaimed(uint256,uint256)": {
            "notice": "Checks if a claim has been fully claimed for a specific index."
          },
          "recordClaim(uint256,uint256,uint256)": {
            "notice": "Records a claim for a specific index."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@onchainid-v2.2.1/=dependencies/@onchainid-v2.2.1/contracts/",
        "@onchainid/contracts/=dependencies/@onchainid-v2.2.1/contracts/",
        "@openzeppelin-contracts-5.3.0/=dependencies/@openzeppelin-contracts-5.3.0/",
        "@openzeppelin-contracts-upgradeable-5.3.0/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts-upgradeable/=dependencies/@openzeppelin-contracts-upgradeable-5.3.0/",
        "@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-5.3.0/",
        "forge-std-1.9.7/=dependencies/forge-std-1.9.7/src/",
        "forge-std/=dependencies/forge-std-1.9.7/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/addons/airdrop/claim-tracker/ATKBitmapClaimTracker.sol": "ATKBitmapClaimTracker"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/addons/airdrop/claim-tracker/ATKBitmapClaimTracker.sol": {
        "keccak256": "0xad4a4e867e9592c44569e4a24d9e26357261a40c63adb8eaf149317a420d025c",
        "urls": [
          "bzz-raw://34ef63b749eaf024b164d2d5edf3fa619a467f52097db9c20ed12c28cfecd1d0",
          "dweb:/ipfs/QmSparQqF7QMVo4zGugd3aNRZdBJGSAFmz8FFb5ysVTQ9V"
        ],
        "license": "FSL-1.1-MIT"
      },
      "contracts/addons/airdrop/claim-tracker/IATKClaimTracker.sol": {
        "keccak256": "0x9e3a319030370650afc13f8c1fc8c3fb3570072849200787b68c19546b6c68be",
        "urls": [
          "bzz-raw://85ba8ece757f0f2bce8a517ac93e7a967cd5fc60eb5b4af65004396453fe792f",
          "dweb:/ipfs/QmQ9Wvi78aWmEvT3LmisnM1QGKRPBLJUhKeRKM6g8yUzne"
        ],
        "license": "FSL-1.1-MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/access/Ownable.sol": {
        "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        "urls": [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
        ],
        "license": "MIT"
      },
      "dependencies/@openzeppelin-contracts-5.3.0/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the claim tracker with the specified owner."
      },
      "getClaimedAmount(uint256)": {
        "notice": "Gets the amount already claimed for a specific index."
      },
      "isClaimAmountValid(uint256,uint256,uint256)": {
        "notice": "Checks if a new claim amount is valid for a specific index."
      },
      "isClaimed(uint256,uint256)": {
        "notice": "Checks if a claim has been fully claimed for a specific index."
      },
      "recordClaim(uint256,uint256,uint256)": {
        "notice": "Records a claim for a specific index."
      }
    },
    "events": {
      "ClaimRecorded(uint256,uint256,uint256)": {
        "notice": "Emitted when a claim is recorded for a specific index."
      }
    },
    "notice": "Implementation of binary claim tracking using bitmaps for ATK airdrop contracts."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "SettleMint Tokenization Services",
    "details": "This contract implements claim tracking for airdrops where users can only claim their full      allocation in a single transaction (all-or-nothing claims). It uses a bitmap for gas-efficient      storage, tracking claimed status as binary flags.      This implementation is optimized for scenarios with fixed allocation amounts and single claims.      Only the owner (typically the airdrop contract) can record claims to prevent unauthorized manipulation.",
    "methods": {
      "constructor": {
        "params": {
          "owner_": "The address that will own this claim tracker (typically the airdrop contract)."
        }
      },
      "getClaimedAmount(uint256)": {
        "details": "For bitmap tracking, returns either 0 (not claimed) or the total amount (fully claimed).",
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "claimedAmount": "0 if not claimed, or a very large number to indicate fully claimed."
        }
      },
      "isClaimAmountValid(uint256,uint256,uint256)": {
        "details": "For bitmap tracking, only valid if the index hasn't been claimed yet.",
        "params": {
          "index": "The index to check."
        },
        "returns": {
          "isValid": "True if the index hasn't been claimed yet, false otherwise."
        }
      },
      "isClaimed(uint256,uint256)": {
        "details": "For bitmap tracking, once claimed, the full amount is always claimed.      The totalAmount parameter is kept for interface compatibility but not used in logic.",
        "params": {
          "index": "The index to check in the Merkle tree."
        },
        "returns": {
          "claimed": "True if the index has been claimed, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recordClaim(uint256,uint256,uint256)": {
        "details": "Only the owner (airdrop contract) can record claims to prevent unauthorized manipulation.      For bitmap tracking, any claim marks the index as fully claimed.",
        "params": {
          "claimedAmount": "The amount being claimed.",
          "index": "The index of the claim in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "events": {
      "ClaimRecorded(uint256,uint256,uint256)": {
        "params": {
          "claimedAmount": "The amount claimed.",
          "index": "The index of the claim in the Merkle tree.",
          "totalAmount": "The total amount allocated for this index."
        }
      }
    },
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "title": "ATK Bitmap Claim Tracker"
  },
  "id": 4
}