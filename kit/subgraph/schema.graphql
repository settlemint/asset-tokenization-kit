# --------------------------------------------------
# SMART Indexer Schema
# --------------------------------------------------

# ==================================================
# CORE ENTITIES
# ==================================================

type Account @entity(immutable: false) {
  id: Bytes!
  isContract: Boolean!
  identity: Identity
  country: Int
  balances: [TokenBalance!]! @derivedFrom(field: "account")
}

type Event @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  txIndex: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  emitter: Account!
  sender: Account!
  involved: [Account!]!
  values: [EventValue!]! @derivedFrom(field: "entry")
}

type EventValue @entity(immutable: true) {
  id: Bytes!
  name: String!
  value: String!
  entry: Event!
}

# ==================================================
# ACCESS CONTROL & SYSTEM
# ==================================================

type AccessControl @entity(immutable: false) {
  id: Bytes!
  admin: [Account!]!
  registrar: [Account!]!
  claimManager: [Account!]!
  identityIssuer: [Account!]!
  identityIssuerAdmin: [Account!]!
  tokenIdentityIssuer: [Account!]!
  tokenIdentityIssuerAdmin: [Account!]!
  deployer: [Account!]!
  storageModifier: [Account!]!
  manageRegistries: [Account!]!
  tokenGovernance: [Account!]!
  supplyManagement: [Account!]!
  custodian: [Account!]!
  emergency: [Account!]!
  implementationManager: [Account!]!
  bypassListManager: [Account!]!
  bypassListManagerAdmin: [Account!]!
}

type System @entity(immutable: false) {
  id: Bytes!
  deployedInTransaction: Bytes!
  accessControl: AccessControl!
  account: Account
  compliance: Compliance
  identityRegistryStorage: IdentityRegistryStorage
  identityFactory: IdentityFactory
  identityRegistry: IdentityRegistry
  trustedIssuersRegistry: TrustedIssuersRegistry
  topicSchemeRegistry: TopicSchemeRegistry
  tokenFactoryRegistry: TokenFactoryRegistry
  complianceModuleRegistry: ComplianceModuleRegistry
  systemAddonRegistry: SystemAddonRegistry
}

type SystemAddon @entity(immutable: false) {
  id: Bytes!
  deployedInTransaction: Bytes!
  accessControl: AccessControl!
  name: String!
  typeId: Bytes!
  system: System
  account: Account!
}

type VaultFactory @entity(immutable: false) {
  id: Bytes!
  deployedInTransaction: Bytes!
  accessControl: AccessControl!
  systemAddon: SystemAddon!
  system: System!
  account: Account!
  vaults: [Vault!]! @derivedFrom(field: "factory")
}

type Vault @entity(immutable: false) {
  id: Bytes!
  createdAt: BigInt!
  createdBy: Account!
  factory: VaultFactory!
  account: Account!
  accessControl: AccessControl!
  required: BigInt!
  signers: [Account!]!
  transactions: [VaultTransaction!]! @derivedFrom(field: "vault")
  balance: BigDecimal!
  balanceExact: BigInt!
  deployedInTransaction: Bytes!
}

type VaultTransaction @entity(immutable: false) {
  id: Bytes!
  vault: Vault!
  txIndex: BigInt!
  to: Account!
  value: BigDecimal!
  valueExact: BigInt!
  data: Bytes!
  comment: String!
  executed: Boolean!
  confirmationsRequired: BigInt!
  confirmationsCount: BigInt!
  confirmations: [VaultTransactionConfirmation!]!
    @derivedFrom(field: "transaction")
  submittedBy: Account!
  submittedAt: BigInt!
  executedAt: BigInt
  executedBy: Account
  # Type-specific fields
  erc20Transfer: VaultERC20Transfer
  contractCall: VaultContractCall
  deployedInTransaction: Bytes!
}

type VaultTransactionConfirmation @entity(immutable: false) {
  id: Bytes!
  transaction: VaultTransaction!
  signer: Account!
  confirmed: Boolean!
  confirmedAt: BigInt
  revokedAt: BigInt
  deployedInTransaction: Bytes!
}

type VaultERC20Transfer @entity(immutable: false) {
  id: Bytes!
  token: Account!
  amount: BigDecimal!
  amountExact: BigInt!
}

type VaultContractCall @entity(immutable: false) {
  id: Bytes!
  target: Account!
  calldata: Bytes!
  returnData: Bytes
}

type Compliance @entity(immutable: false) {
  id: Bytes!
  account: Account!
}

# ==================================================
# IDENTITY MANAGEMENT
# ==================================================

type IdentityRegistryStorage @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

type IdentityFactory @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

type IdentityRegistry @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  identities: [Identity!]! @derivedFrom(field: "registry")
  trustedIssuersRegistry: TrustedIssuersRegistry
  topicSchemeRegistry: TopicSchemeRegistry
  identityRegistryStorage: IdentityRegistryStorage
  deployedInTransaction: Bytes!
}

type TrustedIssuersRegistry @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

type TopicSchemeRegistry @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  schemes: [TopicScheme!]! @derivedFrom(field: "registry")
  deployedInTransaction: Bytes!
}

type TopicScheme @entity(immutable: false) {
  id: Bytes!
  registry: TopicSchemeRegistry!
  name: String!
  signature: String!
  enabled: Boolean!
  deployedInTransaction: Bytes!
}

type Identity @entity(immutable: false) {
  id: Bytes!
  registry: IdentityRegistry
  claims: [IdentityClaim!]! @derivedFrom(field: "identity")
  account: Account
  token: Token
  deployedInTransaction: Bytes!
}

type IdentityClaim @entity(immutable: false) {
  id: Bytes!
  identity: Identity!
  name: String!
  issuer: Identity!
  uri: String
  revoked: Boolean!
  values: [IdentityClaimValue!]! @derivedFrom(field: "claim")
  deployedInTransaction: Bytes!
}

type IdentityClaimValue @entity(immutable: false) {
  id: Bytes!
  claim: IdentityClaim!
  key: String!
  value: String!
}

# ==================================================
# Compliance
# ==================================================

type ComplianceModuleRegistry @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
  complianceModules: [ComplianceModule!]!
    @derivedFrom(field: "complianceModuleRegistry")
}

type ComplianceModule @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  name: String!
  typeId: Bytes!
  account: Account!
  deployedInTransaction: Bytes!
  complianceModuleRegistry: ComplianceModuleRegistry
  tokens: [TokenComplianceModule!]! @derivedFrom(field: "complianceModule")
  addresses: [Bytes!]
  countries: [Int!]
}

# ==================================================
# TOKEN MANAGEMENT
# ==================================================

type TokenFactoryRegistry @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
  tokenFactories: [TokenFactory!]! @derivedFrom(field: "tokenFactoryRegistry")
}

type TokenFactory @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  name: String!
  typeId: Bytes!
  tokenFactoryRegistry: TokenFactoryRegistry
  account: Account!
  tokens: [Token!]! @derivedFrom(field: "tokenFactory")
}

type Token @entity(immutable: false) {
  id: Bytes!
  createdAt: BigInt!
  createdBy: Account!
  account: Account!
  accessControl: AccessControl
  identity: Identity
  balances: [TokenBalance!]! @derivedFrom(field: "token")
  type: String!
  tokenFactory: TokenFactory
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  # Extensions
  pausable: TokenPausable
  collateral: TokenCollateral
  capped: TokenCapped
  yield_: TokenYield
  redeemable: TokenRedeemable
  # Type specific
  bond: TokenBond
  fund: TokenFund
  # Price
  basePriceClaim: IdentityClaim
  deployedInTransaction: Bytes!
  # Compliance
  tokenComplianceModules: [TokenComplianceModule!]! @derivedFrom(field: "token")
}

type TokenBalance @entity(immutable: false) {
  id: Bytes!
  lastUpdatedAt: BigInt!
  token: Token!
  account: Account!
  value: BigDecimal!
  valueExact: BigInt!
  isFrozen: Boolean!
  frozen: BigDecimal!
  frozenExact: BigInt!
  available: BigDecimal!
  availableExact: BigInt!
}

type TokenComplianceModule @entity(immutable: false) {
  id: Bytes!
  token: Token!
  complianceModule: ComplianceModule!
  encodedParams: Bytes!
  addresses: [Bytes!]
  countries: [Int!]
}

# ==================================================
# TOKEN EXTENSIONS
# ==================================================

type TokenPausable @entity(immutable: false) {
  id: Bytes!
  paused: Boolean!
}

type TokenCollateral @entity(immutable: false) {
  id: Bytes!
  identityClaim: IdentityClaim
}

type TokenCapped @entity(immutable: false) {
  id: Bytes!
  cap: BigDecimal!
  capExact: BigInt!
}

type TokenYield @entity(immutable: false) {
  id: Bytes!
  schedule: TokenFixedYieldSchedule!
}

type TokenRedeemable @entity(immutable: false) {
  id: Bytes!
  redeemedAmount: BigDecimal!
  redeemedAmountExact: BigInt!
}

# ==================================================
# TOKEN TYPES
# ==================================================

type TokenBond @entity(immutable: false) {
  id: Bytes!
  faceValue: BigDecimal!
  faceValueExact: BigInt!
  maturityDate: BigInt!
  isMatured: Boolean!
  underlyingAsset: Token!
}

type TokenFund @entity(immutable: false) {
  id: Bytes!
  managementFeeBps: Int!
}

# ==================================================
# System Addons
# ==================================================

type SystemAddonRegistry @entity(immutable: false) {
  id: Bytes!
  accessControl: AccessControl!
  account: Account!
  deployedInTransaction: Bytes!
}

# ==================================================
# XVP SETTLEMENT
# ==================================================

type XvPSettlement @entity(immutable: false) {
  id: Bytes!
  name: String!
  cutoffDate: BigInt!
  autoExecute: Boolean!
  executed: Boolean!
  cancelled: Boolean!
  createdAt: BigInt!
  flows: [XvPSettlementFlow!]! @derivedFrom(field: "xvpSettlement")
  approvals: [XvPSettlementApproval!]! @derivedFrom(field: "xvpSettlement")
  participants: [Account!]!
  deployedInTransaction: Bytes!
}

type XvPSettlementFlow @entity(immutable: false) {
  id: Bytes!
  xvpSettlement: XvPSettlement!
  asset: Token!
  from: Account!
  to: Account!
  amount: BigDecimal!
  amountExact: BigInt!
}

type XvPSettlementApproval @entity(immutable: false) {
  id: Bytes!
  xvpSettlement: XvPSettlement!
  account: Account!
  approved: Boolean!
  timestamp: BigInt
}

# ==================================================
# AIRDROP
# ==================================================

type AirdropFactory @entity(immutable: false) {
  id: Bytes!
  systemAddon: SystemAddon!
  airdrops: [Airdrop!]! @derivedFrom(field: "factory")
  deployedInTransaction: Bytes!
}

type Airdrop @entity(immutable: false) {
  id: Bytes!
  factory: AirdropFactory!
  name: String!
  token: Token!
  merkleRoot: Bytes!
  typeId: Bytes!
  amountTransferred: BigDecimal!
  amountTransferredExact: BigInt!
  recipients: [AirdropRecipient!]! @derivedFrom(field: "airdrop")
  allocations: [AirdropAllocation!]! @derivedFrom(field: "airdrop")
  # Type specific
  vestingAirdrop: VestingAirdrop
  pushAirdrop: PushAirdrop
  timeBoundAirdrop: TimeBoundAirdrop
  deployedInTransaction: Bytes!
}

type AirdropRecipient @entity(immutable: false) {
  id: Bytes!
  airdrop: Airdrop!
  account: Account!
  allocations: [AirdropAllocation!]! @derivedFrom(field: "recipient")
  amountTransferred: BigDecimal!
  amountTransferredExact: BigInt!
}

type AirdropAllocation @entity(immutable: false) {
  id: Bytes!
  airdrop: Airdrop!
  recipient: AirdropRecipient!
  index: BigInt!
  amountTransferred: BigDecimal!
  amountTransferredExact: BigInt!
  initialized: Boolean!
}

# ==================================================
# AIRDROP TYPES
# ==================================================

type PushAirdrop @entity(immutable: false) {
  id: Bytes!
  distributionCap: BigDecimal
  distributionCapExact: BigInt
}

type VestingAirdrop @entity(immutable: false) {
  id: Bytes!
  initializationDeadline: BigInt!
  strategyId: Bytes!
  # Strategy specific
  linearVestingStrategy: LinearVestingStrategy
}

type TimeBoundAirdrop @entity(immutable: false) {
  id: Bytes!
  startTime: BigInt!
  endTime: BigInt!
}

# ==================================================
# VESTING STRATEGIES
# ==================================================
type LinearVestingStrategy @entity(immutable: false) {
  id: Bytes!
  vestingDuration: BigInt!
  cliffDuration: BigInt!
}

# ==================================================
# YIELD SCHEDULES
# ==================================================

type TokenFixedYieldSchedule @entity(immutable: false) {
  id: Bytes!
  createdAt: BigInt!
  createdBy: Account!
  account: Account!
  token: Token!
  startDate: BigInt!
  endDate: BigInt!
  rate: BigInt!
  interval: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalUnclaimedYield: BigDecimal!
  totalUnclaimedYieldExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
  underlyingAsset: Token!
  currentPeriod: TokenFixedYieldSchedulePeriod
  nextPeriod: TokenFixedYieldSchedulePeriod
  periods: [TokenFixedYieldSchedulePeriod!]! @derivedFrom(field: "schedule")
  deployedInTransaction: Bytes!
}

type TokenFixedYieldSchedulePeriod @entity(immutable: false) {
  id: Bytes!
  schedule: TokenFixedYieldSchedule!
  startDate: BigInt!
  endDate: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalUnclaimedYield: BigDecimal!
  totalUnclaimedYieldExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
  deployedInTransaction: Bytes!
}

# ==================================================
# SYSTEM STATISTICS
# ==================================================

type SystemStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  system: System!

  # Value of all tokens in the system in base FIAT currency
  totalValueInBaseCurrency: BigDecimal!
}

type SystemStats
  @aggregation(intervals: ["hour", "day"], source: "SystemStatsData") {
  id: Int8!
  timestamp: Timestamp!

  system: System!

  # Value of all tokens in the system in base FIAT currency
  totalValueInBaseCurrency: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueInBaseCurrency")
}

# ==================================================
# ACCOUNT STATISTICS
# ==================================================

type AccountStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  account: Account!

  # Value of all tokens for the account in base FIAT currency
  totalValueInBaseCurrency: BigDecimal!

  # Balance metrics
  balancesCount: Int!
}

type AccountStats
  @aggregation(intervals: ["hour", "day"], source: "AccountStatsData") {
  id: Int8!
  timestamp: Timestamp!

  account: Account!

  # Value metrics (in base FIAT currency)
  totalValueInBaseCurrency: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueInBaseCurrency")

  # Balance metrics
  balancesCount: Int! @aggregate(fn: "last", arg: "balancesCount")
}

# ==================================================
# EVENT STATISTICS
# ==================================================

type EventStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  account: Account!
  eventName: String!
}

type EventStats
  @aggregation(intervals: ["hour", "day"], source: "EventStatsData") {
  id: Int8!
  timestamp: Timestamp!

  account: Account!
  eventName: String!

  eventsCount: Int! @aggregate(fn: "count", cumulative: true)
}

# ==================================================
# TOKEN STATISTICS
# ==================================================

# Total count of tokens by type
type TokenTypeStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  type: String!

  count: Int!
  # Percentage of total supply (eg bonds take 8% of the total supply accross all types)
  percentageOfTotalSupply: BigDecimal!
}

type TokenTypeStats
  @aggregation(intervals: ["hour", "day"], source: "TokenTypeStatsData") {
  id: Int8!
  timestamp: Timestamp!

  type: String!

  count: Int! @aggregate(fn: "last", arg: "count")
  # Percentage of total supply (eg bonds take 8% of the total supply accross all types)
  percentageOfTotalSupply: BigDecimal!
    @aggregate(fn: "last", arg: "percentageOfTotalSupply")
}

type TokenStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  token: Token!
  type: String!

  # Balance metrics
  balancesCount: Int!

  # Supply metrics
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  minted: BigDecimal!
  mintedExact: BigInt!
  burned: BigDecimal!
  burnedExact: BigInt!
  transfered: BigDecimal!
  transferedExact: BigInt!
}

type TokenStats
  @aggregation(intervals: ["hour", "day"], source: "TokenStatsData") {
  id: Int8!
  timestamp: Timestamp!

  token: Token!
  type: String!

  # Balance metrics
  balancesCount: Int! @aggregate(fn: "last", arg: "balancesCount")

  # Supply metrics
  totalSupply: BigDecimal! @aggregate(fn: "last", arg: "totalSupply")
  totalSupplyExact: BigInt! @aggregate(fn: "last", arg: "totalSupplyExact")
  totalMinted: BigDecimal! @aggregate(fn: "sum", arg: "minted")
  totalMintedExact: BigInt! @aggregate(fn: "sum", arg: "mintedExact")
  totalBurned: BigDecimal! @aggregate(fn: "sum", arg: "burned")
  totalBurnedExact: BigInt! @aggregate(fn: "sum", arg: "burnedExact")
  totalTransfered: BigDecimal! @aggregate(fn: "sum", arg: "transfered")
  totalTransferedExact: BigInt! @aggregate(fn: "sum", arg: "transferedExact")
}

# Collateral statistics for tokens
type TokenCollateralStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  token: Token!

  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralAvailable: BigDecimal!
  collateralAvailableExact: BigInt!
  collateralUsed: BigDecimal!
  collateralUsedExact: BigInt!
}

type TokenCollateralStats
  @aggregation(intervals: ["hour", "day"], source: "TokenCollateralStatsData") {
  id: Int8!
  timestamp: Timestamp!

  token: Token!

  collateral: BigDecimal! @aggregate(fn: "last", arg: "collateral")
  collateralExact: BigInt! @aggregate(fn: "last", arg: "collateralExact")
  collateralAvailable: BigDecimal!
    @aggregate(fn: "last", arg: "collateralAvailable")
  collateralAvailableExact: BigInt!
    @aggregate(fn: "last", arg: "collateralAvailableExact")
  collateralUsed: BigDecimal! @aggregate(fn: "last", arg: "collateralUsed")
  collateralUsedExact: BigInt!
    @aggregate(fn: "last", arg: "collateralUsedExact")
}

# Bond statistics for tokens
type TokenBondStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  token: Token!

  underlyingAssetBalanceAvailable: BigDecimal!
  underlyingAssetBalanceAvailableExact: BigInt!
  underlyingAssetBalanceRequired: BigDecimal!
  underlyingAssetBalanceRequiredExact: BigInt!
}

type TokenBondStats
  @aggregation(intervals: ["hour", "day"], source: "TokenBondStatsData") {
  id: Int8!
  timestamp: Timestamp!

  token: Token!

  underlyingAssetBalanceAvailable: BigDecimal!
    @aggregate(fn: "last", arg: "underlyingAssetBalanceAvailable")
  underlyingAssetBalanceAvailableExact: BigInt!
    @aggregate(fn: "last", arg: "underlyingAssetBalanceAvailableExact")
  underlyingAssetBalanceRequired: BigDecimal!
    @aggregate(fn: "last", arg: "underlyingAssetBalanceRequired")
  underlyingAssetBalanceRequiredExact: BigInt!
    @aggregate(fn: "last", arg: "underlyingAssetBalanceRequiredExact")
  coveredPercentage: BigDecimal!
    @aggregate(
      fn: "last"
      arg: "(underlyingAssetBalanceAvailable / underlyingAssetBalanceRequired) * 100"
    )
}

# Token distribution statistics by concentration segments
type TokenDistributionStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!

  token: Token!

  # Percentage owned by top 5 holders
  percentageOwnedByTop5Holders: BigDecimal!

  # Concentration segments
  # 0-2%
  balancesCountSegment1: Int!
  totalValueSegment1: BigDecimal!
  totalValueSegment1Exact: BigInt!

  # 2-10%
  balancesCountSegment2: Int!
  totalValueSegment2: BigDecimal!
  totalValueSegment2Exact: BigInt!

  # 10-20%
  balancesCountSegment3: Int!
  totalValueSegment3: BigDecimal!
  totalValueSegment3Exact: BigInt!

  # 20-40%
  balancesCountSegment4: Int!
  totalValueSegment4: BigDecimal!
  totalValueSegment4Exact: BigInt!

  # 40-100%
  balancesCountSegment5: Int!
  totalValueSegment5: BigDecimal!
  totalValueSegment5Exact: BigInt!
}

type TokenDistributionStats
  @aggregation(
    intervals: ["hour", "day"]
    source: "TokenDistributionStatsData"
  ) {
  id: Int8!
  timestamp: Timestamp!

  token: Token!

  # Percentage owned by top 5 holders
  percentageOwnedByTop5Holders: BigDecimal!
    @aggregate(fn: "last", arg: "percentageOwnedByTop5Holders")

  # Concentration segments
  # 0-2%
  balancesCountSegment1: Int!
    @aggregate(fn: "last", arg: "balancesCountSegment1")
  totalValueSegment1: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueSegment1")
  totalValueSegment1Exact: BigInt!
    @aggregate(fn: "last", arg: "totalValueSegment1Exact")

  # 2-10%
  balancesCountSegment2: Int!
    @aggregate(fn: "last", arg: "balancesCountSegment2")
  totalValueSegment2: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueSegment2")
  totalValueSegment2Exact: BigInt!
    @aggregate(fn: "last", arg: "totalValueSegment2Exact")

  # 10-20%
  balancesCountSegment3: Int!
    @aggregate(fn: "last", arg: "balancesCountSegment3")
  totalValueSegment3: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueSegment3")
  totalValueSegment3Exact: BigInt!
    @aggregate(fn: "last", arg: "totalValueSegment3Exact")

  # 20-40%
  balancesCountSegment4: Int!
    @aggregate(fn: "last", arg: "balancesCountSegment4")
  totalValueSegment4: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueSegment4")
  totalValueSegment4Exact: BigInt!
    @aggregate(fn: "last", arg: "totalValueSegment4Exact")

  # 40-100%
  balancesCountSegment5: Int!
    @aggregate(fn: "last", arg: "balancesCountSegment5")
  totalValueSegment5: BigDecimal!
    @aggregate(fn: "last", arg: "totalValueSegment5")
  totalValueSegment5Exact: BigInt!
    @aggregate(fn: "last", arg: "totalValueSegment5Exact")
}