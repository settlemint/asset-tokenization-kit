# --------------------------------------------------
# Grouping Contracts by Contract Type
# --------------------------------------------------

interface Asset {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalHolders: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  deployedOn: BigInt!
  # Concentration
  concentration: BigDecimal!
}

type Factory @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
}

# --------------------------------------------------
# Assets
# --------------------------------------------------

type Bond implements Asset @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalHolders: BigInt!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Bond-Specific Fields
  cap: BigDecimal!
  capExact: BigInt!
  maturityDate: BigInt!
  isMatured: Boolean!
  paused: Boolean!
  faceValue: BigInt!
  underlyingAsset: Asset!
  underlyingAssetDecimals: Int! # Storing decimals directly to avoid having to always query the underlying asset
  redeemedAmount: BigDecimal!
  redeemedAmountExact: BigInt!
  underlyingBalance: BigDecimal!
  underlyingBalanceExact: BigInt!
  yieldSchedule: FixedYield
  totalUnderlyingNeeded: BigDecimal!
  totalUnderlyingNeededExact: BigInt!
  hasSufficientUnderlying: Boolean!
}

type Equity implements Asset @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalHolders: BigInt!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Equity-Specific Fields
  equityClass: String!
  equityCategory: String!
  paused: Boolean!
}

type Fund implements Asset @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalHolders: BigInt!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Fund-Specific Fields
  fundClass: String!
  fundCategory: String!
  paused: Boolean!
  managementFeeBps: Int!
  lastFeeCollection: BigInt!
}

type StableCoin implements Asset @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalHolders: BigInt!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  auditors: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # StableCoin-Specific Fields
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralRatio: BigDecimal!
  freeCollateral: BigDecimal!
  freeCollateralExact: BigInt!
  liveness: BigInt!
  lastCollateralUpdate: BigInt!
  paused: Boolean!
}

type CryptoCurrency implements Asset @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalHolders: BigInt!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # CryptoCurrency-Specific Fields
}

type Deposit implements Asset @entity(immutable: false) {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalMinted: BigDecimal!
  totalMintedExact: BigInt!
  totalTransferred: BigDecimal!
  totalTransferredExact: BigInt!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: BigInt!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  auditors: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Deposit-Specific Fields
  paused: Boolean!
  # Collateral Fields
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralRatio: BigDecimal!
  freeCollateral: BigDecimal!
  freeCollateralExact: BigInt!
  liveness: BigInt!
  lastCollateralUpdate: BigInt!
}

# --------------------------------------------------
# Accounts
# --------------------------------------------------

type Account @entity(immutable: false) {
  id: Bytes!
  isContract: Boolean!
  asAsset: Asset
  balancesCount: BigInt!
  totalBalanceExact: BigInt!
  totalBalance: BigDecimal!
  pausedBalancesCount: Int!
  pausedBalanceExact: BigInt!
  pausedBalance: BigDecimal!
  balances: [AssetBalance!]! @derivedFrom(field: "account")
  nativeBalance: BigDecimal!
  nativeBalanceExact: BigInt!
  lastActivity: BigInt!
}

type AssetBalance @entity(immutable: false) {
  id: Bytes!
  asset: Asset!
  account: Account!
  value: BigDecimal!
  valueExact: BigInt!
  approved: BigDecimal!
  approvedExact: BigInt!
  blocked: Boolean!
  frozen: BigDecimal!
  frozenExact: BigInt!
  lastActivity: BigInt!
}

# --------------------------------------------------
# Yields
# --------------------------------------------------

type FixedYield @entity(immutable: false) {
  id: Bytes!
  token: Asset!
  underlyingAsset: Asset! # The underlying asset used for yield payments
  underlyingAssetDecimals: Int! # Storing decimals directly to avoid having to always query the underlying asset
  startDate: BigInt!
  endDate: BigInt!
  rate: BigInt!
  interval: BigInt!
  periods: [YieldPeriod!]! @derivedFrom(field: "schedule")
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  underlyingBalance: BigDecimal!
  underlyingBalanceExact: BigInt!
  yieldForNextPeriod: BigDecimal!
  yieldForNextPeriodExact: BigInt!
}

type YieldPeriod @entity(immutable: false) {
  id: Bytes!
  schedule: FixedYield!
  periodId: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalYield: BigDecimal!
  totalYieldExact: BigInt!
}

# --------------------------------------------------
# Asset Statistics
# --------------------------------------------------

type AssetStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  asset: Asset!
  assetType: String!
  assetCategory: String!
  assetClass: String!
  ## Transfers
  transfers: Int!
  volume: BigDecimal!
  volumeExact: BigInt!
  ## Supply
  supply: BigDecimal!
  supplyExact: BigInt!
  minted: BigDecimal!
  mintedExact: BigInt!
  burned: BigDecimal!
  burnedExact: BigInt!
  ## Frozen
  locked: BigDecimal!
  lockedExact: BigInt!
  frozen: BigDecimal!
  frozenExact: BigInt!
  unfrozen: BigDecimal!
  unfrozenExact: BigInt!
  ## Collateral
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralRatio: BigDecimal!
  freeCollateral: BigDecimal!
  freeCollateralExact: BigInt!
}

type AssetStats
  @aggregation(intervals: ["hour", "day"], source: "AssetStatsData") {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  asset: Asset!
  assetType: String!
  assetCategory: String!
  assetClass: String!
  ## Amounts
  count: Int8! @aggregate(fn: "count", cumulative: true)
  ## Transfers
  totalTransfers: Int! @aggregate(fn: "sum", arg: "transfers")
  totalVolume: BigDecimal! @aggregate(fn: "sum", arg: "volume")
  totalVolumeExact: BigInt! @aggregate(fn: "sum", arg: "volumeExact")
  ## Supply
  totalSupply: BigDecimal! @aggregate(fn: "last", arg: "supply")
  totalSupplyExact: BigInt! @aggregate(fn: "last", arg: "supplyExact")
  totalMinted: BigDecimal! @aggregate(fn: "sum", arg: "minted")
  totalMintedExact: BigInt! @aggregate(fn: "sum", arg: "mintedExact")
  totalBurned: BigDecimal! @aggregate(fn: "sum", arg: "burned")
  totalBurnedExact: BigInt! @aggregate(fn: "sum", arg: "burnedExact")
  ## Frozen
  totalLocked: BigDecimal! @aggregate(fn: "last", arg: "locked")
  totalLockedExact: BigInt! @aggregate(fn: "last", arg: "lockedExact")
  totalFrozen: BigDecimal! @aggregate(fn: "sum", arg: "frozen")
  totalFrozenExact: BigInt! @aggregate(fn: "sum", arg: "frozenExact")
  totalUnfrozen: BigDecimal! @aggregate(fn: "sum", arg: "unfrozen")
  totalUnfrozenExact: BigInt! @aggregate(fn: "sum", arg: "unfrozenExact")
  ## Collateral
  totalCollateral: BigDecimal! @aggregate(fn: "last", arg: "collateral")
  totalCollateralExact: BigInt! @aggregate(fn: "last", arg: "collateralExact")
}

# --------------------------------------------------
# Asset Activity
# --------------------------------------------------

type AssetActivityData @entity(immutable: false) {
  id: String!
  assetType: String! @unique

  ## Activity
  transferEventCount: BigInt!
  mintEventCount: BigInt!
  burnEventCount: BigInt!
  frozenEventCount: BigInt!
  unfrozenEventCount: BigInt!
  clawbackEventCount: BigInt!

  ## Supply
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
}

# --------------------------------------------------
# Asset count
# --------------------------------------------------

type AssetCount @entity(immutable: false) {
  id: String!
  assetType: String! @unique
  count: Int!
  countPaused: Int!
}

# --------------------------------------------------
# Portfolio Statistics
# --------------------------------------------------

type PortfolioStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  account: Account!
  assetType: String!
  asset: Asset!
  ## Balances
  balance: BigDecimal!
  balanceExact: BigInt!
  ## Frozen
  locked: BigDecimal!
  lockedExact: BigInt!
}

type PortfolioStats
  @aggregation(intervals: ["hour", "day"], source: "PortfolioStatsData") {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  account: Account!
  asset: Asset!
  assetType: String!
  ## Balances
  totalBalance: BigDecimal! @aggregate(fn: "last", arg: "balance")
  totalBalanceExact: BigInt! @aggregate(fn: "last", arg: "balanceExact")
  ## Frozen
  totalLocked: BigDecimal! @aggregate(fn: "last", arg: "locked")
  totalLockedExact: BigInt! @aggregate(fn: "last", arg: "lockedExact")
}

# --------------------------------------------------
# Blocked and Allowed Users
# --------------------------------------------------

type BlockedUser @entity(immutable: false) {
  id: Bytes!
  asset: Asset!
  user: Account!
  blockedAt: BigInt!
}

type AllowedUser @entity(immutable: false) {
  id: Bytes!
  asset: Asset!
  user: Account!
  allowedAt: BigInt!
}

# --------------------------------------------------
# Airdrop Contracts
# --------------------------------------------------

type AirdropFactory @entity(immutable: false) {
  id: Bytes! # Contract address
  airdrops: [Airdrop!]! @derivedFrom(field: "factory")
  totalAirdropsDeployed: Int!
}

interface Airdrop {
  id: Bytes! # Contract address
  factory: AirdropFactory!
  token: Bytes! # Changed from Asset! to Bytes!
  merkleRoot: Bytes!
  owner: Account!
  deployedOn: BigInt!
  deploymentTx: Bytes!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalRecipients: Int! # Count of unique addresses that have claimed
  totalClaims: Int! # Count of claim events
  isWithdrawn: Boolean!
  trustedForwarder: Account!
}

type StandardAirdrop implements Airdrop @entity(immutable: false) {
  id: Bytes! # Contract address
  factory: AirdropFactory!
  token: Bytes! # Matches interface
  merkleRoot: Bytes!
  owner: Account!
  deployedOn: BigInt!
  deploymentTx: Bytes!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalRecipients: Int!
  totalClaims: Int!
  isWithdrawn: Boolean!
  trustedForwarder: Account!
  # Standard specific
  startTime: BigInt!
  endTime: BigInt!
}

type VestingAirdrop implements Airdrop @entity(immutable: false) {
  id: Bytes! # Contract address
  factory: AirdropFactory!
  token: Bytes! # Matches interface
  merkleRoot: Bytes!
  owner: Account!
  deployedOn: BigInt!
  deploymentTx: Bytes!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalRecipients: Int!
  totalClaims: Int!
  isWithdrawn: Boolean!
  trustedForwarder: Account!
  # Vesting specific
  claimPeriodEnd: BigInt!
  strategy: VestingStrategy!
}

type PushAirdrop implements Airdrop @entity(immutable: false) {
  id: Bytes! # Contract address
  factory: AirdropFactory!
  token: Bytes! # Matches interface
  merkleRoot: Bytes!
  owner: Account!
  deployedOn: BigInt!
  deploymentTx: Bytes!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  totalRecipients: Int!
  totalClaims: Int!
  isWithdrawn: Boolean!
  trustedForwarder: Account!
  # PushAirdrop specific
  distributionCap: BigInt!
  totalDistributed: BigInt!
}

interface VestingStrategy {
  id: Bytes! # Strategy contract address
  type: String! # e.g., "Linear", "Custom"
  airdrop: VestingAirdrop! # The airdrop using this strategy
  owner: Account!
}

type LinearVestingStrategy implements VestingStrategy
  @entity(immutable: false) {
  id: Bytes! # Strategy contract address
  type: String! # = "Linear"
  airdrop: VestingAirdrop! @derivedFrom(field: "strategy") # Derived from VestingAirdrop linking
  airdropRef: Bytes! # Direct reference to airdrop address
  owner: Account!
  # Linear specific
  vestingDuration: BigInt!
  cliffDuration: BigInt!
  vestingData: [UserVestingData!]! @derivedFrom(field: "strategy")
}

# Represents a potential recipient listed in the Merkle tree
# Primarily created/updated upon claim events
type AirdropRecipient @entity(immutable: false) {
  id: String! # airdropId-recipientAddress
  airdrop: Airdrop!
  recipient: Account!
  firstClaimedTimestamp: BigInt # Timestamp of the first claim event for this recipient
  lastClaimedTimestamp: BigInt # Timestamp of the most recent claim event
  totalClaimedByRecipient: BigDecimal! # Sum of all claims by this recipient for this airdrop
  totalClaimedByRecipientExact: BigInt!
  claimIndices: [AirdropClaimIndex!]! @derivedFrom(field: "recipient") # Track individual claimed indices
}

# Represents a specific index claimed by a recipient
type AirdropClaimIndex @entity(immutable: true) {
  id: String! # airdropId-index
  index: BigInt!
  airdrop: Airdrop!
  recipient: AirdropRecipient! # Who claimed this index
  amount: BigDecimal! # Amount associated with this index (from claim event)
  amountExact: BigInt!
  timestamp: BigInt!
}

# Specific vesting data per user for a LinearVestingStrategy
type UserVestingData @entity(immutable: false) {
  id: String! # strategyId-userAddress
  strategy: LinearVestingStrategy!
  user: Account!
  totalAmountAggregated: BigDecimal! # Total allocated amount across all indices for this user
  totalAmountAggregatedExact: BigInt!
  claimedAmountTrackedByStrategy: BigDecimal! # Internal tracking by strategy via recordClaim
  claimedAmountTrackedByStrategyExact: BigInt!
  vestingStart: BigInt!
  initialized: Boolean!
  lastUpdated: BigInt!
}

# --------------------------------------------------
# Airdrop Analytics and Statistics
# --------------------------------------------------

# Time-series data for airdrop activity
type AirdropStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  # Filters
  airdrop: Airdrop!
  airdropType: String! # "Standard", "Vesting", or "Push"
  # Activity
  claims: Int!
  claimVolume: BigDecimal!
  claimVolumeExact: BigInt!
  uniqueClaimants: Int! # New claimants in this period
  # For PushAirdrop
  distributions: Int!
  distributionVolume: BigDecimal!
  distributionVolumeExact: BigInt!
}

# Aggregation entities for time-based analysis
type AirdropStats
  @aggregation(intervals: ["hour", "day"], source: "AirdropStatsData") {
  id: Int8!
  timestamp: Timestamp!
  # Filters
  airdrop: Airdrop!
  airdropType: String!
  # Metrics
  count: Int8! @aggregate(fn: "count", cumulative: true)
  # Claims
  totalClaims: Int! @aggregate(fn: "sum", arg: "claims")
  totalClaimVolume: BigDecimal! @aggregate(fn: "sum", arg: "claimVolume")
  totalClaimVolumeExact: BigInt! @aggregate(fn: "sum", arg: "claimVolumeExact")
  totalUniqueClaimants: Int! @aggregate(fn: "sum", arg: "uniqueClaimants")
  # Distributions (for PushAirdrop)
  totalDistributions: Int! @aggregate(fn: "sum", arg: "distributions")
  totalDistributionVolume: BigDecimal!
    @aggregate(fn: "sum", arg: "distributionVolume")
  totalDistributionVolumeExact: BigInt!
    @aggregate(fn: "sum", arg: "distributionVolumeExact")
}

# Special statistics for vesting airdrops
type VestingStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  # Filters
  airdrop: VestingAirdrop!
  # Vesting metrics
  vestedAmount: BigDecimal!
  vestedAmountExact: BigInt!
  unlockedAmount: BigDecimal! # Amount that has vested and can be claimed
  unlockedAmountExact: BigInt!
  claimedVestedAmount: BigDecimal! # Portion of vested amount that has been claimed
  claimedVestedAmountExact: BigInt!
  activeVestingStreams: Int! # Number of active vesting schedules
  completedVestingStreams: Int! # Number of completed vesting schedules
}

# Aggregation entity for vesting statistics
type VestingStats
  @aggregation(intervals: ["hour", "day"], source: "VestingStatsData") {
  id: Int8!
  timestamp: Timestamp!
  # Filters
  airdrop: VestingAirdrop!
  # Metrics
  count: Int8! @aggregate(fn: "count", cumulative: true)
  # Vesting progress
  totalVestedAmount: BigDecimal! @aggregate(fn: "last", arg: "vestedAmount")
  totalVestedAmountExact: BigInt!
    @aggregate(fn: "last", arg: "vestedAmountExact")
  totalUnlockedAmount: BigDecimal! @aggregate(fn: "last", arg: "unlockedAmount")
  totalUnlockedAmountExact: BigInt!
    @aggregate(fn: "last", arg: "unlockedAmountExact")
  totalClaimedVestedAmount: BigDecimal!
    @aggregate(fn: "sum", arg: "claimedVestedAmount")
  totalClaimedVestedAmountExact: BigInt!
    @aggregate(fn: "sum", arg: "claimedVestedAmountExact")
  activeVestingStreams: Int! @aggregate(fn: "last", arg: "activeVestingStreams")
  completedVestingStreams: Int!
    @aggregate(fn: "last", arg: "completedVestingStreams")
}

# Daily and weekly summary of airdrop performance
type AirdropPerformanceSummary @entity(immutable: false) {
  id: String! # airdropId-timeframe (e.g., "0x123-daily", "0x123-weekly")
  airdrop: Airdrop!
  timeframe: String! # "daily", "weekly"
  startTime: BigInt!
  endTime: BigInt!
  newClaimants: Int!
  totalClaims: Int!
  claimVolume: BigDecimal!
  claimVolumeExact: BigInt!
  claimRatePercentage: BigDecimal! # Percentage of eligible recipients who claimed
  # Distribution metrics for PushAirdrop
  newDistributions: Int!
  distributionVolume: BigDecimal!
  distributionVolumeExact: BigInt!
  # Time metrics
  avgClaimResponseTime: BigInt! # Average time between eligibility and claim
  peakClaimHour: Int! # Hour of day with most claims (0-23)
  lastUpdated: BigInt!
}

# --------------------------------------------------
# XvPSettlement-Specific Types
# --------------------------------------------------

type XvPSettlement @entity(immutable: false) {
  id: Bytes!
  cutoffDate: BigInt!
  autoExecute: Boolean!
  claimed: Boolean!
  cancelled: Boolean!
  flows: [XvPSettlementFlow!]! @derivedFrom(field: "xvpSettlement")
  approvals: [XvPSettlementApproval!]! @derivedFrom(field: "xvpSettlement")
}

type XvPSettlementFlow @entity(immutable: false) {
  id: Bytes!
  xvpSettlement: XvPSettlement!
  asset: Asset!
  from: Account!
  to: Account!
  amount: BigInt!
}

type XvPSettlementApproval @entity(immutable: false) {
  id: Bytes!
  xvpSettlement: XvPSettlement!
  account: Account!
  approved: Boolean!
  timestamp: BigInt
}

# --------------------------------------------------
# Events
# --------------------------------------------------

type ActivityLogEntry @entity(immutable: true) {
  id: Bytes!
  # Identifying the event
  eventName: String!
  # Default event fields
  txIndex: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  # List of accounts involved in the event
  involved: [Account!]!
  # List of values involved in the event
  values: [ActivityLogEntryValue!]! @derivedFrom(field: "entry")
}

type ActivityLogEntryValue @entity(immutable: true) {
  id: Bytes!
  name: String!
  value: String!
  entry: ActivityLogEntry!
}
