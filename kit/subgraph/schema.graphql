# --------------------------------------------------
# Grouping Contracts by Contract Type
# --------------------------------------------------

interface Asset {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  deployedOn: BigInt!
  # Concentration
  concentration: BigDecimal!
}

type Factory @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
}

# --------------------------------------------------
# Assets
# --------------------------------------------------

type Bond implements Asset @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Bond-Specific Fields
  cap: BigDecimal!
  capExact: BigInt!
  maturityDate: BigInt!
  isMatured: Boolean!
  paused: Boolean!
  faceValue: BigInt!
  underlyingAsset: Asset!
  redeemedAmount: BigInt!
  underlyingBalance: BigInt!
  yieldSchedule: FixedYield
  totalUnderlyingNeeded: BigDecimal!
  totalUnderlyingNeededExact: BigInt!
  hasSufficientUnderlying: Boolean!
}

type Equity implements Asset @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Equity-Specific Fields
  equityClass: String!
  equityCategory: String!
  paused: Boolean!
}

type Fund implements Asset @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Fund-Specific Fields
  fundClass: String!
  fundCategory: String!
  paused: Boolean!
  managementFeeBps: Int!
  lastFeeCollection: BigInt!
}

type StableCoin implements Asset @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  auditors: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # StableCoin-Specific Fields
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralRatio: BigDecimal!
  freeCollateral: BigDecimal!
  freeCollateralExact: BigInt!
  liveness: BigInt!
  lastCollateralUpdate: BigInt!
  paused: Boolean!
}

type CryptoCurrency implements Asset @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # CryptoCurrency-Specific Fields
}

type Deposit implements Asset @entity {
  id: Bytes!
  type: String!
  asAccount: Account!
  holders: [AssetBalance!]! @derivedFrom(field: "asset")
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
  lastActivity: BigInt!
  creator: Account!
  totalBurned: BigDecimal!
  totalBurnedExact: BigInt!
  totalHolders: Int!
  deployedOn: BigInt!
  # Access Control
  admins: [Account!]!
  supplyManagers: [Account!]!
  userManagers: [Account!]!
  auditors: [Account!]!
  blocklist: [BlockedUser!]! @derivedFrom(field: "asset")
  allowlist: [AllowedUser!]! @derivedFrom(field: "asset")
  # Concentration
  concentration: BigDecimal!
  # Deposit-Specific Fields
  paused: Boolean!
  # Collateral Fields
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralRatio: BigDecimal!
  freeCollateral: BigDecimal!
  freeCollateralExact: BigInt!
  liveness: BigInt!
  lastCollateralUpdate: BigInt!
}

# --------------------------------------------------
# Accounts
# --------------------------------------------------

type Account @entity {
  id: Bytes!
  isContract: Boolean!
  asAsset: Asset
  balancesCount: Int!
  totalBalanceExact: BigInt!
  totalBalance: BigDecimal!
  pausedBalancesCount: Int!
  pausedBalanceExact: BigInt!
  pausedBalance: BigDecimal!
  balances: [AssetBalance!]! @derivedFrom(field: "account")
  nativeBalance: BigDecimal!
  nativeBalanceExact: BigInt!
  lastActivity: BigInt!
  activityEvents: [AccountActivityEvent!]! @derivedFrom(field: "account")
  activityEventsCount: Int!
}

type AssetBalance @entity {
  id: Bytes!
  asset: Asset!
  account: Account!
  value: BigDecimal!
  valueExact: BigInt!
  approved: BigDecimal!
  approvedExact: BigInt!
  blocked: Boolean!
  frozen: BigDecimal!
  frozenExact: BigInt!
  lastActivity: BigInt!
}

# --------------------------------------------------
# Yields
# --------------------------------------------------

type FixedYield @entity {
  id: Bytes!
  token: Asset!
  underlyingAsset: Asset!
  startDate: BigInt!
  endDate: BigInt!
  rate: BigInt!
  interval: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
  unclaimedYield: BigDecimal!
  unclaimedYieldExact: BigInt!
  underlyingBalance: BigDecimal!
  underlyingBalanceExact: BigInt!
  periods: [YieldPeriod!]! @derivedFrom(field: "schedule")
}

type YieldPeriod @entity {
  id: Bytes!
  schedule: FixedYield!
  periodId: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  rate: BigInt!
  totalClaimed: BigDecimal!
  totalClaimedExact: BigInt!
}

# --------------------------------------------------
# Grouping Events by Contract Type
# --------------------------------------------------

interface AssetEvent {
  id: Bytes! # Unique identifier for the event
  eventName: String! # Name of the event
  timestamp: BigInt! # Timestamp of the event
  emitter: Asset! # The contract that emitted the event
  sender: Account! # The account that sent the transaction
  assetType: String! # The type of asset that was affected
}

# --------------------------------------------------
# Activity Events
# --------------------------------------------------

type AccountActivityEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  assetType: String!
  timestamp: BigInt!
  asset: Asset
  account: Account!
}

# --------------------------------------------------
# Common Events for All Tokens (StableCoin, Fund, Equity, CryptoCurrency, Bond)
# --------------------------------------------------

"""
Entity for ERC20 Transfer events.
Emitted on every token transfer (excluding minting and burning).
"""
type TransferEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  from: Account! # Sender address
  to: Account! # Recipient address
  value: BigDecimal! # Amount transferred
  valueExact: BigInt! # Amount transferred in exact precision
}

"""
Entity for ERC20 Mint events.
Emitted on every token mint (transfer from zero address).
"""
type MintEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  to: Account! # Recipient address
  value: BigDecimal! # Amount transferred
  valueExact: BigInt! # Amount transferred in exact precision
}

"""
Entity for ERC20 Burn events.
Emitted on every token burn (transfer to zero address).
"""
type BurnEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  from: Account!
  value: BigDecimal! # Amount transferred
  valueExact: BigInt! # Amount transferred in exact precision
}

"""
Entity for ERC20 Approval events.
Emitted when an approval is set for a spender.
"""
type ApprovalEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  owner: Account! # Token owner
  spender: Account! # Approved spender
  value: BigDecimal! # Approved amount
  valueExact: BigInt! # Approved amount in exact precision
}

"""
Entity for pause events.
Emitted when a token is paused.
"""
type PausedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
}

"""
Entity for unpause events.
Emitted when a token is unpaused.
"""
type UnpausedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
}

"""
Entity for tokens frozen events.
Emitted when tokens are frozen (a custodian operation).
"""
type TokensFrozenEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  user: Account! # The user whose tokens were frozen
  amount: BigDecimal! # The amount frozen
  amountExact: BigInt! # The amount frozen in exact precision
}

"""
Entity for role granted events.
Emitted when a role is granted.
"""
type RoleGrantedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  role: Bytes! # Role identifier (e.g. SUPPLY_MANAGEMENT_ROLE)
  account: Account! # The account that received the role
}

"""
Entity for role revoked events.
Emitted when a role is revoked.
"""
type RoleRevokedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  role: Bytes!
  account: Account! # The account that lost the role
}

"""
Entity for role admin changed events.
Emitted when a role's admin role is changed.
"""
type RoleAdminChangedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  role: Bytes! # The role being modified
  previousAdminRole: Bytes! # The old admin role
  newAdminRole: Bytes! # The new admin role
}

"""
Entity for blocklist events.
Emitted when a user is blocked from token operations.
"""
type UserBlockedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  user: Account! # The blocked user's address
}

"""
Entity for blocklist events.
Emitted when a user is unblocked from token operations.
"""
type UserUnblockedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  user: Account! # The unblocked user's address
}

"""
Entity for allowlist events.
Emitted when a user is allowed for token operations.
"""
type UserAllowedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  user: Account! # The allowed user's address
}

"""
Entity for allowlist events.
Emitted when a user is disallowed from token operations.
"""
type UserDisallowedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  user: Account! # The disallowed user's address
}

"""
Entity for blocklist events.
Emitted when a user is unblocked from token operations.
"""
type AssetCreatedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
}

# --------------------------------------------------
# StableCoin-Specific Custom Event
# --------------------------------------------------

"""
Entity for collateral update events in StableCoin.
Emitted when the collateral is updated via updateCollateral.
"""
type CollateralUpdatedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  oldAmount: BigDecimal! # Previous collateral amount
  oldAmountExact: BigInt! # Previous collateral amount in exact precision
  newAmount: BigDecimal! # New collateral amount
  newAmountExact: BigInt! # New collateral amount in exact precision
}

# --------------------------------------------------
# Fund-Specific Custom Events
# --------------------------------------------------

"""
Entity for management fee collection events in Fund.
Emitted when the management fee is collected.
"""
type ManagementFeeCollectedEvent implements AssetEvent
  @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  amount: BigDecimal! # Fee amount collected
  amountExact: BigInt! # Fee amount collected in exact precision
}

"""
Entity for performance fee collection events in Fund.
Emitted when the performance fee is collected.
"""
type PerformanceFeeCollectedEvent implements AssetEvent
  @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  amount: BigDecimal! # Fee amount collected
  amountExact: BigInt! # Fee amount collected in exact precision
}

"""
Entity for token withdrawal events in Fund.
Emitted when tokens are withdrawn from the fund.
"""
type TokenWithdrawnEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  token: Asset!
  to: Account! # Recipient address
  amount: BigDecimal! # Amount withdrawn
  amountExact: BigInt! # Amount withdrawn in exact precision
}

# --------------------------------------------------
# CryptoCurrency-Specific Custom Events
# --------------------------------------------------

# --------------------------------------------------
# Equity-Specific Custom Events
# --------------------------------------------------

# --------------------------------------------------
# Bond-Specific Custom Events
# --------------------------------------------------

"""
Entity for bond maturity events.
Emitted when the bond reaches maturity and is closed.
"""
type BondMaturedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
}

"""
Entity for bond redemption events.
Emitted when a bond is redeemed for underlying assets.
"""
type BondRedeemedEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  holder: Account! # The address redeeming the bond
  bondAmount: BigDecimal! # The number of bonds redeemed
  bondAmountExact: BigInt! # The number of bonds redeemed in exact precision
  underlyingAmount: BigDecimal! # The amount of underlying assets received
  underlyingAmountExact: BigInt! # The amount of underlying assets received in exact precision
}

# --------------------------------------------------
# Bond/Yield-Specific Custom Events
# --------------------------------------------------

"""
Entity for underlying asset top-up events.
Emitted when underlying assets are added (topped up) to the Bond contract.
"""
type UnderlyingAssetTopUpEvent implements AssetEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  from: Account! # The address providing the top-up
  amount: BigDecimal! # The amount of underlying assets added
  amountExact: BigInt! # The amount of underlying assets added in exact precision
}

"""
Entity for underlying asset withdrawal events.
Emitted when underlying assets are withdrawn from the Bond contract.
"""
type UnderlyingAssetWithdrawnEvent implements AssetEvent
  @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  assetType: String!
  to: Account! # The recipient address for the withdrawn assets
  amount: BigDecimal! # The amount withdrawn
  amountExact: BigInt! # The amount withdrawn in exact precision
}

# --------------------------------------------------
# FixedYield-Specific Custom Event
# --------------------------------------------------

type FixedYieldCreatedEvent @entity {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Factory!
  sender: Account!
  fixedYield: FixedYield!
}

"""
Entity for yield claimed events in FixedYield.
Emitted when yield is claimed.
"""
type YieldClaimedEvent @entity(immutable: true) {
  id: Bytes!
  eventName: String!
  timestamp: BigInt!
  emitter: Asset!
  sender: Account!
  holder: Account! # The address claiming the yield
  totalAmount: BigDecimal! # The total yield claimed
  totalAmountExact: BigInt! # The total yield claimed in exact precision
  fromPeriod: BigInt! # The first period being claimed
  toPeriod: BigInt! # The last period being claimed
  periodAmounts: [BigInt!]! # Array of yield amounts claimed for each period
  unclaimedYield: BigDecimal! # Total unclaimed yield remaining after this claim
  unclaimedYieldExact: BigInt! # Total unclaimed yield remaining after this claim in exact precision
}

# --------------------------------------------------
# Asset Statistics
# --------------------------------------------------

type AssetStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  asset: Asset!
  assetType: String!
  assetCategory: String!
  assetClass: String!
  ## Transfers
  transfers: Int!
  volume: BigDecimal!
  volumeExact: BigInt!
  ## Supply
  supply: BigDecimal!
  supplyExact: BigInt!
  minted: BigDecimal!
  mintedExact: BigInt!
  burned: BigDecimal!
  burnedExact: BigInt!
  ## Frozen
  locked: BigDecimal!
  lockedExact: BigInt!
  frozen: BigDecimal!
  frozenExact: BigInt!
  unfrozen: BigDecimal!
  unfrozenExact: BigInt!
  ## Collateral
  collateral: BigDecimal!
  collateralExact: BigInt!
  collateralRatio: BigDecimal!
  freeCollateral: BigDecimal!
  freeCollateralExact: BigInt!
}

type AssetStats
  @aggregation(intervals: ["hour", "day"], source: "AssetStatsData") {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  asset: Asset!
  assetType: String!
  assetCategory: String!
  assetClass: String!
  ## Amounts
  count: Int8! @aggregate(fn: "count", cumulative: true)
  ## Transfers
  totalTransfers: Int! @aggregate(fn: "sum", arg: "transfers")
  totalVolume: BigDecimal! @aggregate(fn: "sum", arg: "volume")
  totalVolumeExact: BigInt! @aggregate(fn: "sum", arg: "volumeExact")
  ## Supply
  totalSupply: BigDecimal! @aggregate(fn: "last", arg: "supply")
  totalSupplyExact: BigInt! @aggregate(fn: "last", arg: "supplyExact")
  totalMinted: BigDecimal! @aggregate(fn: "sum", arg: "minted")
  totalMintedExact: BigInt! @aggregate(fn: "sum", arg: "mintedExact")
  totalBurned: BigDecimal! @aggregate(fn: "sum", arg: "burned")
  totalBurnedExact: BigInt! @aggregate(fn: "sum", arg: "burnedExact")
  ## Frozen
  totalLocked: BigDecimal! @aggregate(fn: "last", arg: "locked")
  totalLockedExact: BigInt! @aggregate(fn: "last", arg: "lockedExact")
  totalFrozen: BigDecimal! @aggregate(fn: "sum", arg: "frozen")
  totalFrozenExact: BigInt! @aggregate(fn: "sum", arg: "frozenExact")
  totalUnfrozen: BigDecimal! @aggregate(fn: "sum", arg: "unfrozen")
  totalUnfrozenExact: BigInt! @aggregate(fn: "sum", arg: "unfrozenExact")
  ## Collateral
  totalCollateral: BigDecimal! @aggregate(fn: "last", arg: "collateral")
  totalCollateralExact: BigInt! @aggregate(fn: "last", arg: "collateralExact")
}

# --------------------------------------------------
# Asset Activity
# --------------------------------------------------

type AssetActivityData @entity {
  id: String!
  assetType: String! @unique

  ## Activity
  transferEventCount: Int!
  mintEventCount: Int!
  burnEventCount: Int!
  frozenEventCount: Int!
  unfrozenEventCount: Int!

  ## Supply
  totalSupply: BigDecimal!
  totalSupplyExact: BigInt!
}

# --------------------------------------------------
# Asset count
# --------------------------------------------------

type AssetCount @entity {
  id: String!
  assetType: String! @unique
  count: Int!
  countPaused: Int!
}

# --------------------------------------------------
# Portfolio Statistics
# --------------------------------------------------

type PortfolioStatsData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  account: Account!
  assetType: String!
  asset: Asset!
  ## Balances
  balance: BigDecimal!
  balanceExact: BigInt!
  ## Frozen
  locked: BigDecimal!
  lockedExact: BigInt!
}

type PortfolioStats
  @aggregation(intervals: ["hour", "day"], source: "PortfolioStatsData") {
  id: Int8!
  timestamp: Timestamp!
  ## Filters
  account: Account!
  asset: Asset!
  assetType: String!
  ## Balances
  totalBalance: BigDecimal! @aggregate(fn: "last", arg: "balance")
  totalBalanceExact: BigInt! @aggregate(fn: "last", arg: "balanceExact")
  ## Frozen
  totalLocked: BigDecimal! @aggregate(fn: "last", arg: "locked")
  totalLockedExact: BigInt! @aggregate(fn: "last", arg: "lockedExact")
}

# --------------------------------------------------
# Blocked and Allowed Users
# --------------------------------------------------

type BlockedUser @entity {
  id: Bytes!
  asset: Asset!
  user: Account!
  blockedAt: BigInt!
}

type AllowedUser @entity {
  id: Bytes!
  asset: Asset!
  user: Account!
  allowedAt: BigInt!
}
