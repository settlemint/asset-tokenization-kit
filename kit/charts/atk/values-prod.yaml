# Default values for atk.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global values shared across all subcharts
global:
  labels:
    kots.io/app-slug: settlemint-atk
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/part-of: settlemint-atk

imagePullCredentials:
  registries:
    # -- lowercase, no points or special caracters unique identifier for the registry, harbor, ghcr and docker have special meaning, but you can add more
    harbor:
      # -- Enable this if you want this chart to create an image pull secret for you (harbor is the default registry for the platform)
      enabled: false
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registryUrl: 'harbor.settlemint.com'
      # -- The username to access the registry
      username: ''
      # -- The password or access token to access the registry
      password: ''
      # -- The email to access the registry
      email: ''
    # -- lowercase, no points or special caracters unique identifier for the registry, harbor, ghcr and docker have special meaning, but you can add more
    ghcr:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: false
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registryUrl: 'ghcr.io'
      # -- The username to access the registry
      username: ''
      # -- The password or access token to access the registry
      password: ''
      # -- The email to access the registry
      email: ''
    # -- lowercase, no points or special caracters unique identifier for the registry, harbor, ghcr and docker have special meaning, but you can add more
    docker:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: false
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registryUrl: 'docker.io'
      # -- The username to access the registry
      username: ''
      # -- The password or access token to access the registry
      password: ''
      # -- The email to access the registry
      email: ''

besu-network:
  enabled: true
  besu-validator-1:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-validator-2:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-validator-3:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-validator-4:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-rpc-1:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-rpc-2:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  rawGenesisConfig:
    blockchain:
      nodes:
        count: 4

erpc:
  enabled: true
  imagePullSecrets:
    - name: image-pull-secret-docker
    - name: image-pull-secret-ghcr
    - name: image-pull-secret-harbor
  ingress:
    enabled: true
    className: "settlemint-nginx"
    hosts:
      - host: rpc.k8s.orb.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    logLevel: info
    projects:
      - id: settlemint
        upstreams:
          - endpoint: http://besu-node-rpc-1:8545
          - endpoint: http://besu-node-rpc-2:8545


blockscout:
  enabled: true
  blockscout-stack:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    blockscout:
      # Add an extra init container to wait for PostgreSQL
      init:
        enabled: true
        command:
          - /bin/sh
        args:
          - -c
          - |  # Using YAML multiline string for clarity
            echo "Waiting for postgresql-pgpool:5432..."
            while ! nc -z postgresql-pgpool 5432; do
              sleep 2;
            done;
            echo "PostgreSQL is ready!"
            # Original command:
            bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()"
      ingress:
        hostname: explorer.k8s.orb.local
      resources: {}
      env:
        API_URL: https://explorer.k8s.orb.local
        WEBAPP_URL: https://explorer.k8s.orb.local
    frontend:
      ingress:
        hostname: explorer.k8s.orb.local

thegraph:
  enabled: true
  graph-node:
    graphNodeDefaults:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
      podMetadata:
        labels:
          app.kubernetes.io/part-of: thegraph
          environment: production
      extraInitContainers:
        - name: wait-for-postgresql
          image: ghcr.io/settlemint/btp-waitforit:v7.7.3
          command: ["/usr/bin/wait-for-it", "postgresql-pgpool:5432", "-t", "0"]
        - name: random-delay
          image: busybox:latest # Using busybox as it has sh and sleep
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              SLEEP_DURATION=$((RANDOM % 61)) # Generates random number 0-60
              echo "Graph Node pod initiating random delay of ${SLEEP_DURATION} seconds..."
              sleep ${SLEEP_DURATION}
              echo "Graph Node random delay complete."
    graphNodeGroups:
      query:
        replicaCount: 2
        enabled: true
        podMetadata:
          labels:
            role: query-node
      index:
        enabled: true
        replicaCount: 2
        podMetadata:
          labels:
            role: index-node
      block-ingestor:
        enabled: true
        replicaCount: 2
        podMetadata:
          labels:
            role: block-ingestor
      combined:
        enabled: false
    blockIngestorGroupName: block-ingestor
    ingress:
      hosts:
        - host: graph.k8s.orb.local
          paths:
            - path: /(.*)
              pathType: ImplementationSpecific
              port: 8000
              serviceName: graph-node-query
            - path: /ws/?(.*)
              pathType: ImplementationSpecific
              port: 8001
              serviceName: graph-node-query
            - path: /admin/?(.*)
              pathType: ImplementationSpecific
              port: 8020
              serviceName: graph-node-query
            - path: /indexer/?(.*)
              pathType: ImplementationSpecific
              port: 8030
              serviceName: graph-node-index
            - path: /graphman/?(.*)
              pathType: ImplementationSpecific
              port: 8050
              serviceName: graph-node-index
  job:
    fullnameOverride: graph
    image:
      repository: node
      tag: "23.11.0-slim"
      pullPolicy: IfNotPresent
    workspace:
      size: 1Gi

hasura:
  enabled: true
  replicas: 2
  graphql-engine:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    ingress:
      hostName: "hasura.k8s.orb.local"

portal:
  enabled: true
  replicaCount: 2
  initContainers:
    - name: wait-for-postgres
      image: ghcr.io/settlemint/btp-waitforit:v7.7.3
      command: ["/usr/bin/wait-for-it", "postgresql-pgpool:5432", "-t", "0"]

support:
  enabled: true

  # https://github.com/bitnami/charts/blob/main/bitnami/postgresql-ha/values.yaml
  postgresql-ha:
    postgresql:
      pullSecrets:
        - image-pull-secret-docker
        - image-pull-secret-ghcr
        - image-pull-secret-harbor
      resources: {}
      replicaCount: 3
    pgpool:
      pullSecrets:
        - image-pull-secret-docker
        - image-pull-secret-ghcr
        - image-pull-secret-harbor
      resources: {}
      replicaCount: 2

  # https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
  redis:
    global:
      imagePullSecrets:
        - image-pull-secret-docker
        - image-pull-secret-ghcr
        - image-pull-secret-harbor
    master:
      resources: {}
    replica:
      replicaCount: 2
      resources: {}

  # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
  ingress-nginx:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    controller:
      replicaCount: 2
      resources: {}

observability:
  enabled: true

  # https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/values.yaml
  metrics-server:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    resources:
      requests:
        cpu: 10m
        memory: 32Mi

  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-state-metrics/values.yaml
  kube-state-metrics:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    resources: {}

  # https://github.com/VictoriaMetrics/helm-charts/blob/master/charts/victoria-metrics-single/values.yaml
  victoria-metrics-single:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    server:
      persistentVolume:
        storageClass: ""
        size: 10Gi
      resources: {}

  # https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
  loki:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
  singleBinary:
    persistence:
      size: 10Gi
    resources: {}
    extraEnv: {}
      # Keep a little bit lower than memory limits
      # - name: GOMEMLIMIT
      #   value: 3750MiB

  # https://github.com/grafana/alloy/blob/main/operations/helm/charts/alloy/values.yaml
  alloy:
    global:
      image:
        pullSecrets:
          - name: image-pull-secret-docker
          - name: image-pull-secret-ghcr
          - name: image-pull-secret-harbor
    alloy:
      resources: {}

  alertmanager:
    alertmanager:
      global:
        imagePullSecrets:
          - name: image-pull-secret-docker
          - name: image-pull-secret-ghcr
          - name: image-pull-secret-harbor
  prometheus-stack:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
  grafana:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    ingress:
      hosts:
        - grafana.k8s.orb.local
    adminUser: settlemint
    adminPassword: atk
  tempo:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
  promtail:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
