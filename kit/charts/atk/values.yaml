# Global values shared across all subcharts
global:
  chainId: "53771311147"
  chainName: "ATK"
  datastores:
    default:
      redis:
        host: "redis"
        port: 6379
        username: "default"
        password: "atk"
        db: 0
        query: "dial_timeout=5s&read_timeout=2s&write_timeout=2s&pool_size=50"
      postgresql:
        host: "postgresql"
        port: 5432
        username: "postgres"
        password: "atk"
        database: "postgres"
        sslMode: "disable"
    erpc:
      redis:
        cacheDb: 0
        sharedStateDb: 1
    portal:
      postgresql:
        database: "portal"
        username: "portal"
        password: "atk"
      redis:
        db: 4
    txsigner:
      postgresql:
        database: "txsigner"
        username: "txsigner"
        password: "atk"
    graphNode:
      postgresql:
        database: "thegraph"
        username: "thegraph"
        password: "atk"
    blockscout:
      postgresql:
        database: "blockscout"
        username: "blockscout"
        password: "atk"
    hasura:
      postgresql:
        database: "hasura"
        username: "hasura"
        password: "atk"
      redis:
        cacheDb: 2
        rateLimitDb: 3

network:
  enabled: true
  network-bootstrapper:
    image:
      repository: ghcr.io/settlemint/network-bootstrapper
    artifacts:
      predeployed:
        image:
          registry: ghcr.io
    initContainer:
      tcpCheck:
        image:
          repository: ghcr.io/settlemint/btp-waitforit
  network-nodes:
    image:
      repository: docker.io/hyperledger/besu
    initContainer:
      tcpCheck:
        image:
          repository: ghcr.io/settlemint/btp-waitforit
    persistence:
      size: 20Gi

erpc:
  enabled: true
  image:
    registry: ghcr.io
  tests:
    image:
      registry: docker.io
  initContainer:
    tcpCheck:
      image:
        repository: ghcr.io/settlemint/btp-waitforit
  resources: {}
  ingress:
    enabled: true
    className: "atk-nginx"
    hosts:
      - host: rpc.k8s.orb.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  openShiftRoute:
    enabled: false
    host: rpc.k8s.orb.local

blockscout:
  enabled: true
  blockscout:
    image:
      repository: ghcr.io/blockscout/blockscout
    initContainer:
      tcpCheck:
        image:
          repository: ghcr.io/settlemint/btp-waitforit
    ingress:
      enabled: true
      className: "atk-nginx"
      hostname: explorer.k8s.orb.local
    openShiftRoute:
      enabled: false
      host: explorer.k8s.orb.local
    env:
      API_URL: https://explorer.k8s.orb.local
      WEBAPP_URL: https://explorer.k8s.orb.local
    resources: {}
  frontend:
    enabled: true
    ingress:
      enabled: true
      className: "atk-nginx"
      hostname: explorer.k8s.orb.local
    image:
      repository: ghcr.io/blockscout/frontend

graph-node:
  enabled: true
  image:
    repository: docker.io/graphprotocol/graph-node
  initContainer:
    image:
      repository: docker.io/kubesphere/kubectl
    tcpCheck:
      image:
        repository: ghcr.io/settlemint/btp-waitforit
  ingress:
    enabled: true
    className: "atk-nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    hosts:
      - host: graph.k8s.orb.local
        paths:
          - path: /(.*)
            pathType: ImplementationSpecific
          - path: /ws/?(.*)
            pathType: ImplementationSpecific
          - path: /admin/?(.*)
            pathType: ImplementationSpecific
          - path: /indexer/?(.*)
            pathType: ImplementationSpecific
          - path: /graphman/?(.*)
            pathType: ImplementationSpecific
  openShiftRoute:
    enabled: false
    host: graph.k8s.orb.local

hasura:
  enabled: true
  # Override the fullname to be just "hasura" instead of "atk-hasura"
  fullnameOverride: "hasura"
  # Image configuration
  image:
    registry: docker.io
    repository: hasura/graphql-engine
    tag: v2.48.3
    pullPolicy: IfNotPresent

  # Ingress configuration
  ingress:
    hostName: hasura.k8s.orb.local

portal:
  enabled: true
  image:
    registry: ghcr.io
  initContainer:
    tcpCheck:
      image:
        repository: ghcr.io/settlemint/btp-waitforit
  ingress:
    hostname: portal.k8s.orb.local

# Transaction Signer Configuration
txsigner:
  enabled: true
  image:
    registry: ghcr.io
  tests:
    image:
      registry: docker.io
  # Configuration for the txsigner subchart
  config:
    mnemonic:
      "gate yellow grunt wrestle disease obtain mixed nature mansion tape
      purchase awful"
    derivationPath: "m/44'/60'/0'/0/0"
  resources: {}
  initContainer:
    tcpCheck:
      image:
        repository: ghcr.io/settlemint/btp-waitforit
  ingress:
    enabled: false
    hostname: txsigner.k8s.orb.local

# DApp Frontend Configuration
dapp:
  enabled: true
  image:
    repository: ghcr.io/settlemint/asset-tokenization-kit
  ingress:
    enabled: true
    # IMPORTANT: Set the correct hostname for your environment
    hosts:
      - host: dapp.k8s.orb.local
        paths:
          - path: / # Adjust path if needed
            pathType: ImplementationSpecific
  resources: {}
  secretEnv:
    BETTER_AUTH_URL: "https://dapp.k8s.orb.local"
    SETTLEMINT_BLOCKSCOUT_UI_ENDPOINT: "https://blockscout.k8s.orb.local/"
  initContainer:
    tcpCheck:
      image:
        repository: ghcr.io/settlemint/btp-waitforit
    graphQLCheck:
      image:
        registry: docker.io
  job:
    image:
      # -- (string) Job image repository
      repository: docker.io/node

support:
  enabled: true

  # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
  ingress-nginx:
    enabled: true
    replicaCount: 1
    controller:
      resources: {}
      image:
        repository: registry.k8s.io/ingress-nginx/controller

  # https://github.com/stakater/Reloader/tree/master/deployments/kubernetes/chart/reloader
  reloader:
    enabled: true
    image:
      repository: ghcr.io/stakater/reloader

  minio:
    enabled: true
    image:
      repository: docker.io/minio/minio
    mcImage:
      repository: docker.io/minio/minio
    ingress:
      enabled: true
      ingressClassName: atk-nginx
      path: /
      hosts:
        - minio.k8s.orb.local

  # Redis configuration
  redis:
    enabled: true
    image:
      # -- Redis image registry
      registry: docker.io
    fullnameOverride: redis
    commonLabels:
      kots.io/app-slug: settlemint-atk
      app.kubernetes.io/managed-by: helm
    auth:
      enabled: true
      password: "atk"
    persistence:
      enabled: true
      size: 1Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"

  postgresql:
    enabled: true
    image:
      registry: docker.io

observability:
  enabled: true

  # https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/values.yaml
  metrics-server:
    enabled: true
    resources: {}
    image:
      repository: registry.k8s.io/metrics-server/metrics-server

  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-state-metrics/values.yaml
  kube-state-metrics:
    resources: {}
    image:
      registry: registry.k8s.io

  # https://github.com/VictoriaMetrics/helm-charts/blob/master/charts/victoria-metrics-single/values.yaml
  victoria-metrics-single:
    server:
      persistentVolume:
        storageClass: ""
        size: 10Gi
      resources: {}
      image:
        registry: docker.io

  # https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
  loki:
    loki:
      image:
        # -- The Docker registry
        registry: docker.io
    singleBinary:
      persistence:
        size: 10Gi
      resources: {}
      extraEnv: {}
        # Keep a little bit lower than memory limits
        # - name: GOMEMLIMIT
        #   value: 3750MiB
    memcached:
      # -- Enable the built in memcached server provided by the chart
      enabled: true
      image:
        # -- Memcached Docker image repository
        repository: docker.io/memcached
    memcachedExporter:
      image:
        repository: docker.io/prom/memcached-exporter
    sidecar:
      image:
        # -- The Docker registry and image for the k8s sidecar
        repository: docker.io/kiwigrid/k8s-sidecar
    gateway:
      image:
        registry: docker.io

  # https://github.com/grafana/alloy/blob/main/operations/helm/charts/alloy/values.yaml
  alloy:
    alloy:
      resources: {}
    image:
      registry: docker.io
    configReloader:
      image:
        registry: quay.io

  grafana:
    image:
      # -- The Docker registry
      registry: docker.io
    # Sidecar configuration for Grafana dashboards and datasources
    sidecar:
      image:
        registry: docker.io
    ingress:
      hosts:
        - grafana.k8s.orb.local
    adminUser: settlemint
    adminPassword: atk

  tempo:
    tempo:
      repository: docker.io/grafana/tempo
    tempoQuery:
      repository: docker.io/grafana/tempo-query
    server:
      resources: {}

  prometheus-node-exporter:
    image:
      registry: quay.io
