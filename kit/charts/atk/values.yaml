# Default values for atk.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global values shared across all subcharts
global:
  labels:
    kots.io/app-slug: settlemint-atk
  # NetworkPolicy configuration
  networkPolicy:
    # Enable NetworkPolicies across all services
    enabled: false
  # Artifacts container configuration
  artifacts:
    # Image containing contract ABIs and genesis files
    image:
      registry: ghcr.io
      repository: settlemint/asset-tokenization-kit-artifacts
      tag: 2.0.0-main.91391
      pullPolicy: IfNotPresent
  datastores:
    default:
      redis:
        host: "redis"
        port: 6379
        username: "default"
        password: "atk"
        db: 0
        query: "dial_timeout=5s&read_timeout=2s&write_timeout=2s&pool_size=50"
      postgresql:
        host: "postgresql"
        port: 5432
        username: "postgres"
        password: "atk"
        database: "postgres"
        sslMode: "disable"
    erpc:
      redis:
        cacheDb: 0
        sharedStateDb: 1
    hasura:
      postgresql:
        database: "hasura"
        username: "hasura"
        password: "atk"
      redis:
        primary:
          db: 2
        rateLimit:
          db: 3
    portal:
      postgresql:
        database: "portal"
        username: "portal"
        password: "atk"
      redis:
        db: 4
    txsigner:
      postgresql:
        database: "txsigner"
        username: "txsigner"
        password: "atk"
    graphNode:
      postgresql:
        database: "thegraph"
        username: "thegraph"
        password: "atk"

network:
  enabled: true
  network-bootstrapper:
    settings:
      chainId: "53771311147"
  network-nodes:
    persistence:
      size: 20Gi

erpc:
  enabled: true
  image:
    registry: ghcr.io
  # Init containers
  initContainers:
    waitforit:
      image:
        repository: ghcr.io/settlemint/btp-waitforit
  # Test container
  test:
    image:
      repository: docker.io/busybox
  # resources:
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  ingress:
    enabled: true
    className: "atk-nginx"
    hosts:
      - host: rpc.k8s.orb.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  openShiftRoute:
    enabled: false
    annotations: {}
    host: rpc.k8s.orb.local
    path: /
    wildcardPolicy: None
    port:
      targetPort: http
    to:
      weight: 100
    alternateBackends: []
    tls: null
  config:
    logLevel: info
    server:
      httpHostV4: 0.0.0.0
      httpPort: 4000
    projects:
      - id: settlemint
        networks:
          - architecture: evm
            evm:
              chainId: 53771311147
              integrity:
                enforceHighestBlock: true
                enforceGetLogsBlockRange: true
            directiveDefaults:
              retryEmpty: true
            failsafe:
              - matchMethod: "eth_getLogs"
                timeout:
                  duration: 45s
                retry:
                  maxAttempts: 3
                  delay: 500ms
                  backoffFactor: 2
                  backoffMaxDelay: 10s
                  jitter: 300ms
                hedge:
                  quantile: 0.9
                  minDelay: 200ms
                  maxDelay: 4s
                  maxCount: 1
              - matchMethod: "trace_*|debug_*|arbtrace_*"
                timeout:
                  duration: 90s
                retry:
                  maxAttempts: 1
              - matchMethod: "eth_getBlock*|eth_getTransaction*"
                timeout:
                  duration: 6s
                retry:
                  maxAttempts: 2
                  delay: 200ms
                  backoffFactor: 1.5
                  backoffMaxDelay: 3s
                  jitter: 150ms
              - matchMethod: "*"
                matchFinality:
                  - unfinalized
                  - realtime
                timeout:
                  duration: 4s
                retry:
                  maxAttempts: 2
                  delay: 150ms
                  jitter: 150ms
                hedge:
                  delay: 250ms
                  maxCount: 1
              - matchMethod: "*"
                matchFinality:
                  - finalized
                timeout:
                  duration: 20s
                retry:
                  maxAttempts: 4
                  delay: 400ms
                  backoffFactor: 1.8
                  backoffMaxDelay: 8s
                  jitter: 250ms
              - matchMethod: "*"
                timeout:
                  duration: 12s
                retry:
                  maxAttempts: 3
                  delay: 300ms
                  backoffFactor: 1.4
                  backoffMaxDelay: 5s
                  jitter: 200ms
                hedge:
                  quantile: 0.95
                  minDelay: 120ms
                  maxDelay: 2s
                  maxCount: 2
        upstreams:
          - id: besu-node-rpc-0
            endpoint: http://besu-node-rpc-0.besu-node-rpc:8545
            evm:
              chainId: 53771311147
            failsafe:
              - matchMethod: "*"
                circuitBreaker:
                  failureThresholdCount: 40
                  failureThresholdCapacity: 80
                  halfOpenAfter: 120s
                  successThresholdCount: 3
                  successThresholdCapacity: 10
          - id: besu-node-rpc-1
            endpoint: http://besu-node-rpc-1.besu-node-rpc:8545
            evm:
              chainId: 53771311147
            failsafe:
              - matchMethod: "*"
                circuitBreaker:
                  failureThresholdCount: 40
                  failureThresholdCapacity: 80
                  halfOpenAfter: 120s
                  successThresholdCount: 3
                  successThresholdCapacity: 10
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4001"
  podLabels:
    app.kubernetes.io/component: erpc

blockscout:
  enabled: true
  postgresql:
    host: "postgresql"
    port: 5432
    database: "blockscout"
    username: "blockscout"
    password: "atk"
    sslMode: "disable"
    endpoint: "postgresql:5432"
    url: "postgresql://blockscout:atk@postgresql:5432/blockscout?sslmode=disable"
  # Direct configuration for local blockscout chart
  fullnameOverride: blockscout
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4000"
    prometheus.io/path: "/metrics"
  blockscout:
    image:
      repository: ghcr.io/blockscout/blockscout
      tag: "9.0.2"
      pullPolicy: IfNotPresent
    # Pod security context
    podSecurityContext:
      fsGroup: 1001
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
    # Container security context
    containerSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false
    # Init container security context
    initContainerSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false
    # Add an extra init container to wait for PostgreSQL
    init:
      enabled: true
      command:
        - /bin/sh
      args:
        - -c
        - | # Using YAML multiline string for clarity
          echo "Waiting for postgresql:5432..."
          while ! nc -z postgresql 5432; do
            sleep 2;
          done;
          echo "PostgreSQL is ready!"
          # Original command:
          bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()"
    ingress:
      enabled: true
      className: "atk-nginx"
      hostname: explorer.k8s.orb.local
    env:
      DATABASE_URL: "postgresql://blockscout:atk@postgresql:5432/blockscout?sslmode=disable"
      ETHEREUM_JSONRPC_HTTP_URL: http://erpc:4000/settlemint/evm/53771311147
      ETHEREUM_JSONRPC_TRACE_URL: http://erpc:4000/settlemint/evm/53771311147
      API_URL: https://explorer.k8s.orb.local
      WEBAPP_URL: https://explorer.k8s.orb.local
    resources: {}
  frontend:
    enabled: true
    ingress:
      enabled: true
      className: "atk-nginx"
      hostname: explorer.k8s.orb.local
    image:
      repository: ghcr.io/blockscout/frontend
      tag: "v2.3.3"
      pullPolicy: IfNotPresent
    # Pod security context
    podSecurityContext:
      fsGroup: 1001
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
    # Container security context
    containerSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false

graph-node:
  enabled: true
  image:
    repository: docker.io/graphprotocol/graph-node
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8040"
    prometheus.io/path: "/metrics"
  initContainer:
    image:
      repository: docker.io/kubesphere/kubectl
    tcpCheck:
      enabled: true
      image:
        repository: ghcr.io/settlemint/btp-waitforit
        tag: v7.7.10
        pullPolicy: IfNotPresent
      timeout: 120
      resources:
        limits:
          cpu: 100m
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 32Mi
      dependencies:
        - name: postgresql
          endpoint: "postgresql:5432"
  ingress:
    enabled: true
    className: "atk-nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    hosts:
      - host: graph.k8s.orb.local
        paths:
          - path: /(.*)
            pathType: ImplementationSpecific
          - path: /ws/?(.*)
            pathType: ImplementationSpecific
          - path: /admin/?(.*)
            pathType: ImplementationSpecific
          - path: /indexer/?(.*)
            pathType: ImplementationSpecific
          - path: /graphman/?(.*)
            pathType: ImplementationSpecific
    tls: []
  openShiftRoute:
    enabled: false
    annotations: {}
    host: graph.k8s.orb.local
    wildcardPolicy: None
    tls: null
    to:
      weight: 100
    alternateBackends: []
    routes:
      - nameSuffix: ""
        host: ""
        path: /
        targetPort: http-query
        annotations: {}
      - nameSuffix: ws
        host: ""
        path: /ws
        targetPort: http-queryws
        annotations:
          haproxy.router.openshift.io/rewrite-target: /
      - nameSuffix: admin
        host: ""
        path: /admin
        targetPort: http-admin
        annotations:
          haproxy.router.openshift.io/rewrite-target: /
      - nameSuffix: indexer
        host: ""
        path: /indexer
        targetPort: http-status
        annotations:
          haproxy.router.openshift.io/rewrite-target: /
      - nameSuffix: graphman
        host: ""
        path: /graphman
        targetPort: http-status
        annotations:
          haproxy.router.openshift.io/rewrite-target: /
  env:
    PRIMARY_SUBGRAPH_DATA_PGHOST: "postgresql"
    PRIMARY_SUBGRAPH_DATA_PGPORT: 5432
    PRIMARY_SUBGRAPH_DATA_PGDATABASE: "thegraph"
    PRIMARY_SUBGRAPH_DATA_PGUSER: "thegraph"
    PRIMARY_SUBGRAPH_DATA_PGPASSWORD: "atk"
  postgresReadinessCheck:
    enabled: true
    image: docker.io/postgres:17.6-alpine
    maxRetries: 30
    initialWaitTime: 2
    maxWaitTime: 30
    randomDelayRange:
      min: 5
      max: 30
    resources:
      limits:
        cpu: 100m
        memory: 96Mi
      requests:
        cpu: 25m
        memory: 48Mi

hasura:
  enabled: true
  postgresql:
    host: "postgresql"
    port: 5432
    database: "hasura"
    username: "hasura"
    password: "atk"
    sslMode: "disable"
    endpoint: "postgresql:5432"
    url: "postgresql://hasura:atk@postgresql:5432/hasura?sslmode=disable"
  redis:
    primary:
      host: "redis"
      port: 6379
      username: "default"
      password: "atk"
      db: 2
      url: "redis://default:atk@redis:6379/2"
    rateLimit:
      host: "redis"
      port: 6379
      username: "default"
      password: "atk"
      db: 3
      url: "redis://default:atk@redis:6379/3"
  graphql-engine:
    replicas: 1
    ingress:
      hostName: hasura.k8s.orb.local
    labels:
      app.kubernetes.io/instance: atk
      kots.io/app-slug: settlemint-atk
      app.kubernetes.io/component: hasura
    openShiftRoute:
      enabled: false
      annotations: {}
      host: hasura.k8s.orb.local
      path: /
      wildcardPolicy: None
      port:
        targetPort: http
      to:
        weight: 100
      alternateBackends: []
      tls: null
    image:
      repository: docker.io/hasura/graphql-engine
      tag: v2.48.5
      ## Specify a imagePullPolicy
      ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
    initContainers:
      - name: wait-for-postgresql
        image: ghcr.io/settlemint/btp-waitforit:v7.7.10
        imagePullPolicy: IfNotPresent
        command:
          - /usr/bin/wait-for-it
          - "postgresql:5432"
          - -t
          - "120"
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 32Mi
    secret:
      metadataDbUrl: "postgresql://hasura:atk@postgresql:5432/hasura?sslmode=disable"
      extraSecrets:
        DEFAULT_DB_URL: "postgresql://hasura:atk@postgresql:5432/hasura?sslmode=disable"
      redisUrl: "redis://default:atk@redis:6379/2"
      rateLimitRedisUrl: "redis://default:atk@redis:6379/3"

portal:
  enabled: true
  image:
    registry: ghcr.io
  podLabels:
    app.kubernetes.io/component: portal
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/portal-metrics"
  initContainer:
    # Legacy `initContainers` overrides remain supported for backward compatibility.
    tcpCheck:
      enabled: true
      image:
        repository: ghcr.io/settlemint/btp-waitforit
        tag: v7.7.10
        pullPolicy: IfNotPresent
      timeout: 120
      resources:
        limits:
          cpu: 100m
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 32Mi
      dependencies:
        - name: postgresql
          endpoint: "postgresql:5432"
    copyArtifacts:
      resources:
        limits:
          cpu: 150m
          memory: 128Mi
        requests:
          cpu: 25m
          memory: 64Mi
  config:
    network:
      # -- Network ID
      networkId: "53771311147"
      # -- Network name
      networkName: "ATK"
      # -- Node RPC URL
      nodeRpcUrl: "http://txsigner:3000"
  ingress:
    hostname: portal.k8s.orb.local

support:
  enabled: true

  # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
  ingress-nginx:
    enabled: true
    replicaCount: 1
    controller:
      resources: {}
      image:
        repository: registry.k8s.io/ingress-nginx/controller

  # https://github.com/stakater/Reloader/tree/master/deployments/kubernetes/chart/reloader
  reloader:
    enabled: true
    image:
      repository: ghcr.io/stakater/reloader

  minio:
    enabled: true
    image:
      repository: docker.io/minio/minio
    mcImage:
      repository: docker.io/minio/minio
    ingress:
      enabled: true
      ingressClassName: atk-nginx
      path: /
      hosts:
        - minio.k8s.orb.local

  # Redis configuration
  redis:
    enabled: true
    image:
      # -- Redis image registry
      registry: docker.io
    fullnameOverride: redis
    commonLabels:
      kots.io/app-slug: settlemint-atk
      app.kubernetes.io/managed-by: helm
    auth:
      enabled: true
      password: "atk"
    persistence:
      enabled: true
      size: 1Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"

  postgresql:
    enabled: true
    image:
      registry: docker.io

observability:
  enabled: true

  # https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/values.yaml
  metrics-server:
    enabled: true
    resources: {}
    image:
      repository: registry.k8s.io/metrics-server/metrics-server

  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-state-metrics/values.yaml
  kube-state-metrics:
    resources: {}
    image:
      registry: registry.k8s.io

  # https://github.com/VictoriaMetrics/helm-charts/blob/master/charts/victoria-metrics-single/values.yaml
  victoria-metrics-single:
    server:
      persistentVolume:
        storageClass: ""
        size: 10Gi
      resources: {}
      image:
        registry: docker.io

  # https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
  loki:
    loki:
      image:
        # -- The Docker registry
        registry: docker.io
    singleBinary:
      persistence:
        size: 10Gi
      resources: {}
      extraEnv: {}
        # Keep a little bit lower than memory limits
        # - name: GOMEMLIMIT
        #   value: 3750MiB
    memcached:
      # -- Enable the built in memcached server provided by the chart
      enabled: true
      image:
        # -- Memcached Docker image repository
        repository: docker.io/memcached
    memcachedExporter:
      image:
        repository: docker.io/prom/memcached-exporter
    sidecar:
      image:
        # -- The Docker registry and image for the k8s sidecar
        repository: docker.io/kiwigrid/k8s-sidecar
    gateway:
      image:
        registry: docker.io

  # https://github.com/grafana/alloy/blob/main/operations/helm/charts/alloy/values.yaml
  alloy:
    alloy:
      resources: {}
    image:
      registry: docker.io
    configReloader:
      image:
        registry: quay.io

  grafana:
    image:
      # -- The Docker registry
      registry: docker.io
    # Sidecar configuration for Grafana dashboards and datasources
    sidecar:
      image:
        registry: docker.io
    ingress:
      hosts:
        - grafana.k8s.orb.local
    adminUser: settlemint
    adminPassword: atk

  tempo:
    tempo:
      repository: docker.io/grafana/tempo
    tempoQuery:
      repository: docker.io/grafana/tempo-query
    server:
      resources: {}

  prometheus-node-exporter:
    image:
      registry: quay.io

# Transaction Signer Configuration
txsigner:
  enabled: true
  image:
    registry: ghcr.io
    repository: settlemint/btp-signer
  test:
    image:
      repository: docker.io/busybox
  # Configuration for the txsigner subchart
  config:
    mnemonic: "gate yellow grunt wrestle disease obtain mixed nature mansion tape purchase awful"
    derivationPath: "m/44'/60'/0'/0/0"
  replicaCount: 1
  resources: {}
  ingress:
    hostname: txsigner.k8s.orb.local

# DApp Frontend Configuration
dapp:
  enabled: true
  image:
    repository: ghcr.io/settlemint/asset-tokenization-kit
  replicaCount: 1
  ingress:
    enabled: true
    # IMPORTANT: Set the correct hostname for your environment
    hosts:
      - host: dapp.k8s.orb.local
        paths:
          - path: / # Adjust path if needed
            pathType: ImplementationSpecific
  resources: {}
  secretEnv:
    BETTER_AUTH_URL: "https://dapp.k8s.orb.local"
    SETTLEMINT_BLOCKSCOUT_UI_ENDPOINT: "http://blockscout-frontend-svc/"
    SETTLEMINT_HASURA_ADMIN_SECRET: "atk"
    SETTLEMINT_HD_PRIVATE_KEY: "atk-hd-private-key"
    SETTLEMINT_INSTANCE: "standalone"
    SETTLEMINT_PORTAL_GRAPHQL_ENDPOINT: "http://portal:3001/graphql"
    SETTLEMINT_THEGRAPH_SUBGRAPHS_ENDPOINTS: '["http://graph-node-combined:8000/subgraphs/name/kit"]'
  initContainer:
    # Generic TCP check settings
    tcpCheck:
      enabled: true
      timeout: 120 # Timeout in seconds for each dependency check
      image:
        repository: ghcr.io/settlemint/btp-waitforit
        tag: v7.7.10
        pullPolicy: IfNotPresent
      resources:
        limits:
          cpu: 100m
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 32Mi
      dependencies:
        # Add internal Kubernetes service endpoints (service-name:port) for critical dependencies
        - name: postgres
          endpoint: "postgresql:5432"
        - name: hasura
          endpoint: "hasura:8080"
        - name: portal
          endpoint: "portal:3001"
        - name: graph-node-tcp # Renamed to distinguish from graphQLCheck
          endpoint: "graph-node-combined:8020" # Status API port (TCP check)
        - name: blockscout # Add Blockscout if needed, determine correct service/port
          endpoint: "blockscout-frontend:80"

    # Specific check for GraphQL endpoint readiness (e.g., The Graph subgraph)
    graphQLCheck:
      enabled: true
      name: wait-for-graph-subgraph-kit # Name for the init container
      image:
        registry: docker.io
        repository: curlimages/curl
        tag: "8.16.0"
        pullPolicy: IfNotPresent
      # Target GraphQL endpoint URL (where POST requests are sent)
      url: "http://graph-node-combined:8000/subgraphs/name/kit"
      query: "{ __typename }" # Basic query to check for GraphQL errors
      retryDelaySeconds: 20
      timeoutSeconds: 10 # Max time per curl attempt
      connectTimeoutSeconds: 5 # Max time to connect
      retries: 24
      resources:
        limits:
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 12Mi
  podLabels:
    app.kubernetes.io/component: dapp
    kots.io/app-slug: settlemint-atk
