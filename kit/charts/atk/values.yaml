# Default values for atk.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global values shared across all subcharts
global:
  labels:
    kots.io/app-slug: settlemint-atk
  # NetworkPolicy configuration
  networkPolicy:
    # Enable NetworkPolicies across all services
    enabled: false
  # Namespace where ingress controller is deployed
  ingressNamespace: ingress-nginx


imagePullCredentials:
  registries:
    # -- lowercase, no points or special caracters unique identifier for the registry, harbor, ghcr and docker have special meaning, but you can add more
    harbor:
      # -- Enable this if you want this chart to create an image pull secret for you (harbor is the default registry for the platform)
      enabled: false
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registryUrl: 'harbor.settlemint.com'
      # -- The username to access the registry
      username: ''
      # -- The password or access token to access the registry
      password: ''
      # -- The email to access the registry
      email: ''
    # -- lowercase, no points or special caracters unique identifier for the registry, harbor, ghcr and docker have special meaning, but you can add more
    ghcr:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: false
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registryUrl: 'ghcr.io'
      # -- The username to access the registry
      username: ''
      # -- The password or access token to access the registry
      password: ''
      # -- The email to access the registry
      email: ''
    # -- lowercase, no points or special caracters unique identifier for the registry, harbor, ghcr and docker have special meaning, but you can add more
    docker:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: false
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registryUrl: 'docker.io'
      # -- The username to access the registry
      username: ''
      # -- The password or access token to access the registry
      password: ''
      # -- The email to access the registry
      email: ''

besu-network:
  enabled: true
  besu-validator-1:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-validator-2:
    enabled: false
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-validator-3:
    enabled: false
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-validator-4:
    enabled: false
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-rpc-1:
    enabled: true
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  besu-rpc-2:
    enabled: false
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    storage:
      sizeLimit: "5Gi"
      pvcSizeLimit: "5Gi"
    resources: {}
  rawGenesisConfig:
    blockchain:
      nodes:
        count: 1

erpc:
  enabled: true
  resources: {}
  imagePullSecrets:
    - name: image-pull-secret-docker
    - name: image-pull-secret-ghcr
    - name: image-pull-secret-harbor
  ingress:
    enabled: true
    className: "settlemint-nginx"
    hosts:
      - host: rpc.k8s.orb.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    logLevel: info
    projects:
      - id: settlemint
        upstreams:
          - endpoint: http://besu-node-rpc-1:8545
            id: besu-node-rpc-1
          - endpoint: http://besu-node-validator-1:8545
            id: besu-node-validator-1
    database:
      evmJsonRpcCache:
        # Define one or more storage connectors with unique IDs useful in policies
        connectors:
          - id: redis-cache
            driver: redis  # Refer to "redis" driver docs below
            redis:
              addr: redis-master.atk.svc.cluster.local:6379
              password: "atk"
              db: 0
              connPoolSize: 128
        policies:
          - network: "*"
            method: "*"
            finality: finalized
            connector: redis-cache
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4001"
  podLabels:
    app.kubernetes.io/component: erpc


blockscout:
  enabled: true
  blockscout-stack:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "4000"
      prometheus.io/path: "/metrics"
    blockscout:
      # Add an extra init container to wait for PostgreSQL
      init:
        enabled: true
        command:
          - /bin/sh
        args:
          - -c
          - |  # Using YAML multiline string for clarity
            echo "Waiting for postgresql-pgpool:5432..."
            while ! nc -z postgresql-pgpool 5432; do
              sleep 2;
            done;
            echo "PostgreSQL is ready!"
            # Original command:
            bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()"
      ingress:
        hostname: explorer.k8s.orb.local
      env:
        API_URL: https://explorer.k8s.orb.local
        WEBAPP_URL: https://explorer.k8s.orb.local
      resources: {}
    frontend:
      ingress:
        hostname: explorer.k8s.orb.local

thegraph:
  enabled: true
  graph-node:
    graphNodeDefaults:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    graphNodeGroups:
      query:
        enabled: false
        replicaCount: 1
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8040"
          prometheus.io/path: "/metrics"
      index:
        enabled: false
        replicaCount: 1
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8040"
          prometheus.io/path: "/metrics"
      block-ingestor:
        enabled: false
        replicaCount: 1
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8040"
          prometheus.io/path: "/metrics"
      combined:
        enabled: true
        replicaCount: 1
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8040"
          prometheus.io/path: "/metrics"
        includeInIndexPools:
          - default
        env:
          node_role: combined-mode
    blockIngestorGroupName: combined
    ingress:
      hosts:
        - host: graph.k8s.orb.local
          paths:
            - path: /(.*)
              pathType: ImplementationSpecific
              port: 8000
              serviceName: graph-node-combined
            - path: /ws/?(.*)
              pathType: ImplementationSpecific
              port: 8001
              serviceName: graph-node-combined
            - path: /admin/?(.*)
              pathType: ImplementationSpecific
              port: 8020
              serviceName: graph-node-combined
            - path: /indexer/?(.*)
              pathType: ImplementationSpecific
              port: 8030
              serviceName: graph-node-combined
            - path: /graphman/?(.*)
              pathType: ImplementationSpecific
              port: 8050
              serviceName: graph-node-combined
    grafana:
      # -- Enable creation of Grafana dashboards. [Grafana chart](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart) must be configured to search this namespace, see `sidecar.dashboards.searchNamespace`
      dashboards: false
  job:
    enabled: true
    fullnameOverride: graph
    workspace:
      size: 1Gi

hasura:
  enabled: true
  graphql-engine:
    replicas: 1
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    ingress:
      hostName: "hasura.k8s.orb.local"
    labels:
      app.kubernetes.io/instance: atk
      kots.io/app-slug: settlemint-atk
      app.kubernetes.io/component: hasura

portal:
  enabled: true
  image:
    pullSecrets:
      - image-pull-secret-docker
      - image-pull-secret-ghcr
      - image-pull-secret-harbor
  initContainers:
    - name: wait-for-postgres
      image: ghcr.io/settlemint/btp-waitforit:v7.7.5
      command: ["/usr/bin/wait-for-it", "postgresql-pgpool:5432", "-t", "0"]
  podLabels:
    app.kubernetes.io/component: portal
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/portal-metrics"

support:
  enabled: true

  # https://github.com/bitnami/charts/blob/main/bitnami/postgresql-ha/values.yaml
  postgresql-ha:
    postgresql:
      pullSecrets:
        - image-pull-secret-docker
        - image-pull-secret-ghcr
        - image-pull-secret-harbor
      resources: {}
      replicaCount: 1
    pgpool:
      pullSecrets:
        - image-pull-secret-docker
        - image-pull-secret-ghcr
        - image-pull-secret-harbor
      resources: {}
      replicaCount: 1

  # https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
  redis:
    global:
      imagePullSecrets:
        - image-pull-secret-docker
        - image-pull-secret-ghcr
        - image-pull-secret-harbor
    master:
      resources: {}
    replica:
      resources: {}

  # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
  ingress-nginx:
    replicaCount: 1
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    controller:
      resources: {}
  # https://github.com/stakater/Reloader/tree/master/deployments/kubernetes/chart/reloader
  reloader:
    enabled: true

  minio:
    enabled: true
    image:
      pullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    ingress:
      enabled: true
      ingressClassName: "settlemint-nginx"
      hostname: minio.k8s.orb.local

observability:
  enabled: true

  # https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/values.yaml
  metrics-server:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    resources: {}

  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-state-metrics/values.yaml
  kube-state-metrics:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
    resources: {}

  # https://github.com/VictoriaMetrics/helm-charts/blob/master/charts/victoria-metrics-single/values.yaml
  victoria-metrics-single:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    server:
      persistentVolume:
        storageClass: ""
        size: 10Gi
      resources: {}

  # https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
  loki:
    imagePullSecrets:
      - name: image-pull-secret-docker
      - name: image-pull-secret-ghcr
      - name: image-pull-secret-harbor
  singleBinary:
    persistence:
      size: 10Gi
    resources: {}
    extraEnv: {}
      # Keep a little bit lower than memory limits
      # - name: GOMEMLIMIT
      #   value: 3750MiB

  # https://github.com/grafana/alloy/blob/main/operations/helm/charts/alloy/values.yaml
  alloy:
    global:
      image:
        pullSecrets:
          - name: image-pull-secret-docker
          - name: image-pull-secret-ghcr
          - name: image-pull-secret-harbor
    alloy:
      resources: {}

  alertmanager:
    alertmanager:
      global:
        imagePullSecrets:
          - name: image-pull-secret-docker
          - name: image-pull-secret-ghcr
          - name: image-pull-secret-harbor
  prometheus-stack:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
  grafana:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor
    ingress:
      hosts:
        - grafana.k8s.orb.local
    adminUser: settlemint
    adminPassword: atk
  tempo:
    global:
      imagePullSecrets:
        - name: image-pull-secret-docker
        - name: image-pull-secret-ghcr
        - name: image-pull-secret-harbor

# Transaction Signer Configuration
txsigner:
  enabled: true
  # Configuration for the txsigner subchart
  config:
    mnemonic: "gate yellow grunt wrestle disease obtain mixed nature mansion tape purchase awful"
    derivationPath: "m/44'/60'/0'/0/0"
  postgresql: postgresql://txsigner:atk@postgresql-pgpool:5432/txsigner?sslmode=disable
  replicaCount: 1
  resources: {}

# DApp Frontend Configuration
dapp:
  enabled: true
  replicaCount: 1
  ingress:
    enabled: true
    # IMPORTANT: Set the correct hostname for your environment
    hosts:
      - host: dapp.k8s.orb.local  # Example hostname
        paths:
          - path: /  # Adjust path if needed
            pathType: ImplementationSpecific
  resources: {}
  secretEnv:
    BETTER_AUTH_URL: "https://dapp.k8s.orb.local"
    NEXT_PUBLIC_APP_ID: "dapp"
    NEXTAUTH_URL: "https://dapp.k8s.orb.local"
    OTEL_EXPORTER_OTLP_ENDPOINT: "http://alloy:4318/v1/traces"  # Adjust if needed
    OTEL_EXPORTER_OTLP_PROTOCOL: "http"
    SETTLEMINT_BLOCKSCOUT_UI_ENDPOINT: "http://blockscout-frontend-svc/"
    SETTLEMINT_HASURA_ADMIN_SECRET: "atk"
    SETTLEMINT_HASURA_DATABASE_URL: "postgresql://hasura:atk@postgresql-pgpool:5432/hasura"
    SETTLEMINT_HASURA_ENDPOINT: "http://hasura:8080/v1/graphql"
    SETTLEMINT_HD_PRIVATE_KEY: "atk-hd-private-key"
    SETTLEMINT_INSTANCE: "standalone"
    SETTLEMINT_PORTAL_GRAPHQL_ENDPOINT: "http://portal:3001/graphql"
    SETTLEMINT_THEGRAPH_SUBGRAPHS_ENDPOINTS: '["http://graph-node-combined:8000/subgraphs/name/kit"]'
  initContainer:
    # Generic TCP check settings
    tcpCheck:
      enabled: true
      timeout: 0  # Timeout in seconds for each dependency check
      dependencies:
        # Add internal Kubernetes service endpoints (service-name:port) for critical dependencies
        - name: postgres
          endpoint: "postgresql-pgpool:5432"
        - name: hasura
          endpoint: "hasura:8080"
        - name: portal
          endpoint: "portal:3001"
        - name: graph-node-tcp  # Renamed to distinguish from graphQLCheck
          endpoint: "graph-node-combined:8020"  # Status API port (TCP check)
        - name: blockscout  # Add Blockscout if needed, determine correct service/port
          endpoint: "blockscout-frontend-svc:80"

    # Specific check for GraphQL endpoint readiness (e.g., The Graph subgraph)
    graphQLCheck:
      enabled: true
      name: wait-for-graph-subgraph-kit  # Name for the init container
      # Target GraphQL endpoint URL (where POST requests are sent)
      url: "http://graph-node-combined:8000/subgraphs/name/kit"
      query: '{ __typename }'  # Basic query to check for GraphQL errors
      retryDelaySeconds: 20
      timeoutSeconds: 10  # Max time per curl attempt
      connectTimeoutSeconds: 5  # Max time to connect
      retries: 24
  podLabels:
    app.kubernetes.io/component: dapp
    kots.io/app-slug: settlemint-atk
