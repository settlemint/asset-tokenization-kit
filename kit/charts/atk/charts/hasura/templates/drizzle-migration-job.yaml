apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-drizzle-migrate-%d" .Release.Name (.Release.Revision | int) }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "atk.labels" . | nindent 4 }}
    app.kubernetes.io/component: drizzle-migrate
    helm.sh/revision: "{{ .Release.Revision }}"
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "hook-succeeded"
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      name: {{ printf "%s-drizzle-migrate-%d" .Release.Name (.Release.Revision | int) }}
      labels:
        {{- include "atk.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: drizzle-migrate
        helm.sh/revision: "{{ .Release.Revision }}"
    spec:
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      initContainers:
      - name: wait-for-pgpool
        image: "{{ .Values.busybox.registry }}/{{ .Values.busybox.repository }}:{{ .Values.busybox.tag }}"
        imagePullPolicy: {{ .Values.busybox.pullPolicy }}
        command:
          - /bin/sh
          - -c
          - |
            SERVICE_HOST="postgresql-pgpool"
            SERVICE_PORT="5432"
            echo "Waiting for ${SERVICE_HOST}:${SERVICE_PORT}..."
            until nc -z -w 2 ${SERVICE_HOST} ${SERVICE_PORT}; do
              echo "Service ${SERVICE_HOST}:${SERVICE_PORT} not ready yet, waiting 2s..."
              sleep 2
            done
            echo "Service ${SERVICE_HOST}:${SERVICE_PORT} is available."
      - name: clone-repo
        image: "{{ .Values.git.image.registry }}/{{ .Values.git.image.repository }}:{{ .Values.git.image.tag }}"
        imagePullPolicy: {{ .Values.git.image.pullPolicy }}
        command:
          - /bin/sh
          - -c
          - |
            set -ex
            # Check if the target directory exists and is a git repo, otherwise clone
            if [ -d "/workspace/.git" ]; then
              echo "Repository found in /workspace, pulling latest changes..."
              cd /workspace
              git pull
            else
              echo "Cloning repository into /workspace..."
              # Ensure the workspace directory exists before cloning into it
              mkdir -p /workspace
              git clone https://github.com/settlemint/asset-tokenization-kit.git /workspace
            fi
        volumeMounts:
          - name: workspace
            mountPath: /workspace
      containers:
      - name: drizzle-migrate
        image: "{{ .Values.drizzleMigrate.image.registry }}/{{ .Values.drizzleMigrate.image.repository }}:{{ .Values.drizzleMigrate.image.tag }}"
        imagePullPolicy: {{ .Values.drizzleMigrate.image.pullPolicy }}
        workingDir: /workspace/kit/dapp
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -ex
          echo "Installing Python and required build tools..."
          apt-get update
          apt-get install -y python3 python3-pip build-essential
          ln -sf /usr/bin/python3 /usr/bin/python
          echo "Installing dependencies..."
          bun install
          echo "Running Drizzle migrations..."
          export SETTLEMINT_HASURA_DATABASE_URL="postgresql://postgres:${PGPASSWORD}@postgresql-pgpool:5432/postgres"
          bunx drizzle-kit push --force
          echo "Drizzle migrations finished."
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-postgresql
              key: password
        - name: SETTLEMINT_HASURA_DATABASE_URL
          value: "postgresql://postgres:$(PGPASSWORD)@postgresql-pgpool:5432/postgres"
        volumeMounts:
          - name: workspace
            mountPath: /workspace
      volumes:
        - name: workspace
          {{- if .Values.job.workspace.enabled }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-drizzle-migrate-workspace" .Release.Name }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      terminationGracePeriodSeconds: 30
  backoffLimit: 1