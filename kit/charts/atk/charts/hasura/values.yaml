# https://github.com/hasura/helm-charts/blob/main/charts/graphql-engine/values.yaml
graphql-engine:
  nameOverride: hasura
  replicas: 1
  image:
    repository: docker.io/hasura/graphql-engine
  labels:
    app.kubernetes.io/instance: atk
    kots.io/app-slug: settlemint-atk
    app.kubernetes.io/part-of: settlemint-atk
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/component: hasura
  ingress:
    enabled: true
    ingressClassName: "atk-nginx"
    hostName: "hasura.k8s.orb.local"
  config:
    metadataOnly: false
    enableInternalConsoleAssets: true
    devMode: true
  secret:
    enabled: true
    adminSecret: "atk"
    redisUrl: "redis://default:atk@redis:6379"
    rateLimitRedisUrl: "redis://default:atk@redis:6379"
    metadataDbUrl: "postgresql://hasura:atk@postgresql:5432/hasura"
    extraSecrets:
      DEFAULT_DB_URL: "postgresql://hasura:atk@postgresql:5432/hasura"
  extraEnvs:
    - name: HASURA_GRAPHQL_PG_CONNECTIONS
      value: "10"
    - name: HASURA_GRAPHQL_DATABASE_URL
      valueFrom:
        secretKeyRef:
          key: DEFAULT_DB_URL
          name: atk-secrets
  global:
    imagePullSecrets: []
  postgres:
    enabled: false
  initContainers:
    - name: wait-for-postgresql-ready
      image: docker.io/postgres:17.5-alpine
      command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for PostgreSQL to be ready..."

          # Add random delay to prevent all nodes from connecting simultaneously
          RANDOM_DELAY=$((RANDOM % 30 + 5))
          echo "Adding random delay of ${RANDOM_DELAY} seconds to stagger connections..."
          sleep $RANDOM_DELAY

          # Function to test PostgreSQL connection
          test_postgres() {
            pg_isready -h postgresql -p 5432 -U hasura && \
            psql -h postgresql -p 5432 -U hasura -d hasura -c "SELECT 1;" > /dev/null 2>&1
          }

          # Wait with exponential backoff
          RETRY_COUNT=0
          MAX_RETRIES=30
          WAIT_TIME=2

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if test_postgres; then
              echo "PostgreSQL is ready!"
              exit 0
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "PostgreSQL not ready (attempt $RETRY_COUNT/$MAX_RETRIES). Waiting ${WAIT_TIME}s..."
            sleep $WAIT_TIME

            # Exponential backoff with max of 30 seconds
            WAIT_TIME=$((WAIT_TIME * 2))
            if [ $WAIT_TIME -gt 30 ]; then
              WAIT_TIME=30
            fi
          done

          echo "PostgreSQL failed to become ready after $MAX_RETRIES attempts"
          exit 1
      env:
        - name: PGPASSWORD
          value: "atk"

busybox:
  registry: docker.io
  repository: busybox
  tag: 1.37
  pullPolicy: IfNotPresent

git:
  image:
    registry: docker.io
    repository: alpine/git
    tag: v2.49.1
    pullPolicy: IfNotPresent

job:
  workspace:
    # -- Configure the persistent volume claim for the job workspace
    enabled: true # Set to false to use emptyDir instead of PVC
    size: 1Gi
    storageClass: "" # Optional: specify storage class, otherwise use default
    accessMode: ReadWriteOnce

imagePullSecrets: []
