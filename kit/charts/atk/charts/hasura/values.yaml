# Hasura GraphQL Engine Helm Chart Values

# -- (object) Global configuration
global:
  # -- (object) Global labels to apply to all resources
  labels: {}

# -- (int) Number of Hasura replicas to deploy
replicaCount: 1

# -- (string) Override name for the chart
nameOverride: ""
# -- (string) Override fullname for the chart
fullnameOverride: ""

# -- (object) Hasura image configuration
image:
  # -- (string) Hasura image registry
  registry: docker.io
  # -- (string) Hasura image repository
  repository: hasura/graphql-engine
  # -- (string) Hasura image tag
  tag: v2.48.6
  # -- (string) Hasura image pull policy
  pullPolicy: IfNotPresent

# -- (list) Docker registry secret names as an array
imagePullSecrets: []

# -- (object) Service account configuration
serviceAccount:
  # -- (bool) Specifies whether a service account should be created
  create: false
  # -- (bool) Automatically mount ServiceAccount's API credentials
  automount: false
  # -- (object) Annotations to add to the service account
  annotations: {}
  # -- (string) The name of the service account to use
  name: ""

# -- (object) Hasura configuration options
config:
  # -- (bool) Enable console
  enableConsole: true
  # -- (bool) Enable development mode
  devMode: true
  # -- (bool) Enable console assets (for offline usage)
  enableConsoleAssets: true
  # -- (bool) Enable telemetry
  enableTelemetry: false
  # -- (string) Log level (debug, info, warn, error)
  logLevel: info
  # -- (int) Server port
  serverPort: 8080
  # -- (bool) Enable remote schema permissions
  enableRemoteSchemaPermissions: false
  # -- (bool) Enable allowlist
  enableAllowlist: false
  # -- (string) CORS domain configuration
  corsDomain: "*"
  # -- (bool) Disable CORS
  disableCors: false
  # -- (int) WebSocket keepalive interval (seconds)
  wsKeepAlive: 5
  # -- (bool) Infer function permissions
  inferFunctionPermissions: true
  # -- (bool) Enable schema introspection for specified roles
  schemaIntrospectionDisabled: false

# -- (object) Database configuration
database:
  # -- (string) Database host (uses global datastores if not set)
  host: ""
  # -- (int) Database port (uses global datastores if not set)
  port: ""
  # -- (string) Database username (uses global datastores if not set)
  username: ""
  # -- (string) Database password (uses global datastores if not set)
  password: ""
  # -- (string) Database name (uses global datastores if not set)
  database: ""
  # -- (string) SSL mode (uses global datastores if not set)
  sslMode: ""
  # -- (int) Maximum connections
  connections: 50
  # -- (int) Idle timeout (seconds)
  idleTimeout: 180
  # -- (int) Connection lifetime (seconds)
  connLifetime: 600
  # -- (bool) Use prepared statements
  usePreparedStatements: true
  # -- (string) Transaction isolation level (read-committed, repeatable-read, serializable)
  txIsolation: "read-committed"
  # -- (bool) Enable connection pooling
  enablePooling: true

# -- (object) Admin secret configuration
adminSecret:
  # -- (bool) Create admin secret
  enabled: true
  # -- (string) Admin secret key (auto-generated if empty)
  key: "atk"
  # -- (string) Use existing secret
  existingSecret: ""
  # -- (string) Key in existing secret
  existingSecretKey: "admin-secret"

# -- (object) JWT secrets configuration
jwtSecrets: []
  # - type: ""
  #   jwkUrl: ""
  #   audience: ""
  #   issuer: ""
  #   claimsNamespace: ""
  #   claimsFormat: ""
  #   claimsMap: ""

# -- (object) Unauthorized role configuration
unauthorizedRole: "anonymous"

# -- (object) Authentication webhook configuration
authHook:
  # -- (bool) Enable auth webhook
  enabled: false
  # -- (string) Webhook URL
  url: ""
  # -- (string) Webhook mode (GET or POST)
  mode: "POST"

# -- (object) Action configuration
actions:
  # -- (string) Action base URL
  baseUrl: ""
  # -- (string) Action handler webhook base URL
  handlerWebhookBaseUrl: ""

# -- (object) Events configuration
events:
  # -- (int) Fetch interval for events (seconds)
  fetchInterval: 10

# -- (object) Cron triggers configuration
cronTriggers:
  # -- (bool) Include webhook secret in cron triggers
  includeInMetadata: false

# -- (object) Redis configuration for caching and rate limiting
redis:
  # -- (bool) Enable Redis integration
  enabled: true
  # -- (string) Redis host (uses global datastores if not set)
  host: ""
  # -- (int) Redis port (uses global datastores if not set)
  port: ""
  # -- (string) Redis username (uses global datastores if not set)
  username: ""
  # -- (string) Redis password (uses global datastores if not set)
  password: ""
  # -- (int) Redis database index for caching (uses global datastores if not set)
  cacheDb: ""
  # -- (int) Redis database index for rate limiting (uses global datastores if not set)
  rateLimitDb: ""
  # -- (int) Cache TTL in seconds
  cacheTtl: 60

# -- (object) Metadata database configuration
metadata:
  # -- (string) Metadata database URL (defaults to main database if not set)
  databaseUrl: ""

# -- (list) Additional environment variables
extraEnvs: []
  # - name: HASURA_GRAPHQL_EXPERIMENTAL_FEATURES
  #   value: "naming_convention"

# -- (list) Additional environment variables from secrets/configmaps
extraEnvFrom: []
  # - secretRef:
  #     name: my-secret
  # - configMapRef:
  #     name: my-configmap

# -- (object) Service configuration
service:
  # -- (string) Service type
  type: ClusterIP
  # -- (int) Service port
  port: 8080
  # -- (int) Target port
  targetPort: 8080
  # -- (string) Node port (if type is NodePort)
  nodePort: ""
  # -- (object) Additional service annotations
  annotations: {}
  # -- (object) Additional service labels
  labels: {}

# -- (object) Ingress configuration
ingress:
  # -- (bool) Enable ingress
  enabled: true
  # -- (string) Ingress class name
  className: "atk-nginx"
  # -- (object) Ingress annotations
  annotations: {}
  # -- (string) Ingress hostname
  hostName: "hasura.k8s.orb.local"
  # -- (string) Ingress path
  path: /
  # -- (string) Ingress path type
  pathType: Prefix
  # -- (list) Additional hosts
  extraHosts: []
  # -- (list) TLS configuration
  tls: []

# -- (object) OpenShift Route configuration
openShiftRoute:
  # -- (bool) Enable OpenShift route
  enabled: false
  # -- (object) Route annotations
  annotations: {}
  # -- (string) Route hostname
  host: hasura.k8s.orb.local
  # -- (string) Route path
  path: /
  # -- (string) Wildcard policy
  wildcardPolicy: None
  # -- (object) TLS configuration
  tls: null
  # -- (object) Service weight configuration
  to:
    # -- (int) Weight for the service
    weight: 100
  # -- (list) Alternate backends
  alternateBackends: []

# -- (object) Health check configuration
healthChecks:
  # -- (object) Liveness probe configuration
  livenessProbe:
    # -- (bool) Enable liveness probe
    enabled: true
    # -- (object) HTTP GET configuration
    httpGet:
      # -- (string) Path for health check
      path: /healthz
      # -- (string) Port name or number
      port: http
    # -- (int) Initial delay seconds
    initialDelaySeconds: 30
    # -- (int) Period seconds
    periodSeconds: 10
    # -- (int) Timeout seconds
    timeoutSeconds: 5
    # -- (int) Success threshold
    successThreshold: 1
    # -- (int) Failure threshold
    failureThreshold: 3
  # -- (object) Readiness probe configuration
  readinessProbe:
    # -- (bool) Enable readiness probe
    enabled: true
    # -- (object) HTTP GET configuration
    httpGet:
      # -- (string) Path for health check
      path: /healthz
      # -- (string) Port name or number
      port: http
    # -- (int) Initial delay seconds
    initialDelaySeconds: 10
    # -- (int) Period seconds
    periodSeconds: 10
    # -- (int) Timeout seconds
    timeoutSeconds: 5
    # -- (int) Success threshold
    successThreshold: 1
    # -- (int) Failure threshold
    failureThreshold: 3
  # -- (object) Startup probe configuration
  startupProbe:
    # -- (bool) Enable startup probe
    enabled: false
    # -- (object) HTTP GET configuration
    httpGet:
      # -- (string) Path for health check
      path: /healthz
      # -- (string) Port name or number
      port: http
    # -- (int) Initial delay seconds
    initialDelaySeconds: 0
    # -- (int) Period seconds
    periodSeconds: 10
    # -- (int) Timeout seconds
    timeoutSeconds: 5
    # -- (int) Success threshold
    successThreshold: 1
    # -- (int) Failure threshold
    failureThreshold: 30

# -- (object) Resource limits and requests
resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 250m
  #   memory: 256Mi

# -- (object) Horizontal pod autoscaler configuration
autoscaling:
  # -- (bool) Enable HPA
  enabled: false
  # -- (int) Minimum replicas
  minReplicas: 1
  # -- (int) Maximum replicas
  maxReplicas: 10
  # -- (int) Target CPU utilization percentage
  targetCPUUtilizationPercentage: 80
  # -- (int) Target memory utilization percentage
  targetMemoryUtilizationPercentage: 80

# -- (list) Init containers
initContainers:
  # -- (string) Container name
  - name: wait-for-postgresql
    # -- (string) Container image
    image: ghcr.io/settlemint/btp-waitforit:v7.7.10
    # -- (string) Image pull policy
    imagePullPolicy: IfNotPresent
    # -- (list) Container command
    command:
      - /usr/bin/wait-for-it
      - "postgresql:5432"
      - -t
      - "120"
    # -- (object) Resource limits and requests
    resources:
      # -- (object) Resource limits
      limits:
        # -- (string) CPU limit
        cpu: 100m
        # -- (string) Memory limit
        memory: 64Mi
      # -- (object) Resource requests
      requests:
        # -- (string) CPU request
        cpu: 10m
        # -- (string) Memory request
        memory: 32Mi

# -- (object) Pod annotations
podAnnotations: {}

# -- (object) Pod labels
podLabels: {}

# -- (object) Pod security context
podSecurityContext: {}
  # fsGroup: 2000
  # runAsNonRoot: true
  # runAsUser: 1000

# -- (object) Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- (object) Node selector
nodeSelector: {}

# -- (list) Tolerations
tolerations: []

# -- (object) Pod affinity
affinity: {}

# -- (object) Pod disruption budget
podDisruptionBudget:
  # -- (bool) Enable PDB
  enabled: false
  # -- (int) Minimum available pods
  minAvailable: 1
  # -- (int) Maximum unavailable pods
  maxUnavailable: ""

# -- (object) Volume mounts for the container
volumeMounts: []
  # - name: config
  #   mountPath: /etc/hasura

# -- (list) Volumes for the pod
volumes: []
  # - name: config
  #   configMap:
  #     name: hasura-config

# -- (object) Monitoring configuration
monitoring:
  # -- (bool) Enable Prometheus monitoring
  enabled: false
  # -- (string) Secret for metrics endpoint (optional)
  metricsSecret: ""
  # -- (object) Service monitor configuration
  serviceMonitor:
    # -- (bool) Create ServiceMonitor resource
    enabled: false
    # -- (string) Monitoring namespace
    namespace: ""
    # -- (object) Additional labels for ServiceMonitor
    labels: {}
    # -- (int) Scrape interval
    interval: 30s
    # -- (int) Scrape timeout
    scrapeTimeout: 10s
    # -- (string) Metrics path
    path: /v1/metrics

# -- (object) Network policy configuration
networkPolicy:
  # -- (bool) Enable network policy
  enabled: false
  # -- (list) Pod selector match labels
  podSelector: {}
  # -- (list) Ingress rules
  ingress: []
  # -- (list) Egress rules
  egress: []

# -- (object) Priority class configuration
priorityClassName: ""

# -- (object) Topology spread constraints
topologySpreadConstraints: []

# -- (object) Labels to add to all resources
labels: {}
