## Introduction

[eRPC](https://erpc.cloud/) is a fault-tolerant EVM (Ethereum Virtual Machine) RPC proxy and permanent caching solution designed for high-load scenarios like data indexing and frontend usage.

### Key Features

- **Automatic routing** between multiple upstream providers
- **Intelligent caching** to reduce load on blockchain nodes
- **Built-in monitoring** and tracing capabilities
- **Fault tolerance** with automatic failover
- **Rate limit handling** across multiple providers

### Benefits

- Improves performance from 5 RPS to 500 RPS
- Handles rate limits and provider failures automatically
- Provides a resilient infrastructure for blockchain data access
- Reduces costs by caching repeated requests

### Use Cases

- Web3 indexers
- Blockchain services
- High-traffic decentralized applications
- Data analytics platforms

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Prerequisites

- Kubernetes 1.19+
- Helm 3.2.0+
- PV provisioner support in the underlying infrastructure (if persistence is enabled)
- Redis instance reachable from the cluster (defaults target the bundled `support.redis` release)

## Connection Requirements

Configure Redis connectivity via the `global.datastores.erpc.redis` section (or override per-chart with `redis`).

| Purpose | Values path | Default |
| --- | --- | --- |
| Cache connector | `global.datastores.erpc.redis.cacheDb` | `redis://default:atk@redis:6379/0` |
| Shared state connector | `global.datastores.erpc.redis.sharedStateDb` | `redis://default:atk@redis:6379/1` |

Update the host, port, credentials, and database numbers to match your external Redis deployment.

## Installing the Chart

To install the chart with the release name `my-release`:

```console
helm install my-release .
```

The command deploys eRPC on the Kubernetes cluster in the default configuration. The [Parameters](#parameters) section lists the parameters that can be configured during installation.

> **Tip**: List all releases using `helm list`

## Uninstalling the Chart

To uninstall/delete the `my-release` deployment:

```console
helm delete my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## Parameters

{{ template "chart.valuesSection" . }}

## Configuration and installation details

### Setting up upstream providers

You can configure multiple upstream RPC providers in the `config.projects` section:

```yaml
config:
  projects:
    - id: my-project
      upstreams:
        - endpoint: http://node1:8545
        - endpoint: http://node2:8545
```

### Advanced configuration

#### Using external ConfigMap

Instead of inline configuration, you can reference an external ConfigMap:

```yaml
extraEnvVarsCM: my-erpc-config
```

#### Custom volumes and mounts

Mount additional configuration files or secrets:

```yaml
extraVolumes:
  - name: custom-config
    configMap:
      name: my-custom-config
extraVolumeMounts:
  - name: custom-config
    mountPath: /config/custom
    readOnly: true
```

### Exposing eRPC

#### LoadBalancer service

```yaml
service:
  type: LoadBalancer
  port: 4000
```

#### Ingress

```yaml
ingress:
  enabled: true
  hostname: erpc.example.com
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  tls: true
```

### Metrics and monitoring

eRPC exposes Prometheus metrics on port 4001 at the `/metrics` endpoint. The metrics port is configured via:

```yaml
service:
  metricsPort: 4001
```

To scrape metrics with Prometheus, the chart includes pod annotations:

```yaml
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "4001"
  prometheus.io/path: "/metrics"
```

### Resource limits and autoscaling

Configure resource limits and requests:

```yaml
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi
```

Enable horizontal pod autoscaling:

```yaml
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  builtInMetrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
```

### Network policies

To restrict network traffic to/from eRPC pods:

```yaml
networkPolicy:
  enabled: true
  allowExternal: false
  allowExternalEgress: false
  extraIngress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: my-app
      ports:
        - protocol: TCP
          port: 4000
```

## Troubleshooting

### eRPC pods are not starting

Check the pod logs:
```console
kubectl logs -l app.kubernetes.io/name=erpc
```

### Connection refused errors

Ensure your upstream endpoints are reachable from within the cluster:
```console
kubectl exec -it deploy/erpc -- curl -v http://your-upstream:8545
```

### Performance issues

Check if caching is working properly by monitoring metrics:
```console
kubectl port-forward svc/erpc 4001:4001
curl http://localhost:4001/metrics | grep erpc_cache
```
