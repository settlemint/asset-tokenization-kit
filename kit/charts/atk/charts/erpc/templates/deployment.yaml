apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.podLabels "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.podLabels "context" $ ) | nindent 8 }}
      {{- if or .Values.podAnnotations .Values.commonAnnotations }}
      {{- $podAnnotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.podAnnotations .Values.commonAnnotations ) "context" . ) }}
      annotations: {{- include "common.tplvalues.render" (dict "value" $podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "atk.common.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "erpc.serviceAccountName" . }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- $podSecurityContext := (include "erpc.securityContext.pod" (dict "context" $)) | fromYaml }}
      {{- if $podSecurityContext }}
      securityContext:
        {{- toYaml $podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "customLabels" .Values.podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "customLabels" .Values.podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- $waitForIt := include "atk.waitforit.containers" (dict "context" $ "config" .Values.initContainer.tcpCheck) }}
      {{- $extraInit := .Values.extraInitContainers | default (list) }}
      {{- if or $waitForIt (gt (len $extraInit) 0) }}
      initContainers:
        {{- if $waitForIt }}
{{ $waitForIt | nindent 8 }}
        {{- end }}
        {{- if gt (len $extraInit) 0 }}
{{ toYaml $extraInit | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: erpc
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.workingDir }}
          workingDir: {{ .Values.workingDir | quote }}
          {{- end }}
          {{- $containerSecurityContext := (include "erpc.securityContext.container" (dict "context" $)) | fromYaml }}
          {{- if $containerSecurityContext }}
          securityContext:
            {{- toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- $gcEnabled := default false .Values.runtime.gc.enabled }}
          {{- $extraEnvLen := len (default (list) .Values.extraEnvVars) }}
          {{- $memLimit := "" }}
          {{- if and .Values.resources .Values.resources.limits }}
            {{- $memLimit = default "" .Values.resources.limits.memory }}
          {{- end }}
          {{- $gomemlimit := "" }}
          {{- if $gcEnabled }}
            {{- $gomemlimit = include "erpc.gc.computeGOMEMLIMIT" (dict "limit" $memLimit "ratio" (default 1 .Values.runtime.gc.gomemlimitRatio) "override" (default "" .Values.runtime.gc.gomemlimitOverride)) }}
          {{- end }}
          {{- $hasGoGc := and $gcEnabled (or (ne (printf "%v" (default "" .Values.runtime.gc.gogc)) "") (ne $gomemlimit "")) }}
          {{- if or $hasGoGc (gt $extraEnvLen 0) }}
          env:
            {{- if $hasGoGc }}
            {{- if ne (printf "%v" (default "" .Values.runtime.gc.gogc)) "" }}
            - name: GOGC
              value: {{ printf "%v" .Values.runtime.gc.gogc | quote }}
            {{- end }}
            {{- if ne $gomemlimit "" }}
            - name: GOMEMLIMIT
              value: {{ $gomemlimit | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.metricsPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: {{ .Values.configMountPath | quote }}
              subPath: erpc.yaml
          {{- if .Values.envSecret.enabled }}
            - name: dotenv
              mountPath: {{ .Values.envSecret.mountPath | quote }}
              {{- if .Values.envSecret.subPath }}
              subPath: {{ .Values.envSecret.subPath | quote }}
              {{- end }}
              readOnly: true
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "common.names.fullname" . }}
      {{- if .Values.envSecret.enabled }}
        - name: dotenv
          secret:
            secretName: {{ required "envSecret.name must be provided when envSecret.enabled=true" .Values.envSecret.name }}
            {{- if .Values.envSecret.defaultMode }}
            defaultMode: {{ .Values.envSecret.defaultMode }}
            {{- end }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
