# -- (object) Global Docker image registry
global:
  # -- (string) Global Docker image registry
  imageRegistry: ""
  # -- (list) Global Docker registry secret names as an array
  imagePullSecrets: []
  # -- (string) Global StorageClass for Persistent Volume(s)
  storageClass: ""
  securityContexts: {}
  datastores: {}
  labels:
    kots.io/app-slug: settlemint-atk

# -- (string) String to fully override common.names.fullname
fullnameOverride: "erpc"

# -- (object) Labels to add to all deployed objects
commonLabels: {}

# -- (object) Annotations to add to all deployed objects
commonAnnotations: {}


# -- (object) eRPC image
image:
  # -- (string) eRPC image registry
  registry: ghcr.io
  # -- (string) eRPC image repository
  repository: erpc/erpc
  # -- (string) eRPC image tag (immutable tags are recommended)
  tag: "0.0.56"
  # -- (string) eRPC image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- (string) eRPC image pull policy
  pullPolicy: IfNotPresent
  # -- (list) eRPC image pull secrets
  pullSecrets: []

# -- (object) Redis parameters for cache/shared state connectivity (overrides global.datastores.erpc.redis)
redis: {}

# -- (int) Number of eRPC replicas to deploy
replicaCount: 1

# -- (object) Update strategy configuration for eRPC deployment
updateStrategy:
  # -- (string) eRPC deployment strategy type
  type: RollingUpdate
  # -- (object) eRPC deployment rolling update configuration parameters
  rollingUpdate: {}

# -- (string) Alternate scheduler
schedulerName: ""

# -- (string) eRPC pods' priority class name
priorityClassName: ""

# -- (list) Topology Spread Constraints for pod assignment
topologySpreadConstraints: []

# -- (object) Extra labels for eRPC pods
podLabels:
  app.kubernetes.io/component: erpc

# -- (object) Annotations for eRPC pods
podAnnotations:
  # -- (string) Enable prometheus scraping
  prometheus.io/scrape: "true"
  # -- (string) Prometheus metrics port
  prometheus.io/port: "4001"
  # -- (string) Prometheus metrics path
  prometheus.io/path: "/metrics"

# -- (string) Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
podAffinityPreset: ""

# -- (string) Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
podAntiAffinityPreset: soft

# -- (object) Node affinity preset configuration
nodeAffinityPreset:
  # -- (string) Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  type: ""
  # -- (string) Node label key to match. Ignored if `affinity` is set
  key: ""
  # -- (list) Node label values to match. Ignored if `affinity` is set
  values: []

# -- (object) Affinity for pod assignment
affinity: {}

# -- (object) Node labels for pod assignment
nodeSelector: {}

# -- (list) Tolerations for pod assignment
tolerations: []

# -- (object) Pod Security Context configuration (overrides global.securityContexts.pod)
podSecurityContext: {}

# -- (object) Container Security Context configuration (overrides global.securityContexts.container)
containerSecurityContext: {}

# -- (object) Runtime tuning
runtime:
  gc:
    # -- (bool) Enable automatic Go GC tuning based on container limits
    enabled: true
    # -- (int) Triggers garbage collection when heap grows by this percentage
    gogc: 30
    # -- (float) Fraction of the pod memory limit used to derive GOMEMLIMIT (set to 1.0 for 100%)
    gomemlimitRatio: 0.85
    # -- (string) Absolute fallback for GOMEMLIMIT (takes precedence when set, e.g. "2GiB")
    gomemlimitOverride: ""

# -- (string) Working directory for the eRPC container
workingDir: "/"

# -- (string) Path where the rendered configuration file will be mounted
configMountPath: "/erpc.yaml"

# -- (object) .env Secret mount configuration
envSecret:
  # -- (bool) Enable mounting a Secret containing a .env file
  enabled: false
  # -- (string) Name of the Secret containing the .env data (required when enabled)
  name: ""
  # -- (string) Path where the .env file will be mounted
  mountPath: "/.env"
  # -- (string) Optional subPath within the Secret to mount (defaults to the key named `.env`)
  subPath: ""
  # -- (int) File mode applied to the mounted Secret (decimal 420 = 0644)
  defaultMode: 420

# -- (object) eRPC containers resource requests and limits
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- (object) Configure eRPC containers' liveness probe
livenessProbe:
  # -- (bool) Enable livenessProbe on eRPC containers
  enabled: true
  # -- (int) Initial delay seconds for livenessProbe
  initialDelaySeconds: 10
  # -- (int) Period seconds for livenessProbe
  periodSeconds: 10
  # -- (int) Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- (int) Failure threshold for livenessProbe
  failureThreshold: 3
  # -- (int) Success threshold for livenessProbe
  successThreshold: 1
  # -- (object) HTTP get parameters for livenessProbe
  httpGet:
    # -- (string) Path for httpGet livenessProbe
    path: /healthcheck
    # -- (string) Port for httpGet livenessProbe
    port: http

# -- (object) Configure eRPC containers' readiness probe
readinessProbe:
  # -- (bool) Enable readinessProbe on eRPC containers
  enabled: true
  # -- (int) Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  # -- (int) Period seconds for readinessProbe
  periodSeconds: 10
  # -- (int) Timeout seconds for readinessProbe
  timeoutSeconds: 5
  # -- (int) Failure threshold for readinessProbe
  failureThreshold: 3
  # -- (int) Success threshold for readinessProbe
  successThreshold: 1
  # -- (object) HTTP get parameters for readinessProbe
  httpGet:
    # -- (string) Path for httpGet readinessProbe
    path: /healthcheck
    # -- (string) Port for httpGet readinessProbe
    port: http

# -- (object) Configure eRPC containers' startup probe
startupProbe:
  # -- (bool) Enable startupProbe on eRPC containers
  enabled: false
  # -- (int) Initial delay seconds for startupProbe
  initialDelaySeconds: 30
  # -- (int) Period seconds for startupProbe
  periodSeconds: 10
  # -- (int) Timeout seconds for startupProbe
  timeoutSeconds: 5
  # -- (int) Failure threshold for startupProbe
  failureThreshold: 10
  # -- (int) Success threshold for startupProbe
  successThreshold: 1

# -- (object) lifecycleHooks for the eRPC container(s) to automate configuration before or after startup
lifecycleHooks: {}

# -- (list) Optionally specify extra list of additional volumes for the eRPC pod(s)
extraVolumes: []

# -- (list) Optionally specify extra list of additional volumeMounts for the eRPC container(s)
extraVolumeMounts: []

# -- (list) Array with extra environment variables to add to eRPC nodes
extraEnvVars: []

# -- (string) Name of existing ConfigMap containing extra env vars for eRPC nodes
extraEnvVarsCM: ""

# -- (string) Name of existing Secret containing extra env vars for eRPC nodes
extraEnvVarsSecret: ""

initContainer:
  # Generic TCP check settings
  tcpCheck:
    enabled: true
    image:
      repository: ghcr.io/settlemint/btp-waitforit
      tag: v7.7.10
      pullPolicy: IfNotPresent
    timeout: 120 # Timeout in seconds for each dependency check
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi
    dependencies:
      # Add internal Kubernetes service endpoints (service-name:port) for critical dependencies
      - name: besu-rpc
        endpoint: "besu-node-rpc-0.besu-node-rpc:8545"
      - name: redis
        endpoint: '{{ include "erpc.redis.endpoint" (dict "context" $) }}'

# -- (list) Additional init containers appended verbatim to the workload spec
extraInitContainers: []

# -- (object) Service parameters
service:
  # -- (string) eRPC service type
  type: ClusterIP
  # -- (int) eRPC service HTTP port
  port: 4000
  # -- (int) eRPC service metrics port
  metricsPort: 4001
  # -- (string) Node port for HTTP
  nodePort: ""
  # -- (string) Node port for metrics
  metricsNodePort: ""
  # -- (string) eRPC service Cluster IP
  clusterIP: ""
  # -- (string) eRPC service Load Balancer IP
  loadBalancerIP: ""
  # -- (list) eRPC service Load Balancer sources
  loadBalancerSourceRanges: []
  # -- (string) eRPC service external traffic policy
  externalTrafficPolicy: Cluster
  # -- (object) Additional custom annotations for eRPC service
  annotations: {}
  # -- (list) Extra ports to expose in the eRPC service (normally used with the `sidecar` value)
  extraPorts: []
  # -- (string) Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  sessionAffinity: None
  # -- (object) Additional settings for the sessionAffinity
  sessionAffinityConfig: {}

# -- (object) Ingress parameters
ingress:
  # -- (bool) Enable ingress record generation for eRPC
  enabled: true
  # -- (string) Ingress path type
  pathType: ImplementationSpecific
  # -- (string) Force Ingress API version (automatically detected if not set)
  apiVersion: ""
  # -- (string) Default host for the ingress record
  hostname: besu.k8s.orb.local
  # -- (string) IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ingressClassName: "atk-nginx"
  # -- (string) Default path for the ingress record
  path: /
  # -- (object) Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  annotations: {}
  # -- (bool) Enable TLS configuration for the host defined at `ingress.hostname` parameter
  tls: false
  # -- (bool) Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  selfSigned: false
  # -- (list) An array with additional hostname(s) to be covered with the ingress record
  extraHosts: []
  # -- (list) An array with additional arbitrary paths that may need to be added to the ingress under the main host
  extraPaths: []
  # -- (list) TLS configuration for additional hostname(s) to be covered with this ingress record
  extraTls: []
  # -- (list) Custom TLS certificates as secrets
  secrets: []
  # -- (list) Additional rules to be covered with this ingress record
  extraRules: []

# -- OpenShift Route parameters
openShiftRoute:
  # -- Enable OpenShift route creation for eRPC
  enabled: false
  # -- Additional annotations for the OpenShift route resource
  annotations: {}
  # -- Hostname exposed via the OpenShift route
  host: besu.k8s.orb.local
  # -- HTTP path exposed via the OpenShift route
  path: /
  # -- Wildcard policy applied to the route
  wildcardPolicy: None
  # -- Service port configuration for the route target
  port:
    # -- Service target port name (must exist on the eRPC service)
    targetPort: http
  # -- Primary service weight configuration
  to:
    # -- Weight assigned to the eRPC service backend
    weight: 100
  # -- Additional backends for weighted routing
  alternateBackends: []
  # -- TLS configuration for the OpenShift route
  tls: null

# -- Service account for eRPC pods
serviceAccount:
  # -- (bool) Specifies whether a ServiceAccount should be created
  create: true
  # -- (string) The name of the ServiceAccount to use.
  name: ""
  # -- (bool) Automount service account token for the deployment controller service account
  automountServiceAccountToken: false
  # -- (object) Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
  annotations: {}
  # -- (object) Extra labels to be added to the service account
  labels: {}

# -- (object) Autoscaling configuration for eRPC
autoscaling:
  # -- (bool) Enable autoscaling for eRPC
  enabled: false
  # -- (int) Maximum number of eRPC replicas
  maxReplicas: 3
  # -- (int) Minimum number of eRPC replicas
  minReplicas: 1
  # -- (list) Built-in metrics configuration
  builtInMetrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  # -- (list) Custom metrics configuration
  customMetrics: []

# -- (object) Pod disruption budget configuration
pdb:
  # -- (bool) If true, create a pod disruption budget for pods.
  enabled: false
  # -- (string) Minimum number/percentage of pods that should remain scheduled
  minAvailable: ""
  # -- (string) Maximum number/percentage of pods that may be made unavailable. Defaults to 1 if both pdb.minAvailable and pdb.maxUnavailable are empty.
  maxUnavailable: ""

# -- (object) Network policies configuration
networkPolicy:
  # -- (bool) Enable creation of NetworkPolicy resources
  enabled: false
  # -- (bool) The Policy model to apply
  allowExternal: true
  # -- (bool) Allow the pod to access any range of port and all destinations.
  allowExternalEgress: true
  # -- (bool) Allow access from pods with client label set to "true". Ignored if `networkPolicy.allowExternal` is true.
  addExternalClientAccess: true
  # -- (list) Add extra ingress rules to the NetworkPolicy
  extraIngress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: dapp
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: txsigner
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
        - podSelector: {}  # Same namespace
      ports:
        - protocol: TCP
          port: 4000  # RPC port
        - protocol: TCP
          port: 4001  # Metrics port
  # -- (list) Add extra egress rules to the NetworkPolicy (ignored if allowExternalEgress=true)
  extraEgress:
    # Allow DNS resolution
    - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
    # Allow access to Besu nodes
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: besu-statefulset
      ports:
        - protocol: TCP
          port: 8545  # RPC
  # -- (object) Ingress rules configuration
  ingressRules:
    # -- (object) Access restrictions configuration
    accessOnlyFrom:
      # -- (bool) Enable ingress rule that makes eRPC only accessible from a particular origin.
      enabled: false
      # -- (object) Namespace selector label that is allowed to access eRPC. This label will be used to identified allowed namespace(s).
      namespaceSelector: {}
      # -- (object) Pods selector label that is allowed to access eRPC. This label will be used to identified allowed pod(s).
      podSelector: {}

# -- (object) Test parameters
tests:
  # -- (object) Image for test pods
  image:
    # -- (string) Test image registry
    registry: docker.io
    # -- (string) Test image repository
    repository: busybox
    # -- (string) Test image tag
    tag: 1.37.0
    # -- (string) Test image pull policy
    pullPolicy: IfNotPresent

# -- (object) eRPC configuration
config:
  # -- (string) Log level for eRPC
  logLevel: info
  # -- (object) Server configuration
  server:
    httpHostV4: 0.0.0.0
    httpPort: 4000
    waitBeforeShutdown: 30s
    waitAfterShutdown: 30s
  # -- (object) Metrics endpoint configuration
  metrics:
    enabled: true
    hostV4: 0.0.0.0
    port: 4001
  # -- (list) Array of project configurations (will be overridden by parent chart)
  #    Chain IDs default from .Values.global.chainId when omitted (see configmap template).
  projects:
    - id: settlemint
      networks:
        - architecture: evm
          evm:
            integrity:
              enforceHighestBlock: true
              enforceGetLogsBlockRange: true
          directiveDefaults:
            retryEmpty: true
          failsafe:
            - matchMethod: "eth_getLogs"
              timeout:
                duration: 45s
              retry:
                maxAttempts: 3
                delay: 500ms
                backoffFactor: 2
                backoffMaxDelay: 10s
                jitter: 300ms
              hedge:
                quantile: 0.9
                minDelay: 200ms
                maxDelay: 4s
                maxCount: 1
            - matchMethod: "trace_*|debug_*|arbtrace_*"
              timeout:
                duration: 90s
              retry:
                maxAttempts: 1
            - matchMethod: "eth_getBlock*|eth_getTransaction*"
              timeout:
                duration: 6s
              retry:
                maxAttempts: 2
                delay: 200ms
                backoffFactor: 1.5
                backoffMaxDelay: 3s
                jitter: 150ms
            - matchMethod: "*"
              matchFinality:
                - unfinalized
                - realtime
              timeout:
                duration: 4s
              retry:
                maxAttempts: 2
                delay: 150ms
                jitter: 150ms
              hedge:
                delay: 250ms
                maxCount: 1
            - matchMethod: "*"
              matchFinality:
                - finalized
              timeout:
                duration: 20s
              retry:
                maxAttempts: 4
                delay: 400ms
                backoffFactor: 1.8
                backoffMaxDelay: 8s
                jitter: 250ms
            - matchMethod: "*"
              timeout:
                duration: 12s
              retry:
                maxAttempts: 3
                delay: 300ms
                backoffFactor: 1.4
                backoffMaxDelay: 5s
                jitter: 200ms
              hedge:
                quantile: 0.95
                minDelay: 120ms
                maxDelay: 2s
                maxCount: 2
      upstreams:
        - id: besu-node-rpc-0
          endpoint: http://besu-node-rpc-0.besu-node-rpc:8545
          evm: {}
          failsafe:
            - matchMethod: "*"
              circuitBreaker:
                failureThresholdCount: 40
                failureThresholdCapacity: 80
                halfOpenAfter: 120s
                successThresholdCount: 3
                successThresholdCapacity: 10
        - id: besu-node-rpc-1
          endpoint: http://besu-node-rpc-1.besu-node-rpc:8545
          evm: {}
          failsafe:
            - matchMethod: "*"
              circuitBreaker:
                failureThresholdCount: 40
                failureThresholdCapacity: 80
                halfOpenAfter: 120s
                successThresholdCount: 3
                successThresholdCapacity: 10
  # -- (object) Database configuration for caching
  database:
    evmJsonRpcCache:
      connectors:
        - id: redis-cache
          driver: redis
          redis:
            uri: '{{ include "erpc.redis.uriFor" (dict "context" $ "dbKey" "cacheDb" "queryKey" "cacheQuery") }}'
      compression:
        enabled: true
        algorithm: zstd
        zstdLevel: default
        threshold: 1024
      policies:
        - network: "*"
          method: "*"
          finality: finalized
          connector: redis-cache
          ttl: 0
        - network: "*"
          method: "*"
          finality: unfinalized
          connector: redis-cache
          ttl: 5s
        - network: "*"
          method: "*"
          finality: realtime
          connector: redis-cache
          ttl: 5s
    sharedState:
      clusterKey: "atk-erpc-shared"
      connector:
        driver: redis
        redis:
          uri: '{{ include "erpc.redis.uriFor" (dict "context" $ "dbKey" "sharedStateDb" "queryKey" "sharedStateQuery") }}'
      fallbackTimeout: 5s
      lockTtl: 30s
