# -- Global Docker image registry
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker registry secret names as an array
  imagePullSecrets: []
  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""
  securityContexts:
    # -- Pod security context defaults shared across charts
    pod:
      fsGroup: 101337
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    # -- Container security context defaults shared across charts
    container:
      runAsUser: 101337
      runAsGroup: 101337
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
  datastores:
    default:
      redis:
        host: redis
        port: 6379
        username: default
        password: atk
        db: 0
        query: "dial_timeout=5s&read_timeout=2s&write_timeout=2s&pool_size=50"
    erpc:
      redis:
        # -- Default Redis connection settings shared across eRPC components
        cacheDb: 0
        sharedStateDb: 1
        cacheQuery: "dial_timeout=5s&read_timeout=2s&write_timeout=2s&pool_size=50"
        sharedStateQuery: "dial_timeout=5s&read_timeout=2s&write_timeout=2s&pool_size=20"

# -- String to fully override common.names.fullname
fullnameOverride: "erpc"

# -- Labels to add to all deployed objects
commonLabels: {}

# -- Annotations to add to all deployed objects
commonAnnotations: {}


# -- eRPC image
image:
  # -- eRPC image registry
  registry: ghcr.io
  # -- eRPC image repository
  repository: erpc/erpc
  # -- eRPC image tag (immutable tags are recommended)
  tag: "0.0.56"
  # -- eRPC image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- eRPC image pull policy
  pullPolicy: IfNotPresent
  # -- eRPC image pull secrets
  pullSecrets: []

# -- Redis parameters for cache/shared state connectivity (overrides global.datastores.erpc.redis)
redis: {}

# -- Number of eRPC replicas to deploy
replicaCount: 1

# -- Update strategy configuration for eRPC deployment
updateStrategy:
  # -- eRPC deployment strategy type
  type: RollingUpdate
  # -- eRPC deployment rolling update configuration parameters
  rollingUpdate: {}

# -- Alternate scheduler
schedulerName: ""

# -- eRPC pods' priority class name
priorityClassName: ""

# -- Topology Spread Constraints for pod assignment
topologySpreadConstraints: []

# -- Extra labels for eRPC pods
podLabels: {}

# -- Annotations for eRPC pods
podAnnotations:
  # -- Enable prometheus scraping
  prometheus.io/scrape: "true"
  # -- Prometheus metrics port
  prometheus.io/port: "4001"
  # -- Prometheus metrics path
  prometheus.io/path: "/metrics"

# -- Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
podAffinityPreset: ""

# -- Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
podAntiAffinityPreset: soft

# -- Node affinity preset configuration
nodeAffinityPreset:
  # -- Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  type: ""
  # -- Node label key to match. Ignored if `affinity` is set
  key: ""
  # -- Node label values to match. Ignored if `affinity` is set
  values: []

# -- Affinity for pod assignment
affinity: {}

# -- Node labels for pod assignment
nodeSelector: {}

# -- Tolerations for pod assignment
tolerations: []

# -- Pod Security Context configuration (overrides global.securityContexts.pod)
podSecurityContext: {}

# -- Container Security Context configuration (overrides global.securityContexts.container)
containerSecurityContext: {}

# -- Runtime tuning
runtime:
  gc:
    # -- Enable automatic Go GC tuning based on container limits
    enabled: true
    # -- Triggers garbage collection when heap grows by this percentage
    gogc: 30
    # -- Fraction of the pod memory limit used to derive GOMEMLIMIT (set to 1.0 for 100%)
    gomemlimitRatio: 0.85
    # -- Absolute fallback for GOMEMLIMIT (takes precedence when set, e.g. "2GiB")
    gomemlimitOverride: ""

# -- Working directory for the eRPC container
workingDir: "/"

# -- Path where the rendered configuration file will be mounted
configMountPath: "/erpc.yaml"

# -- .env Secret mount configuration
envSecret:
  # -- Enable mounting a Secret containing a .env file
  enabled: false
  # -- Name of the Secret containing the .env data (required when enabled)
  name: ""
  # -- Path where the .env file will be mounted
  mountPath: "/.env"
  # -- Optional subPath within the Secret to mount (defaults to the key named `.env`)
  subPath: ""
  # -- File mode applied to the mounted Secret (decimal 420 = 0644)
  defaultMode: 420

# -- eRPC containers resource requests and limits
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Configure eRPC containers' liveness probe
livenessProbe:
  # -- Enable livenessProbe on eRPC containers
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 10
  # -- Period seconds for livenessProbe
  periodSeconds: 10
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- Failure threshold for livenessProbe
  failureThreshold: 3
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- HTTP get parameters for livenessProbe
  httpGet:
    # -- Path for httpGet livenessProbe
    path: /healthcheck
    # -- Port for httpGet livenessProbe
    port: http

# -- Configure eRPC containers' readiness probe
readinessProbe:
  # -- Enable readinessProbe on eRPC containers
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  # -- Period seconds for readinessProbe
  periodSeconds: 10
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 5
  # -- Failure threshold for readinessProbe
  failureThreshold: 3
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- HTTP get parameters for readinessProbe
  httpGet:
    # -- Path for httpGet readinessProbe
    path: /healthcheck
    # -- Port for httpGet readinessProbe
    port: http

# -- Configure eRPC containers' startup probe
startupProbe:
  # -- Enable startupProbe on eRPC containers
  enabled: false
  # -- Initial delay seconds for startupProbe
  initialDelaySeconds: 30
  # -- Period seconds for startupProbe
  periodSeconds: 10
  # -- Timeout seconds for startupProbe
  timeoutSeconds: 5
  # -- Failure threshold for startupProbe
  failureThreshold: 10
  # -- Success threshold for startupProbe
  successThreshold: 1

# -- lifecycleHooks for the eRPC container(s) to automate configuration before or after startup
lifecycleHooks: {}

# -- Optionally specify extra list of additional volumes for the eRPC pod(s)
extraVolumes: []

# -- Optionally specify extra list of additional volumeMounts for the eRPC container(s)
extraVolumeMounts: []

# -- Array with extra environment variables to add to eRPC nodes
extraEnvVars: []

# -- Name of existing ConfigMap containing extra env vars for eRPC nodes
extraEnvVarsCM: ""

# -- Name of existing Secret containing extra env vars for eRPC nodes
extraEnvVarsSecret: ""

initContainer:
  # Generic TCP check settings
  tcpCheck:
    enabled: true
    image:
      repository: ghcr.io/settlemint/btp-waitforit
      tag: v7.7.10
      pullPolicy: IfNotPresent
    timeout: 120 # Timeout in seconds for each dependency check
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi
    dependencies:
      # Add internal Kubernetes service endpoints (service-name:port) for critical dependencies
      - name: besu-rpc
        endpoint: "besu-node-rpc-0.besu-node-rpc:8545"
      - name: redis
        endpoint: '{{ include "erpc.redis.endpoint" (dict "context" $) }}'

# -- Service parameters
service:
  # -- eRPC service type
  type: ClusterIP
  # -- eRPC service HTTP port
  port: 4000
  # -- eRPC service metrics port
  metricsPort: 4001
  # -- Node port for HTTP
  nodePort: ""
  # -- Node port for metrics
  metricsNodePort: ""
  # -- eRPC service Cluster IP
  clusterIP: ""
  # -- eRPC service Load Balancer IP
  loadBalancerIP: ""
  # -- eRPC service Load Balancer sources
  loadBalancerSourceRanges: []
  # -- eRPC service external traffic policy
  externalTrafficPolicy: Cluster
  # -- Additional custom annotations for eRPC service
  annotations: {}
  # -- Extra ports to expose in the eRPC service (normally used with the `sidecar` value)
  extraPorts: []
  # -- Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  sessionAffinity: None
  # -- Additional settings for the sessionAffinity
  sessionAffinityConfig: {}

# -- Ingress parameters
ingress:
  # -- Enable ingress record generation for eRPC
  enabled: true
  # -- Ingress path type
  pathType: ImplementationSpecific
  # -- Force Ingress API version (automatically detected if not set)
  apiVersion: ""
  # -- Default host for the ingress record
  hostname: besu.k8s.orb.local
  # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ingressClassName: "atk-nginx"
  # -- Default path for the ingress record
  path: /
  # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  annotations: {}
  # -- Enable TLS configuration for the host defined at `ingress.hostname` parameter
  tls: false
  # -- Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  selfSigned: false
  # -- An array with additional hostname(s) to be covered with the ingress record
  extraHosts: []
  # -- An array with additional arbitrary paths that may need to be added to the ingress under the main host
  extraPaths: []
  # -- TLS configuration for additional hostname(s) to be covered with this ingress record
  extraTls: []
  # -- Custom TLS certificates as secrets
  secrets: []
  # -- Additional rules to be covered with this ingress record
  extraRules: []

# -- OpenShift Route parameters
openShiftRoute:
  # -- Enable OpenShift route creation for eRPC
  enabled: false
  # -- Additional annotations for the OpenShift route resource
  annotations: {}
  # -- Hostname exposed via the OpenShift route
  host: besu.k8s.orb.local
  # -- HTTP path exposed via the OpenShift route
  path: /
  # -- Wildcard policy applied to the route
  wildcardPolicy: None
  # -- Service port configuration for the route target
  port:
    # -- Service target port name (must exist on the eRPC service)
    targetPort: http
  # -- Primary service weight configuration
  to:
    # -- Weight assigned to the eRPC service backend
    weight: 100
  # -- Additional backends for weighted routing
  alternateBackends: []
  # -- TLS configuration for the OpenShift route
  tls: null

# -- Service account for eRPC pods
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  name: ""
  # -- Automount service account token for the deployment controller service account
  automountServiceAccountToken: false
  # -- Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
  annotations: {}
  # -- Extra labels to be added to the service account
  labels: {}

# -- Autoscaling configuration for eRPC
autoscaling:
  # -- Enable autoscaling for eRPC
  enabled: false
  # -- Maximum number of eRPC replicas
  maxReplicas: 3
  # -- Minimum number of eRPC replicas
  minReplicas: 1
  # -- Built-in metrics configuration
  builtInMetrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  # -- Custom metrics configuration
  customMetrics: []

# -- Pod disruption budget configuration
pdb:
  # -- If true, create a pod disruption budget for pods.
  enabled: false
  # -- Minimum number/percentage of pods that should remain scheduled
  minAvailable: ""
  # -- Maximum number/percentage of pods that may be made unavailable. Defaults to 1 if both pdb.minAvailable and pdb.maxUnavailable are empty.
  maxUnavailable: ""

# -- Network policies configuration
networkPolicy:
  # -- Enable creation of NetworkPolicy resources
  enabled: false
  # -- The Policy model to apply
  allowExternal: true
  # -- Allow the pod to access any range of port and all destinations.
  allowExternalEgress: true
  # -- Allow access from pods with client label set to "true". Ignored if `networkPolicy.allowExternal` is true.
  addExternalClientAccess: true
  # -- Add extra ingress rules to the NetworkPolicy
  extraIngress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: dapp
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: txsigner
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
        - podSelector: {}  # Same namespace
      ports:
        - protocol: TCP
          port: 4000  # RPC port
        - protocol: TCP
          port: 4001  # Metrics port
  # -- Add extra egress rules to the NetworkPolicy (ignored if allowExternalEgress=true)
  extraEgress:
    # Allow DNS resolution
    - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
    # Allow access to Besu nodes
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: besu-statefulset
      ports:
        - protocol: TCP
          port: 8545  # RPC
  # -- Ingress rules configuration
  ingressRules:
    # -- Access restrictions configuration
    accessOnlyFrom:
      # -- Enable ingress rule that makes eRPC only accessible from a particular origin.
      enabled: false
      # -- Namespace selector label that is allowed to access eRPC. This label will be used to identified allowed namespace(s).
      namespaceSelector: {}
      # -- Pods selector label that is allowed to access eRPC. This label will be used to identified allowed pod(s).
      podSelector: {}

# -- Test parameters
tests:
  # -- Image for test pods
  image:
    # -- Test image registry
    registry: docker.io
    # -- Test image repository
    repository: busybox
    # -- Test image tag
    tag: 1.37.0
    # -- Test image pull policy
    pullPolicy: IfNotPresent

# -- eRPC configuration
config:
  # -- Log level for eRPC
  logLevel: info
  # -- Server configuration
  server:
    httpHostV4: 0.0.0.0
    httpPort: 4000
    waitBeforeShutdown: 30s
    waitAfterShutdown: 30s
  # -- Metrics endpoint configuration
  metrics:
    enabled: true
    hostV4: 0.0.0.0
    port: 4001
  # -- Array of project configurations (will be overridden by parent chart)
  projects: []
  # -- Database configuration for caching
  database:
    evmJsonRpcCache:
      connectors:
        - id: redis-cache
          driver: redis
          redis:
            uri: '{{ include "erpc.redis.uriFor" (dict "context" $ "dbKey" "cacheDb" "queryKey" "cacheQuery") }}'
      compression:
        enabled: true
        algorithm: zstd
        zstdLevel: default
        threshold: 1024
      policies:
        - network: "*"
          method: "*"
          finality: finalized
          connector: redis-cache
          ttl: 0
        - network: "*"
          method: "*"
          finality: unfinalized
          connector: redis-cache
          ttl: 5s
        - network: "*"
          method: "*"
          finality: realtime
          connector: redis-cache
          ttl: 5s
    sharedState:
      clusterKey: "atk-erpc-shared"
      connector:
        driver: redis
        redis:
          uri: '{{ include "erpc.redis.uriFor" (dict "context" $ "dbKey" "sharedStateDb" "queryKey" "sharedStateQuery") }}'
      fallbackTimeout: 5s
      lockTtl: 30s
