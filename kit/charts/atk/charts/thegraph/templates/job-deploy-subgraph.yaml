{{- if .Values.job.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: job-{{ .Values.job.fullnameOverride }}-deploy-subgraph
  labels:
    {{- include "thegraph.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      {{- with .Values.job.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "thegraph.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      {{- include "atk.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.job.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.job.podSecurityContext | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-graph-node
          image: "{{ .Values.job.initContainer.graphNodeCheck.image.registry }}/{{ .Values.job.initContainer.graphNodeCheck.image.repository }}:{{ .Values.job.initContainer.graphNodeCheck.image.tag }}"
          imagePullPolicy: {{ .Values.job.initContainer.graphNodeCheck.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              # Determine service suffix using Helm within shell variable assignment
              SERVICE_SUFFIX="{{- if index .Values "graph-node" "graphNodeGroups" "combined" "enabled" | default false -}}-combined{{- else -}}-query{{- end -}}"
              # Construct full service name
              SERVICE_NAME="{{ index .Values "graph-node" "fullnameOverride" | default (printf "%s-%s" .Release.Name "graph-node") }}${SERVICE_SUFFIX}"
              PORT="8020"
              SECONDS_WAITED=0

              echo "Waiting for graph-node service ${SERVICE_NAME}:${PORT} to be available..."

              until nc -z -w 2 "${SERVICE_NAME}" "${PORT}"; do
                # Optional: Add timeout check here if WAIT_TIMEOUT is used
                echo "Service ${SERVICE_NAME}:${PORT} not ready yet, waiting 5s..."
                sleep 5
                # Optional: Increment SECONDS_WAITED here if timeout is used
              done

              echo "Service ${SERVICE_NAME}:${PORT} is available, proceeding..."
        - name: clone-repo
          image: "{{ .Values.job.initContainer.cloneRepo.image.registry }}/{{ .Values.job.initContainer.cloneRepo.image.repository }}:{{ .Values.job.initContainer.cloneRepo.image.tag }}"
          imagePullPolicy: {{ .Values.job.initContainer.cloneRepo.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              set -ex
              if [ -z "$(ls -A /workspace)" ]; then
                git clone https://github.com/settlemint/asset-tokenization-kit.git /workspace
                cd /workspace
                git checkout v{{ .Values.job.initContainer.cloneRepo.atkTag }}
              else
                cd /workspace
                git pull
              fi
          volumeMounts:
            - name: workspace
              mountPath: /workspace
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.job.securityContext | nindent 12 }}
          image: {{ .Values.job.image.repository }}:{{ .Values.job.image.tag }}
          imagePullPolicy: {{ .Values.job.image.pullPolicy }}
          resources:
            {{- toYaml .Values.job.resources | nindent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              set -ex

              echo "Updating apt..."
              apt-get update
              apt-get install -y jq yq curl git

              echo "Checking for Foundry..."
              if ! command -v forge &> /dev/null
              then
                echo "Foundry not found, installing..."
                curl -L https://foundry.paradigm.xyz | bash
                . /root/.bashrc
                foundryup
              else
                echo "Foundry is already installed."
              fi

              echo "Installing Bun..."
              npm install -g bun

              # Verify Bun installation
              bun --version

              echo "Installing dependencies..."
              cd /workspace
              bun install

              echo "Dependencies installed"
              bunx turbo dependencies

              # Determine service suffix using Helm within shell variable assignment
              SERVICE_SUFFIX="{{- if index .Values "graph-node" "graphNodeGroups" "combined" "enabled" | default false -}}-combined{{- else -}}-query{{- end -}}"
              # Construct full service name
              SERVICE_NAME="{{ index .Values "graph-node" "fullnameOverride" | default (printf "%s-%s" .Release.Name "graph-node") }}${SERVICE_SUFFIX}"

              # Replace localhost with dynamically determined graph-node service
              echo "Configuring subgraph deployment to use service: http://${SERVICE_NAME}:8020"
              sed -i "s|http://localhost:8020|http://${SERVICE_NAME}:8020|g" /workspace/kit/subgraph/graph-local-deploy.sh
              sed -i 's/yq -i/yq -i -y/g' /workspace/kit/subgraph/graph-local-deploy.sh

              echo "Build forge contracts..."
              cd /workspace/kit/contracts
              forge soldeer install && find dependencies -name .git -type d -exec rm -rf {} +
              forge build --sizes

              echo "Build hardhat contracts..."
              npx hardhat compile

              echo "Build genesis..."
              bash -ex genesis-output.sh

              echo "Build abi-output..."
              bash -ex abi-output.sh

              echo "Start hardhat node..."
              nohup npx hardhat node &

              echo "Deploy contracts..."
              bun deploy:local

              echo "Build subgraph..."
              cd /workspace/kit/subgraph
              npx graph codegen
              graph build --ipfs=https://ipfs.console.settlemint.com subgraph.yaml | tee subgraph-output.txt

              /bin/bash /workspace/kit/subgraph/graph-local-deploy.sh

          volumeMounts:
            - name: workspace
              mountPath: /workspace
      volumes:
        - name: workspace
          persistentVolumeClaim:
            claimName: {{ include "thegraph.fullname" . }}-workspace
  backoffLimit: 0
{{- end }}