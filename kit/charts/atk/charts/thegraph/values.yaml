global:
  labels: {}
# https://github.com/graphops/launchpad-charts/blob/main/charts/graph-node/values.yaml
graph-node:
  fullnameOverride: graph-node
  image:
    # -- Image for Graph Node
    repository: graphprotocol/graph-node
    pullPolicy: IfNotPresent
    tag: "v0.39.1"
  customSecret:
    PGUSER: thegraph
    PGPASSWORD: atk
  graphNodeDefaults:
    imagePullSecrets: []
    extraInitContainers:
      - name: wait-for-postgresql-ready
        image: docker.io/postgres
        command:
          - /bin/sh
          - -c
          - |
            set -e
            echo "Waiting for PostgreSQL to be ready..."

            # Add random delay to prevent all nodes from connecting simultaneously
            RANDOM_DELAY=$((RANDOM % 30 + 5))
            echo "Adding random delay of ${RANDOM_DELAY} seconds to stagger connections..."
            sleep $RANDOM_DELAY

            # Function to test PostgreSQL connection
            test_postgres() {
              pg_isready -h postgresql-pgpool -p 5432 -U thegraph && \
              psql -h postgresql-pgpool -p 5432 -U thegraph -d thegraph -c "SELECT 1;" > /dev/null 2>&1
            }

            # Wait with exponential backoff
            RETRY_COUNT=0
            MAX_RETRIES=30
            WAIT_TIME=2

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if test_postgres; then
                echo "PostgreSQL is ready!"
                exit 0
              fi

              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "PostgreSQL not ready (attempt $RETRY_COUNT/$MAX_RETRIES). Waiting ${WAIT_TIME}s..."
              sleep $WAIT_TIME

              # Exponential backoff with max of 30 seconds
              WAIT_TIME=$((WAIT_TIME * 2))
              if [ $WAIT_TIME -gt 30 ]; then
                WAIT_TIME=30
              fi
            done

            echo "PostgreSQL failed to become ready after $MAX_RETRIES attempts"
            exit 1
        env:
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: thegraph-pg-secret
                key: PGPASSWORD
    affinityPresets:
      # -- Create anti-affinity rule to deter scheduling replicas on the same host
      antiAffinityByHostname: false
    # -- Environment variable defaults for all Graph Node groups
    env:
      # -- Hostname of the primary shard PostgreSQL server
      PRIMARY_SUBGRAPH_DATA_PGHOST: postgresql-pgpool
      # -- Port for the primary shard PostgreSQL server
      PRIMARY_SUBGRAPH_DATA_PGPORT: 5432
      # -- Name of the primary shard database to use
      PRIMARY_SUBGRAPH_DATA_PGDATABASE: "thegraph"
      # -- The URL for your IPFS node
      IPFS: "https://ipfs.console.settlemint.com"
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: 'synced'
      GRAPH_ETH_CALL_GAS: '50000000'
      GRAPH_GETH_ETH_CALL_ERRORS: 'out of gas'
      GRAPH_KILL_IF_UNRESPONSIVE: 'true'
      ETHEREUM_POLLING_INTERVAL: '1000'
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: 'true'
      GRAPH_QUERY_CACHE_MAX_MEM: '3000'
      GRAPH_QUERY_CACHE_BLOCKS: '6'
      GRAPH_QUERY_CACHE_STALE_PERIOD: '1000'
      GRAPH_LOG: 'info'
      GRAPH_LOG_QUERY_TIMING: 'gql'
      GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: 'true'
      GRAPH_PARALLEL_BLOCK_CONSTRAINTS: 'true'
      GRAPH_ETHEREUM_CLEANUP_BLOCKS: 'true'
      GRAPH_CHAIN_HEAD_WATCHER_TIMEOUT: '5'
      GRAPH_LOAD_WINDOW_SIZE: '3600'
      GRAPH_LOAD_BIN_SIZE: '10'
      GRAPH_POSTPONE_ATTRIBUTE_INDEX_CREATION: 'true'
      GRAPH_STORE_WRITE_BATCH_DURATION: '0'
      GRAPH_STORE_WRITE_BATCH_SIZE: '0'
      GRAPH_MAX_GAS_PER_HANDLER: '1_000_000_000_000_000'
      GRAPH_MAX_SPEC_VERSION: '1.2.0'
      SUBGRAPH: kit:QmbA53S3UUeoxdNQV9PGUDN7WAgFcHT6qU9FiH8QXXGv3z
      GRAPH_ETHEREUM_REQUEST_RETRIES: '10'
      GRAPH_ETHEREUM_BLOCK_BATCH_SIZE: '100'
      GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE: '1000'
      GRAPH_ETHEREUM_TARGET_TRIGGERS_PER_BLOCK_RANGE: '100'
      GRAPH_ENABLE_PROMETHEUS_METRICS: 'true'
      GRAPH_PROMETHEUS_HOST: '0.0.0.0'
      GRAPH_DISABLE_GRAFTS: 'false'
      GRAPH_STATIC_FILTERS_THRESHOLD: '10000'
      GRAPH_IPFS_TIMEOUT: '30'
      GRAPH_ETHEREUM_BLOCK_INGESTOR_MAX_CONCURRENT_JSON_RPC_CALLS: '100'
    secretEnv:
      PRIMARY_SUBGRAPH_DATA_PGUSER:
        # -- Name of the secret that contains your PG username
        secretName: thegraph-pg-secret
        # -- Name of the data key in the secret that contains your PG username
        key: PGUSER
      PRIMARY_SUBGRAPH_DATA_PGPASSWORD:
        # -- Name of the secret that contains your PG password
        secretName: thegraph-pg-secret
        # -- Name of the data key in the secret that contains your PG password
        key: PGPASSWORD
  graphNodeGroups:
    query:
      enabled: true
      replicaCount: 1
      env:
        node_role: query-node # this key must be lowercase
  # -- Blockchain configuration for Graph Node
  chains:
    # -- Ethereum Mainnet
    settlemint:
      # -- Enable this configuring graph-node with this chain
      enabled: true
      # -- The database shard to use for this chain
      shard: primary
      ## -- A list of JSON-RPC endpoints for this node (you should override this list with your own configuration)
      provider:
        - # -- Label for a JSON-RPC endpoint
          label: erpc
          details:
            # -- Type of Provider: web3
            type: web3
            # -- URL for JSON-RPC endpoint
            url: http://erpc:4000
            # -- Data capabilities this node has
            features: [archive, traces]
  ingress:
    enabled: true
    className: "atk-nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: 'true'
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    hosts:
      - host: graph.k8s.orb.local
        paths:
          - path: /(.*)
            pathType: ImplementationSpecific
            port: 8000
            serviceName: graph-node-query
          - path: /ws/?(.*)
            pathType: ImplementationSpecific
            port: 8001
            serviceName: graph-node-query
          - path: /admin/?(.*)
            pathType: ImplementationSpecific
            port: 8020
            serviceName: graph-node-query
          - path: /indexer/?(.*)
            pathType: ImplementationSpecific
            port: 8030
            serviceName: graph-node-index
          - path: /graphman/?(.*)
            pathType: ImplementationSpecific
            port: 8050
            serviceName: graph-node-index
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
