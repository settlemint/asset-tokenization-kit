---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "besu-node.fullname" . }}
  labels:
    {{- include "besu-node.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "besu-node.labels" . | nindent 6 }}
  serviceName: {{ include "besu-node.fullname" . }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.storage.storageClass }}
      storageClassName: {{ .Values.storage.storageClass }}
      {{- end }}
      resources:
        requests:
          storage: "{{ .Values.storage.pvcSizeLimit }}"
  template:
    metadata:
      labels:
        {{- include "besu-node.labels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.node.besu.metrics.port | quote}}
        prometheus.io/path: "/metrics"
    spec:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.azure.serviceAccountName }}
{{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- else }}
      serviceAccountName: {{ include "besu-node.fullname" . }}-sa
{{- end }}
      {{- include "atk.imagePullSecrets" . | nindent 6 }}
      initContainers:
      # Genesis file retrieval via HTTP server
      - name: genesis-init
        image: "{{ .Values.initContainers.curl.image.registry }}/{{ .Values.initContainers.curl.image.repository }}:{{ .Values.initContainers.curl.image.tag }}"
        imagePullPolicy: {{ .Values.initContainers.curl.image.pullPolicy }}
        command:
          - /bin/sh
          - -c
          - |
            set -e

            OUTPUT_FILE="/shared/genesis.json"
            GENESIS_URL="http://besu-genesis-server.{{ .Release.Namespace }}.svc.cluster.local/genesis.json"

            echo "Retrieving genesis file from HTTP server..."

            # Retrieve genesis file via HTTP server
            for i in $(seq 1 30); do
              if curl -f -s --connect-timeout 10 "$GENESIS_URL" > "$OUTPUT_FILE" 2>/dev/null; then
                echo "Genesis file retrieved successfully"
                ls -la "$OUTPUT_FILE"
                exit 0
              fi
              echo "Attempt $i/30 failed, waiting 10s..."
              sleep 10
            done

            echo "ERROR: Failed to retrieve genesis file from HTTP server"
            exit 1
        volumeMounts:
          - name: shared-genesis
            mountPath: /shared
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000

{{- if has .Values.cluster.provider .Values.volumePermissionsFix }}
      # fix for minikube and PVC's only writable as root https://github.com/kubernetes/minikube/issues/1990
      - name: volume-permission-besu
        image: "{{ .Values.initContainers.busybox.image.registry }}/{{ .Values.initContainers.busybox.image.repository }}:{{ .Values.initContainers.busybox.image.tag }}"
        imagePullPolicy: {{ .Values.initContainers.busybox.image.pullPolicy }}
        command: ["sh", "-c", "chown -R 1000:1000 /data"]
        volumeMounts:
          - name: data
            mountPath: /data
        securityContext:
          runAsUser: 0
{{- end}}

      containers:

{{- if .Values.quorumFlags.privacy }}
      - name: {{ .Release.Name }}-tessera
        image: {{ .Values.node.tessera.image.repository }}:{{ .Values.node.tessera.image.tag }}
        imagePullPolicy: {{ .Values.node.tessera.image.pullPolicy }}
        {{- with .Values.node.tessera.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: TESSERA_CONFIG_TYPE
            value: "-09"
        volumeMounts:
{{- if and (ne .Values.cluster.provider "local") (.Values.cluster.cloudNativeServices) }}
          - name: secrets-store
            mountPath: {{ .Values.node.tessera.keysPath }}
            readOnly: true
{{- else }}
          - name: tessera-keys
            mountPath: {{ .Values.node.tessera.keysPath }}
            readOnly: true
{{- end }}
          - name: data
            mountPath: {{ .Values.node.tessera.dataPath }}
          - name: tessera-peers
            mountPath: /config/tessera-peers
        ports:
          - name: tessera
            containerPort: {{ .Values.node.tessera.port }}
            protocol: TCP
          - name: tessera-tp
            containerPort: {{ .Values.node.tessera.tpport }}
            protocol: TCP
          - name: tessera-q2t
            containerPort: {{ .Values.node.tessera.q2tport }}
            protocol: TCP
        command:
          - /bin/sh
          - -c
        args:
          - |
            exec

            cp {{ .Values.node.tessera.keysPath }}/tm.* {{ .Values.node.tessera.dataPath }}/ ;

                cat <<EOF > {{ .Values.node.tessera.dataPath }}/tessera-config-09.json
                {
                  "mode": "orion",
                  "useWhiteList": false,
                  "jdbc": {
                    "username": "sa",
                    "password": "",
                    "url": "jdbc:h2:{{ .Values.node.tessera.dataPath }}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
                    "autoCreateTables": true
                  },
                  "serverConfigs":[
                  {
                    "app":"ThirdParty",
                    "enabled": true,
                    "serverAddress": "http://{{ include "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.tpport }}",
                    "communicationType" : "REST"
                  },
                  {
                    "app":"Q2T",
                    "enabled": true,
                    "serverAddress": "http://{{ include "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.q2tport }}",
                    "sslConfig": {
                      "tls": "OFF"
                    },
                    "communicationType" : "REST"
                  },
                  {
                    "app":"P2P",
                    "enabled": true,
                    "serverAddress": "http://{{ include "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.port }}",
                    "sslConfig": {
                      "tls": "OFF"
                    },
                    "communicationType" : "REST"
                  }
                  ],
                  "peer": $$(cat /config/tessera-peers/tesseraPeers),
                  "keys": {
                  {{ if .Values.node.tessera.password }}
                    "passwordFile": "{{ .Values.node.tessera.passwordPath }}",
                  {{ end }}
                    "keyData": [
                      {
                        "privateKeyPath": "/keys/tm.key",
                        "publicKeyPath": "/keys/tm.pub"
                      }
                    ]
                  },
                  "alwaysSendTo": []
                }
            EOF

                cat {{ .Values.node.tessera.dataPath }}/tessera-config-09.json
                /tessera/bin/tessera -configfile {{ .Values.node.tessera.dataPath }}/tessera-config-09.json

{{- end }}


      - name: {{ .Release.Name }}-besu
        image: {{ .Values.node.besu.image.repository }}:{{ .Values.node.besu.image.tag }}
        imagePullPolicy: {{ .Values.node.besu.image.pullPolicy }}
        {{- with .Values.node.besu.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
{{- if .Values.node.besu.envBesuOpts }}
          - name: BESU_OPTS
            value: "{{ .Values.node.besu.envBesuOpts }}"
{{- end }}
{{- if .Values.quorumFlags.usesBootnodes }}
          - name: BESU_BOOTNODES
            valueFrom:
              configMapKeyRef:
                name: besu-bootnodes
                key: bootnodes-string
{{- end }}
        volumeMounts:
{{- if and (ne .Values.cluster.provider "local") (.Values.cluster.cloudNativeServices) }}
          - name: secrets-store
            mountPath: {{ .Values.node.besu.keysPath }}
            readOnly: true
{{- else }}
          - name: besu-keys
            mountPath: {{ .Values.node.besu.keysPath }}
            readOnly: true
{{- if .Values.quorumFlags.privacy }}
          - name: tessera-keys
            mountPath: {{ .Values.node.besu.privacy.pubkeysPath }}
            readOnly: true
{{- end }}
{{- end }}
          - name: shared-genesis
            mountPath: /shared
            readOnly: true
          - name: static-nodes
            mountPath: /config/static
          - name: besu-config
            mountPath: /etc/besu
            readOnly: true
          - name: data
            mountPath: {{ .Values.node.besu.dataPath }}
        ports:
          - name: json-rpc
            containerPort: {{ .Values.node.besu.rpc.port }}
            protocol: TCP
          - name: ws
            containerPort: {{ .Values.node.besu.ws.port }}
            protocol: TCP
          - name: graphql
            containerPort: {{ .Values.node.besu.graphql.port }}
            protocol: TCP
          - name: rlpx
            containerPort: {{ .Values.node.besu.p2p.port }}
            protocol: TCP
          - name: discovery
            containerPort: {{ .Values.node.besu.p2p.port }}
            protocol: UDP
          - name: metrics
            containerPort: {{ .Values.node.besu.metrics.port }}
            protocol: TCP
        command:
          - /bin/sh
          - -c
        args:
          - |
            exec
            /opt/besu/bin/besu \
              --config-file=/etc/besu/config.toml \
              --Xdns-enabled=true --Xdns-update-enabled=true \
              --min-gas-price=0

        livenessProbe:
          httpGet:
            path: /liveness
            port: 8545
          initialDelaySeconds: 180
          periodSeconds: 60
      volumes:
      - name: shared-genesis
        emptyDir: {}
      - name: static-nodes
        configMap:
          name: besu-peers
          items:
            - key: static-nodes.json
              path: static-nodes.json
      - name: besu-config
        configMap:
          name: {{ include "besu-node.fullname" . }}-besu-config

{{- if and (ne .Values.cluster.provider "local") (.Values.cluster.cloudNativeServices) }}
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ include "besu-node.fullname" . }}-secret-provider
{{- else }}
      - name: besu-keys
        secret:
          secretName: {{ include "besu-node.fullname" . }}-keys
{{- if .Values.quorumFlags.privacy }}
      - name: tessera-keys
        secret:
          secretName: {{ include "besu-node.fullname" . }}-tessera-keys
{{- end }}
{{- end }}
{{- if .Values.quorumFlags.privacy }}
      - name: tessera-peers
        configMap:
          name: tessera-peers
          items:
            - key: tesseraPeers
              path: tesseraPeers
{{- end }}
{{- if .Values.node.besu.permissions.enabled }}
      - name: permissions-config
        configMap:
          name: {{ include "besu-node.fullname" . }}-permissions
{{- end }}

