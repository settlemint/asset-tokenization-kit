---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-genesis.name" . }}-cleanup
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    azure.workload.identity/use: "true"
{{- end }}
    app.kubernetes.io/name: besu-genesis-job-cleanup
    app.kubernetes.io/component: genesis-job-cleanup
    app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-weight: "0"
    helm.sh/hook: "pre-delete"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
        azure.workload.identity/use: "true"
{{- end}}
        app.kubernetes.io/name: besu-genesis-job-cleanup
        app.kubernetes.io/component: genesis-job-cleanup
        app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/managed-by: helm
    spec:
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.azure.serviceAccountName }}
     {{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
      {{- else }}
      serviceAccountName: {{ include "besu-genesis.name" . }}-sa
      {{- end }}
      containers:
        - name: delete-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

{{- if .Values.quorumFlags.removeGenesisOnDelete }}

              echo "Checking and deleting genesis configmap in k8s ..."
              if kubectl get configmap --namespace {{ .Release.Namespace }} besu-genesis &>/dev/null; then
                kubectl delete configmap --namespace {{ .Release.Namespace }} besu-genesis
                echo "Genesis configmap deleted"
              else
                echo "Genesis configmap not found, skipping"
              fi

              echo "Checking and deleting bootnodes configmap in k8s ..."
              if kubectl get configmap --namespace {{ .Release.Namespace }} besu-bootnodes &>/dev/null; then
                kubectl delete configmap --namespace {{ .Release.Namespace }} besu-bootnodes
                echo "Bootnodes configmap deleted"
              else
                echo "Bootnodes configmap not found, skipping"
              fi

              echo "Checking and deleting node-enodes configmap in k8s ..."
              if kubectl get configmap --namespace {{ .Release.Namespace }} besu-peers &>/dev/null; then
                kubectl delete configmap --namespace {{ .Release.Namespace }} besu-peers
                echo "Node-enodes configmap deleted"
              else
                echo "Node-enodes configmap not found, skipping"
              fi

              echo "Checking and deleting contracts genesis configmap in k8s ..."
              if kubectl get configmap --namespace {{ .Release.Namespace }} contracts-genesis &>/dev/null; then
                kubectl delete configmap --namespace {{ .Release.Namespace }} contracts-genesis
                echo "Contracts genesis configmap deleted"
              else
                echo "Contracts genesis configmap not found, skipping"
              fi

{{- end}}
