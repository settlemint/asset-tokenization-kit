---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-genesis.name" . }}-init
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    azure.workload.identity/use: "true"
{{- end }}
    app.kubernetes.io/name: besu-genesis-job
    app.kubernetes.io/component: genesis-job
    app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
{{- if .Values.initJob.annotations }}
  annotations:
{{- toYaml .Values.initJob.annotations | nindent 4 }}
{{- end}}
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
        azure.workload.identity/use: "true"
{{- end }}
        app.kubernetes.io/name: besu-genesis-job
        app.kubernetes.io/component: genesis-job
        app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/managed-by: helm
    spec:
      restartPolicy: Never
      {{- include "atk.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "besu-genesis.serviceAccountName" . }}
      volumes:
        - name: generated-config
          emptyDir: {}
        - name: genesis-pvc
          persistentVolumeClaim:
            claimName: besu-genesis-pvc
{{ if .Values.global.artifacts.enabled }}
        - name: artifacts
          emptyDir: {}
{{ end }}
{{ if .Values.global.artifacts.enabled }}
      initContainers:
        - name: copy-artifacts
          image: "{{ .Values.global.artifacts.image.registry }}/{{ .Values.global.artifacts.image.repository }}:{{ .Values.global.artifacts.image.tag }}"
          imagePullPolicy: {{ .Values.global.artifacts.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Copying genesis files from artifacts container..."
              cp -a /artifacts/genesis/. /shared-artifacts/
              echo "Genesis files copied successfully"
              ls -la /shared-artifacts/
          {{- with .Values.initJob.copyArtifacts.resources }}
          resources:
{{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: artifacts
              mountPath: /shared-artifacts
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
{{ end }}
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.initJob.resources }}
          resources:
{{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: generated-config
              mountPath: /generated-config
            - name: genesis-pvc
              mountPath: /genesis-pvc
{{ if .Values.global.artifacts.enabled }}
            - name: artifacts
              mountPath: /contracts/genesis
              readOnly: true
{{ end }}
          command:
            - /bin/bash
            - -c
          args:
            - |
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
                fi
              }
              az login --federated-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)" --service-principal -u {{ .Values.azure.identityClientId }} -t {{ .Values.azure.tenantId }}
              az account set --subscription {{ .Values.azure.subscriptionId }}

{{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                aws secretsmanager describe-secret --secret-id $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  aws secretsmanager create-secret --name $key --description $key --secret-string file://$fpath
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  aws secretsmanager get-secret-value --secret-id $key | jq -r '.SecretString' > $fpath
                fi
              }

{{- else }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=${fpath}/nodekey --from-file=nodekey.pub=${fpath}/nodekey.pub --from-file=enode=${fpath}/nodekey.pub --from-file=address=${fpath}/address --from-file=accountPrivate.key=${fpath}/accountPrivateKey --from-file=accountPassword=${fpath}/accountPassword --from-file=accountKeystore=${fpath}/accountKeystore --from-file=accountAdddress=${fpath}/accountAddress
              }

{{- end }}

              function safeWriteBesuPeersConfigmap {
                FOLDER_PATH=$1
                echo "Creating/updating besu-peers configmap..."
                kubectl create configmap --namespace {{ .Release.Namespace }} besu-peers --from-file=static-nodes.json=$FOLDER_PATH/static-nodes.json --dry-run=client -o yaml | kubectl apply -f -
              }

              function safeWriteGenesisConfigmap {
                FOLDER_PATH=$1
                echo "Storing genesis file in PVC..."

                # Copy genesis file directly to the mounted PVC
                cp "$FOLDER_PATH/besu/genesis.json" /genesis-pvc/genesis.json

                echo "Genesis file stored in PVC successfully"
              }

              echo "Creating config ..."
              FOLDER_PATH=$(quorum-genesis-tool --consensus {{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }} {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.algorithm.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.algorithm.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.algorithm.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} {{ if .Values.rawGenesisConfig.blockchain.accountPassword }} --accountPassword {{ .Values.rawGenesisConfig.blockchain.accountPassword }} {{ end }} --quickstartDevAccounts {{ .Values.rawGenesisConfig.genesis.includeQuickStartAccounts }} --alloc {{ if .Values.rawGenesisConfig.genesis.alloc }} '{{ .Values.rawGenesisConfig.genesis.alloc | toJson }}' {{ else }} '{}' {{ end }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")

              echo "Creating/updating bootnodes configmap..."
              echo "[]" > /tmp/besu-bootnodes
              kubectl create configmap --namespace {{ .Release.Namespace }} besu-bootnodes --from-file=bootnodes=/tmp/besu-bootnodes --dry-run=client -o yaml | kubectl apply -f -

              echo $FOLDER_PATH
              echo "Creating genesis configmap in k8s ..."
              # Modify genesis.json if consensus is qbft
              GENESIS_FILE="$FOLDER_PATH/besu/genesis.json"
              CONSENSUS_TYPE="{{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }}"
              if [ "$CONSENSUS_TYPE" == "qbft" ]; then
                echo "Attempting to add xemptyblockperiodseconds to $GENESIS_FILE..."
                if command -v perl &> /dev/null; then
                  # Use Perl to insert the key-value pair after the opening brace of "qbft": {
                  # Also, clean up potential trailing commas before closing braces to maintain JSON validity
                  perl -i -0pe 's/\"qbft\"\s*:\s*{/\"qbft\": { \"xemptyblockperiodseconds\": 60, /; s/,\s*}/ }/g' "$GENESIS_FILE"
                  echo "Modification complete using perl (if config.qbft existed)."
                else
                  echo "Warning: perl command not found in container. Cannot modify genesis.json."
                fi
              fi

              # Use the generated genesis file which has correct validator addresses
              echo "Using generated genesis file with correct validator addresses..."
              echo "Generated genesis file info:"
              ls -la "$GENESIS_FILE"

              # Default to empty allocations so downstream merge logic can skip merging cleanly
              ARTIFACTS_ALLOC='{}'

{{ if .Values.global.artifacts.enabled }}
              # Optionally merge contract alloc data from artifacts if needed
              ARTIFACTS_ALLOC_FILE="/contracts/genesis/genesis-allocations.json"
              ARTIFACTS_GENESIS_FILE="/contracts/genesis/genesis.json"

              # First try to use dedicated allocations file, fall back to extracting from genesis.json
              if [ -f "$ARTIFACTS_ALLOC_FILE" ]; then
                echo "Found genesis-allocations.json file, using it for allocations..."

                # Read the allocation file directly
                if ARTIFACTS_ALLOC=$(cat "$ARTIFACTS_ALLOC_FILE"); then
                  :
                else
                  echo "Warning: Could not read $ARTIFACTS_ALLOC_FILE. File may be missing, unreadable, or corrupted." >&2
                  ARTIFACTS_ALLOC='{}'
                fi

                # Validate it's valid JSON
                if echo "$ARTIFACTS_ALLOC" | jq -e . >/dev/null 2>&1; then
                  echo "Valid allocations file found"
                else
                  echo "Error: genesis-allocations.json is not valid JSON"
                  ARTIFACTS_ALLOC='{}'
                fi

              elif [ -f "$ARTIFACTS_GENESIS_FILE" ]; then
                echo "No genesis-allocations.json found, falling back to extracting from genesis.json..."

                # Extract only the alloc section from artifacts (contract deployments)
                ARTIFACTS_ALLOC=$(jq -r '.alloc // {}' "$ARTIFACTS_GENESIS_FILE" 2>/dev/null || echo '{}')

              else
                echo "No allocation data found in artifacts"
                ARTIFACTS_ALLOC='{}'
              fi
{{ end }}

              # Only merge if there are actual allocations
              if [ "$ARTIFACTS_ALLOC" != "{}" ] && [ "$ARTIFACTS_ALLOC" != "null" ]; then
                echo "Merging contract allocations into genesis..."

                # Write allocation to temp file to avoid command line length issues
                echo "$ARTIFACTS_ALLOC" > /tmp/artifacts_alloc.json

                # Merge artifacts alloc into generated genesis using file
                jq '.alloc = (.alloc + input)' \
                   "$GENESIS_FILE" /tmp/artifacts_alloc.json > "${GENESIS_FILE}.merged"

                if [ -s "${GENESIS_FILE}.merged" ]; then
                  mv "${GENESIS_FILE}.merged" "$GENESIS_FILE"
                  echo "Successfully merged contract allocations"
                else
                  echo "Error: Merged file is empty, keeping original"
                  rm -f "${GENESIS_FILE}.merged"
                fi
              else
                echo "No allocations to merge, using generated genesis as-is"
              fi

              echo "Final genesis file info:"
              ls -la "$GENESIS_FILE"
              echo "Genesis file validation:"
              if jq -e . "$GENESIS_FILE" >/dev/null 2>&1; then
                echo "✓ Genesis file is valid JSON"
              else
                echo "✗ Genesis file is invalid JSON!"
                exit 1
              fi

              safeWriteGenesisConfigmap $FOLDER_PATH

              # create the static-nodes with proper dns names for the quorum nodes
              echo "[" > $FOLDER_PATH/static-nodes.json
              echo "Creating validator secrets in k8s ..."
              i=1
              for f in $(find $FOLDER_PATH -type d -iname "validator*" -exec basename {} \;); do
                if [ -d $FOLDER_PATH/${f} ]; then
                  echo $f
                  echo "Creating/updating keys for validator-${i} ..."

{{- if and (ne .Values.cluster.provider "local") (.Values.cluster.cloudNativeServices) }}

                  safeWriteSecret besu-node-validator-${i}-nodekey $FOLDER_PATH/${f}/nodekey
                  safeWriteSecret besu-node-validator-${i}-nodekeypub $FOLDER_PATH/${f}/nodekey.pub
                  safeWriteSecret besu-node-validator-${i}-enode $FOLDER_PATH/${f}/nodekey.pub
                  safeWriteSecret besu-node-validator-${i}-address $FOLDER_PATH/${f}/address
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address --dry-run=client -o yaml | kubectl apply -f -

                  safeWriteSecret besu-node-validator-${i}-accountPrivateKey $FOLDER_PATH/${f}/accountPrivateKey
                  safeWriteSecret besu-node-validator-${i}-accountPassword $FOLDER_PATH/${f}/accountPassword
                  safeWriteSecret besu-node-validator-${i}-accountKeystore $FOLDER_PATH/${f}/accountKeystore
                  safeWriteSecret besu-node-validator-${i}-accountAddress $FOLDER_PATH/${f}/accountAddress

{{- else }}

                  # Create secret with --dry-run and apply
                  kubectl create secret generic besu-node-validator-${i}-keys --namespace {{ .Release.Namespace }} \
                    --from-file=nodekey=${FOLDER_PATH}/${f}/nodekey \
                    --from-file=nodekey.pub=${FOLDER_PATH}/${f}/nodekey.pub \
                    --from-file=enode=${FOLDER_PATH}/${f}/nodekey.pub \
                    --from-file=address=${FOLDER_PATH}/${f}/address \
                    --from-file=accountPrivate.key=${FOLDER_PATH}/${f}/accountPrivateKey \
                    --from-file=accountPassword=${FOLDER_PATH}/${f}/accountPassword \
                    --from-file=accountKeystore=${FOLDER_PATH}/${f}/accountKeystore \
                    --from-file=accountAdddress=${FOLDER_PATH}/${f}/accountAddress \
                    --dry-run=client -o yaml | kubectl apply -f -

                  # Create configmap with --dry-run and apply
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-validator-${i}-address \
                    --from-file=address=$FOLDER_PATH/${f}/address \
                    --dry-run=client -o yaml | kubectl apply -f -

{{- end }}
                  # add to the static-nodes
                  pubkey=$(cat $FOLDER_PATH/${f}/nodekey.pub )
                  echo ",\"enode://$pubkey@besu-node-validator-$i-0.besu-node-validator-$i.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> $FOLDER_PATH/static-nodes.json

                  i=$((i+1))
                fi
              done

              echo "]" >> $FOLDER_PATH/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' $FOLDER_PATH/static-nodes.json
              safeWriteBesuPeersConfigmap $FOLDER_PATH

              echo "Completed ..."
