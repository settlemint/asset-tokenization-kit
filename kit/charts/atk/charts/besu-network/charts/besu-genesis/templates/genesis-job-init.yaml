---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-genesis.name" . }}-init
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    azure.workload.identity/use: "true"
{{- end }}
    app.kubernetes.io/name: besu-genesis-job
    app.kubernetes.io/component: genesis-job
    app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
{{- if .Values.initJob.annotations }}
  annotations:
{{- toYaml .Values.initJob.annotations | nindent 4 }}
{{- end}}
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
        azure.workload.identity/use: "true"
{{- end }}
        app.kubernetes.io/name: besu-genesis-job
        app.kubernetes.io/component: genesis-job
        app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/managed-by: helm
    spec:
      restartPolicy: Never
      {{- include "atk.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "besu-genesis.serviceAccountName" . }}
      volumes:
        - name: generated-config
          emptyDir: {}
        - name: genesis-pvc
          persistentVolumeClaim:
            claimName: besu-genesis-pvc
        {{- if .Files.Glob "files/genesis-output.json" }}
        - name: contracts-config
          configMap:
            name: contracts-genesis
        {{- end }}
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: generated-config
              mountPath: /generated-config
            - name: genesis-pvc
              mountPath: /genesis-pvc
            {{- if .Files.Glob "files/genesis-output.json" }}
            - name: contracts-config
              mountPath: /contracts
              readOnly: true
            {{- end }}
          command:
            - /bin/bash
            - -c
          args:
            - |
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
                fi
              }
              az login --federated-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)" --service-principal -u {{ .Values.azure.identityClientId }} -t {{ .Values.azure.tenantId }}
              az account set --subscription {{ .Values.azure.subscriptionId }}

{{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                aws secretsmanager describe-secret --secret-id $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  aws secretsmanager create-secret --name $key --description $key --secret-string file://$fpath
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  aws secretsmanager get-secret-value --secret-id $key | jq -r '.SecretString' > $fpath
                fi
              }

{{- else }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=${fpath}/nodekey --from-file=nodekey.pub=${fpath}/nodekey.pub --from-file=enode=${fpath}/nodekey.pub --from-file=address=${fpath}/address --from-file=accountPrivate.key=${fpath}/accountPrivateKey --from-file=accountPassword=${fpath}/accountPassword --from-file=accountKeystore=${fpath}/accountKeystore --from-file=accountAdddress=${fpath}/accountAddress
              }

{{- end }}

              function safeWriteBesuPeersConfigmap {
                FOLDER_PATH=$1
                echo "Creating/updating besu-peers configmap..."
                kubectl create configmap --namespace {{ .Release.Namespace }} besu-peers --from-file=static-nodes.json=$FOLDER_PATH/static-nodes.json --dry-run=client -o yaml | kubectl apply -f -
              }

              function safeWriteGenesisConfigmap {
                FOLDER_PATH=$1
                echo "Storing genesis file in PVC..."
                
                # Copy genesis file directly to the mounted PVC
                cp "$FOLDER_PATH/besu/genesis.json" /genesis-pvc/genesis.json
                
                echo "Genesis file stored in PVC successfully"
              }

              echo "Creating config ..."
              FOLDER_PATH=$(quorum-genesis-tool --consensus {{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }} {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.algorithm.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.algorithm.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.algorithm.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} {{ if .Values.rawGenesisConfig.blockchain.accountPassword }} --accountPassword {{ .Values.rawGenesisConfig.blockchain.accountPassword }} {{ end }} --quickstartDevAccounts {{ .Values.rawGenesisConfig.genesis.includeQuickStartAccounts }} --alloc {{ if .Values.rawGenesisConfig.genesis.alloc }} '{{ .Values.rawGenesisConfig.genesis.alloc | toJson }}' {{ else }} '{}' {{ end }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")

              echo "Creating/updating bootnodes configmap..."
              echo "[]" > /tmp/besu-bootnodes
              kubectl create configmap --namespace {{ .Release.Namespace }} besu-bootnodes --from-file=bootnodes=/tmp/besu-bootnodes --dry-run=client -o yaml | kubectl apply -f -

              echo $FOLDER_PATH
              echo "Creating genesis configmap in k8s ..."
              # Modify genesis.json if consensus is qbft
              GENESIS_FILE="$FOLDER_PATH/besu/genesis.json"
              CONSENSUS_TYPE="{{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }}"
              if [ "$CONSENSUS_TYPE" == "qbft" ]; then
                echo "Attempting to add xemptyblockperiodseconds to $GENESIS_FILE..."
                if command -v perl &> /dev/null; then
                  # Use Perl to insert the key-value pair after the opening brace of "qbft": {
                  # Also, clean up potential trailing commas before closing braces to maintain JSON validity
                  perl -i -0pe 's/\"qbft\"\s*:\s*{/\"qbft\": { \"xemptyblockperiodseconds\": 60, /; s/,\s*}/ }/g' "$GENESIS_FILE"
                  echo "Modification complete using perl (if config.qbft existed)."
                else
                  echo "Warning: perl command not found in container. Cannot modify genesis.json."
                fi
              fi

              # Merge contract allocations from genesis-output.json
              echo "Merging contract allocations..."
              CONTRACT_ALLOC_FILE="/contracts/genesis-output.json"
              if [ -f "$CONTRACT_ALLOC_FILE" ]; then
                echo "Genesis file allocations:"
                jq '.alloc' "$GENESIS_FILE"
                echo "Contract allocations to merge:"
                cat "$CONTRACT_ALLOC_FILE"
                # Use jq to merge the allocations
                jq -s '.[0] as $genesis | .[1] as $contracts | $genesis | .alloc = ($genesis.alloc + $contracts)' "$GENESIS_FILE" "$CONTRACT_ALLOC_FILE" > "$GENESIS_FILE.tmp" && mv "$GENESIS_FILE.tmp" "$GENESIS_FILE"
                echo "Merged allocations:"
                jq '.alloc' "$GENESIS_FILE"
                echo "Contract allocations merged successfully"
              else
                echo "Warning: Contract allocations file not found at $CONTRACT_ALLOC_FILE"
              fi

              safeWriteGenesisConfigmap $FOLDER_PATH

              # create the static-nodes with proper dns names for the quorum nodes
              echo "[" > $FOLDER_PATH/static-nodes.json
              echo "Creating validator secrets in k8s ..."
              i=1
              for f in $(find $FOLDER_PATH -type d -iname "validator*" -exec basename {} \;); do
                if [ -d $FOLDER_PATH/${f} ]; then
                  echo $f
                  echo "Creating/updating keys for validator-${i} ..."

{{- if and (ne .Values.cluster.provider "local") (.Values.cluster.cloudNativeServices) }}

                  safeWriteSecret besu-node-validator-${i}-nodekey $FOLDER_PATH/${f}/nodekey
                  safeWriteSecret besu-node-validator-${i}-nodekeypub $FOLDER_PATH/${f}/nodekey.pub
                  safeWriteSecret besu-node-validator-${i}-enode $FOLDER_PATH/${f}/nodekey.pub
                  safeWriteSecret besu-node-validator-${i}-address $FOLDER_PATH/${f}/address
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address --dry-run=client -o yaml | kubectl apply -f -

                  safeWriteSecret besu-node-validator-${i}-accountPrivateKey $FOLDER_PATH/${f}/accountPrivateKey
                  safeWriteSecret besu-node-validator-${i}-accountPassword $FOLDER_PATH/${f}/accountPassword
                  safeWriteSecret besu-node-validator-${i}-accountKeystore $FOLDER_PATH/${f}/accountKeystore
                  safeWriteSecret besu-node-validator-${i}-accountAddress $FOLDER_PATH/${f}/accountAddress

{{- else }}

                  # Create secret with --dry-run and apply
                  kubectl create secret generic besu-node-validator-${i}-keys --namespace {{ .Release.Namespace }} \
                    --from-file=nodekey=${FOLDER_PATH}/${f}/nodekey \
                    --from-file=nodekey.pub=${FOLDER_PATH}/${f}/nodekey.pub \
                    --from-file=enode=${FOLDER_PATH}/${f}/nodekey.pub \
                    --from-file=address=${FOLDER_PATH}/${f}/address \
                    --from-file=accountPrivate.key=${FOLDER_PATH}/${f}/accountPrivateKey \
                    --from-file=accountPassword=${FOLDER_PATH}/${f}/accountPassword \
                    --from-file=accountKeystore=${FOLDER_PATH}/${f}/accountKeystore \
                    --from-file=accountAdddress=${FOLDER_PATH}/${f}/accountAddress \
                    --dry-run=client -o yaml | kubectl apply -f -

                  # Create configmap with --dry-run and apply
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-validator-${i}-address \
                    --from-file=address=$FOLDER_PATH/${f}/address \
                    --dry-run=client -o yaml | kubectl apply -f -

{{- end }}
                  # add to the static-nodes
                  pubkey=$(cat $FOLDER_PATH/${f}/nodekey.pub )
                  echo ",\"enode://$pubkey@besu-node-validator-$i-0.besu-node-validator-$i.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> $FOLDER_PATH/static-nodes.json

                  i=$((i+1))
                fi
              done

              echo "]" >> $FOLDER_PATH/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' $FOLDER_PATH/static-nodes.json
              safeWriteBesuPeersConfigmap $FOLDER_PATH

              echo "Completed ..."
