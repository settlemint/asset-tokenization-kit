apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "graph-node.fullname" . }}-combined
  labels:
    {{- include "graph-node.labels" . | nindent 4 }}
    app.kubernetes.io/component: combined
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "graph-node.fullname" . }}-combined-headless
  selector:
    matchLabels:
      {{- include "graph-node.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: combined
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "graph-node.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: combined
    spec:
      {{- include "graph-node.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "graph-node.serviceAccountName" . }}
      {{- $podSecurityContext := (include "atk.securityContext.pod" (dict "context" $ "local" .Values.podSecurityContext "chartKey" "graph-node")) | fromYaml }}
      {{- if $podSecurityContext }}
      securityContext:
        {{- toYaml $podSecurityContext | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- $pgLocal := default (dict) .Values.postgresql }}
      {{- $pgConfig := ((include "atk.datastores.postgresql" (dict "context" $ "chartKey" "graphNode" "local" $pgLocal)) | fromYaml) | default (dict) }}
      {{- $pgExistingSecret := trim (default "" (index $pgConfig "existingSecret")) }}
      {{- $pgSecretKeys := (index $pgConfig "existingSecretKeys") | default (dict) }}
      {{- $usernameKeyOverride := trim (default "" (index $pgSecretKeys "username")) }}
      {{- $passwordKeyOverride := trim (default "" (index $pgSecretKeys "password")) }}
      {{- $hostKeyOverride := trim (default "" (index $pgSecretKeys "host")) }}
      {{- $portKeyOverride := trim (default "" (index $pgSecretKeys "port")) }}
      {{- $databaseKeyOverride := trim (default "" (index $pgSecretKeys "database")) }}
      {{- $pgSecretMeta := dict "name" (include "graph-node.pgSecretName" $) "usernameKey" "PGUSER" "passwordKey" "PGPASSWORD" }}
      {{- if ne $pgExistingSecret "" }}
        {{- $_ := set $pgSecretMeta "name" $pgExistingSecret }}
        {{- $_ := set $pgSecretMeta "usernameKey" (default "username" $usernameKeyOverride) }}
        {{- $_ := set $pgSecretMeta "passwordKey" (default "password" $passwordKeyOverride) }}
        {{- $_ := set $pgSecretMeta "hostKey" (default "host" $hostKeyOverride) }}
        {{- $_ := set $pgSecretMeta "portKey" (default "port" $portKeyOverride) }}
        {{- $_ := set $pgSecretMeta "databaseKey" (default "database" $databaseKeyOverride) }}
      {{- end }}
      {{- $pgHost := default "postgresql" (index $pgConfig "host") }}
      {{- $pgPortValue := default 5432 (index $pgConfig "port") }}
      {{- $pgPort := printf "%v" $pgPortValue }}
      {{- $pgDatabase := default "thegraph" (index $pgConfig "database") }}
      {{- $env := default (dict) .Values.env }}
      {{- $secretEnv := default (dict) .Values.secretEnv }}
      {{- $pgSecretName := index $pgSecretMeta "name" }}
      {{- $waitForIt := include "atk.waitforit.containers" (dict "context" $ "config" .Values.initContainer.tcpCheck) }}
      {{- $extraInit := .Values.extraInitContainers | default (list) }}
      {{- if or $waitForIt (gt (len $extraInit) 0) }}
      initContainers:
        {{- if $waitForIt }}
{{ $waitForIt | nindent 8 }}
        {{- end }}
        {{- if gt (len $extraInit) 0 }}
{{ toYaml $extraInit | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: graph-node
          image: {{ include "graph-node.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- $containerSecurityContext := (include "atk.securityContext.container" (dict "context" $ "local" .Values.containerSecurityContext "chartKey" "graph-node")) | fromYaml }}
          {{- if $containerSecurityContext }}
          securityContext:
            {{- toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}
      {{- $ipfsConfig := default (dict) .Values.ipfs }}
      {{- $defaultIpfsEndpoint := default "" .Values.env.IPFS }}
      {{- $ipfsEndpoints := (default (list $defaultIpfsEndpoint) (index $ipfsConfig "endpoints")) | compact }}
      {{- $endpointCount := len (required "graph-node: configure at least one IPFS endpoint via .Values.ipfs.endpoints or env.IPFS" $ipfsEndpoints) }}
          command:
            - sh
            - -c
            - |
              graph-node \
                --config /etc/graph-node/config.toml \
{{- range $index, $endpoint := $ipfsEndpoints }}
                --ipfs {{ $endpoint }}{{- if lt (add $index 1) $endpointCount }} \\{{- end }}
{{- end }}
          ports:
            - name: http-query
              containerPort: {{ .Values.service.ports.httpQuery }}
              protocol: TCP
            - name: http-queryws
              containerPort: {{ .Values.service.ports.httpQueryws }}
              protocol: TCP
            - name: http-admin
              containerPort: {{ .Values.service.ports.httpAdmin }}
              protocol: TCP
            - name: http-status
              containerPort: {{ .Values.service.ports.httpStatus }}
              protocol: TCP
            - name: http-metrics
              containerPort: {{ .Values.service.ports.httpMetrics }}
              protocol: TCP
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- range $key, $val := $env }}
            - name: {{ $key | quote }}
              value: {{ $val | quote }}
            {{- end }}
            {{- if not (hasKey $env "PRIMARY_SUBGRAPH_DATA_PGHOST") }}
            - name: "PRIMARY_SUBGRAPH_DATA_PGHOST"
              {{- if and (ne $pgExistingSecret "") (hasKey $pgSecretMeta "hostKey") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecretName | quote }}
                  key: {{ index $pgSecretMeta "hostKey" | quote }}
              {{- else }}
              value: {{ $pgHost | quote }}
              {{- end }}
            {{- end }}
            {{- if not (hasKey $env "PRIMARY_SUBGRAPH_DATA_PGPORT") }}
            - name: "PRIMARY_SUBGRAPH_DATA_PGPORT"
              {{- if and (ne $pgExistingSecret "") (hasKey $pgSecretMeta "portKey") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecretName | quote }}
                  key: {{ index $pgSecretMeta "portKey" | quote }}
              {{- else }}
              value: {{ $pgPort | quote }}
              {{- end }}
            {{- end }}
            {{- if not (hasKey $env "PRIMARY_SUBGRAPH_DATA_PGDATABASE") }}
            - name: "PRIMARY_SUBGRAPH_DATA_PGDATABASE"
              {{- if and (ne $pgExistingSecret "") (hasKey $pgSecretMeta "databaseKey") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecretName | quote }}
                  key: {{ index $pgSecretMeta "databaseKey" | quote }}
              {{- else }}
              value: {{ $pgDatabase | quote }}
              {{- end }}
            {{- end }}
            {{- range $key, $val := $secretEnv }}
            {{- $rawSecretKey := trim (default "" $val.key) }}
            {{- $secretKey := $rawSecretKey }}
            {{- if and (ne $pgExistingSecret "") (eq $key "PRIMARY_SUBGRAPH_DATA_PGUSER") }}
              {{- if or (eq $secretKey "") (eq $secretKey "PGUSER") }}
                {{- $secretKey = index $pgSecretMeta "usernameKey" }}
              {{- end }}
            {{- else if and (ne $pgExistingSecret "") (eq $key "PRIMARY_SUBGRAPH_DATA_PGPASSWORD") }}
              {{- if or (eq $secretKey "") (eq $secretKey "PGPASSWORD") }}
                {{- $secretKey = index $pgSecretMeta "passwordKey" }}
              {{- end }}
            {{- end }}
            {{- if ne $secretKey "" }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ if $val.secretName }}{{ $val.secretName | quote }}{{ else }}{{ $pgSecretName | quote }}{{ end }}
                  key: {{ $secretKey | quote }}
            {{- end }}
            {{- end }}
            {{- /* Fallback to generated secret when credential env mappings are omitted */ -}}
            {{- $pgUserSecret := index $secretEnv "PRIMARY_SUBGRAPH_DATA_PGUSER" }}
            {{- if not (and $pgUserSecret $pgUserSecret.key (ne (trim $pgUserSecret.key) "")) }}
            - name: "PRIMARY_SUBGRAPH_DATA_PGUSER"
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecretName | quote }}
                  key: {{ index $pgSecretMeta "usernameKey" | quote }}
            {{- end }}
            {{- $pgPasswordSecret := index $secretEnv "PRIMARY_SUBGRAPH_DATA_PGPASSWORD" }}
            {{- if not (and $pgPasswordSecret $pgPasswordSecret.key (ne (trim $pgPasswordSecret.key) "")) }}
            - name: "PRIMARY_SUBGRAPH_DATA_PGPASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecretName | quote }}
                  key: {{ index $pgSecretMeta "passwordKey" | quote }}
            {{- end }}
          {{- with .Values.subgraph.configMapName }}
          envFrom:
            - configMapRef:
                name: {{ . | quote }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/graph-node
              readOnly: true
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "graph-node.fullname" . }}-config
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
