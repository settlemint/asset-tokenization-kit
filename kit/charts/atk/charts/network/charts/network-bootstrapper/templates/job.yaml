{{- $artifactSource := default "generated" .Values.artifacts.source -}}
{{- if and (eq $artifactSource "generated") (not .Release.IsUpgrade) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "network-bootstrapper.fullname" . }}
  labels:
    {{- include "network-bootstrapper.labels" . | nindent 4 }}
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "network-bootstrapper.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "network-bootstrapper.serviceAccountName" . }}
      {{- $securityContexts := dict -}}
      {{- include "network-bootstrapper.securityContexts" (dict "ctx" . "dest" $securityContexts) -}}
      {{- $podSecurityContext := index $securityContexts "pod" }}
      {{- $containerSecurityContext := index $securityContexts "container" }}
      {{- if $podSecurityContext }}
      securityContext:
        {{- toYaml $podSecurityContext | nindent 8 }}
      {{- end }}
      {{- $globalValues := default (dict) .Values.global }}
      {{- $globalArtifacts := default (dict) (get $globalValues "artifacts") }}
      {{- $artifactsImage := default (dict) (get $globalArtifacts "image") }}
      {{- $artifactsRegistry := default "ghcr.io" (get $artifactsImage "registry") }}
      {{- $artifactsRepository := default "settlemint/asset-tokenization-kit-artifacts" (get $artifactsImage "repository") }}
      {{- $chartVersion := $.Chart.AppVersion | default .Chart.AppVersion }}
      {{- $artifactsTag := default $chartVersion (get $artifactsImage "tag") }}
      {{- $artifactsPullPolicy := default "IfNotPresent" (get $artifactsImage "pullPolicy") }}
      {{- $initConfig := default (dict) .Values.initContainer }}
      {{- $globalInitConfig := default (dict) (get $globalValues "initContainer") }}
      {{- $globalTcpDefaults := default (dict) (get $globalInitConfig "tcpCheck") }}
      {{- $chartTcpOverrides := default (dict) (get $initConfig "tcpCheck") }}
      {{- $tcpCheckConfig := mergeOverwrite (deepCopy $globalTcpDefaults) $chartTcpOverrides }}
      {{- $globalExtraInit := default (list) (get $globalValues "extraInitContainers") }}
      {{- $chartExtraInit := default (list) .Values.extraInitContainers }}
      {{- $extraInitContainers := concat $globalExtraInit $chartExtraInit }}
      {{- $tcpEnabled := default false (get $tcpCheckConfig "enabled") }}
      {{- $hasExtraInit := gt (len $extraInitContainers) 0 }}
      {{- $allocationsVolumeName := "genesis-allocations" }}
      {{- $allocationsVolumeMountPath := "/genesis" }}
      {{- $allocationsFilePath := printf "%s/genesis-allocations.json" $allocationsVolumeMountPath }}
      {{- $abiVolumeName := "contract-abis" }}
      {{- $abiVolumeMountPath := "/abis" }}
      {{- $abiSourcePath := "/artifacts/asset-tokenization-3643/abi/" }}
      {{- $subgraphVolumeName := "subgraph-hash" }}
      {{- $subgraphVolumeMountPath := "/subgraph" }}
      {{- $subgraphSourcePath := "/artifacts/asset-tokenization-3643/subgraph/subgraph-hash.txt" }}
      {{- $subgraphFilePath := printf "%s/subgraph-hash.txt" $subgraphVolumeMountPath }}
      {{- $subgraphFallback := default "" .Values.subgraph.fallbackHash }}
      {{- $copyGenesis := eq $artifactSource "generated" }}
      {{- if or $copyGenesis (or $tcpEnabled $hasExtraInit) }}
      initContainers:
        {{- if $copyGenesis }}
        - name: copy-genesis
          image: "{{ $artifactsRegistry }}/{{ $artifactsRepository }}:{{ $artifactsTag }}"
          imagePullPolicy: {{ $artifactsPullPolicy }}
          command:
            - /bin/sh
            - -ec
            - |
              set -euo pipefail
              echo "Copying genesis allocations from artifacts image"
              cp /artifacts/asset-tokenization-3643/genesis/genesis-allocations.json {{ $allocationsFilePath }}
              # Stash the file so the bootstrapper mounts a pre-seeded genesis
              chmod 644 {{ $allocationsFilePath }}
              # Stage contract ABIs so the bootstrapper can publish matching ConfigMaps
              ABI_SRC_DIR="{{ $abiSourcePath }}"
              echo "Copying ABI artifacts from ${ABI_SRC_DIR}"
              if [ -d "${ABI_SRC_DIR}" ]; then
                mkdir -p {{ $abiVolumeMountPath }}
                cp -r "${ABI_SRC_DIR}/." {{ $abiVolumeMountPath }}/
                find {{ $abiVolumeMountPath }} -type f -name '*.json' -exec chmod 644 {} +
                echo "ABI artifacts staged under {{ $abiVolumeMountPath }}"
              else
                echo "ABI source directory ${ABI_SRC_DIR} not found; skipping ABI staging"
              fi
              SUBGRAPH_SRC_FILE="{{ $subgraphSourcePath }}"
              SUBGRAPH_DEST_DIR="{{ $subgraphVolumeMountPath }}"
              SUBGRAPH_DEST_FILE="{{ $subgraphFilePath }}"
              SUBGRAPH_FALLBACK="{{ $subgraphFallback }}"
              echo "Copying subgraph hash from ${SUBGRAPH_SRC_FILE}"
              if [ -f "${SUBGRAPH_SRC_FILE}" ]; then
                mkdir -p "${SUBGRAPH_DEST_DIR}"
                cp "${SUBGRAPH_SRC_FILE}" "${SUBGRAPH_DEST_FILE}"
                chmod 644 "${SUBGRAPH_DEST_FILE}"
                echo "Subgraph hash staged under ${SUBGRAPH_DEST_FILE}"
              else
                if [ -n "${SUBGRAPH_FALLBACK}" ]; then
                  echo "Subgraph hash file ${SUBGRAPH_SRC_FILE} not found; using fallback value." >&2
                  mkdir -p "${SUBGRAPH_DEST_DIR}"
                  printf '%s\n' "${SUBGRAPH_FALLBACK}" > "${SUBGRAPH_DEST_FILE}"
                  chmod 644 "${SUBGRAPH_DEST_FILE}"
                  echo "Subgraph fallback written to ${SUBGRAPH_DEST_FILE}"
                else
                  echo "Subgraph hash file ${SUBGRAPH_SRC_FILE} not found and no fallback configured." >&2
                  exit 1
                fi
              fi
          volumeMounts:
            - name: {{ $allocationsVolumeName }}
              mountPath: {{ $allocationsVolumeMountPath }}
            - name: {{ $abiVolumeName }}
              mountPath: {{ $abiVolumeMountPath }}
            {{- if $copyGenesis }}
            - name: {{ $subgraphVolumeName }}
              mountPath: {{ $subgraphVolumeMountPath }}
            {{- end }}
        {{- end }}
{{ include "network-bootstrapper.tcpCheckInitContainer" (dict "context" . "config" $tcpCheckConfig "indent" 8) }}
{{ include "network-bootstrapper.extraInitContainers" (dict "context" . "containers" $extraInitContainers "indent" 8) }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if $containerSecurityContext }}
          securityContext:
            {{- toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - generate
            {{- $clusterDomain := default "svc.cluster.local" .Values.settings.clusterDomain }}
            {{- $defaultStaticPort := default 30303 .Values.settings.defaultStaticNodePort }}
            {{- $defaultStaticDiscovery := default 30303 .Values.settings.defaultStaticNodeDiscoveryPort }}
            {{- $resolvedStaticDomain := default $clusterDomain .Values.settings.staticNodeDomain }}
            {{- $resolvedStaticPort := default $defaultStaticPort .Values.settings.staticNodePort }}
            {{- $resolvedStaticDiscovery := default $defaultStaticDiscovery .Values.settings.staticNodeDiscoveryPort }}
            {{- $settingsValues := default (dict) .Values.settings }}
            {{- $allocationsOverride := get $settingsValues "allocations" }}
            {{- $allocationsOverrideBlank := and (kindIs "string" $allocationsOverride) (eq (trim $allocationsOverride) "") }}
            {{- $allocationsOverrideSet := and (not (kindIs "invalid" $allocationsOverride)) (not $allocationsOverrideBlank) (not (empty $allocationsOverride)) }}
            {{- $resolvedAllocations := ternary $allocationsOverride $allocationsFilePath $allocationsOverrideSet }}
            {{- $globalNodes := default (dict) (get $globalValues "networkNodes") }}
            {{- $localChainId := get $settingsValues "chainId" }}
            {{- $globalChainId := get $globalValues "chainId" }}
            {{- $localChainIdBlank := and (kindIs "string" $localChainId) (eq (trim $localChainId) "") }}
            {{- $globalChainIdBlank := and (kindIs "string" $globalChainId) (eq (trim $globalChainId) "") }}
            {{- $localChainIdSet := and (not (kindIs "invalid" $localChainId)) (not $localChainIdBlank) (not (empty $localChainId)) }}
            {{- $globalChainIdSet := and (not (kindIs "invalid" $globalChainId)) (not $globalChainIdBlank) (not (empty $globalChainId)) }}
            {{- $resolvedChainId := ternary $localChainId $globalChainId $localChainIdSet }}
            {{- $autoNames := dict "service" "besu-node" "podPrefix" "besu-node-validator" }}
            {{- with (index $.Subcharts "network-nodes") }}
              {{- $service := include "nodes.fullname" . }}
              {{- $_ := set $autoNames "service" $service }}
              {{- $_ := set $autoNames "podPrefix" (printf "%s-validator" $service) }}
            {{- end }}
            {{- $serviceOverride := coalesce .Values.settings.staticNodeServiceName (get $globalNodes "serviceName") }}
            {{- $resolvedServiceName := default (index $autoNames "service") $serviceOverride }}
            {{- $podOverride := coalesce .Values.settings.staticNodePodPrefix (get $globalNodes "podPrefix") }}
            {{- $resolvedPodPrefix := default (index $autoNames "podPrefix") $podOverride }}
            {{- $resolvedGenesisName := default "besu-genesis" (default (get $globalNodes "genesisConfigMapName") .Values.settings.genesisConfigMapName) }}
            {{- $resolvedStaticNodesName := default "besu-static-nodes" (default (get $globalNodes "staticNodesConfigMapName") .Values.settings.staticNodesConfigMapName) }}
            {{- $resolvedFaucetPrefix := default "besu-faucet" (default (get $globalNodes "faucetArtifactPrefix") .Values.settings.faucetArtifactPrefix) }}
            {{- with .Values.settings.validators }}
            - --validators={{ . }}
            {{- end }}
            - --static-node-namespace={{ default .Release.Namespace .Values.settings.staticNodeNamespace }}
            {{- if $resolvedStaticDomain }}
            - --static-node-domain={{ $resolvedStaticDomain }}
            {{- end }}
            - --static-node-port={{ $resolvedStaticPort }}
            - --static-node-discovery-port={{ $resolvedStaticDiscovery }}
            - --static-node-service-name={{ $resolvedServiceName }}
            - --static-node-pod-prefix={{ $resolvedPodPrefix }}
            - --genesis-configmap-name={{ $resolvedGenesisName }}
            - --static-nodes-configmap-name={{ $resolvedStaticNodesName }}
            - --faucet-artifact-prefix={{ $resolvedFaucetPrefix }}
            - --allocations={{ $resolvedAllocations }}
            - --abi-directory={{ $abiVolumeMountPath }}
            {{- with .Values.settings.outputType }}
            - --outputType={{ . }}
            {{- end }}
            {{- with .Values.settings.consensus }}
            - --consensus={{ . }}
            {{- end }}
            {{- if or $localChainIdSet $globalChainIdSet }}
            - --chain-id={{ $resolvedChainId }}
            {{- end }}
            {{- with .Values.settings.secondsPerBlock }}
            - --seconds-per-block={{ . }}
            {{- end }}
            {{- with .Values.settings.gasLimit }}
            - --gas-limit={{ . }}
            {{- end }}
            {{- with .Values.settings.gasPrice }}
            - --gas-price={{ . }}
            {{- end }}
            {{- with .Values.settings.evmStackSize }}
            - --evm-stack-size={{ . }}
            {{- end }}
            {{- with .Values.settings.contractSizeLimit }}
            - --contract-size-limit={{ . }}
            {{- end }}
            {{- if $copyGenesis }}
            - --subgraph-hash-file={{ $subgraphFilePath }}
            {{- end }}
            - --accept-defaults
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: {{ $allocationsVolumeName }}
              mountPath: {{ $allocationsVolumeMountPath }}
              readOnly: true
            - name: {{ $abiVolumeName }}
              mountPath: {{ $abiVolumeMountPath }}
              readOnly: true
            {{- if $copyGenesis }}
            - name: {{ $subgraphVolumeName }}
              mountPath: {{ $subgraphVolumeMountPath }}
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: {{ $allocationsVolumeName }}
          emptyDir: {}
        - name: {{ $abiVolumeName }}
          emptyDir: {}
        {{- if $copyGenesis }}
        - name: {{ $subgraphVolumeName }}
          emptyDir: {}
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
