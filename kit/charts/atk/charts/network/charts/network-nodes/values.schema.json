{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "network-nodes values",
  "type": "object",
  "properties": {
    "global": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "properties": {
            "kots.io/app-slug": {
              "type": "string",
              "default": "settlemint-atk"
            }
          },
          "description": "KOTS application slug identifier for Replicated application management.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Global configuration values inherited from parent charts.",
      "additionalProperties": false
    },
    "replicaCount": {
      "description": "Total number of Besu pods (validators + RPC). Used for documentation summaries.",
      "type": "integer",
      "default": 6
    },
    "rpcReplicaCount": {
      "description": "Number of RPC node replicas provisioned via StatefulSet.",
      "type": "integer",
      "default": 2
    },
    "validatorReplicaCount": {
      "description": "Number of validator node replicas participating in consensus. Leave unset to derive from global.validatorReplicaCount.",
      "type": "integer",
      "default": 4
    },
    "image": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "default": "docker.io/hyperledger/besu"
        },
        "pullPolicy": {
          "description": "Kubernetes image pull policy for Besu containers.",
          "type": "string",
          "default": "IfNotPresent"
        },
        "tag": {
          "description": "Specific Besu image tag to deploy.",
          "type": "string",
          "default": "25.9.0"
        }
      },
      "description": "Container image configuration shared by validator and RPC pods.",
      "additionalProperties": false
    },
    "imagePullSecrets": {
      "type": "array",
      "description": "Image pull secrets granting registry access for the Besu image.",
      "items": {}
    },
    "nameOverride": {
      "description": "Override for the short chart name used in resource naming.",
      "type": "string",
      "default": ""
    },
    "fullnameOverride": {
      "description": "Override for the fully qualified release name used in resource naming.",
      "type": "string",
      "default": "besu-node"
    },
    "serviceAccount": {
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "default": true
        },
        "automount": {
          "description": "Mount the ServiceAccount token volume into pods.",
          "type": "boolean",
          "default": true
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Metadata annotations applied to the ServiceAccount.",
          "additionalProperties": true
        },
        "name": {
          "description": "Existing ServiceAccount name to reuse when creation is disabled.",
          "type": "string",
          "default": ""
        }
      },
      "description": "Kubernetes ServiceAccount configuration applied to Besu pods.",
      "additionalProperties": false
    },
    "rbac": {
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "default": true
        }
      },
      "description": "RBAC configuration controlling Role/RoleBinding creation for accessing Besu artifacts.",
      "additionalProperties": false
    },
    "podAnnotations": {
      "type": "object",
      "properties": {
        "prometheus.io/scrape": {
          "type": "string",
          "default": "true"
        },
        "prometheus.io/path": {
          "description": "HTTP path exposing Prometheus-formatted metrics.",
          "type": "string",
          "default": "/metrics"
        },
        "prometheus.io/port": {
          "description": "Container port value used by Prometheus to scrape metrics.",
          "type": "string",
          "default": "9545"
        },
        "prometheus.io/scheme": {
          "description": "HTTP scheme (http or https) used for metrics scraping.",
          "type": "string",
          "default": "http"
        }
      },
      "description": "Pod annotations merged onto all Besu pods.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "podLabels": {
      "type": "object",
      "properties": {},
      "description": "Additional labels applied to all Besu pods.",
      "additionalProperties": true
    },
    "podDisruptionBudgets": {
      "type": "object",
      "properties": {
        "validator": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false
            },
            "minAvailable": {
              "description": "Minimum validator pods that must remain available. Mutually exclusive with maxUnavailable.",
              "type": "integer",
              "default": 1
            },
            "maxUnavailable": {
              "description": "Optional unhealthy pod eviction policy (Default or AlwaysAllow). -- (int) Maximum validator pods that can be disrupted at once. Mutually exclusive with minAvailable.",
              "type": [
                "string",
                "null"
              ],
              "default": null
            },
            "unhealthyPodEvictionPolicy": {
              "type": "string",
              "default": ""
            },
            "annotations": {
              "type": "object",
              "properties": {},
              "description": "Additional annotations applied to the validator PodDisruptionBudget.",
              "additionalProperties": true
            },
            "labels": {
              "type": "object",
              "properties": {},
              "description": "Additional labels applied to the validator PodDisruptionBudget.",
              "additionalProperties": true
            }
          },
          "description": "Enable the validator PodDisruptionBudget.",
          "additionalProperties": false
        },
        "rpc": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false
            },
            "minAvailable": {
              "description": "Minimum RPC pods that must remain available. Mutually exclusive with maxUnavailable.",
              "type": "integer",
              "default": 1
            },
            "maxUnavailable": {
              "description": "Optional unhealthy pod eviction policy (Default or AlwaysAllow). -- (int) Maximum RPC pods that can be disrupted at once. Mutually exclusive with minAvailable.",
              "type": [
                "string",
                "null"
              ],
              "default": null
            },
            "unhealthyPodEvictionPolicy": {
              "type": "string",
              "default": ""
            },
            "annotations": {
              "type": "object",
              "properties": {},
              "description": "Additional annotations applied to the RPC PodDisruptionBudget.",
              "additionalProperties": true
            },
            "labels": {
              "type": "object",
              "properties": {},
              "description": "Additional labels applied to the RPC PodDisruptionBudget.",
              "additionalProperties": true
            }
          },
          "description": "PodDisruptionBudget governing RPC pods.",
          "additionalProperties": false
        }
      },
      "description": "PodDisruptionBudget configuration for validator and RPC workloads.",
      "additionalProperties": false
    },
    "networkPolicy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "podSelector": {
          "type": "object",
          "properties": {},
          "description": "Optional override for the default pod selector; defaults to Besu workload labels when empty.",
          "additionalProperties": true
        },
        "policyTypes": {
          "type": "array",
          "description": "Policy types enforced by the NetworkPolicy. When empty, inferred from ingress/egress rules or defaults to both.",
          "items": {}
        },
        "labels": {
          "type": "object",
          "properties": {},
          "description": "Additional labels to add to the NetworkPolicy metadata.",
          "additionalProperties": true
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Additional annotations to add to the NetworkPolicy metadata.",
          "additionalProperties": true
        },
        "ingress": {
          "type": "array",
          "description": "NetworkPolicy ingress rules. Leave empty to deny all ingress when enabled.",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "array",
                    "description": "Target ports exposed to the selected sources.",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "podSelector": {
                              "type": "object",
                              "properties": {
                                "matchLabels": {
                                  "type": "object",
                                  "properties": {
                                    "app.kubernetes.io/name": {
                                      "type": "string",
                                      "default": "txsigner"
                                    }
                                  },
                                  "description": "Application name label for txsigner.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": "Label matchers selecting txsigner pods.",
                              "additionalProperties": {
                                "type": "object"
                              }
                            }
                          },
                          "description": "Pod selector allowing txsigner pods ingress access.",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "podSelector": {
                              "type": "object",
                              "properties": {
                                "matchLabels": {
                                  "type": "object",
                                  "properties": {
                                    "app.kubernetes.io/name": {
                                      "type": "string",
                                      "default": "erpc"
                                    }
                                  },
                                  "description": "Application name label for erpc.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": "Label matchers selecting erpc pods.",
                              "additionalProperties": {
                                "type": "object"
                              }
                            }
                          },
                          "description": "Pod selector allowing erpc pods ingress access.",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "podSelector": {
                              "type": "object",
                              "properties": {
                                "matchLabels": {
                                  "type": "object",
                                  "properties": {
                                    "app.kubernetes.io/name": {
                                      "type": "string",
                                      "default": "blockscout-stack"
                                    }
                                  },
                                  "description": "Application name label for blockscout-stack.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": "Label matchers selecting blockscout-stack pods.",
                              "additionalProperties": {
                                "type": "object"
                              }
                            }
                          },
                          "description": "Pod selector allowing blockscout-stack pods ingress access.",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "podSelector": {
                              "type": "object",
                              "properties": {
                                "matchLabels": {
                                  "type": "object",
                                  "properties": {
                                    "app.kubernetes.io/name": {
                                      "type": "string",
                                      "default": "graph-node"
                                    }
                                  },
                                  "description": "Application name label for graph-node.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": "Label matchers selecting graph-node pods.",
                              "additionalProperties": {
                                "type": "object"
                              }
                            }
                          },
                          "description": "Pod selector allowing graph-node pods ingress access.",
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  "ports": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string",
                              "default": "TCP"
                            },
                            "port": {
                              "description": "HTTP JSON-RPC port number.",
                              "type": "integer",
                              "default": 8545
                            }
                          },
                          "description": "Protocol type for HTTP JSON-RPC port.",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string",
                              "default": "TCP"
                            },
                            "port": {
                              "description": "WebSocket JSON-RPC port number.",
                              "type": "integer",
                              "default": 8546
                            }
                          },
                          "description": "Protocol type for WebSocket JSON-RPC port.",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string",
                              "default": "TCP"
                            },
                            "port": {
                              "description": "GraphQL API port number.",
                              "type": "integer",
                              "default": 8547
                            }
                          },
                          "description": "Protocol type for GraphQL API port.",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string",
                              "default": "TCP"
                            },
                            "port": {
                              "description": "Prometheus metrics port number.",
                              "type": "integer",
                              "default": 9545
                            }
                          },
                          "description": "Protocol type for metrics port.",
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                "description": "Source pod selectors allowed to connect to Besu services.",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "app.kubernetes.io/name": {
                                  "type": "string",
                                  "default": "besu-statefulset"
                                }
                              },
                              "description": "Application name label for Besu StatefulSet.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matchers selecting Besu StatefulSet pods.",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Pod selector for Besu StatefulSet pods.",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "P2P port exposed to Besu peers.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "RLPx P2P port number.",
                          "type": "integer",
                          "default": 30303
                        }
                      },
                      "description": "Protocol type for P2P port.",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Permit intra-cluster P2P traffic among Besu nodes. -- (list) Source pod selectors for P2P communication.",
                "additionalProperties": false
              }
            ]
          }
        },
        "egress": {
          "type": "array",
          "description": "NetworkPolicy egress rules. Leave empty to deny all egress when enabled.",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "namespaceSelector": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": true
                        },
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "k8s-app": {
                                  "type": "string",
                                  "default": "kube-dns"
                                }
                              },
                              "description": "Kubernetes DNS application label.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Pod selector for kube-dns pods.",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Namespace selector for DNS pods (empty matches all namespaces).",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "DNS port configuration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "UDP"
                        },
                        "port": {
                          "description": "DNS port number.",
                          "type": "integer",
                          "default": 53
                        }
                      },
                      "description": "Protocol type for DNS (UDP).",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Destination selectors for DNS egress.",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "app.kubernetes.io/name": {
                                  "type": "string",
                                  "default": "besu-statefulset"
                                }
                              },
                              "description": "Application name label for Besu StatefulSet.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matchers selecting Besu StatefulSet pods.",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Pod selector for Besu StatefulSet pods.",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "P2P port for internal communication.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "RLPx P2P port number.",
                          "type": "integer",
                          "default": 30303
                        }
                      },
                      "description": "Protocol type for internal P2P.",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Permit Besu pods to speak to peers inside the namespace. -- (list) Destination pod selectors for internal P2P egress.",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ipBlock": {
                          "type": "object",
                          "properties": {
                            "cidr": {
                              "type": "string",
                              "default": "0.0.0.0/0"
                            },
                            "except": {
                              "type": "array",
                              "description": "Exception list blocking private IP ranges from egress.",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "default": "10.0.0.0/8"
                                  },
                                  {
                                    "description": "Private IP range 172.16.0.0/12.",
                                    "type": "string",
                                    "default": "172.16.0.0/12"
                                  },
                                  {
                                    "description": "Private IP range 192.168.0.0/16.",
                                    "type": "string",
                                    "default": "192.168.0.0/16"
                                  }
                                ]
                              }
                            }
                          },
                          "description": "CIDR range allowing all external IPs. Adjust the except list to match internal cluster CIDRs to avoid bypassing other policies. -- (list) P2P port for external communication.",
                          "additionalProperties": false
                        }
                      },
                      "description": "IP block configuration for external network access.",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "RLPx P2P port number.",
                          "type": "integer",
                          "default": 30303
                        }
                      },
                      "description": "Protocol type for external P2P.",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Allow outbound P2P connections to external peers (public networks). -- (list) IP block selectors for external P2P egress.",
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "description": "NetworkPolicy configuration applied to Besu pods.",
      "additionalProperties": false
    },
    "priorityClassNames": {
      "type": "object",
      "properties": {
        "validator": {
          "type": "string",
          "default": ""
        },
        "rpc": {
          "description": "PriorityClass name assigned to RPC pods. Leave empty to inherit namespace defaults.",
          "type": "string",
          "default": ""
        }
      },
      "description": "PriorityClass configuration applied to Besu workloads.",
      "additionalProperties": false
    },
    "podSecurityContext": {
      "type": "object",
      "properties": {},
      "description": "Pod-level security context shared by all containers.",
      "additionalProperties": true
    },
    "securityContext": {
      "type": "object",
      "properties": {},
      "description": "Container-level security context applied to Besu containers.",
      "additionalProperties": true
    },
    "service": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "ClusterIP"
        },
        "ports": {
          "type": "object",
          "properties": {
            "rpc": {
              "type": "integer",
              "default": 8545
            },
            "ws": {
              "description": "WebSocket JSON-RPC port.",
              "type": "integer",
              "default": 8546
            },
            "graphql": {
              "description": "GraphQL API port.",
              "type": "integer",
              "default": 8547
            },
            "rlpx": {
              "description": "RLPx TCP peer-to-peer port.",
              "type": "integer",
              "default": 30303
            },
            "discovery": {
              "description": "Discovery UDP port used by devp2p.",
              "type": "integer",
              "default": 30303
            },
            "metrics": {
              "description": "Prometheus metrics port.",
              "type": "integer",
              "default": 9545
            }
          },
          "description": "Named Service ports exposing Besu interfaces.",
          "additionalProperties": false
        }
      },
      "description": "Kubernetes Service definition exposing Besu endpoints.",
      "additionalProperties": false
    },
    "config": {
      "type": "object",
      "properties": {
        "genesisFile": {
          "type": "string",
          "default": "/etc/besu/genesis.json"
        },
        "logging": {
          "description": "Log verbosity level for Besu components.",
          "type": "string",
          "default": "INFO"
        },
        "logFormat": {
          "description": "Log output format. Supports \"plain\" (default) or \"json\".",
          "type": "string",
          "default": "plain"
        },
        "dataStorageFormat": {
          "description": "Ledger storage backend (FOREST or BONSAI).",
          "type": "string",
          "default": "FOREST"
        },
        "privateKeyFilename": {
          "description": "Filename containing each node's private key within mounted secrets.",
          "type": "string",
          "default": "privateKey"
        },
        "bonsaiLimitTrieLogsEnabled": {
          "description": "Emit Bonsai limit trie logs for debugging state transitions.",
          "type": "boolean",
          "default": false
        },
        "cacheLastBlocks": {
          "description": "Number of recent blocks cached in memory.",
          "type": "integer",
          "default": 1024
        },
        "minGasPrice": {
          "description": "Minimum gas price accepted for transactions (wei).",
          "type": "integer",
          "default": 0
        },
        "txPool": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "default": "SEQUENCED"
            },
            "maxSize": {
              "description": "Maximum transactions retained in the pool.",
              "type": "integer",
              "default": 100000
            },
            "noLocalPriority": {
              "description": "Disable preferential treatment of locally submitted transactions.",
              "type": "boolean",
              "default": true
            },
            "limitByAccountPercentage": {
              "description": "Maximum percentage of the pool allowed per account.",
              "type": "integer",
              "default": 1
            },
            "enableSaveRestore": {
              "description": "Persist the transaction pool to disk between restarts.",
              "type": "boolean",
              "default": true
            }
          },
          "description": "Transaction pool configuration for ingress and prioritisation.",
          "additionalProperties": false
        },
        "p2p": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "discoveryEnabled": {
              "description": "Enable the discovery protocol for automatic peer finding.",
              "type": "boolean",
              "default": true
            },
            "staticNodesFile": {
              "description": "Path to the static-nodes.json file providing fixed peers.",
              "type": "string",
              "default": "/etc/besu/static-nodes.json"
            },
            "interface": {
              "description": "Network interface the P2P server binds to.",
              "type": "string",
              "default": "0.0.0.0"
            },
            "maxPeers": {
              "description": "Maximum simultaneous peer connections.",
              "type": "integer",
              "default": 25
            }
          },
          "description": "Peer-to-peer networking settings.",
          "additionalProperties": false
        },
        "rpc": {
          "type": "object",
          "properties": {
            "txFeecap": {
              "type": "integer",
              "default": 0
            }
          },
          "description": "JSON-RPC subsystem configuration shared by HTTP and WebSocket servers.",
          "additionalProperties": false
        },
        "sync": {
          "type": "object",
          "properties": {
            "minPeers": {
              "type": "integer",
              "default": 1
            },
            "mode": {
              "description": "Synchronisation mode (FULL, FAST, SNAP, etc.).",
              "type": "string",
              "default": "FULL"
            }
          },
          "description": "Chain synchronisation controls.",
          "additionalProperties": false
        },
        "remoteConnectionsLimitEnabled": {
          "description": "Enable limits on concurrent remote JSON-RPC connections.",
          "type": "boolean",
          "default": false
        },
        "randomPeerPriorityEnabled": {
          "description": "Randomise peer priority to avoid deterministic ordering.",
          "type": "boolean",
          "default": true
        },
        "receiptCompactionEnabled": {
          "description": "Enable receipt compaction to reduce disk usage.",
          "type": "boolean",
          "default": true
        },
        "hostAllowlist": {
          "type": "array",
          "description": "Hostnames allowed to access the RPC interfaces; `*` permits all.",
          "items": {
            "type": "string",
            "default": "*"
          }
        },
        "http": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "host": {
              "description": "Network interface for the HTTP JSON-RPC listener.",
              "type": "string",
              "default": "0.0.0.0"
            },
            "api": {
              "type": "array",
              "description": "Enabled JSON-RPC API namespaces exposed over HTTP.",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "default": "DEBUG"
                  },
                  {
                    "type": "string",
                    "default": "ETH"
                  },
                  {
                    "type": "string",
                    "default": "ADMIN"
                  },
                  {
                    "type": "string",
                    "default": "WEB3"
                  },
                  {
                    "type": "string",
                    "default": "IBFT"
                  },
                  {
                    "type": "string",
                    "default": "NET"
                  },
                  {
                    "type": "string",
                    "default": "TRACE"
                  },
                  {
                    "type": "string",
                    "default": "QBFT"
                  },
                  {
                    "type": "string",
                    "default": "PERM"
                  },
                  {
                    "type": "string",
                    "default": "TXPOOL"
                  },
                  {
                    "type": "string",
                    "default": "PLUGINS"
                  }
                ]
              }
            },
            "corsOrigins": {
              "type": "array",
              "description": "Allowed CORS origins for HTTP JSON-RPC requests.",
              "items": {
                "type": "string",
                "default": "all"
              }
            },
            "authenticationEnabled": {
              "description": "Enable JWT authentication for HTTP JSON-RPC requests.",
              "type": "boolean",
              "default": false
            },
            "maxActiveConnections": {
              "description": "Maximum concurrent HTTP JSON-RPC connections.",
              "type": "integer",
              "default": 2000
            },
            "maxRequestContentLength": {
              "description": "Maximum HTTP request body size in bytes.",
              "type": "integer",
              "default": 524288000
            },
            "maxBatchSize": {
              "description": "Maximum number of batched JSON-RPC calls per request.",
              "type": "integer",
              "default": 512
            }
          },
          "description": "HTTP JSON-RPC server configuration.",
          "additionalProperties": false
        },
        "ws": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "host": {
              "description": "Network interface for the WebSocket listener.",
              "type": "string",
              "default": "0.0.0.0"
            },
            "api": {
              "type": "array",
              "description": "Enabled JSON-RPC API namespaces exposed over WebSockets.",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "default": "DEBUG"
                  },
                  {
                    "type": "string",
                    "default": "ETH"
                  },
                  {
                    "type": "string",
                    "default": "ADMIN"
                  },
                  {
                    "type": "string",
                    "default": "WEB3"
                  },
                  {
                    "type": "string",
                    "default": "IBFT"
                  },
                  {
                    "type": "string",
                    "default": "NET"
                  },
                  {
                    "type": "string",
                    "default": "TRACE"
                  },
                  {
                    "type": "string",
                    "default": "QBFT"
                  },
                  {
                    "type": "string",
                    "default": "PERM"
                  },
                  {
                    "type": "string",
                    "default": "TXPOOL"
                  },
                  {
                    "type": "string",
                    "default": "PLUGINS"
                  }
                ]
              }
            },
            "authenticationEnabled": {
              "description": "Enable JWT authentication for WebSocket requests.",
              "type": "boolean",
              "default": false
            },
            "maxActiveConnections": {
              "description": "Maximum concurrent WebSocket connections.",
              "type": "integer",
              "default": 2000
            },
            "maxFrameSize": {
              "description": "Maximum WebSocket frame size in bytes.",
              "type": "integer",
              "default": 2097152
            }
          },
          "description": "WebSocket JSON-RPC server configuration.",
          "additionalProperties": false
        },
        "graphql": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "host": {
              "description": "Network interface for the GraphQL server.",
              "type": "string",
              "default": "0.0.0.0"
            },
            "corsOrigins": {
              "type": "array",
              "description": "Allowed CORS origins for GraphQL requests.",
              "items": {
                "type": "string",
                "default": "all"
              }
            }
          },
          "description": "GraphQL server configuration.",
          "additionalProperties": false
        },
        "metrics": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "host": {
              "description": "Network interface for the metrics endpoint.",
              "type": "string",
              "default": "0.0.0.0"
            },
            "categories": {
              "type": "array",
              "description": "Metrics categories exposed to Prometheus.",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "default": "BLOCKCHAIN"
                  },
                  {
                    "type": "string",
                    "default": "ETHEREUM"
                  },
                  {
                    "type": "string",
                    "default": "EXECUTORS"
                  },
                  {
                    "type": "string",
                    "default": "JVM"
                  },
                  {
                    "type": "string",
                    "default": "NETWORK"
                  },
                  {
                    "type": "string",
                    "default": "PEERS"
                  },
                  {
                    "type": "string",
                    "default": "PROCESS"
                  },
                  {
                    "type": "string",
                    "default": "PRUNER"
                  },
                  {
                    "type": "string",
                    "default": "RPC"
                  },
                  {
                    "type": "string",
                    "default": "SYNCHRONIZER"
                  },
                  {
                    "type": "string",
                    "default": "TRANSACTION_POOL"
                  }
                ]
              }
            }
          },
          "description": "Prometheus metrics export configuration.",
          "additionalProperties": false
        },
        "revertReasonEnabled": {
          "description": "Include revert reasons in RPC responses when failures occur.",
          "type": "boolean",
          "default": true
        }
      },
      "description": "Core Besu configuration persisted as besu.conf for both validators and RPC nodes.",
      "additionalProperties": true
    },
    "ingress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "className": {
          "description": "ingressClassName assigned to the Ingress for controller selection.",
          "type": "string",
          "default": ""
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Metadata annotations applied to the Ingress resource.",
          "additionalProperties": true
        },
        "hosts": {
          "type": "array",
          "description": "Hostname and path routing rules for the Ingress.",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "default": "chart-example.local"
              },
              "paths": {
                "type": "array",
                "description": "Path-based routing rules for the host.",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "default": "/"
                    },
                    "pathType": {
                      "description": "Path matching type (Exact, Prefix, or ImplementationSpecific).",
                      "type": "string",
                      "default": "ImplementationSpecific"
                    }
                  },
                  "description": "URL path prefix.",
                  "additionalProperties": false
                }
              }
            },
            "description": "Hostname for the Ingress rule.",
            "additionalProperties": false
          }
        },
        "tls": {
          "type": "array",
          "description": "TLS configuration for Ingress hosts.",
          "items": {}
        }
      },
      "description": "Ingress configuration used to expose RPC services via Kubernetes Ingress resources.",
      "additionalProperties": false
    },
    "httpRoute": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Metadata annotations applied to the HTTPRoute.",
          "additionalProperties": true
        },
        "parentRefs": {
          "type": "array",
          "description": "Gateway references that should accept this route.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "default": "gateway"
              },
              "sectionName": {
                "description": "Listener section name within the Gateway.",
                "type": "string",
                "default": "http"
              }
            },
            "description": "Gateway name. namespace: default -- (list) HTTP hostnames matched by the route.",
            "additionalProperties": false
          }
        },
        "hostnames": {
          "type": "array",
          "items": {
            "type": "string",
            "default": "chart-example.local"
          }
        },
        "rules": {
          "type": "array",
          "description": "Rules containing matches and optional filters evaluated by the Gateway.",
          "items": {
            "type": "object",
            "properties": {
              "matches": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "PathPrefix"
                        },
                        "value": {
                          "description": "Path value used when evaluating the request URL.",
                          "type": "string",
                          "default": "/headers"
                        }
                      },
                      "description": "Path match type (Exact, PathPrefix, or RegularExpression).",
                      "additionalProperties": false
                    }
                  },
                  "description": "Path matching condition for the request.",
                  "additionalProperties": false
                }
              }
            },
            "description": "Match conditions evaluated for each request. filters can be enabled to mutate headers or other request properties. - type: RequestHeaderModifier requestHeaderModifier: set: - name: My-Overwrite-Header value: this-is-the-only-value remove: - User-Agent Additional matches can be added as required by traffic patterns. - matches: - path: type: PathPrefix value: /echo headers: - name: version value: v2 -- (object) OpenShift Route configuration for exposing services through the OpenShift router.",
            "additionalProperties": {
              "type": "array"
            }
          }
        }
      },
      "description": "Enable rendering of an HTTPRoute resource.",
      "additionalProperties": false
    },
    "openShiftRoute": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Metadata annotations applied to the Route.",
          "additionalProperties": true
        },
        "host": {
          "description": "Desired external hostname for the Route; leave empty for automatic assignment.",
          "type": "string",
          "default": ""
        },
        "path": {
          "description": "URL path prefix handled by the Route.",
          "type": "string",
          "default": ""
        },
        "wildcardPolicy": {
          "description": "Wildcard policy controlling subdomain routing (None or Subdomain).",
          "type": "string",
          "default": ""
        },
        "port": {
          "type": "object",
          "properties": {
            "targetPort": {
              "type": "string",
              "default": "http"
            }
          },
          "description": "Target service port configuration for the Route.",
          "additionalProperties": false
        },
        "to": {
          "type": "object",
          "properties": {
            "weight": {
              "type": "integer",
              "default": 100
            }
          },
          "description": "Primary backend configuration for the Route.",
          "additionalProperties": false
        },
        "alternateBackends": {
          "type": "array",
          "description": "Additional backend references to balance traffic across services.",
          "items": {}
        },
        "tls": {
          "description": "TLS termination settings; set to null to disable TLS.",
          "type": [
            "object",
            "null"
          ],
          "default": null
        }
      },
      "description": "Enable creation of an OpenShift Route resource.",
      "additionalProperties": false
    },
    "resources": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string",
              "default": "60m"
            },
            "memory": {
              "description": "Memory request per Besu pod",
              "type": "string",
              "default": "512Mi"
            }
          },
          "description": "CPU request per Besu pod",
          "additionalProperties": false
        },
        "limits": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string",
              "default": "180m"
            },
            "memory": {
              "description": "Memory limit per Besu pod",
              "type": "string",
              "default": "1024Mi"
            }
          },
          "description": "CPU limit per Besu pod (approx. 3x request to target ~33% utilization).",
          "additionalProperties": false
        }
      },
      "description": "CPU and memory requests or limits for Besu containers.",
      "additionalProperties": false
    },
    "livenessProbe": {
      "type": "object",
      "properties": {
        "httpGet": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "default": "/readiness?minPeers=1&maxBlocksBehind=10000"
            },
            "port": {
              "description": "Target container port serving the liveness endpoint.",
              "type": [
                "string",
                "integer"
              ],
              "default": "json-rpc"
            }
          },
          "description": "HTTP path used for liveness probing.",
          "additionalProperties": false
        },
        "initialDelaySeconds": {
          "description": "Seconds to wait before starting liveness checks.",
          "type": "integer",
          "default": 30
        },
        "periodSeconds": {
          "description": "Frequency of liveness checks in seconds.",
          "type": "integer",
          "default": 10
        },
        "timeoutSeconds": {
          "description": "Timeout in seconds before marking the probe as failed.",
          "type": "integer",
          "default": 2
        },
        "failureThreshold": {
          "description": "Consecutive failures required before the container is restarted.",
          "type": "integer",
          "default": 3
        }
      },
      "description": "Liveness probe configuration ensuring containers restart when unhealthy.",
      "additionalProperties": false
    },
    "readinessProbe": {
      "description": "HTTP path used for readiness probing, including peer/sync thresholds. path: /liveness # -- (string|int) Target container port serving the readiness endpoint. port: json-rpc # -- (int) Seconds to wait before starting readiness checks. initialDelaySeconds: 15 # -- (int) Frequency of readiness checks in seconds. periodSeconds: 5 # -- (int) Timeout in seconds before marking the probe as failed. timeoutSeconds: 2 # -- (int) Consecutive failures required before the pod is considered unready. failureThreshold: 3 -- (object) Readiness probe configuration signalling when pods can accept traffic.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "persistence": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "mountPath": {
          "description": "Container path where the persistent volume is mounted.",
          "type": "string",
          "default": "/data"
        },
        "volumeName": {
          "description": "Logical name for the volume when using volumeClaimTemplates.",
          "type": "string",
          "default": "data"
        },
        "accessModes": {
          "type": "array",
          "description": "Requested access modes for the PersistentVolumeClaim.",
          "items": {
            "type": "string",
            "default": "ReadWriteOnce"
          }
        },
        "size": {
          "description": "Requested storage capacity for each PersistentVolumeClaim.",
          "type": "string",
          "default": "20Gi"
        },
        "storageClass": {
          "description": "StorageClass name used for provisioning volumes; empty selects the cluster default.",
          "type": "string",
          "default": ""
        },
        "volumeMode": {
          "description": "Volume mode (Filesystem or Block) requested for the PVC.",
          "type": "string",
          "default": ""
        },
        "existingClaim": {
          "description": "Name of an existing PersistentVolumeClaim to reuse instead of creating new PVCs.",
          "type": "string",
          "default": ""
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Metadata annotations applied to generated PVCs.",
          "additionalProperties": true
        },
        "selector": {
          "type": "object",
          "properties": {},
          "description": "PVC selector allowing binding to specific PersistentVolumes.",
          "additionalProperties": true
        },
        "retention": {
          "type": "object",
          "properties": {
            "whenDeleted": {
              "type": "string",
              "default": "Retain"
            },
            "whenScaled": {
              "description": "Behaviour of PVCs when the StatefulSet scales down.",
              "type": "string",
              "default": "Retain"
            }
          },
          "description": "Retention policy controlling PVC lifecycle on delete or scale operations.",
          "additionalProperties": false
        },
        "subPath": {
          "description": "Subdirectory of the volume to mount instead of the root.",
          "type": "string",
          "default": ""
        },
        "readOnly": {
          "description": "Mount the volume read-only when true.",
          "type": "boolean",
          "default": false
        }
      },
      "description": "Persistent storage configuration for both validator and RPC StatefulSets.",
      "additionalProperties": false
    },
    "volumes": {
      "type": "array",
      "description": "Extra volumes attached to Besu pods for custom configuration or secrets.",
      "items": {}
    },
    "volumeMounts": {
      "type": "array",
      "description": "Additional volume mounts applied to Besu containers.",
      "items": {}
    },
    "initContainer": {
      "type": "object",
      "properties": {
        "tcpCheck": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false
            },
            "image": {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "string",
                  "default": "ghcr.io/settlemint/btp-waitforit"
                },
                "tag": {
                  "description": "Image tag for the tcp-check utility.",
                  "type": "string",
                  "default": "v7.7.10"
                },
                "pullPolicy": {
                  "description": "Image pull policy for the tcp-check init container.",
                  "type": "string",
                  "default": "IfNotPresent"
                }
              },
              "description": "Container image configuration for the tcp-check init container.",
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout in seconds applied to each dependency probe.",
              "type": "integer",
              "default": 120
            },
            "resources": {
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "string",
                      "default": "300m"
                    },
                    "memory": {
                      "description": "Memory limit.",
                      "type": "string",
                      "default": "64Mi"
                    }
                  },
                  "description": "CPU limit.",
                  "additionalProperties": false
                },
                "requests": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "string",
                      "default": "10m"
                    },
                    "memory": {
                      "description": "Memory request.",
                      "type": "string",
                      "default": "32Mi"
                    }
                  },
                  "description": "Minimum resource requests.",
                  "additionalProperties": false
                }
              },
              "description": "Resource requests and limits for the tcp-check init container.",
              "additionalProperties": false
            },
            "dependencies": {
              "type": "array",
              "description": "TCP dependencies expressed as name/endpoint pairs (host:port strings).",
              "items": {}
            }
          },
          "description": "Enable a tcp-check init container before Besu pods start.",
          "additionalProperties": false
        },
        "compileGenesis": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "image": {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "string",
                  "default": "ghcr.io/settlemint/network-bootstrapper"
                },
                "tag": {
                  "description": "Image tag for the network-bootstrapper CLI.",
                  "type": "string",
                  "default": "1.2.3"
                },
                "pullPolicy": {
                  "description": "Image pull policy for the compile-genesis init container.",
                  "type": "string",
                  "default": "IfNotPresent"
                }
              },
              "description": "Container image configuration for the compile-genesis init container.",
              "additionalProperties": false
            },
            "outputPath": {
              "description": "Filesystem path populated with the compiled genesis JSON. Leave empty to mirror config.genesisFile.",
              "type": "string",
              "default": ""
            },
            "resources": {
              "type": "object",
              "properties": {},
              "description": "Optional Kubernetes resource requests/limits for the compile-genesis init container.",
              "additionalProperties": true
            }
          },
          "description": "Compile-genesis init container configuration for merging allocation ConfigMaps.",
          "additionalProperties": false
        }
      },
      "description": "Init container configuration shared across validator and RPC workloads.",
      "additionalProperties": false
    },
    "extraInitContainers": {
      "type": "array",
      "description": "Additional init containers appended verbatim to both StatefulSets.",
      "items": {}
    },
    "nodeSelector": {
      "type": "object",
      "properties": {},
      "description": "Node selector constraints influencing where Besu pods can schedule.",
      "additionalProperties": true
    },
    "tolerations": {
      "type": "array",
      "description": "Tolerations allowing pods to run on nodes with matching taints.",
      "items": {}
    },
    "affinity": {
      "type": "object",
      "properties": {},
      "description": "Node and pod affinity or anti-affinity rules affecting scheduling decisions.",
      "additionalProperties": true
    }
  },
  "additionalProperties": false
}
