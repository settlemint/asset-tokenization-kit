## Introduction

TxSigner is a secure transaction signing service for blockchain applications that provides automated transaction signing, key management, and transaction queuing capabilities. It offers a secure environment for managing private keys and signing transactions with support for multiple signing strategies.

### Key Features

- **Multiple signing strategies** (local, KMS, HSM)
- **Secure key management** with encrypted storage
- **Transaction queuing** and nonce management
- **Rate limiting** and access control
- **Comprehensive audit logging**
- **Prometheus metrics** for monitoring
- **Support for multiple blockchain networks**

### Benefits

- Centralized signing service for distributed applications
- Reduced risk of private key exposure
- Automated nonce management prevents transaction conflicts
- Built-in rate limiting protects against abuse
- Audit trail for compliance requirements

### Use Cases

- DeFi applications requiring automated transactions
- NFT minting services
- Token distribution systems
- Bridge operators
- Any application requiring secure transaction signing

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Prerequisites

- Kubernetes 1.19+
- Helm 3.2.0+
- Access to a blockchain RPC endpoint
- Private key or key management service configured
- PostgreSQL database (defaults target the bundled `support.postgresql` release)

## Connection Requirements

TxSigner reads its database credentials from the `txsigner.postgresqlConnection` values block. Update
that section with the hostname, port, database, username, password, and SSL mode for your external
PostgreSQL instance.

## Installing the Chart

To install the chart with the release name `my-release`:

```console
helm install my-release .
```

The command deploys TxSigner on the Kubernetes cluster in the default configuration. The [Parameters](#parameters) section lists the parameters that can be configured during installation.

> **Tip**: List all releases using `helm list`

## Uninstalling the Chart

To uninstall/delete the `my-release` deployment:

```console
helm delete my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## Parameters

{{ template "chart.valuesSection" . }}

## Configuration and installation details

### Signing Strategies

TxSigner supports multiple signing strategies:

#### Local Signing (Development)

```yaml
config:
  signingStrategy: "local"
  privateKey: "0x..." # Not recommended for production
  # OR use existing secret
  existingSecret: "my-signing-key"
  existingSecretKey: "private-key"
```

#### AWS KMS (Production)

```yaml
config:
  signingStrategy: "kms"
  kms:
    provider: "aws"
    keyId: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012"
    region: "us-east-1"
```

#### Hardware Security Module (HSM)

```yaml
config:
  signingStrategy: "hsm"
  hsm:
    module: "/usr/lib/softhsm/libsofthsm2.so"
    slot: "0"
    pin: "1234"
```

### Advanced Configuration

#### Rate Limiting

Configure rate limiting to prevent abuse:

```yaml
config:
  rateLimit:
    enabled: true
    maxRequestsPerMinute: 60
    maxRequestsPerHour: 1000
```

#### Access Control

Restrict which contracts and methods can be called:

```yaml
config:
  allowedContracts:
    - "0x742d35Cc6634C0532925a3b844Bc9e7095931fE0"
    - "0x..."
  allowedMethods:
    - "transfer"
    - "approve"
    - "mint"
```

#### Gas Configuration

Control gas pricing strategies:

```yaml
config:
  gas:
    priceStrategy: "estimator" # or "fixed", "oracle"
    fixedPrice: 20 # in Gwei, only for fixed strategy
    limit: 3000000
    multiplier: 1.1 # for estimator strategy
```

#### Nonce Management

Configure nonce handling:

```yaml
config:
  nonce:
    strategy: "sequential" # or "parallel"
    maxPending: 10
```

### Exposing TxSigner

#### LoadBalancer Service

```yaml
service:
  type: LoadBalancer
  port: 3000
  metricsPort: 3001
```

#### Ingress

```yaml
ingress:
  enabled: true
  hostname: txsigner.example.com
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  tls: true
```

### Metrics and Monitoring

TxSigner exposes Prometheus metrics on port 3001 at the `/metrics` endpoint:

```yaml
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3001"
  prometheus.io/path: "/metrics"
```

Available metrics include:
- Transaction signing requests
- Queue depth
- Signing latency
- Rate limit violations
- Error rates

### Security Considerations

#### Network Policies

Restrict network access to TxSigner:

```yaml
networkPolicy:
  enabled: true
  allowExternal: false
  extraIngress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: dapp
      ports:
        - protocol: TCP
          port: 3000
```

#### Pod Security Context

Run with restricted permissions:

```yaml
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
```

### High Availability

Enable autoscaling for high availability:

```yaml
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  builtInMetrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
```

Configure pod disruption budget:

```yaml
pdb:
  enabled: true
  minAvailable: 1
```

## Troubleshooting

### TxSigner pods are not starting

Check the pod logs:
```console
kubectl logs -l app.kubernetes.io/name=txsigner
```

### Authentication errors

Verify your private key or KMS configuration:
```console
kubectl describe secret txsigner-env
```

### Connection to RPC endpoint failing

Test RPC connectivity from within the pod:
```console
kubectl exec -it deploy/txsigner -- curl -v http://your-rpc-endpoint:8545
```

### High latency in transaction signing

Check the metrics to identify bottlenecks:
```console
kubectl port-forward svc/txsigner 3001:3001
curl http://localhost:3001/metrics | grep txsigner_signing_duration
```

### Nonce conflicts

Review nonce management strategy and increase `maxPending` if needed:
```console
kubectl logs -l app.kubernetes.io/name=txsigner | grep -i nonce
```
