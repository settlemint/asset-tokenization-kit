{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "dapp values",
  "type": "object",
  "properties": {
    "global": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "properties": {
            "kots.io/app-slug": {
              "type": "string",
              "default": "settlemint-atk"
            }
          },
          "description": "KOTS application slug identifier",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Global configuration values inherited from parent chart",
      "additionalProperties": false
    },
    "replicaCount": {
      "description": "Number of dApp replicas to deploy",
      "type": "integer",
      "default": 1
    },
    "image": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "default": "ghcr.io/settlemint/asset-tokenization-kit"
        },
        "pullPolicy": {
          "description": "dApp image pull policy",
          "type": "string",
          "default": "IfNotPresent"
        },
        "tag": {
          "description": "dApp image tag (defaults to chart appVersion)",
          "type": "string",
          "default": ""
        }
      },
      "description": "dApp image configuration",
      "additionalProperties": false
    },
    "nameOverride": {
      "description": "String to partially override dapp.fullname template",
      "type": "string",
      "default": "dapp"
    },
    "fullnameOverride": {
      "description": "String to fully override dapp.fullname template",
      "type": "string",
      "default": "dapp"
    },
    "serviceAccount": {
      "type": "object",
      "properties": {
        "create": {
          "description": "Set to true if your deployment needs specific permissions",
          "type": "boolean",
          "default": false
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Annotations to add to the service account",
          "additionalProperties": true
        },
        "name": {
          "description": "The name of the service account to use. If not set and create is true, a name is generated using the fullname template",
          "type": "string",
          "default": ""
        }
      },
      "description": "Service account configuration",
      "additionalProperties": false
    },
    "annotations": {
      "type": "object",
      "properties": {},
      "description": "Additional annotations for the deployment metadata",
      "additionalProperties": true
    },
    "podLabels": {
      "type": "object",
      "properties": {
        "app.kubernetes.io/component": {
          "type": "string",
          "default": "dapp"
        },
        "kots.io/app-slug": {
          "description": "KOTS application slug identifier",
          "type": "string",
          "default": "settlemint-atk"
        }
      },
      "description": "Additional labels for the deployment pod metadata",
      "additionalProperties": {
        "type": "string"
      }
    },
    "podAnnotations": {
      "type": "object",
      "properties": {
        "prometheus.io/scrape": {
          "type": "string",
          "default": "false"
        }
      },
      "description": "Annotations for dApp pods",
      "additionalProperties": {
        "type": "string"
      }
    },
    "podSecurityContext": {
      "type": "object",
      "properties": {},
      "description": "Pod security context configuration",
      "additionalProperties": true
    },
    "securityContext": {
      "type": "object",
      "properties": {},
      "description": "Container security context configuration",
      "additionalProperties": true
    },
    "service": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "ClusterIP"
        },
        "port": {
          "description": "Service port",
          "type": "integer",
          "default": 3000
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Service annotations",
          "additionalProperties": true
        }
      },
      "description": "Service configuration",
      "additionalProperties": false
    },
    "ingress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "className": {
          "description": "IngressClass that will be used to implement the Ingress",
          "type": "string",
          "default": "atk-nginx"
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Additional annotations for the Ingress resource",
          "additionalProperties": true
        },
        "hosts": {
          "type": "array",
          "description": "Ingress host configuration",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "default": "dapp.local"
              },
              "paths": {
                "type": "array",
                "description": "Path definitions for this host",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "default": "/((?:sm_|bpaas-)[^/]+)?/?(.*)"
                    },
                    "pathType": {
                      "description": "Path type for Kubernetes ingress",
                      "type": "string",
                      "default": "ImplementationSpecific"
                    }
                  },
                  "description": "URL path pattern matching original path structure",
                  "additionalProperties": false
                }
              }
            },
            "description": "Hostname for the ingress (placeholder - should be configured in parent chart values)",
            "additionalProperties": false
          }
        },
        "tls": {
          "type": "array",
          "description": "TLS configuration for the ingress",
          "items": {}
        }
      },
      "description": "Ingress configuration",
      "additionalProperties": false
    },
    "openShiftRoute": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "annotations": {
          "type": "object",
          "properties": {},
          "description": "Additional annotations for the OpenShift route resource",
          "additionalProperties": true
        },
        "host": {
          "description": "Hostname exposed via the OpenShift route",
          "type": "string",
          "default": "dapp.k8s.orb.local"
        },
        "path": {
          "description": "HTTP path exposed via the OpenShift route",
          "type": "string",
          "default": "/"
        },
        "wildcardPolicy": {
          "description": "Wildcard policy to apply to the route",
          "type": "string",
          "default": "None"
        },
        "port": {
          "type": "object",
          "properties": {
            "targetPort": {
              "type": "string",
              "default": "http"
            }
          },
          "description": "Service port configuration for the route target",
          "additionalProperties": false
        },
        "to": {
          "type": "object",
          "properties": {
            "weight": {
              "type": "integer",
              "default": 100
            }
          },
          "description": "Primary service weight configuration",
          "additionalProperties": false
        },
        "alternateBackends": {
          "type": "array",
          "description": "Additional backends for weighted routing",
          "items": {}
        },
        "tls": {
          "description": "TLS configuration for the route (optional). Set to null for no TLS (HTTP only), or specify configuration for TLS termination",
          "type": [
            "object",
            "null"
          ],
          "default": null
        }
      },
      "description": "Enable OpenShift route creation for DApp",
      "additionalProperties": false
    },
    "resources": {
      "type": "object",
      "properties": {},
      "description": "Resource requests and limits for the dApp container",
      "additionalProperties": true
    },
    "probes": {
      "type": "object",
      "properties": {
        "liveness": {
          "type": "object",
          "properties": {
            "httpGet": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "default": "/"
                },
                "port": {
                  "description": "Port name to probe",
                  "type": "string",
                  "default": "http"
                },
                "scheme": {
                  "description": "HTTP or HTTPS scheme",
                  "type": "string",
                  "default": "HTTP"
                }
              },
              "description": "HTTP path to probe",
              "additionalProperties": false
            },
            "initialDelaySeconds": {
              "description": "Number of seconds after the container has started before liveness probes are initiated",
              "type": "integer",
              "default": 10
            },
            "periodSeconds": {
              "description": "How often (in seconds) to perform the probe",
              "type": "integer",
              "default": 15
            },
            "timeoutSeconds": {
              "description": "Number of seconds after which the probe times out",
              "type": "integer",
              "default": 3
            },
            "failureThreshold": {
              "description": "Number of consecutive failures needed to consider the container unhealthy",
              "type": "integer",
              "default": 10
            },
            "successThreshold": {
              "description": "Minimum consecutive successes for the probe to be considered successful after having failed",
              "type": "integer",
              "default": 1
            }
          },
          "description": "HTTP GET probe configuration",
          "additionalProperties": false
        },
        "readiness": {
          "type": "object",
          "properties": {
            "httpGet": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "default": "/"
                },
                "port": {
                  "description": "Port name to probe",
                  "type": "string",
                  "default": "http"
                },
                "scheme": {
                  "description": "HTTP or HTTPS scheme",
                  "type": "string",
                  "default": "HTTP"
                }
              },
              "description": "HTTP path to probe",
              "additionalProperties": false
            },
            "initialDelaySeconds": {
              "description": "Number of seconds after the container has started before readiness probes are initiated",
              "type": "integer",
              "default": 5
            },
            "periodSeconds": {
              "description": "How often (in seconds) to perform the probe",
              "type": "integer",
              "default": 10
            },
            "timeoutSeconds": {
              "description": "Number of seconds after which the probe times out",
              "type": "integer",
              "default": 3
            },
            "failureThreshold": {
              "description": "Number of consecutive failures needed to consider the container not ready",
              "type": "integer",
              "default": 10
            },
            "successThreshold": {
              "description": "Minimum consecutive successes for the probe to be considered successful after having failed",
              "type": "integer",
              "default": 1
            }
          },
          "description": "Readiness probe configuration",
          "additionalProperties": false
        }
      },
      "description": "Liveness and Readiness probes configuration",
      "additionalProperties": false
    },
    "volumes": {
      "type": "array",
      "description": "Additional volumes for the deployment",
      "items": {}
    },
    "volumeMounts": {
      "type": "array",
      "description": "Additional volume mounts for the main container",
      "items": {}
    },
    "nodeSelector": {
      "type": "object",
      "properties": {},
      "description": "Node selector for pod assignment",
      "additionalProperties": true
    },
    "tolerations": {
      "type": "array",
      "description": "Tolerations for pod assignment",
      "items": {}
    },
    "affinity": {
      "type": "object",
      "properties": {},
      "description": "Affinity for pod assignment",
      "additionalProperties": true
    },
    "networkPolicy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "ingress": {
          "type": "array",
          "description": "Ingress rules for the network policy",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "array",
                    "description": "Namespace selector for ingress-nginx",
                    "items": {
                      "type": "object",
                      "properties": {
                        "namespaceSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "kubernetes.io/metadata.name": {
                                  "type": "string",
                                  "default": "ingress-nginx"
                                }
                              },
                              "description": "Namespace name label for ingress-nginx",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matcher for namespace",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Match labels for namespace selection",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for ingress traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "Port number",
                          "type": "integer",
                          "default": 3000
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Source selectors for ingress traffic",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "array",
                    "description": "Pod selector (empty = all pods in namespace)",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": true
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for same-namespace traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "Port number",
                          "type": "integer",
                          "default": 3000
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Allow traffic from same namespace -- (list) Source selectors for same-namespace traffic",
                "additionalProperties": false
              }
            ]
          }
        },
        "egress": {
          "type": "array",
          "description": "Egress rules for the network policy",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "description": "Namespace and pod selector for kube-dns",
                    "items": {
                      "type": "object",
                      "properties": {
                        "namespaceSelector": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": true
                        },
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "k8s-app": {
                                  "type": "string",
                                  "default": "kube-dns"
                                }
                              },
                              "description": "Kubernetes app label for DNS service",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Pod selector for kube-dns",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Match all namespaces",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for DNS traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "UDP"
                        },
                        "port": {
                          "description": "DNS port number",
                          "type": "integer",
                          "default": 53
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Destination selectors for DNS traffic",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "description": "Pod selector for PostgreSQL",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "app.kubernetes.io/name": {
                                  "type": "string",
                                  "default": "postgresql-ha"
                                }
                              },
                              "description": "Application name for PostgreSQL HA deployment",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matcher for PostgreSQL pods",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Pod selector configuration",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for PostgreSQL traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "PostgreSQL port number",
                          "type": "integer",
                          "default": 5432
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Allow access to PostgreSQL database -- (list) Destination selectors for PostgreSQL traffic",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "description": "Pod selector for Hasura",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "app.kubernetes.io/name": {
                                  "type": "string",
                                  "default": "graphql-engine"
                                }
                              },
                              "description": "Application name for Hasura GraphQL Engine",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matcher for Hasura pods",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Pod selector configuration",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for Hasura traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "Hasura GraphQL Engine port number",
                          "type": "integer",
                          "default": 8080
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Allow access to Hasura GraphQL Engine -- (list) Destination selectors for Hasura traffic",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "description": "Pod selector for Portal",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "app.kubernetes.io/name": {
                                  "type": "string",
                                  "default": "portal"
                                }
                              },
                              "description": "Application name for Portal service",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matcher for Portal pods",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Pod selector configuration",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for Portal traffic",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string",
                              "default": "TCP"
                            },
                            "port": {
                              "description": "Portal HTTP API port number",
                              "type": "integer",
                              "default": 3000
                            }
                          },
                          "description": "Protocol type",
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string",
                              "default": "TCP"
                            },
                            "port": {
                              "description": "Portal GraphQL API port number",
                              "type": "integer",
                              "default": 3001
                            }
                          },
                          "description": "TCP port configuration for Portal GraphQL API -- (string) Protocol type",
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                "description": "Allow access to Portal API -- (list) Destination selectors for Portal traffic",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "description": "Pod selector for ERPC",
                    "items": {
                      "type": "object",
                      "properties": {
                        "podSelector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "properties": {
                                "app.kubernetes.io/name": {
                                  "type": "string",
                                  "default": "erpc"
                                }
                              },
                              "description": "Application name for ERPC service",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Label matcher for ERPC pods",
                          "additionalProperties": {
                            "type": "object"
                          }
                        }
                      },
                      "description": "Pod selector configuration",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for ERPC traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "ERPC port number",
                          "type": "integer",
                          "default": 4000
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Allow access to ERPC (Ethereum RPC proxy) -- (list) Destination selectors for ERPC traffic",
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "array",
                    "description": "Match all namespaces for external access",
                    "items": {
                      "type": "object",
                      "properties": {
                        "namespaceSelector": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": true
                        }
                      },
                      "description": "Namespace selector (empty = all namespaces)",
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "type": "array",
                    "description": "Port definitions for HTTPS traffic",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "default": "TCP"
                        },
                        "port": {
                          "description": "HTTPS port number",
                          "type": "integer",
                          "default": 443
                        }
                      },
                      "description": "Protocol type",
                      "additionalProperties": false
                    }
                  }
                },
                "description": "Allow external HTTPS traffic for external APIs -- (list) Destination selectors for external HTTPS traffic",
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "description": "NetworkPolicy configuration",
      "additionalProperties": false
    },
    "secretEnv": {
      "type": "object",
      "properties": {
        "BETTER_AUTH_URL": {
          "type": "string",
          "default": "https://dapp.local"
        },
        "NEXT_PUBLIC_APP_ID": {
          "description": "Next.js public application identifier",
          "type": "string",
          "default": "dapp"
        },
        "NEXTAUTH_URL": {
          "description": "NextAuth.js authentication URL",
          "type": "string",
          "default": "https://dapp.local"
        },
        "OTEL_EXPORTER_OTLP_ENDPOINT": {
          "description": "OpenTelemetry OTLP exporter endpoint for traces",
          "type": "string",
          "default": "http://alloy:4318/v1/traces"
        },
        "OTEL_EXPORTER_OTLP_PROTOCOL": {
          "description": "OpenTelemetry OTLP protocol",
          "type": "string",
          "default": "http"
        },
        "SETTLEMINT_BLOCKSCOUT_UI_ENDPOINT": {
          "description": "Blockscout block explorer UI endpoint",
          "type": "string",
          "default": "http://blockscout-frontend-svc/"
        },
        "SETTLEMINT_BLOCKCHAIN_NODE_JSON_RPC_ENDPOINT": {
          "description": "Blockchain node JSON-RPC endpoint via transaction signer",
          "type": "string",
          "default": "http://txsigner:3000"
        },
        "SETTLEMINT_HASURA_ADMIN_SECRET": {
          "description": "Hasura GraphQL Engine admin secret for authentication",
          "type": "string",
          "default": "atk"
        },
        "SETTLEMINT_HASURA_DATABASE_URL": {
          "description": "Hasura PostgreSQL database connection URL (templated)",
          "type": "string",
          "default": "{{ include \"atk.datastores.postgresql.url\" (dict \"context\" $ \"chartKey\" \"hasura\") }}"
        },
        "SETTLEMINT_HASURA_ENDPOINT": {
          "description": "Hasura GraphQL Engine endpoint",
          "type": "string",
          "default": "http://hasura:8080/v1/graphql"
        },
        "SETTLEMINT_HD_PRIVATE_KEY": {
          "description": "Hierarchical Deterministic (HD) wallet private key identifier",
          "type": "string",
          "default": "atk-hd-private-key"
        },
        "SETTLEMINT_INSTANCE": {
          "description": "SettleMint instance type (standalone or cloud)",
          "type": "string",
          "default": "standalone"
        },
        "SETTLEMINT_PORTAL_GRAPHQL_ENDPOINT": {
          "description": "SettleMint Portal GraphQL API endpoint",
          "type": "string",
          "default": "http://portal:3001/graphql"
        },
        "SETTLEMINT_THEGRAPH_SUBGRAPHS_ENDPOINTS": {
          "description": "The Graph Protocol subgraph endpoints (JSON array)",
          "type": "string",
          "default": "[\"http://graph-node-combined:8000/subgraphs/name/kit\"]"
        }
      },
      "description": "Environment variables sourced from a secret. These will be created in the secret.yaml template",
      "additionalProperties": {
        "type": "string"
      }
    },
    "env": {
      "type": "array",
      "description": "Environment variables defined directly in the deployment",
      "items": {}
    },
    "autoscaling": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "minReplicas": {
          "description": "Minimum number of replicas",
          "type": "integer",
          "default": 1
        },
        "maxReplicas": {
          "description": "Maximum number of replicas",
          "type": "integer",
          "default": 10
        },
        "targetCPUUtilizationPercentage": {
          "description": "Target CPU utilization percentage for autoscaling",
          "type": "integer",
          "default": 80
        }
      },
      "description": "Autoscaling configuration (optional)",
      "additionalProperties": false
    },
    "podDisruptionBudget": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "minAvailable": {
          "description": "Minimum number of pods that must be available during disruption. Can be an integer or percentage (e.g., \"50%\")",
          "type": [
            "string",
            "integer"
          ],
          "default": 1
        }
      },
      "description": "Enable pod disruption budget -- (string) Maximum number of pods that can be unavailable during disruption. Can be an integer or percentage. Only one of minAvailable or maxUnavailable can be specified maxUnavailable: 1 -- (object) Init container configuration",
      "additionalProperties": false
    },
    "initContainer": {
      "type": "object",
      "properties": {
        "tcpCheck": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "image": {
              "type": "object",
              "properties": {
                "repository": {
                  "type": "string",
                  "default": "ghcr.io/settlemint/btp-waitforit"
                },
                "tag": {
                  "description": "Image tag for wait-for-it utility",
                  "type": "string",
                  "default": "v7.7.10"
                },
                "pullPolicy": {
                  "description": "Image pull policy",
                  "type": "string",
                  "default": "IfNotPresent"
                }
              },
              "description": "Container image configuration for TCP check init container",
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout in seconds for all TCP checks to complete",
              "type": "integer",
              "default": 120
            },
            "resources": {
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "string",
                      "default": "300m"
                    },
                    "memory": {
                      "description": "Memory limit",
                      "type": "string",
                      "default": "64Mi"
                    }
                  },
                  "description": "CPU limit",
                  "additionalProperties": false
                },
                "requests": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "string",
                      "default": "50m"
                    },
                    "memory": {
                      "description": "Memory request",
                      "type": "string",
                      "default": "32Mi"
                    }
                  },
                  "description": "Resource requests",
                  "additionalProperties": false
                }
              },
              "description": "Resource limits and requests for TCP check init container",
              "additionalProperties": false
            },
            "dependencies": {
              "type": "array",
              "description": "Service dependencies to check for availability (service-name:port)",
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "default": "postgres"
                      },
                      "endpoint": {
                        "description": "Service endpoint (templated)",
                        "type": "string",
                        "default": "{{ include \"atk.postgresql.endpoint\" (dict \"context\" $) }}"
                      }
                    },
                    "description": "Dependency name",
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "default": "hasura"
                      },
                      "endpoint": {
                        "description": "Service endpoint",
                        "type": "string",
                        "default": "hasura:8080"
                      }
                    },
                    "description": "Hasura GraphQL Engine dependency -- (string) Dependency name",
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "default": "portal"
                      },
                      "endpoint": {
                        "description": "Service endpoint",
                        "type": "string",
                        "default": "portal:3001"
                      }
                    },
                    "description": "Portal API dependency -- (string) Dependency name",
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "default": "graph-node"
                      },
                      "endpoint": {
                        "description": "Service endpoint",
                        "type": "string",
                        "default": "graph-node-combined:8020"
                      }
                    },
                    "description": "The Graph node dependency -- (string) Dependency name",
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "default": "blockscout"
                      },
                      "endpoint": {
                        "description": "Service endpoint",
                        "type": "string",
                        "default": "blockscout-blockscout:80"
                      }
                    },
                    "description": "Blockscout block explorer dependency -- (string) Dependency name",
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "description": "Enable TCP availability checks",
          "additionalProperties": false
        },
        "graphQLCheck": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "name": {
              "description": "Name of the init container",
              "type": "string",
              "default": "wait-for-graphql"
            },
            "image": {
              "type": "object",
              "properties": {
                "registry": {
                  "type": "string",
                  "default": "docker.io"
                },
                "repository": {
                  "description": "Image repository for curl utility",
                  "type": "string",
                  "default": "curlimages/curl"
                },
                "tag": {
                  "description": "Image tag",
                  "type": "string",
                  "default": "8.16.0"
                },
                "pullPolicy": {
                  "description": "Image pull policy",
                  "type": "string",
                  "default": "IfNotPresent"
                }
              },
              "description": "Container image configuration for GraphQL check",
              "additionalProperties": false
            },
            "url": {
              "description": "GraphQL endpoint URL to check (wait for subgraph to finish syncing with extended timeout)",
              "type": "string",
              "default": "http://graph-node-combined:8000/subgraphs/name/kit"
            },
            "retries": {
              "description": "Number of retry attempts",
              "type": "integer",
              "default": 10
            },
            "retryDelaySeconds": {
              "description": "Delay in seconds between retry attempts",
              "type": "integer",
              "default": 10
            },
            "query": {
              "description": "GraphQL query to check sync status",
              "type": "string",
              "default": "{ _meta { hasIndexingErrors block { number } } }"
            },
            "resources": {
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "properties": {
                    "memory": {
                      "type": "string",
                      "default": "64Mi"
                    }
                  },
                  "description": "Memory limit",
                  "additionalProperties": false
                },
                "requests": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "string",
                      "default": "10m"
                    },
                    "memory": {
                      "description": "Memory request",
                      "type": "string",
                      "default": "12Mi"
                    }
                  },
                  "description": "Resource requests",
                  "additionalProperties": false
                }
              },
              "description": "Resource limits and requests for GraphQL check init container",
              "additionalProperties": false
            }
          },
          "description": "Specific check for GraphQL endpoint readiness (e.g., The Graph subgraph)",
          "additionalProperties": false
        }
      },
      "description": "Generic TCP check settings for service availability",
      "additionalProperties": false
    },
    "extraInitContainers": {
      "type": "array",
      "description": "Additional init containers appended verbatim to the deployment pod spec",
      "items": {}
    }
  },
  "additionalProperties": false
}
