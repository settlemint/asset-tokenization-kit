apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dapp.fullname" . }}
  labels:
    {{- include "dapp.labels" . | nindent 4 }}
  annotations:
    reloader.stakater.com/auto: "true"
    {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dapp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- include "atk.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "dapp.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      {{- /* Define initContainers block only if needed */}}
      {{- if or .Values.initContainer.tcpCheck.enabled .Values.initContainer.graphQLCheck.enabled }}
      {{- $waitForIt := include "atk.waitforit.containers" (dict "context" $ "config" .Values.initContainer.tcpCheck) }}
      initContainers:
        {{- if $waitForIt }}
{{ $waitForIt | nindent 8 }}
        {{- end }}

        {{- /* Add GraphQL Check if enabled */}}
        {{- if .Values.initContainer.graphQLCheck.enabled }}
        - name: {{ .Values.initContainer.graphQLCheck.name | default "wait-for-graphql" }}
          image: "{{ .Values.initContainer.graphQLCheck.image.registry }}/{{ .Values.initContainer.graphQLCheck.image.repository }}:{{ .Values.initContainer.graphQLCheck.image.tag }}"
          imagePullPolicy: {{ .Values.initContainer.graphQLCheck.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              attempts=0
              max_attempts={{ .Values.initContainer.graphQLCheck.retries | default 24 }}
              url="{{ .Values.initContainer.graphQLCheck.url }}"
              query='{"query":"{{ .Values.initContainer.graphQLCheck.query | default "{ __typename }" }}"}'
              delay={{ .Values.initContainer.graphQLCheck.retryDelaySeconds | default 5 }}
              connect_timeout={{ .Values.initContainer.graphQLCheck.connectTimeoutSeconds | default 5 }}
              max_time={{ .Values.initContainer.graphQLCheck.timeoutSeconds | default 10 }}

              echo "Waiting for GraphQL endpoint at $url to be ready and synced..."
              until [ "$attempts" -ge "$max_attempts" ]
              do
                response=$(curl --fail --silent --show-error --connect-timeout "$connect_timeout" --max-time "$max_time" \
                  -X POST -H "Content-Type: application/json" --data "$query" \
                  "$url" 2>/dev/null)

                if [ $? -eq 0 ]; then
                  # Check if response has no errors or only "syncing" related errors
                  if echo "$response" | grep -q -v '"errors"'; then
                    # No errors - GraphQL endpoint is working
                    echo "✅ GraphQL endpoint $url is ready."
                    exit 0
                  elif echo "$response" | grep -q "has not started syncing yet\|wait.*ingest.*blocks\|still syncing"; then
                    # Expected "syncing" errors - endpoint is working, subgraph is just starting
                    echo "✅ GraphQL endpoint is ready (subgraph is syncing, which is expected)"
                    exit 0
                  else
                    # Other errors - still not ready
                    echo "GraphQL endpoint has errors (attempt $attempts/$max_attempts): $response"
                  fi
                else
                  echo "GraphQL endpoint not reachable (attempt $attempts/$max_attempts)..."
                fi

                attempts=$((attempts+1))
                echo "Retrying in ${delay}s..."
                sleep "$delay"
              done
              echo "Error: GraphQL endpoint $url did not become ready after $max_attempts attempts."
              exit 1
          {{- if .Values.initContainer.graphQLCheck.resources }}
          resources:
{{ toYaml .Values.initContainer.graphQLCheck.resources | nindent 12 }}
          {{- end }}
        {{- end }}

      {{- end }} {{- /* End of 'if or' for initContainers */}}

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.secretEnv }}
          envFrom:
            - secretRef:
                name: {{ include "dapp.fullname" . }}-env
          {{- end }}
          {{- if .Values.env }}
          env:
            {{- toYaml .Values.env | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
