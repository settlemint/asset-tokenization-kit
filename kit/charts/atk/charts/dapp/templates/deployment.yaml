apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dapp.fullname" . }}
  labels:
    {{- include "dapp.labels" . | nindent 4 }}
  annotations:
    reloader.stakater.com/auto: "true"
    {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dapp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- include "atk.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "dapp.serviceAccountName" . }}
      {{- $podSecurityContext := (include "atk.securityContext.pod" (dict "context" $ "local" .Values.podSecurityContext "chartKey" "dapp")) | fromYaml }}
      {{- if $podSecurityContext }}
      securityContext:
        {{- toYaml $podSecurityContext | nindent 8 }}
      {{- end }}

      {{- /* Define initContainers block only if needed */}}
      {{- $waitForIt := include "atk.waitforit.containers" (dict "context" $ "config" .Values.initContainer.tcpCheck "chartKey" "dapp") }}
      {{- $graphQL := .Values.initContainer.graphQLCheck | default (dict) }}
      {{- $graphQLEnabled := $graphQL.enabled | default false }}
      {{- $extraInit := .Values.extraInitContainers | default (list) }}
      {{- if or $waitForIt $graphQLEnabled (gt (len $extraInit) 0) }}
      initContainers:
        {{- if $waitForIt }}
{{ $waitForIt | nindent 8 }}
        {{- end }}
        {{- if $graphQLEnabled }}
        {{- $graphQLImage := $graphQL.image | default (dict) }}
        {{- $graphQLRegistry := $graphQLImage.registry | default "docker.io" }}
        {{- $graphQLRepository := $graphQLImage.repository | default "curlimages/curl" }}
        {{- $graphQLTag := $graphQLImage.tag | default "8.16.0" }}
        {{- $graphQLPullPolicy := $graphQLImage.pullPolicy | default "IfNotPresent" }}
        {{- $graphQLUrl := $graphQL.url | default "http://graph-node-combined:8000/subgraphs/name/kit" }}
        {{- $graphQLRetries := $graphQL.retries | default 10 }}
        {{- $graphQLDelay := $graphQL.retryDelaySeconds | default 10 }}
        {{- $graphQLQuery := $graphQL.query | default "{ __typename }" }}
        {{- $graphQLConnectTimeout := $graphQL.connectTimeoutSeconds | default 5 }}
        {{- $graphQLTimeout := $graphQL.timeoutSeconds | default 10 }}
        - name: {{ $graphQL.name | default "wait-for-graphql" }}
          image: "{{ $graphQLRegistry }}/{{ $graphQLRepository }}:{{ $graphQLTag }}"
          imagePullPolicy: {{ $graphQLPullPolicy }}
          {{- $graphQLSecurityContext := (include "atk.securityContext.container" (dict
            "context" $
            "local" (merge (dict) (default (dict) .Values.initContainerSecurityContext) (default (dict) $graphQL.securityContext))
            "chartKey" "dapp"
          )) | fromYaml }}
          {{- if $graphQLSecurityContext }}
          securityContext:
            {{- toYaml $graphQLSecurityContext | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -c
            - |
              attempts=0
              max_attempts={{ $graphQLRetries }}
              url="{{ $graphQLUrl }}"
              query='{"query":"{{ $graphQLQuery }}"}'
              delay={{ $graphQLDelay }}
              connect_timeout={{ $graphQLConnectTimeout }}
              max_time={{ $graphQLTimeout }}

              echo "Waiting for GraphQL endpoint at $url to be ready and synced..."
              until [ "$attempts" -ge "$max_attempts" ]
              do
                response=$(curl --fail --silent --show-error --connect-timeout "$connect_timeout" --max-time "$max_time" \
                  -X POST -H "Content-Type: application/json" --data "$query" \
                  "$url" 2>/dev/null)

                if [ $? -eq 0 ]; then
                  if echo "$response" | grep -q -v '"errors"'; then
                    echo "GraphQL endpoint $url is ready."
                    exit 0
                  elif echo "$response" | grep -Eq 'has not started syncing yet|wait.*ingest.*blocks|still syncing'; then
                    echo "GraphQL endpoint is responding (subgraph syncing)."
                    exit 0
                  else
                    echo "GraphQL endpoint errors (attempt $attempts/$max_attempts): $response"
                  fi
                else
                  echo "GraphQL endpoint not reachable (attempt $attempts/$max_attempts)..."
                fi

                attempts=$((attempts+1))
                echo "Retrying in ${delay}s..."
                sleep "$delay"
              done
              echo "GraphQL endpoint $url did not become ready after $max_attempts attempts."
              exit 1
          {{- with $graphQL.resources }}
          resources:
{{ toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if gt (len $extraInit) 0 }}
{{ toYaml $extraInit | nindent 8 }}
        {{- end }}
      {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          {{- $containerSecurityContext := (include "atk.securityContext.container" (dict "context" $ "local" .Values.securityContext "chartKey" "dapp")) | fromYaml }}
          {{- if $containerSecurityContext }}
          securityContext:
            {{- toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.secretEnv }}
          envFrom:
            - secretRef:
                name: {{ include "dapp.fullname" . }}-env
          {{- end }}
          {{- if .Values.env }}
          env:
            {{- toYaml .Values.env | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.probes.liveness }}
          livenessProbe:
{{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.probes.readiness }}
          readinessProbe:
{{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
