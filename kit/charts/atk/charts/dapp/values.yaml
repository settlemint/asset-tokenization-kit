# Default values for dapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- (int) Number of dApp replicas to deploy
replicaCount: 1

# -- (object) dApp image configuration
image:
  # -- (string) dApp image repository
  repository: ghcr.io/settlemint/asset-tokenization-kit
  # -- (string) dApp image pull policy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # -- (string) dApp image tag (defaults to chart appVersion)
  tag: ""

# -- (string) String to partially override dapp.fullname template
nameOverride: "dapp"
# -- (string) String to fully override dapp.fullname template
fullnameOverride: "dapp"

# -- (object) Service account configuration
serviceAccount:
  # -- (bool) Specifies whether a service account should be created
  create: false # Set to true if your deployment needs specific permissions
  # -- (object) Annotations to add to the service account
  annotations: {}
  # -- (string) The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name: ""

# -- (object) Additional annotations for the deployment metadata
annotations: {}
# -- (object) Additional labels for the deployment pod metadata
podLabels:
  app.kubernetes.io/component: dapp
  kots.io/app-slug: settlemint-atk
# -- (object) Annotations for dApp pods
podAnnotations: {}

# -- (object) Pod security context configuration
podSecurityContext: {}

# -- (object) Container security context configuration
securityContext: {}

# -- (object) Service configuration
service:
  # -- (string) Service type
  type: ClusterIP
  # -- (int) Service port
  port: 3000
  # -- (object) Service annotations
  annotations: {}

# -- (object) Ingress configuration
ingress:
  # -- (bool) Enable ingress controller resource
  enabled: false
  # -- (string) IngressClass that will be used to implement the Ingress
  className: "atk-nginx"
  # -- (object) Additional annotations for the Ingress resource
  annotations: {}
  # -- (list) Ingress host configuration
  hosts:
    - host: dapp.local # Placeholder - Should be configured in parent chart values
      paths:
        - path: /((?:sm_|bpaas-)[^/]+)?/?(.*) # Match original path structure
          pathType: ImplementationSpecific
  # -- (list) TLS configuration for the ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# OpenShift Route configuration
openShiftRoute:
  # -- Enable OpenShift route creation for DApp
  enabled: false
  # -- Additional annotations for the OpenShift route resource
  annotations: {}
  # -- Hostname exposed via the OpenShift route
  host: dapp.k8s.orb.local
  # -- HTTP path exposed via the OpenShift route
  path: /
  # -- Wildcard policy to apply to the route
  wildcardPolicy: None
  # -- Service port configuration for the route target
  port:
    # -- Service target port name (must exist on the DApp service)
    targetPort: http
  # -- Primary service weight configuration
  to:
    # -- Weight assigned to the DApp service backend
    weight: 100
  # -- Additional backends for weighted routing
  alternateBackends: []
  # -- TLS configuration for the route (optional)
  # Set to null for no TLS (HTTP only)
  # Or specify configuration for TLS termination
  tls: null

# Resource requests and limits
resources: {}
# -- (object) Liveness and Readiness probes configuration
probes:
  # -- (object) Liveness probe configuration
  liveness:
    httpGet:
      path: "/"
      port: http
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 10
    successThreshold: 1
  # -- (object) Readiness probe configuration
  readiness:
    httpGet:
      path: "/"
      port: http
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 10
    successThreshold: 1

# -- (list) Additional volumes for the deployment
volumes: []
#  - name: foo
#    secret:
#      secretName: mysecret
#      optional: false

# -- (list) Additional volume mounts for the main container
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- (object) Node selector for pod assignment
nodeSelector: {}

# -- (list) Tolerations for pod assignment
tolerations: []

# -- (object) Affinity for pod assignment
affinity: {}

# -- (object) NetworkPolicy configuration
networkPolicy:
  # -- (bool) Enable network policy
  enabled: false
  # -- (list) Ingress rules for the network policy
  ingress:
    # Allow from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
    # Allow from same namespace
    - from:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 3000

  # -- (list) Egress rules for the network policy
  egress:
    # Allow DNS resolution
    - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
    # Allow access to PostgreSQL
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgresql-ha
      ports:
        - protocol: TCP
          port: 5432
    # Allow access to Hasura GraphQL
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: graphql-engine
      ports:
        - protocol: TCP
          port: 8080
    # Allow access to Portal API
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: portal
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 3001
    # Allow access to ERPC
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: erpc
      ports:
        - protocol: TCP
          port: 4000
    # Allow external HTTPS (for external APIs)
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443

# -- (object) Environment variables sourced from a secret. These will be created in the secret.yaml template
secretEnv:
  BETTER_AUTH_URL: "https://dapp.local"
  NEXT_PUBLIC_APP_ID: "dapp"
  NEXTAUTH_URL: "https://dapp.local"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://alloy:4318/v1/traces"
  OTEL_EXPORTER_OTLP_PROTOCOL: "http"
  SETTLEMINT_BLOCKSCOUT_UI_ENDPOINT: "http://blockscout-frontend-svc/"
  SETTLEMINT_BLOCKCHAIN_NODE_JSON_RPC_ENDPOINT: "http://txsigner:3000"
  SETTLEMINT_HASURA_ADMIN_SECRET: "atk"
  SETTLEMINT_HASURA_DATABASE_URL:
    '{{ include "atk.datastores.postgresql.url" (dict "context" $ "chartKey"
    "hasura") }}'
  SETTLEMINT_HASURA_ENDPOINT: "http://hasura:8080/v1/graphql"
  SETTLEMINT_HD_PRIVATE_KEY: "atk-hd-private-key"
  SETTLEMINT_INSTANCE: "standalone"
  SETTLEMINT_PORTAL_GRAPHQL_ENDPOINT: "http://portal:3001/graphql"
  SETTLEMINT_THEGRAPH_SUBGRAPHS_ENDPOINTS: '["http://graph-node-combined:8000/subgraphs/name/kit"]'

# -- (list) Environment variables defined directly in the deployment
env: []
# - name: MY_VAR
#   value: my_value

# -- (object) Autoscaling configuration (optional)
autoscaling:
  # -- (bool) Enable autoscaling
  enabled: false
  # -- (int) Minimum number of replicas
  minReplicas: 1
  # -- (int) Maximum number of replicas
  maxReplicas: 10
  # -- (int) Target CPU utilization percentage for autoscaling
  targetCPUUtilizationPercentage: 80
  # -- Target memory utilization percentage for autoscaling (optional)
  # targetMemoryUtilizationPercentage: 80

# -- (object) PodDisruptionBudget configuration
podDisruptionBudget:
  # -- (bool) Enable pod disruption budget
  enabled: false
  # -- (int) Minimum number of pods that must be available during disruption. Can be an integer or percentage (e.g., "50%")
  minAvailable: 1
  # -- (int) Maximum number of pods that can be unavailable during disruption. Can be an integer or percentage. Only one of minAvailable or maxUnavailable can be specified
  # maxUnavailable: 1

# -- (object) Init container configuration
initContainer:
  # Generic TCP check settings
  tcpCheck:
    enabled: true
    image:
      repository: ghcr.io/settlemint/btp-waitforit
      tag: v7.7.10
      pullPolicy: IfNotPresent
    timeout: 120
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 32Mi
    dependencies:
      # Add internal Kubernetes service endpoints (service-name:port) for critical dependencies
      - name: postgres
        endpoint: '{{ include "atk.postgresql.endpoint" (dict "context" $) }}'
      - name: hasura
        endpoint: "hasura:8080"
      - name: portal
        endpoint: "portal:3001"
      - name: graph-node
        endpoint: "graph-node-combined:8020"
      - name: blockscout
        endpoint: "blockscout-blockscout:80"

  # Specific check for GraphQL endpoint readiness (e.g., The Graph subgraph)
  graphQLCheck:
    enabled: true
    name: "wait-for-graphql"
    image:
      registry: docker.io
      repository: curlimages/curl
      tag: "8.16.0"
      pullPolicy: IfNotPresent
    # Wait for subgraph to finish syncing (extended timeout)
    url: "http://graph-node-combined:8000/subgraphs/name/kit"
    retries: 10
    retryDelaySeconds: 10
    # Use a more sophisticated query to check sync status
    query: "{ _meta { hasIndexingErrors block { number } } }"
    resources:
      limits:
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 12Mi

# -- (list) Additional init containers appended verbatim to the deployment pod spec
extraInitContainers: []

