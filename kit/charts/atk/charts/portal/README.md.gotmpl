{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

## Introduction

Portal is a powerful blockchain data management and querying service designed specifically for the Asset Tokenization Kit. It provides a comprehensive GraphQL API layer that enables real-time access to on-chain data, making it easy for frontend applications and external integrations to interact with blockchain data.

## Features

- **GraphQL API**: Modern, flexible API for querying blockchain data with precise field selection
- **Real-time Data Sync**: Automatic synchronization with blockchain events and state changes
- **High Performance**: Optimized queries with Redis caching for fast response times
- **PostgreSQL Backend**: Reliable data storage with full ACID compliance
- **Multi-Asset Support**: Handles all asset types in the Asset Tokenization Kit (bonds, equity, stablecoins, etc.)
- **Scalable Architecture**: Horizontal scaling support with built-in autoscaling
- **Enterprise Security**: Network policies, pod security contexts, and RBAC support
- **Monitoring Ready**: Integrated health checks and readiness probes

## Benefits

- **Simplified Integration**: Single GraphQL endpoint for all blockchain data queries
- **Reduced Complexity**: No need to directly interact with blockchain nodes
- **Better Performance**: Cached queries and optimized database indexes
- **Developer Friendly**: Self-documenting GraphQL schema with introspection
- **Production Ready**: Battle-tested with enterprise-grade reliability

## Use Cases

- **Frontend Applications**: Power web and mobile apps with real-time blockchain data
- **Analytics Dashboards**: Build comprehensive analytics and reporting tools
- **External Integrations**: Connect blockchain data to external systems via API
- **Data Aggregation**: Combine on-chain and off-chain data in a single query
- **Event Processing**: React to blockchain events with webhooks and subscriptions

{{ template "chart.homepageLine" . }}

## Prerequisites

- Kubernetes 1.21+
- Helm 3.2.0+
- PostgreSQL database (can use Bitnami PostgreSQL chart)
- Redis cache (can use Bitnami Redis chart)
- Access to a blockchain RPC endpoint (e.g., through txsigner)

## Installing the Chart

To install the chart with the release name `my-portal`:

```bash
helm repo add settlemint https://charts.settlemint.com
helm install my-portal settlemint/portal
```

## Uninstalling the Chart

To uninstall/delete the `my-portal` deployment:

```bash
helm delete my-portal
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## Configuration

The following table lists the configurable parameters of the Portal chart and their default values.

{{ template "chart.valuesSection" . }}

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,

```bash
helm install my-portal \
  --set config.network.networkId="1" \
  --set config.network.networkName="Mainnet" \
  settlemint/portal
```

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example,

```bash
helm install my-portal -f values.yaml settlemint/portal
```

## Configuration Examples

### Basic Configuration

```yaml
config:
  network:
    networkId: "53771311147"
    networkName: "ATK"
    nodeRpcUrl: "http://txsigner:3000"
  postgresql: "postgresql://portal:password@postgresql:5432/portal?sslmode=disable"
  redis:
    host: "redis-master"
    port: 6379
    username: "default"
    password: "redis-password"
```

### Production Configuration with Security

```yaml
replicaCount: 3

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

networkPolicy:
  enabled: true
  allowExternal: false

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10

pdb:
  enabled: true
  minAvailable: 2
```

### External Database Configuration

```yaml
config:
  postgresql: "postgresql://portal:password@external-db.example.com:5432/portal?sslmode=require"
  redis:
    host: "external-redis.example.com"
    port: 6379
    username: "portal"
    password: "secure-password"
```

## Troubleshooting

### Portal Pod Not Starting

1. Check the pod logs:
   ```bash
   kubectl logs -l app.kubernetes.io/name=portal
   ```

2. Verify database connectivity:
   ```bash
   kubectl exec -it deploy/portal -- nc -zv postgresql-pgpool 5432
   ```

3. Check Redis connectivity:
   ```bash
   kubectl exec -it deploy/portal -- nc -zv redis-master 6379
   ```

### GraphQL Endpoint Not Responding

1. Check service endpoints:
   ```bash
   kubectl get endpoints portal
   ```

2. Test internal connectivity:
   ```bash
   kubectl run test --rm -it --image=busybox -- wget -qO- portal:3001/graphql
   ```

3. Verify ingress configuration:
   ```bash
   kubectl describe ingress portal
   ```

### Performance Issues

1. Enable autoscaling:
   ```yaml
   autoscaling:
     enabled: true
     minReplicas: 2
     maxReplicas: 10
   ```

2. Increase resource limits:
   ```yaml
   resources:
     requests:
       cpu: 500m
       memory: 1Gi
     limits:
       cpu: 1000m
       memory: 2Gi
   ```

3. Check database performance and indexes

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}