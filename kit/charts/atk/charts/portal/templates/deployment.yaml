apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.podLabels "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.podLabels "context" $ ) | nindent 8 }}
      {{- if or .Values.podAnnotations .Values.commonAnnotations }}
      {{- $podAnnotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.podAnnotations .Values.commonAnnotations ) "context" . ) }}
      annotations: {{- include "common.tplvalues.render" (dict "value" $podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "atk.common.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "portal.serviceAccountName" . }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- $podSecurityContext := (include "atk.securityContext.pod" (dict "context" $ "local" .Values.podSecurityContext "chartKey" "portal")) | fromYaml }}
      {{- if $podSecurityContext }}
      securityContext:
        {{- toYaml $podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "customLabels" .Values.podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "customLabels" .Values.podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- $initContainerConfig := .Values.initContainer | default (dict) }}
      {{- $waitForIt := include "atk.waitforit.containers" (dict "context" $ "config" (get $initContainerConfig "tcpCheck") "chartKey" "portal") }}
      {{- $extraInit := .Values.extraInitContainers | default (list) }}
      {{- $downloadAbiConfig := default (dict) (get $initContainerConfig "downloadAbi") }}
      {{- $downloadAbiEnabled := ne (get $downloadAbiConfig "enabled") false }}
      {{- $downloadAbiImage := default (dict) (get $downloadAbiConfig "image") }}
      {{- $downloadAbiRepository := default "ghcr.io/settlemint/network-bootstrapper" (get $downloadAbiImage "repository") }}
      {{- $downloadAbiTag := default "1.2.3" (get $downloadAbiImage "tag") }}
      {{- $downloadAbiPullPolicy := default "IfNotPresent" (get $downloadAbiImage "pullPolicy") }}
      {{- $downloadAbiOutputDir := default "/shared-abis" (get $downloadAbiConfig "outputDirectory") }}
      {{- $downloadAbiSecurityContext := (include "atk.securityContext.container" (dict "context" $ "local" (default (dict) (get $downloadAbiConfig "securityContext")) "chartKey" "portal")) | fromYaml }}
      {{- $hasWaitForIt := gt (len (trim $waitForIt)) 0 }}
      {{- $hasExtraInit := gt (len $extraInit) 0 }}
      {{- if or $downloadAbiEnabled (or $hasWaitForIt $hasExtraInit) }}
      initContainers:
        {{- if $downloadAbiEnabled }}
        - name: download-abis
          # Sync contract ABIs from ConfigMaps seeded by the network bootstrapper job
          image: "{{ $downloadAbiRepository }}:{{ $downloadAbiTag }}"
          imagePullPolicy: {{ $downloadAbiPullPolicy }}
          args:
            - download-abi
            - --output-directory={{ $downloadAbiOutputDir }}
          {{- with get $downloadAbiConfig "resources" }}
          resources:
{{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: abis
              mountPath: {{ $downloadAbiOutputDir }}
          {{- if $downloadAbiSecurityContext }}
          securityContext:
            {{- toYaml $downloadAbiSecurityContext | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if $hasWaitForIt }}
{{ $waitForIt | nindent 8 }}
        {{- end }}
        {{- if $hasExtraInit }}
{{ toYaml $extraInit | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: portal
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- $containerSecurityContext := (include "atk.securityContext.container" (dict "context" $ "local" .Values.containerSecurityContext "chartKey" "portal")) | fromYaml }}
          {{- if $containerSecurityContext }}
          securityContext:
            {{- toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.extraEnvVars }}
          env:
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "common.names.fullname" . }}
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.extraEnvVarsSecret }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - name: graphql
              containerPort: {{ .Values.service.graphqlPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: abis
              mountPath: /abis
              readOnly: true
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
      volumes:
        - name: abis
          emptyDir: {}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
