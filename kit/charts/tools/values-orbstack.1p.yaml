imagePullCredentials:
  registries:
    #-- lowercase, no points or special caracters unique identifier for the registry, ghcr and docker have special meaning, but you can add more
    harbor:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: true
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registry: "harbor.settlemint.com"
      # -- The username to access the registry
      username: "op://platform/harbor-release/username"
      # -- The password or access token to access the registry
      password: "op://platform/harbor-release/password"
      # -- The email to access the registry
      email: "op://platform/email/username"
    #-- lowercase, no points or special caracters unique identifier for the registry, ghcr and docker have special meaning, but you can add more
    ghcr:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: true
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registry: "ghcr.io"
      # -- The username to access the registry
      username: "op://platform/github-commit-pat/username"
      # -- The password or access token to access the registry
      password: "op://platform/github-commit-pat/package-token-harbor"
      # -- The email to access the registry
      email: "op://platform/github-commit-pat/email"
    #-- lowercase, no points or special caracters unique identifier for the registry, ghcr and docker have special meaning, but you can add more
    docker:
      # -- Enable this if you want this chart to create an image pull secret for you
      enabled: true
      # -- The registry hosting the packages, e.g docker.io or ghcr.io
      registry: "docker.io"
      # -- The username to access the registry
      username: "op://platform/dockerhub/username"
      # -- The password or access token to access the registry
      password: "op://platform/dockerhub/credential"
      # -- The email to access the registry
      email: "op://platform/dockerhub/email"

# Resource configurations for development environment
# These are reasonable defaults for OrbStack/local development

# PodDisruptionBudget configurations
# For development, we typically don't need PDBs, but for production they should be enabled

dapp:
  enabled: false
  podDisruptionBudget:
    enabled: false  # Enable in production
    minAvailable: 1
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

portal:
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "250m"

txsigner:
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "250m"

erpc:
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "500m"

# Besu network nodes - these need more resources
besu-network:
  besu-validator-1:
    node:
      besu:
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  besu-rpc-1:
    node:
      besu:
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

# Database resources
support:
  postgresql-ha:
    postgresql:
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
    pgpool:
      resources:
        requests:
          memory: "128Mi"
          cpu: "50m"
        limits:
          memory: "256Mi"
          cpu: "250m"
  redis:
    master:
      resources:
        requests:
          memory: "128Mi"
          cpu: "50m"
        limits:
          memory: "256Mi"
          cpu: "250m"
    replica:
      resources:
        requests:
          memory: "128Mi"
          cpu: "50m"
        limits:
          memory: "256Mi"
          cpu: "250m"

# GraphQL and indexing services
hasura:
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

thegraph:
  graph-node:
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

observability:
  enabled: false
  # When enabled, add resources for observability stack
  victoria-metrics-single:
    server:
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
  loki:
    loki:
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
  grafana:
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "250m"

blockscout:
  enabled: false
  # When enabled, add resources for blockscout
  blockscout-stack:
    frontend:
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
    backend:
      resources:
        requests:
          memory: "512Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "1000m"